
Kalman.elf:     file format elf32-littlenios2
Kalman.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00011354 memsz 0x00011354 flags r-x
    LOAD off    0x00012374 vaddr 0x00011374 paddr 0x00012d58 align 2**12
         filesz 0x000019e4 memsz 0x000019e4 flags rw-
    LOAD off    0x0001473c vaddr 0x0001473c paddr 0x0001473c align 2**12
         filesz 0x00000000 memsz 0x000000bc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  00013d58  2**0
                  CONTENTS
  2 .text         00010f88  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003cc  00010fa8  00010fa8  00011fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000019e4  00011374  00012d58  00012374  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000000bc  0001473c  0001473c  0001473c  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  000147f8  000147f8  00013d58  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00013d58  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000e88  00000000  00000000  00013d80  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002337b  00000000  00000000  00014c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000935e  00000000  00000000  00037f83  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000bb66  00000000  00000000  000412e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002204  00000000  00000000  0004ce48  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003f89  00000000  00000000  0004f04c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001cd9c  00000000  00000000  00052fd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0006fd74  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001e68  00000000  00000000  0006fdd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000752cd  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000752d0  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000752d3  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000752d4  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000752d5  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000752d9  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000752dd  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000752e1  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000752ea  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000752f3  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000007  00000000  00000000  000752fc  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002c  00000000  00000000  00075303  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0005ec75  00000000  00000000  0007532f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
00010fa8 l    d  .rodata	00000000 .rodata
00011374 l    d  .rwdata	00000000 .rwdata
0001473c l    d  .bss	00000000 .bss
000147f8 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Kalman_bsp//obj/HAL/src/crt0.o
000000a8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 Kalman.c
00000000 l    df *ABS*	00000000 MPU6050.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 s_atan.c
00011068 l     O .rodata	00000020 atanhi
00011048 l     O .rodata	00000020 atanlo
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
00011374 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000111d3 l     O .rodata	00000010 zeroes.4404
00007408 l     F .text	000000bc __sbprintf
000111e3 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00007618 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00009148 l     F .text	00000008 __fp_unlock
0000915c l     F .text	0000019c __sinit.part.1
000092f8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
000117b8 l     O .rwdata	00000020 lc_ctype_charset
00011798 l     O .rwdata	00000020 lc_message_charset
000117d8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00011210 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000c538 l     F .text	000000fc __sprint_r.part.0
00011344 l     O .rodata	00000010 blanks.4348
00011334 l     O .rodata	00000010 zeroes.4349
0000dac4 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00012d44 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00012c88 l     O .rwdata	0000009c vic_0
00012c50 l     O .rwdata	00000038 i2c_0
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
0000fd1c l     F .text	000000b8 optional_irq_callback
0000fc5c l     F .text	00000078 alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000105c0 l     F .text	00000048 altera_avalon_jtag_uart_timeout
00010608 l     F .text	000000e8 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_vic_irq_init.c
00011354 l     O .rodata	00000020 VEC_SIZE_ARRAY.1850
00000000 l    df *ABS*	00000000 altera_vic_isr_register.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 memcmp.c
0000bbf0 g     F .text	00000074 _mprec_log10
0000bcdc g     F .text	0000008c __any_on
0000e060 g     F .text	00000054 _isatty_r
0001121c g     O .rodata	00000028 __mprec_tinytens
0000f2a0 g     F .text	0000002c alt_main
0001473c g     O .bss	00000004 Q_bias
00005088 g     F .text	000000c0 _puts_r
00000390 g     F .text	0000006c write_reg_MPU
00000e4c g     F .text	00000014 fabs
0000e0b4 g     F .text	00000060 _lseek_r
00000e60 g     F .text	00000130 sqrt
00012d58 g       *ABS*	00000000 __flash_rwdata_start
0000ef64 g     F .text	00000088 .hidden __eqdf2
000147f8 g       *ABS*	00000000 __alt_heap_start
0000504c g     F .text	0000003c printf
00014740 g     O .bss	00000004 rate
0000e2cc g     F .text	0000009c _wcrtomb_r
00014744 g     O .bss	00000004 Q_angle
0000c3f8 g     F .text	0000005c __sseek
00009498 g     F .text	00000010 __sinit
0000e174 g     F .text	00000140 __swbuf_r
00009f60 g     F .text	0000007c _setlocale_r
00009300 g     F .text	00000068 __sfmoreglue
0000f6dc g     F .text	00000080 alt_avalon_i2c_rx_read
0000f2d0 g     F .text	00000004 __malloc_unlock
0000175c g     F .text	00000440 .hidden __divsf3
0000fbfc g     F .text	00000014 alt_avalon_i2c_enabled_ints_get
00000408 g     F .text	00000140 init_MPU
0000f5bc g     F .text	0000004c alt_avalon_i2c_master_config_speed_get
0000aae8 g     F .text	0000015c memmove
00009480 g     F .text	00000018 _cleanup
00010254 g     F .text	00000170 alt_avalon_i2c_master_transmit_using_interrupts
0000ad6c g     F .text	000000a8 _Balloc
0000f2d4 g     F .text	00000038 alt_putstr
00003734 g     F .text	000000dc .hidden __gtdf2
00011c18 g     O .rwdata	00001038 jtag_uart
00004ec4 g     F .text	00000010 __errno
00014758 g     O .bss	00000002 AccY
00000000 g     F .entry	0000001c __reset
00014748 g     O .bss	00000004 bias
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000e004 g     F .text	0000005c _fstat_r
00014790 g     O .bss	00000004 errno
0000c374 g     F .text	00000008 __seofread
00014798 g     O .bss	00000004 alt_argv
0001ad24 g       *ABS*	00000000 _gp
0000f3c8 g     F .text	00000004 usleep
0000feb8 g     F .text	00000018 alt_avalon_i2c_rx_fifo_threshold_get
00001f98 g     F .text	000004e4 .hidden __subsf3
0000f694 g     F .text	00000010 alt_avalon_i2c_is_busy
0000f564 g     F .text	00000058 alt_avalon_i2c_master_config_set
00010a68 g       .text	00000000 VIC_0_VECTOR_TABLE
00010d78 g     F .text	00000074 alt_find_dev
00004ed4 g     F .text	00000148 memcpy
00009150 g     F .text	0000000c _cleanup_r
00004918 g     F .text	000000dc .hidden __floatsidf
00003810 g     F .text	000000f4 .hidden __ltdf2
00000548 g     F .text	0000003c get_x_accel_MPU
0000f8e8 g     F .text	00000138 alt_avalon_i2c_master_transmit
00005148 g     F .text	00000014 puts
00001218 g     F .text	00000074 __fpclassifyd
0000bb4c g     F .text	000000a4 __ratio
0000daa8 g     F .text	0000001c __vfiprintf_internal
00010798 g     F .text	00000150 altera_avalon_jtag_uart_read
0000501c g     F .text	00000030 _printf_r
00004e08 g     F .text	00000064 .hidden __udivsi3
0000f174 g     F .text	0000000c isatty
0001126c g     O .rodata	000000c8 __mprec_tens
00009fdc g     F .text	0000000c __locale_charset
00010ef4 g     F .text	00000038 alt_icache_flush
0000f4bc g     F .text	00000048 alt_avalon_i2c_enable
0001478c g     O .bss	00000004 __malloc_top_pad
0000fc10 g     F .text	0000004c alt_avalon_i2c_int_disable
00012d30 g     O .rwdata	00000004 __mb_cur_max
0000a00c g     F .text	0000000c _localeconv_r
0000b178 g     F .text	0000003c __i2b
0000991c g     F .text	000004bc __sfvwrite_r
0000c2cc g     F .text	00000054 _sbrk_r
0001475c g     O .bss	00000008 accZ
0000e114 g     F .text	00000060 _read_r
0000dcf8 g     F .text	000000f0 _fclose_r
00009118 g     F .text	00000030 fflush
00014788 g     O .bss	00000004 __malloc_max_sbrked_mem
0000fa20 g     F .text	000001a8 alt_avalon_i2c_master_receive
000049f4 g     F .text	00000110 .hidden __extendsfdf2
000005fc g     F .text	0000003c get_x_gyro_MPU
000025a0 g     F .text	000008ac .hidden __adddf3
0000b8f4 g     F .text	0000010c __b2d
0000ea2c g     F .text	00000538 .hidden __umoddi3
0000f260 g     F .text	00000040 lseek
00012d24 g     O .rwdata	00000004 __fdlib_version
0000fcd4 g     F .text	00000048 alt_avalon_i2c_int_enable
00012d28 g     O .rwdata	00000004 _global_impure_ptr
0000bd68 g     F .text	00000564 _realloc_r
000147f8 g       *ABS*	00000000 __bss_end
00010e3c g     F .text	000000b8 alt_tick
0000e4b4 g     F .text	00000578 .hidden __udivdi3
0000fbc8 g     F .text	00000018 alt_avalon_i2c_int_status_get
0000df60 g     F .text	00000024 _fputwc_r
00011244 g     O .rodata	00000028 __mprec_bigtens
0000af5c g     F .text	00000104 __s2b
0000f06c g     F .text	000000a8 .hidden __floatunsidf
0000b634 g     F .text	00000060 __mcmp
000094b8 g     F .text	00000018 __fp_lock_all
000000f4 g     F .text	00000230 getAngle
00010df8 g     F .text	00000044 alt_alarm_stop
0000f4a4 g     F .text	00000010 alt_avalon_i2c_register_callback
000101a4 g     F .text	000000b0 alt_avalon_i2c_init
0001474c g     O .bss	00000004 R_measure
00000674 g     F .text	0000003c get_z_gyro_MPU
00010cf4 g     F .text	00000018 alt_dcache_flush_all
0000b060 g     F .text	00000068 __hi0bits
0000efec g     F .text	00000080 .hidden __fixdfsi
00010aa8 g       .text	00000000 alt_shadow_non_preemptive_interrupt
00012d58 g       *ABS*	00000000 __ram_rwdata_end
0000f3cc g     F .text	00000060 write
0000f78c g     F .text	0000001c alt_avalon_i2c_check_arblost
0000fbf0 g     F .text	0000000c alt_avalon_i2c_int_clear
00011374 g       *ABS*	00000000 __ram_rodata_end
0000f154 g     F .text	00000020 fstat
00003810 g     F .text	000000f4 .hidden __ledf2
00012d48 g     O .rwdata	00000008 alt_avalon_i2c_list
0000b3ac g     F .text	00000140 __pow5mult
0000c64c g     F .text	0000145c ___vfiprintf_internal_r
00014780 g     O .bss	00000004 __nlocale_changed
00004e6c g     F .text	00000058 .hidden __umodsi3
000147f8 g       *ABS*	00000000 end
000106f0 g     F .text	00000078 altera_avalon_jtag_uart_init
0000f4b4 g     F .text	00000008 alt_avalon_i2c_open
00800000 g       *ABS*	00000000 __alt_stack_pointer
000103c4 g     F .text	000000c4 alt_avalon_i2c_master_tx
00004cac g     F .text	00000064 .hidden __clzsi2
000108e8 g     F .text	00000180 altera_avalon_jtag_uart_write
000094a8 g     F .text	00000004 __sfp_lock_acquire
0000aa04 g     F .text	000000e4 memchr
000051f4 g     F .text	000021f8 ___vfprintf_internal_r
0000960c g     F .text	00000310 _free_r
00009fe8 g     F .text	00000010 __locale_mb_cur_max
000147e4 g     O .bss	00000014 wr_buf
0001477c g     O .bss	00000004 __mlocale_changed
0000f488 g     F .text	0000001c alt_avalon_i2c_register_optional_irq_handler
00014764 g     O .bss	00000002 AccZ
00012d34 g     O .rwdata	00000004 __malloc_sbrk_base
00000020 g     F .text	0000008c _start
000147a8 g     O .bss	00000004 _alt_tick_rate
000005c0 g     F .text	0000003c get_z_accel_MPU
0000fef8 g     F .text	00000180 alt_avalon_i2c_master_receive_using_interrupts
0000fed0 g     F .text	00000028 alt_avalon_i2c_rx_fifo_threshold_set
0000b4ec g     F .text	00000148 __lshift
000147a4 g     O .bss	00000004 _alt_nticks
0000f30c g     F .text	00000054 read
0000f458 g     F .text	00000030 alt_sys_init
0000247c g     F .text	00000124 .hidden __floatsisf
00010488 g     F .text	00000138 alt_avalon_i2c_master_tx_rx
0000b1b4 g     F .text	000001f8 __multiply
00010768 g     F .text	00000030 altera_avalon_jtag_uart_close
00011374 g       *ABS*	00000000 __ram_rwdata_start
00010fa8 g       *ABS*	00000000 __ram_rodata_start
000147ac g     O .bss	00000028 __malloc_current_mallinfo
0000ba00 g     F .text	0000014c __d2b
000003fc g     F .text	0000000c write_byte_MPU
00000584 g     F .text	0000003c get_y_accel_MPU
00010c7c g     F .text	00000078 alt_busy_sleep
0000dbe0 g     F .text	00000054 _close_r
00014750 g     O .bss	00000004 angle
00010f2c g     F .text	0000007c memcmp
0000f6a4 g     F .text	00000038 alt_avalon_i2c_rx_read_available
000147f8 g       *ABS*	00000000 __alt_stack_base
000074c4 g     F .text	00000154 __swsetup_r
00014754 g     O .bss	00000004 i2c_dev
00002e4c g     F .text	000008e8 .hidden __divdf3
00009368 g     F .text	00000118 __sfp
0000bc64 g     F .text	00000078 __copybits
00011810 g     O .rwdata	00000408 __malloc_av_
000094b4 g     F .text	00000004 __sinit_lock_release
00003904 g     F .text	00000718 .hidden __muldf3
0000c320 g     F .text	00000054 __sread
00010d0c g     F .text	0000006c alt_dev_llist_insert
0000f2cc g     F .text	00000004 __malloc_lock
0000f360 g     F .text	00000068 sbrk
0000fdd4 g     F .text	000000e4 alt_avalon_i2c_interrupt_transaction_status
00000350 g     F .text	00000034 read_reg_MPU
0000f770 g     F .text	0000001c alt_avalon_i2c_check_nack
000000ac g     F .text	00000048 KalmanInit
000090bc g     F .text	0000005c _fflush_r
0000dc34 g     F .text	000000c4 _calloc_r
0001473c g       *ABS*	00000000 __bss_start
0000ac44 g     F .text	00000128 memset
000006b0 g     F .text	00000214 main
0000f768 g     F .text	00000008 alt_avalon_i2c_master_target_set
00014794 g     O .bss	00000004 alt_envp
00014784 g     O .bss	00000004 __malloc_max_total_mem
0000e2b4 g     F .text	00000018 __swbuf
0000fbe0 g     F .text	00000010 alt_avalon_i2c_int_raw_status_get
0000c454 g     F .text	00000008 __sclose
0000128c g     F .text	00000008 matherr
00800000 g       *ABS*	00000000 __alt_heap_limit
0000dde8 g     F .text	00000014 fclose
00004b04 g     F .text	000001a8 .hidden __truncdfsf2
00007818 g     F .text	00001688 _dtoa_r
0000a1f8 g     F .text	0000080c _malloc_r
0000e428 g     F .text	00000030 __ascii_wctomb
00012d40 g     O .rwdata	00000004 alt_errno
00009dd8 g     F .text	000000c4 _fwalk
00004d10 g     F .text	00000084 .hidden __divsi3
000094e8 g     F .text	00000124 _malloc_trim_r
00001b9c g     F .text	000003fc .hidden __mulsf3
000147a0 g     O .bss	00000004 alt_vic_dev_list
0000c45c g     F .text	000000dc strcmp
00010fa8 g       *ABS*	00000000 __flash_rodata_start
00014766 g     O .bss	00000002 AccX
0000ef64 g     F .text	00000088 .hidden __nedf2
0000f42c g     F .text	0000002c alt_irq_init
000008c4 g     F .text	00000588 atan
0001108d g     O .rodata	00000100 .hidden __clz_tab
00014778 g     O .bss	00000004 _PathLocale
0000db80 g     F .text	00000060 _write_r
0000a018 g     F .text	00000018 setlocale
00012d2c g     O .rwdata	00000004 _impure_ptr
0001479c g     O .bss	00000004 alt_argc
00008ea0 g     F .text	0000021c __sflush_r
0000a004 g     F .text	00000008 __locale_cjk_lang
0000f75c g     F .text	0000000c alt_avalon_i2c_master_target_get
0000f870 g     F .text	00000078 alt_avalon_i2c_send_address
00010ac0 g     F .text	000000b0 alt_vic_irq_init
0000b890 g     F .text	00000064 __ulp
000094d0 g     F .text	00000018 __fp_unlock_all
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000a030 g     F .text	0000000c localeconv
00000f90 g     F .text	00000288 __ieee754_sqrt
00010178 g     F .text	0000002c alt_avalon_i2c_tfr_cmd_fifo_threshold_set
00010b70 g     F .text	00000078 alt_ic_isr_register
0000f504 g     F .text	0000001c alt_avalon_i2c_disable
00012d58 g       *ABS*	00000000 _edata
000147f8 g       *ABS*	00000000 _end
0000ddfc g     F .text	00000164 __fputwc
00000020 g       *ABS*	00000000 __ram_exceptions_end
0000f520 g     F .text	00000044 alt_avalon_i2c_master_config_get
0000c37c g     F .text	0000007c __swrite
00012d38 g     O .rwdata	00000004 __malloc_trim_threshold
00009ff8 g     F .text	0000000c __locale_msgcharset
00009e9c g     F .text	000000c4 _fwalk_reent
0000b694 g     F .text	000001fc __mdiff
00004d94 g     F .text	00000074 .hidden __modsi3
00800000 g       *ABS*	00000000 __alt_data_end
000094ac g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
0000f608 g     F .text	0000008c alt_avalon_i2c_master_config_speed_set
0000f7a8 g     F .text	000000c8 alt_avalon_i2c_cmd_write
00014768 g     O .bss	00000008 accY
0000001c g       .entry	00000000 _exit
00010be8 g     F .text	00000094 alt_alarm_start
00000638 g     F .text	0000003c get_y_gyro_MPU
0000a03c g     F .text	000001bc __smakebuf_r
0000515c g     F .text	00000098 strlen
00003734 g     F .text	000000dc .hidden __gedf2
00012d3c g     O .rwdata	00000004 __wctomb
0000c634 g     F .text	00000018 __sprint_r
00010dec g     F .text	0000000c alt_icache_flush_all
00014770 g     O .bss	00000008 accX
000073ec g     F .text	0000001c __vfprintf_internal
0000e458 g     F .text	0000005c _wctomb_r
0000401c g     F .text	000008fc .hidden __subdf3
0000b0c8 g     F .text	000000b0 __lo0bits
00012d50 g     O .rwdata	00000008 alt_alarm_list
000147d4 g     O .bss	00000010 P
0000e368 g     F .text	000000c0 wcrtomb
0000f114 g     F .text	00000040 close
00001294 g     F .text	000004c8 .hidden __addsf3
00010160 g     F .text	00000018 alt_avalon_i2c_tfr_cmd_fifo_threshold_get
00000384 g     F .text	0000000c read_byte_MPU
0000f180 g     F .text	000000e0 alt_load
00000324 g     F .text	0000002c check_MPU
00010078 g     F .text	000000e8 alt_avalon_i2c_master_rx
0000df84 g     F .text	00000080 fputwc
000094b0 g     F .text	00000004 __sinit_lock_acquire
0000ae3c g     F .text	00000120 __multadd
0000ae14 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_data_end+0xff800004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08400814 	ori	at,at,32
    jmp r1
  18:	0800683a 	jmp	at

0000001c <_exit>:
  1c:	00000000 	call	0 <__reset>

Disassembly of section .text:

00000020 <_start>:
     * writing zero to SSTATUS register and executing an ERET instruction
     * to set STATUS.CRS to 0.
     */
    
    /* Get the current register set number (STATUS.CRS). */
    rdctl r2, status
      20:	0005303a 	rdctl	r2,status
    andi r2, r2, NIOS2_STATUS_CRS_MSK
      24:	10bf000c 	andi	r2,r2,64512
    
    /* Skip switching register set if STATUS.CRS is 0.  */
    beq r2, zero, 0f
      28:	10000426 	beq	r2,zero,3c <_start+0x1c>

    /* Set SSTATUS to 0 to get to set SSTATUS.PRS to 0. */
    .set nobreak
    movui sstatus, 0
      2c:	07800014 	movui	sstatus,0
    .set break

    /* Switch to register set 0 and jump to label. */
    movhi ea, %hi(0f)
      30:	07400034 	movhi	ea,0
    ori ea, ea, %lo(0f)
      34:	ef400f14 	ori	ea,ea,60
    eret
      38:	ef80083a 	eret

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
      3c:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
      40:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
      44:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
      48:	00bffd16 	blt	zero,r2,40 <__alt_data_end+0xff800040>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
      4c:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
      50:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
      54:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
      58:	d6ab4914 	ori	gp,gp,44324
    /* 
     * Setup registers in shadow register sets
     * from 1 to NIOS2_NUM_OF_SHADOW_REG_SETS.
     */

    movui r2, 0     /* Contains value written into STATUS */
      5c:	00800014 	movui	r2,0
    movui r3, NIOS2_NUM_OF_SHADOW_REG_SETS  /* counter */
      60:	00c00114 	movui	r3,4
    movhi r4, 1     /* Constant to increment STATUS.PRS */
      64:	01000074 	movhi	r4,1
    
.Linitialize_shadow_registers:
    /* Increment STATUS.PRS */
    add r2, r2, r4
      68:	1105883a 	add	r2,r2,r4
    wrctl status, r2
      6c:	1001703a 	wrctl	status,r2

    /* Clear r0 in the shadow register set (not done by hardware) */
    wrprs r0, r0
      70:	0000a03a 	wrprs	zero,zero

    /* Write the GP in previous register set */
    wrprs gp, gp
      74:	d034a03a 	wrprs	gp,gp
    wrprs r30, r0    /* ba */
    wrprs r31, r0    /* ra */
#endif /* NIOS2_ECC_PRESENT */

    /* Decrement shadow register set counter */
    addi r3, r3, -1
      78:	18ffffc4 	addi	r3,r3,-1

    /* Done if index is 0. */
    bne r3, zero, .Linitialize_shadow_registers
      7c:	183ffa1e 	bne	r3,zero,68 <__alt_data_end+0xff800068>
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
      80:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
      84:	1091cf14 	ori	r2,r2,18236

    movhi r3, %hi(__bss_end)
      88:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
      8c:	18d1fe14 	ori	r3,r3,18424

    beq r2, r3, 1f
      90:	10c00326 	beq	r2,r3,a0 <_start+0x80>

0:
    stw zero, (r2)
      94:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
      98:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
      9c:	10fffd36 	bltu	r2,r3,94 <__alt_data_end+0xff800094>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
      a0:	000f1800 	call	f180 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
      a4:	000f2a00 	call	f2a0 <alt_main>

000000a8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
      a8:	003fff06 	br	a8 <__alt_data_end+0xff8000a8>

000000ac <KalmanInit>:



void KalmanInit() {
	printf("1\n");
    /* We will set the variables like so, these can also be tuned by the user */
      ac:	008ea0f4 	movhi	r2,14979
      b0:	10849bc4 	addi	r2,r2,4719
      b4:	d0a68815 	stw	r2,-26080(gp)
    Q_angle = 0.001f;
      b8:	008ed174 	movhi	r2,15173
      bc:	10a6e984 	addi	r2,r2,-25690
      c0:	d0a68615 	stw	r2,-26088(gp)
    Q_bias = 0.003f;
      c4:	008f3db4 	movhi	r2,15606
      c8:	10b0a3c4 	addi	r2,r2,-15729
      cc:	d0a68a15 	stw	r2,-26072(gp)
    R_measure = 0.03f;
    printf("1\n");
    angle = 0.0f; // Reset the angle
    bias = 0.0f; // Reset bias
    printf("1\n");
      d0:	00800074 	movhi	r2,1
      d4:	1091f504 	addi	r2,r2,18388
	printf("1\n");
    /* We will set the variables like so, these can also be tuned by the user */
    Q_angle = 0.001f;
    Q_bias = 0.003f;
    R_measure = 0.03f;
    printf("1\n");
      d8:	d0268b15 	stw	zero,-26068(gp)
    angle = 0.0f; // Reset the angle
      dc:	d0268915 	stw	zero,-26076(gp)
    bias = 0.0f; // Reset bias
    printf("1\n");
      e0:	10000015 	stw	zero,0(r2)
    P[0][0] = 0.0f; // Since we assume that the bias is 0 and we know the starting angle (use setAngle), the error covariance matrix is set like so - see: http://en.wikipedia.org/wiki/Kalman_filter#Example_application.2C_technical
      e4:	10000115 	stw	zero,4(r2)
    P[0][1] = 0.0f;
      e8:	10000215 	stw	zero,8(r2)
    P[1][0] = 0.0f;
      ec:	10000315 	stw	zero,12(r2)
      f0:	f800283a 	ret

000000f4 <getAngle>:
    P[1][1] = 0.0f;
};

// The angle should be in degrees and the rate should be in degrees per second and the delta time in seconds
      f4:	defff404 	addi	sp,sp,-48
      f8:	ddc00915 	stw	r23,36(sp)
    // Modified by Kristian Lauszus
    // See my blog post for more information: http://blog.tkjelectronics.dk/2012/09/a-practical-approach-to-kalman-filter-and-how-to-implement-it

    // Discrete Kalman filter time update equations - Time Update ("Predict")
    // Update xhat - Project the state ahead
    /* Step 1 */
      fc:	d5e68917 	ldw	r23,-26076(gp)
    P[0][1] = 0.0f;
    P[1][0] = 0.0f;
    P[1][1] = 0.0f;
};

// The angle should be in degrees and the rate should be in degrees per second and the delta time in seconds
     100:	200f883a 	mov	r7,r4
     104:	2809883a 	mov	r4,r5
    // Modified by Kristian Lauszus
    // See my blog post for more information: http://blog.tkjelectronics.dk/2012/09/a-practical-approach-to-kalman-filter-and-how-to-implement-it

    // Discrete Kalman filter time update equations - Time Update ("Predict")
    // Update xhat - Project the state ahead
    /* Step 1 */
     108:	b80b883a 	mov	r5,r23
    P[0][1] = 0.0f;
    P[1][0] = 0.0f;
    P[1][1] = 0.0f;
};

// The angle should be in degrees and the rate should be in degrees per second and the delta time in seconds
     10c:	dfc00b15 	stw	ra,44(sp)
    // Modified by Kristian Lauszus
    // See my blog post for more information: http://blog.tkjelectronics.dk/2012/09/a-practical-approach-to-kalman-filter-and-how-to-implement-it

    // Discrete Kalman filter time update equations - Time Update ("Predict")
    // Update xhat - Project the state ahead
    /* Step 1 */
     110:	d9c00115 	stw	r7,4(sp)
    P[0][1] = 0.0f;
    P[1][0] = 0.0f;
    P[1][1] = 0.0f;
};

// The angle should be in degrees and the rate should be in degrees per second and the delta time in seconds
     114:	df000a15 	stw	fp,40(sp)
     118:	dd800815 	stw	r22,32(sp)
     11c:	dd400715 	stw	r21,28(sp)
     120:	dd000615 	stw	r20,24(sp)
     124:	dcc00515 	stw	r19,20(sp)
     128:	dc800415 	stw	r18,16(sp)
     12c:	dc400315 	stw	r17,12(sp)
     130:	3025883a 	mov	r18,r6
     134:	dc000215 	stw	r16,8(sp)
    // Modified by Kristian Lauszus
    // See my blog post for more information: http://blog.tkjelectronics.dk/2012/09/a-practical-approach-to-kalman-filter-and-how-to-implement-it

    // Discrete Kalman filter time update equations - Time Update ("Predict")
    // Update xhat - Project the state ahead
    /* Step 1 */
     138:	0001f980 	call	1f98 <__subsf3>
    rate = newRate - bias;
     13c:	900b883a 	mov	r5,r18
     140:	1009883a 	mov	r4,r2
    // Modified by Kristian Lauszus
    // See my blog post for more information: http://blog.tkjelectronics.dk/2012/09/a-practical-approach-to-kalman-filter-and-how-to-implement-it

    // Discrete Kalman filter time update equations - Time Update ("Predict")
    // Update xhat - Project the state ahead
    /* Step 1 */
     144:	d0a68715 	stw	r2,-26084(gp)
    rate = newRate - bias;
     148:	0001b9c0 	call	1b9c <__mulsf3>
     14c:	d1668b17 	ldw	r5,-26068(gp)
    angle += dt * rate;

    // Update estimation error covariance - Project the error covariance ahead
    /* Step 2 */
     150:	04000074 	movhi	r16,1
     154:	8411f504 	addi	r16,r16,18388
    // See my blog post for more information: http://blog.tkjelectronics.dk/2012/09/a-practical-approach-to-kalman-filter-and-how-to-implement-it

    // Discrete Kalman filter time update equations - Time Update ("Predict")
    // Update xhat - Project the state ahead
    /* Step 1 */
    rate = newRate - bias;
     158:	1009883a 	mov	r4,r2
     15c:	00012940 	call	1294 <__addsf3>
    angle += dt * rate;

    // Update estimation error covariance - Project the error covariance ahead
    /* Step 2 */
     160:	87000317 	ldw	fp,12(r16)
     164:	9009883a 	mov	r4,r18
    // See my blog post for more information: http://blog.tkjelectronics.dk/2012/09/a-practical-approach-to-kalman-filter-and-how-to-implement-it

    // Discrete Kalman filter time update equations - Time Update ("Predict")
    // Update xhat - Project the state ahead
    /* Step 1 */
    rate = newRate - bias;
     168:	102b883a 	mov	r21,r2
    angle += dt * rate;

    // Update estimation error covariance - Project the error covariance ahead
    /* Step 2 */
     16c:	e00b883a 	mov	r5,fp
     170:	0001b9c0 	call	1b9c <__mulsf3>
     174:	84c00117 	ldw	r19,4(r16)
     178:	85800217 	ldw	r22,8(r16)
     17c:	1009883a 	mov	r4,r2
     180:	980b883a 	mov	r5,r19
     184:	1029883a 	mov	r20,r2
     188:	0001f980 	call	1f98 <__subsf3>
     18c:	b00b883a 	mov	r5,r22
     190:	1009883a 	mov	r4,r2
     194:	0001f980 	call	1f98 <__subsf3>
     198:	d1668817 	ldw	r5,-26080(gp)
     19c:	1009883a 	mov	r4,r2
     1a0:	00012940 	call	1294 <__addsf3>
     1a4:	900b883a 	mov	r5,r18
     1a8:	1009883a 	mov	r4,r2
     1ac:	0001b9c0 	call	1b9c <__mulsf3>
     1b0:	81400017 	ldw	r5,0(r16)
     1b4:	1009883a 	mov	r4,r2
     1b8:	00012940 	call	1294 <__addsf3>
    P[0][0] += dt * (dt*P[1][1] - P[0][1] - P[1][0] + Q_angle);
     1bc:	a00b883a 	mov	r5,r20
     1c0:	9809883a 	mov	r4,r19
    /* Step 1 */
    rate = newRate - bias;
    angle += dt * rate;

    // Update estimation error covariance - Project the error covariance ahead
    /* Step 2 */
     1c4:	1023883a 	mov	r17,r2
    P[0][0] += dt * (dt*P[1][1] - P[0][1] - P[1][0] + Q_angle);
     1c8:	0001f980 	call	1f98 <__subsf3>
    P[0][1] -= dt * P[1][1];
     1cc:	a00b883a 	mov	r5,r20
     1d0:	b009883a 	mov	r4,r22
    rate = newRate - bias;
    angle += dt * rate;

    // Update estimation error covariance - Project the error covariance ahead
    /* Step 2 */
    P[0][0] += dt * (dt*P[1][1] - P[0][1] - P[1][0] + Q_angle);
     1d4:	1027883a 	mov	r19,r2
    P[0][1] -= dt * P[1][1];
     1d8:	0001f980 	call	1f98 <__subsf3>
    P[1][0] -= dt * P[1][1];
     1dc:	d1668617 	ldw	r5,-26088(gp)
     1e0:	9009883a 	mov	r4,r18
    angle += dt * rate;

    // Update estimation error covariance - Project the error covariance ahead
    /* Step 2 */
    P[0][0] += dt * (dt*P[1][1] - P[0][1] - P[1][0] + Q_angle);
    P[0][1] -= dt * P[1][1];
     1e4:	102d883a 	mov	r22,r2
    P[1][0] -= dt * P[1][1];
     1e8:	0001b9c0 	call	1b9c <__mulsf3>
     1ec:	e00b883a 	mov	r5,fp
     1f0:	1009883a 	mov	r4,r2
     1f4:	00012940 	call	1294 <__addsf3>
    P[1][1] += Q_bias * dt;

    // Discrete Kalman filter measurement update equations - Measurement Update ("Correct")
    // Calculate Kalman gain - Compute the Kalman gain
    /* Step 4 */
     1f8:	d1668a17 	ldw	r5,-26072(gp)
     1fc:	8809883a 	mov	r4,r17
     200:	d8800015 	stw	r2,0(sp)
     204:	00012940 	call	1294 <__addsf3>
    float S = P[0][0] + R_measure; // Estimate error
    /* Step 5 */
    float K[2]; // Kalman gain - This is a 2x1 vector
     208:	8809883a 	mov	r4,r17
     20c:	100b883a 	mov	r5,r2
    P[1][0] -= dt * P[1][1];
    P[1][1] += Q_bias * dt;

    // Discrete Kalman filter measurement update equations - Measurement Update ("Correct")
    // Calculate Kalman gain - Compute the Kalman gain
    /* Step 4 */
     210:	1025883a 	mov	r18,r2
    float S = P[0][0] + R_measure; // Estimate error
    /* Step 5 */
    float K[2]; // Kalman gain - This is a 2x1 vector
     214:	000175c0 	call	175c <__divsf3>
    K[0] = P[0][0] / S;
     218:	900b883a 	mov	r5,r18
     21c:	b009883a 	mov	r4,r22
    // Discrete Kalman filter measurement update equations - Measurement Update ("Correct")
    // Calculate Kalman gain - Compute the Kalman gain
    /* Step 4 */
    float S = P[0][0] + R_measure; // Estimate error
    /* Step 5 */
    float K[2]; // Kalman gain - This is a 2x1 vector
     220:	1029883a 	mov	r20,r2
    K[0] = P[0][0] / S;
     224:	000175c0 	call	175c <__divsf3>
    K[1] = P[1][0] / S;

    // Calculate angle and bias - Update estimate with measurement zk (newAngle)
    /* Step 3 */
     228:	d9c00117 	ldw	r7,4(sp)
     22c:	a80b883a 	mov	r5,r21
    // Calculate Kalman gain - Compute the Kalman gain
    /* Step 4 */
    float S = P[0][0] + R_measure; // Estimate error
    /* Step 5 */
    float K[2]; // Kalman gain - This is a 2x1 vector
    K[0] = P[0][0] / S;
     230:	1025883a 	mov	r18,r2
    K[1] = P[1][0] / S;

    // Calculate angle and bias - Update estimate with measurement zk (newAngle)
    /* Step 3 */
     234:	3809883a 	mov	r4,r7
     238:	0001f980 	call	1f98 <__subsf3>
    float y = newAngle - angle; // Angle difference
    /* Step 6 */
     23c:	a009883a 	mov	r4,r20
     240:	100b883a 	mov	r5,r2
    float K[2]; // Kalman gain - This is a 2x1 vector
    K[0] = P[0][0] / S;
    K[1] = P[1][0] / S;

    // Calculate angle and bias - Update estimate with measurement zk (newAngle)
    /* Step 3 */
     244:	1039883a 	mov	fp,r2
    float y = newAngle - angle; // Angle difference
    /* Step 6 */
     248:	0001b9c0 	call	1b9c <__mulsf3>
     24c:	a80b883a 	mov	r5,r21
     250:	1009883a 	mov	r4,r2
     254:	00012940 	call	1294 <__addsf3>
    angle += K[0] * y;
     258:	e00b883a 	mov	r5,fp
     25c:	9009883a 	mov	r4,r18
    K[1] = P[1][0] / S;

    // Calculate angle and bias - Update estimate with measurement zk (newAngle)
    /* Step 3 */
    float y = newAngle - angle; // Angle difference
    /* Step 6 */
     260:	102b883a 	mov	r21,r2
     264:	d0a68b15 	stw	r2,-26068(gp)
    angle += K[0] * y;
     268:	0001b9c0 	call	1b9c <__mulsf3>
     26c:	b80b883a 	mov	r5,r23
     270:	1009883a 	mov	r4,r2
     274:	00012940 	call	1294 <__addsf3>

    // Calculate estimation error covariance - Update the error covariance
    /* Step 7 */
    float P00_temp = P[0][0];
    float P01_temp = P[0][1];

     278:	a00b883a 	mov	r5,r20
     27c:	8809883a 	mov	r4,r17

    // Calculate angle and bias - Update estimate with measurement zk (newAngle)
    /* Step 3 */
    float y = newAngle - angle; // Angle difference
    /* Step 6 */
    angle += K[0] * y;
     280:	d0a68915 	stw	r2,-26076(gp)

    // Calculate estimation error covariance - Update the error covariance
    /* Step 7 */
    float P00_temp = P[0][0];
    float P01_temp = P[0][1];

     284:	0001b9c0 	call	1b9c <__mulsf3>
     288:	8809883a 	mov	r4,r17
     28c:	100b883a 	mov	r5,r2
     290:	0001f980 	call	1f98 <__subsf3>
    P[0][0] -= K[0] * P00_temp;
     294:	a00b883a 	mov	r5,r20
     298:	9809883a 	mov	r4,r19

    // Calculate estimation error covariance - Update the error covariance
    /* Step 7 */
    float P00_temp = P[0][0];
    float P01_temp = P[0][1];

     29c:	80800015 	stw	r2,0(r16)
    P[0][0] -= K[0] * P00_temp;
     2a0:	0001b9c0 	call	1b9c <__mulsf3>
     2a4:	9809883a 	mov	r4,r19
     2a8:	100b883a 	mov	r5,r2
     2ac:	0001f980 	call	1f98 <__subsf3>
    P[0][1] -= K[0] * P01_temp;
     2b0:	900b883a 	mov	r5,r18
     2b4:	8809883a 	mov	r4,r17
    // Calculate estimation error covariance - Update the error covariance
    /* Step 7 */
    float P00_temp = P[0][0];
    float P01_temp = P[0][1];

    P[0][0] -= K[0] * P00_temp;
     2b8:	80800115 	stw	r2,4(r16)
    P[0][1] -= K[0] * P01_temp;
     2bc:	0001b9c0 	call	1b9c <__mulsf3>
     2c0:	b009883a 	mov	r4,r22
     2c4:	100b883a 	mov	r5,r2
     2c8:	0001f980 	call	1f98 <__subsf3>
    P[1][0] -= K[1] * P00_temp;
     2cc:	900b883a 	mov	r5,r18
     2d0:	9809883a 	mov	r4,r19
    /* Step 7 */
    float P00_temp = P[0][0];
    float P01_temp = P[0][1];

    P[0][0] -= K[0] * P00_temp;
    P[0][1] -= K[0] * P01_temp;
     2d4:	80800215 	stw	r2,8(r16)
    P[1][0] -= K[1] * P00_temp;
     2d8:	0001b9c0 	call	1b9c <__mulsf3>
     2dc:	d8c00017 	ldw	r3,0(sp)
     2e0:	100b883a 	mov	r5,r2
     2e4:	1809883a 	mov	r4,r3
     2e8:	0001f980 	call	1f98 <__subsf3>
     2ec:	80800315 	stw	r2,12(r16)
    P[1][1] -= K[1] * P01_temp;

    return angle;
     2f0:	a805883a 	mov	r2,r21
     2f4:	dfc00b17 	ldw	ra,44(sp)
     2f8:	df000a17 	ldw	fp,40(sp)
     2fc:	ddc00917 	ldw	r23,36(sp)
     300:	dd800817 	ldw	r22,32(sp)
     304:	dd400717 	ldw	r21,28(sp)
     308:	dd000617 	ldw	r20,24(sp)
     30c:	dcc00517 	ldw	r19,20(sp)
     310:	dc800417 	ldw	r18,16(sp)
     314:	dc400317 	ldw	r17,12(sp)
     318:	dc000217 	ldw	r16,8(sp)
     31c:	dec00c04 	addi	sp,sp,48
     320:	f800283a 	ret

00000324 <check_MPU>:



ALT_AVALON_I2C_STATUS_CODE check_MPU(){
	alt_u8 buff_nil = 0;
	ALT_AVALON_I2C_STATUS_CODE ret = alt_avalon_i2c_master_tx(i2c_dev, &buff_nil, 0, ALT_AVALON_I2C_NO_INTERRUPTS);
     324:	d1268c17 	ldw	r4,-26064(gp)

alt_u8 wr_buf[WR_BUF_LEN];



ALT_AVALON_I2C_STATUS_CODE check_MPU(){
     328:	defffe04 	addi	sp,sp,-8
	alt_u8 buff_nil = 0;
	ALT_AVALON_I2C_STATUS_CODE ret = alt_avalon_i2c_master_tx(i2c_dev, &buff_nil, 0, ALT_AVALON_I2C_NO_INTERRUPTS);
     32c:	000f883a 	mov	r7,zero
     330:	000d883a 	mov	r6,zero
     334:	d80b883a 	mov	r5,sp

alt_u8 wr_buf[WR_BUF_LEN];



ALT_AVALON_I2C_STATUS_CODE check_MPU(){
     338:	dfc00115 	stw	ra,4(sp)
	alt_u8 buff_nil = 0;
     33c:	d8000005 	stb	zero,0(sp)
	ALT_AVALON_I2C_STATUS_CODE ret = alt_avalon_i2c_master_tx(i2c_dev, &buff_nil, 0, ALT_AVALON_I2C_NO_INTERRUPTS);
     340:	00103c40 	call	103c4 <alt_avalon_i2c_master_tx>
	return ret;
}
     344:	dfc00117 	ldw	ra,4(sp)
     348:	dec00204 	addi	sp,sp,8
     34c:	f800283a 	ret

00000350 <read_reg_MPU>:

ALT_AVALON_I2C_STATUS_CODE read_reg_MPU(alt_u8 reg, alt_u8 * ret_buf, alt_u32 len){
     350:	defffc04 	addi	sp,sp,-16
     354:	d9000205 	stb	r4,8(sp)
	return alt_avalon_i2c_master_tx_rx(i2c_dev, &reg, 1, ret_buf, len, ALT_AVALON_I2C_NO_INTERRUPTS);
     358:	d1268c17 	ldw	r4,-26064(gp)
     35c:	d9800015 	stw	r6,0(sp)
     360:	280f883a 	mov	r7,r5
     364:	d8000115 	stw	zero,4(sp)
     368:	01800044 	movi	r6,1
     36c:	d9400204 	addi	r5,sp,8
	alt_u8 buff_nil = 0;
	ALT_AVALON_I2C_STATUS_CODE ret = alt_avalon_i2c_master_tx(i2c_dev, &buff_nil, 0, ALT_AVALON_I2C_NO_INTERRUPTS);
	return ret;
}

ALT_AVALON_I2C_STATUS_CODE read_reg_MPU(alt_u8 reg, alt_u8 * ret_buf, alt_u32 len){
     370:	dfc00315 	stw	ra,12(sp)
	return alt_avalon_i2c_master_tx_rx(i2c_dev, &reg, 1, ret_buf, len, ALT_AVALON_I2C_NO_INTERRUPTS);
     374:	00104880 	call	10488 <alt_avalon_i2c_master_tx_rx>
}
     378:	dfc00317 	ldw	ra,12(sp)
     37c:	dec00404 	addi	sp,sp,16
     380:	f800283a 	ret

00000384 <read_byte_MPU>:

ALT_AVALON_I2C_STATUS_CODE read_byte_MPU(alt_u8 reg, alt_u8 * ret){
	return read_reg_MPU(reg, ret, 1);
     384:	01800044 	movi	r6,1
     388:	21003fcc 	andi	r4,r4,255
     38c:	00003501 	jmpi	350 <read_reg_MPU>

00000390 <write_reg_MPU>:
}

ALT_AVALON_I2C_STATUS_CODE write_reg_MPU(alt_u8 reg, alt_u8 * buf, alt_u32 len){
     390:	defffd04 	addi	sp,sp,-12
	wr_buf[0] = reg;
     394:	00800074 	movhi	r2,1

ALT_AVALON_I2C_STATUS_CODE read_byte_MPU(alt_u8 reg, alt_u8 * ret){
	return read_reg_MPU(reg, ret, 1);
}

ALT_AVALON_I2C_STATUS_CODE write_reg_MPU(alt_u8 reg, alt_u8 * buf, alt_u32 len){
     398:	dc400115 	stw	r17,4(sp)
     39c:	dc000015 	stw	r16,0(sp)
     3a0:	dfc00215 	stw	ra,8(sp)
	wr_buf[0] = reg;
     3a4:	1091f904 	addi	r2,r2,18404
     3a8:	11000005 	stb	r4,0(r2)
	memcpy(&wr_buf+sizeof(alt_u8), buf, (len > WR_BUF_LEN ? WR_BUF_LEN : len));
     3ac:	04400504 	movi	r17,20

ALT_AVALON_I2C_STATUS_CODE read_byte_MPU(alt_u8 reg, alt_u8 * ret){
	return read_reg_MPU(reg, ret, 1);
}

ALT_AVALON_I2C_STATUS_CODE write_reg_MPU(alt_u8 reg, alt_u8 * buf, alt_u32 len){
     3b0:	3021883a 	mov	r16,r6
	wr_buf[0] = reg;
	memcpy(&wr_buf+sizeof(alt_u8), buf, (len > WR_BUF_LEN ? WR_BUF_LEN : len));
     3b4:	8980012e 	bgeu	r17,r6,3bc <write_reg_MPU+0x2c>
     3b8:	880d883a 	mov	r6,r17
     3bc:	01000074 	movhi	r4,1
     3c0:	2111fe04 	addi	r4,r4,18424
     3c4:	0004ed40 	call	4ed4 <memcpy>
	return alt_avalon_i2c_master_tx(i2c_dev, wr_buf, (len > WR_BUF_LEN ? WR_BUF_LEN : len+1), ALT_AVALON_I2C_NO_INTERRUPTS);
     3c8:	d1268c17 	ldw	r4,-26064(gp)
     3cc:	8c000236 	bltu	r17,r16,3d8 <write_reg_MPU+0x48>
     3d0:	81800044 	addi	r6,r16,1
     3d4:	00000106 	br	3dc <write_reg_MPU+0x4c>
     3d8:	01800504 	movi	r6,20
     3dc:	01400074 	movhi	r5,1
     3e0:	000f883a 	mov	r7,zero
     3e4:	2951f904 	addi	r5,r5,18404
}
     3e8:	dfc00217 	ldw	ra,8(sp)
     3ec:	dc400117 	ldw	r17,4(sp)
     3f0:	dc000017 	ldw	r16,0(sp)
     3f4:	dec00304 	addi	sp,sp,12
}

ALT_AVALON_I2C_STATUS_CODE write_reg_MPU(alt_u8 reg, alt_u8 * buf, alt_u32 len){
	wr_buf[0] = reg;
	memcpy(&wr_buf+sizeof(alt_u8), buf, (len > WR_BUF_LEN ? WR_BUF_LEN : len));
	return alt_avalon_i2c_master_tx(i2c_dev, wr_buf, (len > WR_BUF_LEN ? WR_BUF_LEN : len+1), ALT_AVALON_I2C_NO_INTERRUPTS);
     3f8:	00103c41 	jmpi	103c4 <alt_avalon_i2c_master_tx>

000003fc <write_byte_MPU>:
}

ALT_AVALON_I2C_STATUS_CODE write_byte_MPU(alt_u8 reg, alt_u8 * byte_in){
	//printf("Sending Byte %d\n", *byte_in);
	return write_reg_MPU(reg, byte_in, 1);
     3fc:	01800044 	movi	r6,1
     400:	21003fcc 	andi	r4,r4,255
     404:	00003901 	jmpi	390 <write_reg_MPU>

00000408 <init_MPU>:
}


ALT_AVALON_I2C_STATUS_CODE init_MPU(){
	i2c_dev = alt_avalon_i2c_open("/dev/i2c_0");
     408:	01000074 	movhi	r4,1
	//printf("Sending Byte %d\n", *byte_in);
	return write_reg_MPU(reg, byte_in, 1);
}


ALT_AVALON_I2C_STATUS_CODE init_MPU(){
     40c:	defffd04 	addi	sp,sp,-12
	i2c_dev = alt_avalon_i2c_open("/dev/i2c_0");
     410:	2103ea04 	addi	r4,r4,4008
	//printf("Sending Byte %d\n", *byte_in);
	return write_reg_MPU(reg, byte_in, 1);
}


ALT_AVALON_I2C_STATUS_CODE init_MPU(){
     414:	dfc00215 	stw	ra,8(sp)
     418:	dc000115 	stw	r16,4(sp)
	i2c_dev = alt_avalon_i2c_open("/dev/i2c_0");
     41c:	000f4b40 	call	f4b4 <alt_avalon_i2c_open>
     420:	d0a68c15 	stw	r2,-26064(gp)
	if (NULL==i2c_dev)
     424:	1000051e 	bne	r2,zero,43c <init_MPU+0x34>
	{
		printf("Error: Cannot find /dev/i2c_0\n");
     428:	01000074 	movhi	r4,1
     42c:	2103ed04 	addi	r4,r4,4020
     430:	00051480 	call	5148 <puts>
		return 1;
     434:	00800044 	movi	r2,1
     438:	00003f06 	br	538 <init_MPU+0x130>
	}
	alt_avalon_i2c_master_target_set(i2c_dev,MPU_I2C_ADDR);
     43c:	04001a04 	movi	r16,104
     440:	800b883a 	mov	r5,r16
     444:	1009883a 	mov	r4,r2
     448:	000f7680 	call	f768 <alt_avalon_i2c_master_target_set>
	alt_u8 buf = 0x00;
     44c:	d8000085 	stb	zero,2(sp)
	if (check_MPU() < 0){
     450:	00003240 	call	324 <check_MPU>
		printf("Device Not Found\n");
		return 1;
	}else{
		printf("Device Found\n");
     454:	01000074 	movhi	r4,1
     458:	2103f504 	addi	r4,r4,4052
     45c:	00051480 	call	5148 <puts>
	}
	read_reg_MPU(117, &buf, 1);
     460:	d9400084 	addi	r5,sp,2
     464:	01800044 	movi	r6,1
     468:	01001d44 	movi	r4,117
     46c:	00003500 	call	350 <read_reg_MPU>

	if (buf == 0x68){
     470:	d9400083 	ldbu	r5,2(sp)
     474:	2c00041e 	bne	r5,r16,488 <init_MPU+0x80>
		printf("WhoAmI Passed\n");
     478:	01000074 	movhi	r4,1
     47c:	2103f904 	addi	r4,r4,4068
     480:	00051480 	call	5148 <puts>
     484:	00000306 	br	494 <init_MPU+0x8c>
	}else{
		printf("WhoAmI Failed: %x\n", buf);
     488:	01000074 	movhi	r4,1
     48c:	2103fd04 	addi	r4,r4,4084
     490:	000504c0 	call	504c <printf>
	}

	read_reg_MPU(117, &buf, 1);
     494:	d9400084 	addi	r5,sp,2
     498:	01800044 	movi	r6,1
     49c:	01001d44 	movi	r4,117
     4a0:	00003500 	call	350 <read_reg_MPU>
	if (buf == 0x68){
     4a4:	d9400083 	ldbu	r5,2(sp)
     4a8:	00801a04 	movi	r2,104
     4ac:	2880041e 	bne	r5,r2,4c0 <init_MPU+0xb8>
		printf("WhoAmI Passed\n");
     4b0:	01000074 	movhi	r4,1
     4b4:	2103f904 	addi	r4,r4,4068
     4b8:	00051480 	call	5148 <puts>
     4bc:	00000306 	br	4cc <init_MPU+0xc4>
	}else{
		printf("WhoAmI Failed: %x\n", buf);
     4c0:	01000074 	movhi	r4,1
     4c4:	2103fd04 	addi	r4,r4,4084
     4c8:	000504c0 	call	504c <printf>
	}


	alt_u8 clear = 0;
	write_byte_MPU(MPU_REG_PWRMGMT_1, &clear);//Turn off sleep mode
     4cc:	d9400044 	addi	r5,sp,1
     4d0:	01001ac4 	movi	r4,107
	}else{
		printf("WhoAmI Failed: %x\n", buf);
	}


	alt_u8 clear = 0;
     4d4:	d8000045 	stb	zero,1(sp)
	write_byte_MPU(MPU_REG_PWRMGMT_1, &clear);//Turn off sleep mode
     4d8:	00003fc0 	call	3fc <write_byte_MPU>
	alt_u8 sleep;
	read_byte_MPU(MPU_REG_PWRMGMT_1, &sleep);
     4dc:	d80b883a 	mov	r5,sp
     4e0:	01001ac4 	movi	r4,107
     4e4:	00003840 	call	384 <read_byte_MPU>
	read_byte_MPU(MPU_REG_PWRMGMT_1, &sleep);
     4e8:	d80b883a 	mov	r5,sp
     4ec:	01001ac4 	movi	r4,107
     4f0:	00003840 	call	384 <read_byte_MPU>
	printf("Sleep Status: %x\n", sleep);
     4f4:	d9400003 	ldbu	r5,0(sp)
     4f8:	01000074 	movhi	r4,1
     4fc:	21040204 	addi	r4,r4,4104
     500:	000504c0 	call	504c <printf>
	if ((sleep & 0x20)!=0){
     504:	d8800003 	ldbu	r2,0(sp)
     508:	1080080c 	andi	r2,r2,32
     50c:	10000326 	beq	r2,zero,51c <init_MPU+0x114>
		printf("It's Sleeping\n");
     510:	01000074 	movhi	r4,1
     514:	21040704 	addi	r4,r4,4124
     518:	00051480 	call	5148 <puts>
	}

	write_byte_MPU(28, &clear);
     51c:	d9400044 	addi	r5,sp,1
     520:	01000704 	movi	r4,28
     524:	00003fc0 	call	3fc <write_byte_MPU>
	write_byte_MPU(27, &clear);
     528:	d9400044 	addi	r5,sp,1
     52c:	010006c4 	movi	r4,27
     530:	00003fc0 	call	3fc <write_byte_MPU>
	return 0;
     534:	0005883a 	mov	r2,zero
}
     538:	dfc00217 	ldw	ra,8(sp)
     53c:	dc000117 	ldw	r16,4(sp)
     540:	dec00304 	addi	sp,sp,12
     544:	f800283a 	ret

00000548 <get_x_accel_MPU>:

alt_16 get_x_accel_MPU(){
     548:	defffe04 	addi	sp,sp,-8
	alt_u8 lsb, msb;
	alt_u8 buf[2];
	//read_reg_MPU(MPU_REG_ACCEL_X, &ret, 2);
	read_byte_MPU(MPU_REG_ACCEL_X, &msb);
     54c:	d80b883a 	mov	r5,sp
     550:	01000ec4 	movi	r4,59
	write_byte_MPU(28, &clear);
	write_byte_MPU(27, &clear);
	return 0;
}

alt_16 get_x_accel_MPU(){
     554:	dfc00115 	stw	ra,4(sp)
	alt_u8 lsb, msb;
	alt_u8 buf[2];
	//read_reg_MPU(MPU_REG_ACCEL_X, &ret, 2);
	read_byte_MPU(MPU_REG_ACCEL_X, &msb);
     558:	00003840 	call	384 <read_byte_MPU>
	read_byte_MPU(MPU_REG_ACCEL_X + 1, &lsb);
     55c:	d9400044 	addi	r5,sp,1
     560:	01000f04 	movi	r4,60
     564:	00003840 	call	384 <read_byte_MPU>
	alt_u16 ret = (msb << 8)|lsb;
     568:	d8800003 	ldbu	r2,0(sp)
     56c:	d8c00043 	ldbu	r3,1(sp)
     570:	1004923a 	slli	r2,r2,8
	return *(alt_16 *) &ret;
}
     574:	10c4b03a 	or	r2,r2,r3
     578:	dfc00117 	ldw	ra,4(sp)
     57c:	dec00204 	addi	sp,sp,8
     580:	f800283a 	ret

00000584 <get_y_accel_MPU>:

alt_16 get_y_accel_MPU(){
     584:	defffe04 	addi	sp,sp,-8
	alt_u8 lsb, msb;
	alt_u8 buf[2];
	//read_reg_MPU(MPU_REG_ACCEL_X, &ret, 2);
	read_byte_MPU(MPU_REG_ACCEL_Y, &msb);
     588:	d80b883a 	mov	r5,sp
     58c:	01000f44 	movi	r4,61
	read_byte_MPU(MPU_REG_ACCEL_X + 1, &lsb);
	alt_u16 ret = (msb << 8)|lsb;
	return *(alt_16 *) &ret;
}

alt_16 get_y_accel_MPU(){
     590:	dfc00115 	stw	ra,4(sp)
	alt_u8 lsb, msb;
	alt_u8 buf[2];
	//read_reg_MPU(MPU_REG_ACCEL_X, &ret, 2);
	read_byte_MPU(MPU_REG_ACCEL_Y, &msb);
     594:	00003840 	call	384 <read_byte_MPU>
	read_byte_MPU(MPU_REG_ACCEL_Y + 1, &lsb);
     598:	d9400044 	addi	r5,sp,1
     59c:	01000f84 	movi	r4,62
     5a0:	00003840 	call	384 <read_byte_MPU>
	alt_u16 ret = (msb << 8)|lsb;
     5a4:	d8800003 	ldbu	r2,0(sp)
     5a8:	d8c00043 	ldbu	r3,1(sp)
     5ac:	1004923a 	slli	r2,r2,8
	return *(alt_16 *) &ret;
}
     5b0:	10c4b03a 	or	r2,r2,r3
     5b4:	dfc00117 	ldw	ra,4(sp)
     5b8:	dec00204 	addi	sp,sp,8
     5bc:	f800283a 	ret

000005c0 <get_z_accel_MPU>:

alt_16 get_z_accel_MPU(){
     5c0:	defffe04 	addi	sp,sp,-8
	alt_u8 lsb, msb;
	alt_u8 buf[2];
	//read_reg_MPU(MPU_REG_ACCEL_X, &ret, 2);
	read_byte_MPU(MPU_REG_ACCEL_Z, &msb);
     5c4:	d80b883a 	mov	r5,sp
     5c8:	01000fc4 	movi	r4,63
	read_byte_MPU(MPU_REG_ACCEL_Y + 1, &lsb);
	alt_u16 ret = (msb << 8)|lsb;
	return *(alt_16 *) &ret;
}

alt_16 get_z_accel_MPU(){
     5cc:	dfc00115 	stw	ra,4(sp)
	alt_u8 lsb, msb;
	alt_u8 buf[2];
	//read_reg_MPU(MPU_REG_ACCEL_X, &ret, 2);
	read_byte_MPU(MPU_REG_ACCEL_Z, &msb);
     5d0:	00003840 	call	384 <read_byte_MPU>
	read_byte_MPU(MPU_REG_ACCEL_Z + 1, &lsb);
     5d4:	d9400044 	addi	r5,sp,1
     5d8:	01001004 	movi	r4,64
     5dc:	00003840 	call	384 <read_byte_MPU>
	alt_u16 ret = (msb << 8)|lsb;
     5e0:	d8800003 	ldbu	r2,0(sp)
     5e4:	d8c00043 	ldbu	r3,1(sp)
     5e8:	1004923a 	slli	r2,r2,8
	//printf("msb, lsb = %u , %u \n", msb, lsb);
	return *(alt_16 *) &ret;
}
     5ec:	10c4b03a 	or	r2,r2,r3
     5f0:	dfc00117 	ldw	ra,4(sp)
     5f4:	dec00204 	addi	sp,sp,8
     5f8:	f800283a 	ret

000005fc <get_x_gyro_MPU>:


alt_16 get_x_gyro_MPU(){
     5fc:	defffe04 	addi	sp,sp,-8
	alt_u8 lsb, msb;
	alt_u8 buf[2];
	//read_reg_MPU(MPU_REG_ACCEL_X, &ret, 2);
	read_byte_MPU(MPU_REG_GYRO_X, &msb);
     600:	d80b883a 	mov	r5,sp
     604:	010010c4 	movi	r4,67
	//printf("msb, lsb = %u , %u \n", msb, lsb);
	return *(alt_16 *) &ret;
}


alt_16 get_x_gyro_MPU(){
     608:	dfc00115 	stw	ra,4(sp)
	alt_u8 lsb, msb;
	alt_u8 buf[2];
	//read_reg_MPU(MPU_REG_ACCEL_X, &ret, 2);
	read_byte_MPU(MPU_REG_GYRO_X, &msb);
     60c:	00003840 	call	384 <read_byte_MPU>
	read_byte_MPU(MPU_REG_GYRO_X + 1, &lsb);
     610:	d9400044 	addi	r5,sp,1
     614:	01001104 	movi	r4,68
     618:	00003840 	call	384 <read_byte_MPU>
	alt_u16 ret = (msb << 8)|lsb;
     61c:	d8800003 	ldbu	r2,0(sp)
     620:	d8c00043 	ldbu	r3,1(sp)
     624:	1004923a 	slli	r2,r2,8
	return *(alt_16 *) &ret;
}
     628:	10c4b03a 	or	r2,r2,r3
     62c:	dfc00117 	ldw	ra,4(sp)
     630:	dec00204 	addi	sp,sp,8
     634:	f800283a 	ret

00000638 <get_y_gyro_MPU>:

alt_16 get_y_gyro_MPU(){
     638:	defffe04 	addi	sp,sp,-8
	alt_u8 lsb, msb;
	alt_u8 buf[2];
	//read_reg_MPU(MPU_REG_ACCEL_X, &ret, 2);
	read_byte_MPU(MPU_REG_GYRO_Y, &msb);
     63c:	d80b883a 	mov	r5,sp
     640:	01001144 	movi	r4,69
	read_byte_MPU(MPU_REG_GYRO_X + 1, &lsb);
	alt_u16 ret = (msb << 8)|lsb;
	return *(alt_16 *) &ret;
}

alt_16 get_y_gyro_MPU(){
     644:	dfc00115 	stw	ra,4(sp)
	alt_u8 lsb, msb;
	alt_u8 buf[2];
	//read_reg_MPU(MPU_REG_ACCEL_X, &ret, 2);
	read_byte_MPU(MPU_REG_GYRO_Y, &msb);
     648:	00003840 	call	384 <read_byte_MPU>
	read_byte_MPU(MPU_REG_GYRO_Y + 1, &lsb);
     64c:	d9400044 	addi	r5,sp,1
     650:	01001184 	movi	r4,70
     654:	00003840 	call	384 <read_byte_MPU>
	alt_u16 ret = (msb << 8)|lsb;
     658:	d8800003 	ldbu	r2,0(sp)
     65c:	d8c00043 	ldbu	r3,1(sp)
     660:	1004923a 	slli	r2,r2,8
	return *(alt_16 *) &ret;
}
     664:	10c4b03a 	or	r2,r2,r3
     668:	dfc00117 	ldw	ra,4(sp)
     66c:	dec00204 	addi	sp,sp,8
     670:	f800283a 	ret

00000674 <get_z_gyro_MPU>:

alt_16 get_z_gyro_MPU(){
     674:	defffe04 	addi	sp,sp,-8
	alt_u8 lsb, msb;
	alt_u8 buf[2];
	//read_reg_MPU(MPU_REG_ACCEL_X, &ret, 2);
	read_byte_MPU(MPU_REG_GYRO_Z, &msb);
     678:	d80b883a 	mov	r5,sp
     67c:	010011c4 	movi	r4,71
	read_byte_MPU(MPU_REG_GYRO_Y + 1, &lsb);
	alt_u16 ret = (msb << 8)|lsb;
	return *(alt_16 *) &ret;
}

alt_16 get_z_gyro_MPU(){
     680:	dfc00115 	stw	ra,4(sp)
	alt_u8 lsb, msb;
	alt_u8 buf[2];
	//read_reg_MPU(MPU_REG_ACCEL_X, &ret, 2);
	read_byte_MPU(MPU_REG_GYRO_Z, &msb);
     684:	00003840 	call	384 <read_byte_MPU>
	read_byte_MPU(MPU_REG_GYRO_Z + 1, &lsb);
     688:	d9400044 	addi	r5,sp,1
     68c:	01001204 	movi	r4,72
     690:	00003840 	call	384 <read_byte_MPU>
	alt_u16 ret = (msb << 8)|lsb;
     694:	d8800003 	ldbu	r2,0(sp)
     698:	d8c00043 	ldbu	r3,1(sp)
     69c:	1004923a 	slli	r2,r2,8
	return *(alt_16 *) &ret;
}
     6a0:	10c4b03a 	or	r2,r2,r3
     6a4:	dfc00117 	ldw	ra,4(sp)
     6a8:	dec00204 	addi	sp,sp,8
     6ac:	f800283a 	ret

000006b0 <main>:
double accX, accY, accZ;


int main()
{
	alt_putstr("Hello from Nios II!\n");
     6b0:	01000074 	movhi	r4,1
alt_16 AccX, AccY, AccZ;
double accX, accY, accZ;


int main()
{
     6b4:	defff604 	addi	sp,sp,-40
	alt_putstr("Hello from Nios II!\n");
     6b8:	21040b04 	addi	r4,r4,4140
alt_16 AccX, AccY, AccZ;
double accX, accY, accZ;


int main()
{
     6bc:	dfc00915 	stw	ra,36(sp)
     6c0:	df000815 	stw	fp,32(sp)
     6c4:	dc000015 	stw	r16,0(sp)
     6c8:	ddc00715 	stw	r23,28(sp)
     6cc:	dd800615 	stw	r22,24(sp)
     6d0:	dd400515 	stw	r21,20(sp)
     6d4:	dd000415 	stw	r20,16(sp)
     6d8:	dcc00315 	stw	r19,12(sp)
     6dc:	dc800215 	stw	r18,8(sp)
     6e0:	dc400115 	stw	r17,4(sp)
	alt_putstr("Hello from Nios II!\n");
     6e4:	000f2d40 	call	f2d4 <alt_putstr>

	/* Event loop never exits. */
	init_MPU();
     6e8:	00004080 	call	408 <init_MPU>
	KalmanInit();
     6ec:	00000ac0 	call	ac <KalmanInit>
	alt_u32 old = 0;
	usleep(2000000);
     6f0:	010007f4 	movhi	r4,31
     6f4:	21212004 	addi	r4,r4,-31616
	while (1){
		int new = IORD_ALTERA_AVALON_PIO_DATA(IN_L_BASE);
     6f8:	07002034 	movhi	fp,128

	/* Event loop never exits. */
	init_MPU();
	KalmanInit();
	alt_u32 old = 0;
	usleep(2000000);
     6fc:	000f3c80 	call	f3c8 <usleep>
	alt_putstr("Hello from Nios II!\n");

	/* Event loop never exits. */
	init_MPU();
	KalmanInit();
	alt_u32 old = 0;
     700:	0021883a 	mov	r16,zero
	usleep(2000000);
	while (1){
		int new = IORD_ALTERA_AVALON_PIO_DATA(IN_L_BASE);
     704:	e7051404 	addi	fp,fp,5200
     708:	e4400037 	ldwio	r17,0(fp)
		int dt = new - old;
		//printf("%d\n", dt);
		old = new;
		AccZ =  get_z_accel_MPU();
     70c:	00005c00 	call	5c0 <get_z_accel_MPU>
     710:	d0a6900d 	sth	r2,-26048(gp)
		AccX =  get_x_accel_MPU();
     714:	00005480 	call	548 <get_x_accel_MPU>
     718:	d0a6908d 	sth	r2,-26046(gp)
		AccY =  get_y_accel_MPU();
     71c:	00005840 	call	584 <get_y_accel_MPU>
		accZ = (double) AccZ;
     720:	d126900f 	ldh	r4,-26048(gp)
		int dt = new - old;
		//printf("%d\n", dt);
		old = new;
		AccZ =  get_z_accel_MPU();
		AccX =  get_x_accel_MPU();
		AccY =  get_y_accel_MPU();
     724:	1025883a 	mov	r18,r2
     728:	d0a68d0d 	sth	r2,-26060(gp)
		accZ = (double) AccZ;
     72c:	00049180 	call	4918 <__floatsidf>
		accX = (double) AccX;
     730:	d126908f 	ldh	r4,-26046(gp)
		//printf("%d\n", dt);
		old = new;
		AccZ =  get_z_accel_MPU();
		AccX =  get_x_accel_MPU();
		AccY =  get_y_accel_MPU();
		accZ = (double) AccZ;
     734:	102b883a 	mov	r21,r2
     738:	1829883a 	mov	r20,r3
     73c:	d0a68e15 	stw	r2,-26056(gp)
     740:	d0e68f15 	stw	r3,-26052(gp)
		accX = (double) AccX;
     744:	00049180 	call	4918 <__floatsidf>
		accY = (double) AccY;
     748:	913fffcc 	andi	r4,r18,65535
     74c:	2120001c 	xori	r4,r4,32768
     750:	21200004 	addi	r4,r4,-32768
		old = new;
		AccZ =  get_z_accel_MPU();
		AccX =  get_x_accel_MPU();
		AccY =  get_y_accel_MPU();
		accZ = (double) AccZ;
		accX = (double) AccX;
     754:	102f883a 	mov	r23,r2
     758:	182d883a 	mov	r22,r3
     75c:	d0a69315 	stw	r2,-26036(gp)
     760:	d0e69415 	stw	r3,-26032(gp)
		accY = (double) AccY;
     764:	00049180 	call	4918 <__floatsidf>
		double pitch = (atan(accY / sqrt(accX * accX + accZ * accZ)) * 180 / PI) - 0.58;
     768:	b80d883a 	mov	r6,r23
     76c:	b00f883a 	mov	r7,r22
     770:	b809883a 	mov	r4,r23
     774:	b00b883a 	mov	r5,r22
		AccZ =  get_z_accel_MPU();
		AccX =  get_x_accel_MPU();
		AccY =  get_y_accel_MPU();
		accZ = (double) AccZ;
		accX = (double) AccX;
		accY = (double) AccY;
     778:	1027883a 	mov	r19,r2
     77c:	1825883a 	mov	r18,r3
     780:	d0a69115 	stw	r2,-26044(gp)
     784:	d0e69215 	stw	r3,-26040(gp)
		double pitch = (atan(accY / sqrt(accX * accX + accZ * accZ)) * 180 / PI) - 0.58;
     788:	00039040 	call	3904 <__muldf3>
     78c:	a80d883a 	mov	r6,r21
     790:	a00f883a 	mov	r7,r20
     794:	a809883a 	mov	r4,r21
     798:	a00b883a 	mov	r5,r20
     79c:	102f883a 	mov	r23,r2
     7a0:	182d883a 	mov	r22,r3
     7a4:	00039040 	call	3904 <__muldf3>
     7a8:	100d883a 	mov	r6,r2
     7ac:	180f883a 	mov	r7,r3
     7b0:	b809883a 	mov	r4,r23
     7b4:	b00b883a 	mov	r5,r22
     7b8:	00025a00 	call	25a0 <__adddf3>
     7bc:	1009883a 	mov	r4,r2
     7c0:	180b883a 	mov	r5,r3
     7c4:	0000e600 	call	e60 <sqrt>
     7c8:	100d883a 	mov	r6,r2
     7cc:	180f883a 	mov	r7,r3
     7d0:	9809883a 	mov	r4,r19
     7d4:	900b883a 	mov	r5,r18
     7d8:	0002e4c0 	call	2e4c <__divdf3>
     7dc:	180b883a 	mov	r5,r3
     7e0:	1009883a 	mov	r4,r2
     7e4:	00008c40 	call	8c4 <atan>
     7e8:	1827883a 	mov	r19,r3
     7ec:	1029883a 	mov	r20,r2
		float a = getAngle((float)pitch, (float) get_x_gyro_MPU() * 131.0f, (float)dt/1000000.0f);
     7f0:	00005fc0 	call	5fc <get_x_gyro_MPU>
     7f4:	8c09c83a 	sub	r4,r17,r16
     7f8:	102b883a 	mov	r21,r2
     7fc:	000247c0 	call	247c <__floatsisf>
     800:	01525d34 	movhi	r5,18804
     804:	29490004 	addi	r5,r5,9216
     808:	1009883a 	mov	r4,r2
     80c:	000175c0 	call	175c <__divsf3>
     810:	a93fffcc 	andi	r4,r21,65535
     814:	2120001c 	xori	r4,r4,32768
     818:	21200004 	addi	r4,r4,-32768
     81c:	1025883a 	mov	r18,r2
     820:	000247c0 	call	247c <__floatsisf>
     824:	0150c0f4 	movhi	r5,17155
     828:	1009883a 	mov	r4,r2
     82c:	0001b9c0 	call	1b9c <__mulsf3>
     830:	01d019f4 	movhi	r7,16487
     834:	000d883a 	mov	r6,zero
     838:	39e00004 	addi	r7,r7,-32768
     83c:	a009883a 	mov	r4,r20
     840:	980b883a 	mov	r5,r19
     844:	1021883a 	mov	r16,r2
     848:	00039040 	call	3904 <__muldf3>
     84c:	01947b34 	movhi	r6,20972
     850:	01d00274 	movhi	r7,16393
     854:	31a147c4 	addi	r6,r6,-31457
     858:	39c7ae04 	addi	r7,r7,7864
     85c:	1009883a 	mov	r4,r2
     860:	180b883a 	mov	r5,r3
     864:	0002e4c0 	call	2e4c <__divdf3>
     868:	018a3db4 	movhi	r6,10486
     86c:	01cff8f4 	movhi	r7,16355
     870:	39e3d704 	addi	r7,r7,-28836
     874:	31b0a3c4 	addi	r6,r6,-15729
     878:	1009883a 	mov	r4,r2
     87c:	180b883a 	mov	r5,r3
     880:	000401c0 	call	401c <__subdf3>
     884:	180b883a 	mov	r5,r3
     888:	1009883a 	mov	r4,r2
     88c:	0004b040 	call	4b04 <__truncdfsf2>
     890:	800b883a 	mov	r5,r16
     894:	900d883a 	mov	r6,r18
     898:	1009883a 	mov	r4,r2
     89c:	00000f40 	call	f4 <getAngle>
		printf("%f\n",  a);
     8a0:	1009883a 	mov	r4,r2
     8a4:	00049f40 	call	49f4 <__extendsfdf2>
     8a8:	01000074 	movhi	r4,1
     8ac:	100b883a 	mov	r5,r2
     8b0:	180d883a 	mov	r6,r3
     8b4:	21041104 	addi	r4,r4,4164
     8b8:	000504c0 	call	504c <printf>
	usleep(2000000);
	while (1){
		int new = IORD_ALTERA_AVALON_PIO_DATA(IN_L_BASE);
		int dt = new - old;
		//printf("%d\n", dt);
		old = new;
     8bc:	8821883a 	mov	r16,r17
     8c0:	003f9106 	br	708 <__alt_data_end+0xff800708>

000008c4 <atan>:
     8c4:	defff704 	addi	sp,sp,-36
     8c8:	dc400115 	stw	r17,4(sp)
     8cc:	04600034 	movhi	r17,32768
     8d0:	8c7fffc4 	addi	r17,r17,-1
     8d4:	00910434 	movhi	r2,17424
     8d8:	dc800215 	stw	r18,8(sp)
     8dc:	dc000015 	stw	r16,0(sp)
     8e0:	dfc00815 	stw	ra,32(sp)
     8e4:	ddc00715 	stw	r23,28(sp)
     8e8:	dd800615 	stw	r22,24(sp)
     8ec:	dd400515 	stw	r21,20(sp)
     8f0:	dd000415 	stw	r20,16(sp)
     8f4:	dcc00315 	stw	r19,12(sp)
     8f8:	2c62703a 	and	r17,r5,r17
     8fc:	10bfffc4 	addi	r2,r2,-1
     900:	2821883a 	mov	r16,r5
     904:	2025883a 	mov	r18,r4
     908:	1440090e 	bge	r2,r17,930 <atan+0x6c>
     90c:	009ffc34 	movhi	r2,32752
     910:	1440bf16 	blt	r2,r17,c10 <atan+0x34c>
     914:	8880bd26 	beq	r17,r2,c0c <atan+0x348>
     918:	00951134 	movhi	r2,21572
     91c:	108b4604 	addi	r2,r2,11544
     920:	0400fc0e 	bge	zero,r16,d14 <atan+0x450>
     924:	00cffe74 	movhi	r3,16377
     928:	18c87ec4 	addi	r3,r3,8699
     92c:	0000bd06 	br	c24 <atan+0x360>
     930:	008ff734 	movhi	r2,16348
     934:	10bfffc4 	addi	r2,r2,-1
     938:	282b883a 	mov	r21,r5
     93c:	1440d216 	blt	r2,r17,c88 <atan+0x3c4>
     940:	008f8834 	movhi	r2,15904
     944:	10bfffc4 	addi	r2,r2,-1
     948:	1440c10e 	bge	r2,r17,c50 <atan+0x38c>
     94c:	053fffc4 	movi	r20,-1
     950:	900d883a 	mov	r6,r18
     954:	800f883a 	mov	r7,r16
     958:	9009883a 	mov	r4,r18
     95c:	800b883a 	mov	r5,r16
     960:	00039040 	call	3904 <__muldf3>
     964:	100d883a 	mov	r6,r2
     968:	180f883a 	mov	r7,r3
     96c:	1009883a 	mov	r4,r2
     970:	180b883a 	mov	r5,r3
     974:	102f883a 	mov	r23,r2
     978:	182d883a 	mov	r22,r3
     97c:	00039040 	call	3904 <__muldf3>
     980:	01b8c8f4 	movhi	r6,58147
     984:	01cfe474 	movhi	r7,16273
     988:	31b68444 	addi	r6,r6,-9711
     98c:	39eb4e84 	addi	r7,r7,-21190
     990:	1009883a 	mov	r4,r2
     994:	180b883a 	mov	r5,r3
     998:	1027883a 	mov	r19,r2
     99c:	1823883a 	mov	r17,r3
     9a0:	00039040 	call	3904 <__muldf3>
     9a4:	01891db4 	movhi	r6,9334
     9a8:	01cfea74 	movhi	r7,16297
     9ac:	31837ac4 	addi	r6,r6,3563
     9b0:	39ded2c4 	addi	r7,r7,31563
     9b4:	1009883a 	mov	r4,r2
     9b8:	180b883a 	mov	r5,r3
     9bc:	00025a00 	call	25a0 <__adddf3>
     9c0:	980d883a 	mov	r6,r19
     9c4:	880f883a 	mov	r7,r17
     9c8:	1009883a 	mov	r4,r2
     9cc:	180b883a 	mov	r5,r3
     9d0:	00039040 	call	3904 <__muldf3>
     9d4:	01a83434 	movhi	r6,41168
     9d8:	01cfec74 	movhi	r7,16305
     9dc:	318f5444 	addi	r6,r6,15697
     9e0:	39c35984 	addi	r7,r7,3430
     9e4:	1009883a 	mov	r4,r2
     9e8:	180b883a 	mov	r5,r3
     9ec:	00025a00 	call	25a0 <__adddf3>
     9f0:	980d883a 	mov	r6,r19
     9f4:	880f883a 	mov	r7,r17
     9f8:	1009883a 	mov	r4,r2
     9fc:	180b883a 	mov	r5,r3
     a00:	00039040 	call	3904 <__muldf3>
     a04:	01b15334 	movhi	r6,50508
     a08:	01cfedf4 	movhi	r7,16311
     a0c:	31881b84 	addi	r6,r6,8302
     a10:	39d17344 	addi	r7,r7,17869
     a14:	1009883a 	mov	r4,r2
     a18:	180b883a 	mov	r5,r3
     a1c:	00025a00 	call	25a0 <__adddf3>
     a20:	980d883a 	mov	r6,r19
     a24:	880f883a 	mov	r7,r17
     a28:	1009883a 	mov	r4,r2
     a2c:	180b883a 	mov	r5,r3
     a30:	00039040 	call	3904 <__muldf3>
     a34:	01a48074 	movhi	r6,37377
     a38:	01cff0b4 	movhi	r7,16322
     a3c:	31a0ffc4 	addi	r6,r6,-31745
     a40:	39d24904 	addi	r7,r7,18724
     a44:	1009883a 	mov	r4,r2
     a48:	180b883a 	mov	r5,r3
     a4c:	00025a00 	call	25a0 <__adddf3>
     a50:	980d883a 	mov	r6,r19
     a54:	880f883a 	mov	r7,r17
     a58:	1009883a 	mov	r4,r2
     a5c:	180b883a 	mov	r5,r3
     a60:	00039040 	call	3904 <__muldf3>
     a64:	01955574 	movhi	r6,21845
     a68:	01cff574 	movhi	r7,16341
     a6c:	31954344 	addi	r6,r6,21773
     a70:	39d55544 	addi	r7,r7,21845
     a74:	1009883a 	mov	r4,r2
     a78:	180b883a 	mov	r5,r3
     a7c:	00025a00 	call	25a0 <__adddf3>
     a80:	b80d883a 	mov	r6,r23
     a84:	b00f883a 	mov	r7,r22
     a88:	1009883a 	mov	r4,r2
     a8c:	180b883a 	mov	r5,r3
     a90:	00039040 	call	3904 <__muldf3>
     a94:	018b1ab4 	movhi	r6,11370
     a98:	01efe8f4 	movhi	r7,49059
     a9c:	319b0bc4 	addi	r6,r6,27695
     aa0:	39ed1104 	addi	r7,r7,-19388
     aa4:	9809883a 	mov	r4,r19
     aa8:	880b883a 	mov	r5,r17
     aac:	102f883a 	mov	r23,r2
     ab0:	182d883a 	mov	r22,r3
     ab4:	00039040 	call	3904 <__muldf3>
     ab8:	0194b7f4 	movhi	r6,21215
     abc:	01cfebb4 	movhi	r7,16302
     ac0:	31bf6684 	addi	r6,r6,-614
     ac4:	39f78b44 	addi	r7,r7,-8659
     ac8:	1009883a 	mov	r4,r2
     acc:	180b883a 	mov	r5,r3
     ad0:	000401c0 	call	401c <__subdf3>
     ad4:	980d883a 	mov	r6,r19
     ad8:	880f883a 	mov	r7,r17
     adc:	1009883a 	mov	r4,r2
     ae0:	180b883a 	mov	r5,r3
     ae4:	00039040 	call	3904 <__muldf3>
     ae8:	01abdd74 	movhi	r6,44917
     aec:	01cfed34 	movhi	r7,16308
     af0:	31a69b44 	addi	r6,r6,-26003
     af4:	39ec3c84 	addi	r7,r7,-20238
     af8:	1009883a 	mov	r4,r2
     afc:	180b883a 	mov	r5,r3
     b00:	000401c0 	call	401c <__subdf3>
     b04:	980d883a 	mov	r6,r19
     b08:	880f883a 	mov	r7,r17
     b0c:	1009883a 	mov	r4,r2
     b10:	180b883a 	mov	r5,r3
     b14:	00039040 	call	3904 <__muldf3>
     b18:	01bf88f4 	movhi	r6,65059
     b1c:	01cfef34 	movhi	r7,16316
     b20:	31859c44 	addi	r6,r6,5745
     b24:	39dc7184 	addi	r7,r7,29126
     b28:	1009883a 	mov	r4,r2
     b2c:	180b883a 	mov	r5,r3
     b30:	000401c0 	call	401c <__subdf3>
     b34:	980d883a 	mov	r6,r19
     b38:	880f883a 	mov	r7,r17
     b3c:	1009883a 	mov	r4,r2
     b40:	180b883a 	mov	r5,r3
     b44:	00039040 	call	3904 <__muldf3>
     b48:	01a66674 	movhi	r6,39321
     b4c:	01cff2b4 	movhi	r7,16330
     b50:	31baf104 	addi	r6,r6,-5180
     b54:	39e66644 	addi	r7,r7,-26215
     b58:	1009883a 	mov	r4,r2
     b5c:	180b883a 	mov	r5,r3
     b60:	000401c0 	call	401c <__subdf3>
     b64:	1009883a 	mov	r4,r2
     b68:	980d883a 	mov	r6,r19
     b6c:	880f883a 	mov	r7,r17
     b70:	180b883a 	mov	r5,r3
     b74:	00039040 	call	3904 <__muldf3>
     b78:	013fffc4 	movi	r4,-1
     b7c:	a1006826 	beq	r20,r4,d20 <atan+0x45c>
     b80:	100d883a 	mov	r6,r2
     b84:	180f883a 	mov	r7,r3
     b88:	b809883a 	mov	r4,r23
     b8c:	b00b883a 	mov	r5,r22
     b90:	00025a00 	call	25a0 <__adddf3>
     b94:	900d883a 	mov	r6,r18
     b98:	800f883a 	mov	r7,r16
     b9c:	1009883a 	mov	r4,r2
     ba0:	180b883a 	mov	r5,r3
     ba4:	00039040 	call	3904 <__muldf3>
     ba8:	a02890fa 	slli	r20,r20,3
     bac:	1009883a 	mov	r4,r2
     bb0:	04400074 	movhi	r17,1
     bb4:	00800074 	movhi	r2,1
     bb8:	10841204 	addi	r2,r2,4168
     bbc:	8c441a04 	addi	r17,r17,4200
     bc0:	8d23883a 	add	r17,r17,r20
     bc4:	1529883a 	add	r20,r2,r20
     bc8:	a1800017 	ldw	r6,0(r20)
     bcc:	a1c00117 	ldw	r7,4(r20)
     bd0:	180b883a 	mov	r5,r3
     bd4:	000401c0 	call	401c <__subdf3>
     bd8:	900d883a 	mov	r6,r18
     bdc:	800f883a 	mov	r7,r16
     be0:	1009883a 	mov	r4,r2
     be4:	180b883a 	mov	r5,r3
     be8:	000401c0 	call	401c <__subdf3>
     bec:	89000017 	ldw	r4,0(r17)
     bf0:	89400117 	ldw	r5,4(r17)
     bf4:	100d883a 	mov	r6,r2
     bf8:	180f883a 	mov	r7,r3
     bfc:	000401c0 	call	401c <__subdf3>
     c00:	a800080e 	bge	r21,zero,c24 <atan+0x360>
     c04:	18e0003c 	xorhi	r3,r3,32768
     c08:	00000606 	br	c24 <atan+0x360>
     c0c:	203f4226 	beq	r4,zero,918 <__alt_data_end+0xff800918>
     c10:	900d883a 	mov	r6,r18
     c14:	800f883a 	mov	r7,r16
     c18:	9009883a 	mov	r4,r18
     c1c:	800b883a 	mov	r5,r16
     c20:	00025a00 	call	25a0 <__adddf3>
     c24:	dfc00817 	ldw	ra,32(sp)
     c28:	ddc00717 	ldw	r23,28(sp)
     c2c:	dd800617 	ldw	r22,24(sp)
     c30:	dd400517 	ldw	r21,20(sp)
     c34:	dd000417 	ldw	r20,16(sp)
     c38:	dcc00317 	ldw	r19,12(sp)
     c3c:	dc800217 	ldw	r18,8(sp)
     c40:	dc400117 	ldw	r17,4(sp)
     c44:	dc000017 	ldw	r16,0(sp)
     c48:	dec00904 	addi	sp,sp,36
     c4c:	f800283a 	ret
     c50:	01a20034 	movhi	r6,34816
     c54:	01df8e34 	movhi	r7,32312
     c58:	319d6704 	addi	r6,r6,30108
     c5c:	39f90f04 	addi	r7,r7,-7108
     c60:	00025a00 	call	25a0 <__adddf3>
     c64:	000d883a 	mov	r6,zero
     c68:	01cffc34 	movhi	r7,16368
     c6c:	1009883a 	mov	r4,r2
     c70:	180b883a 	mov	r5,r3
     c74:	00037340 	call	3734 <__gedf2>
     c78:	00bf340e 	bge	zero,r2,94c <__alt_data_end+0xff80094c>
     c7c:	9005883a 	mov	r2,r18
     c80:	8007883a 	mov	r3,r16
     c84:	003fe706 	br	c24 <__alt_data_end+0xff800c24>
     c88:	0000e4c0 	call	e4c <fabs>
     c8c:	1025883a 	mov	r18,r2
     c90:	008ffcf4 	movhi	r2,16371
     c94:	10bfffc4 	addi	r2,r2,-1
     c98:	1821883a 	mov	r16,r3
     c9c:	14403016 	blt	r2,r17,d60 <atan+0x49c>
     ca0:	008ff9b4 	movhi	r2,16358
     ca4:	10bfffc4 	addi	r2,r2,-1
     ca8:	14405316 	blt	r2,r17,df8 <atan+0x534>
     cac:	900d883a 	mov	r6,r18
     cb0:	9009883a 	mov	r4,r18
     cb4:	180f883a 	mov	r7,r3
     cb8:	180b883a 	mov	r5,r3
     cbc:	00025a00 	call	25a0 <__adddf3>
     cc0:	000d883a 	mov	r6,zero
     cc4:	01cffc34 	movhi	r7,16368
     cc8:	1009883a 	mov	r4,r2
     ccc:	180b883a 	mov	r5,r3
     cd0:	000401c0 	call	401c <__subdf3>
     cd4:	9009883a 	mov	r4,r18
     cd8:	800b883a 	mov	r5,r16
     cdc:	000d883a 	mov	r6,zero
     ce0:	01d00034 	movhi	r7,16384
     ce4:	1027883a 	mov	r19,r2
     ce8:	1823883a 	mov	r17,r3
     cec:	00025a00 	call	25a0 <__adddf3>
     cf0:	100d883a 	mov	r6,r2
     cf4:	180f883a 	mov	r7,r3
     cf8:	9809883a 	mov	r4,r19
     cfc:	880b883a 	mov	r5,r17
     d00:	0002e4c0 	call	2e4c <__divdf3>
     d04:	1025883a 	mov	r18,r2
     d08:	1821883a 	mov	r16,r3
     d0c:	0029883a 	mov	r20,zero
     d10:	003f0f06 	br	950 <__alt_data_end+0xff800950>
     d14:	00effe74 	movhi	r3,49145
     d18:	18c87ec4 	addi	r3,r3,8699
     d1c:	003fc106 	br	c24 <__alt_data_end+0xff800c24>
     d20:	b809883a 	mov	r4,r23
     d24:	b00b883a 	mov	r5,r22
     d28:	100d883a 	mov	r6,r2
     d2c:	180f883a 	mov	r7,r3
     d30:	00025a00 	call	25a0 <__adddf3>
     d34:	900d883a 	mov	r6,r18
     d38:	800f883a 	mov	r7,r16
     d3c:	1009883a 	mov	r4,r2
     d40:	180b883a 	mov	r5,r3
     d44:	00039040 	call	3904 <__muldf3>
     d48:	100d883a 	mov	r6,r2
     d4c:	180f883a 	mov	r7,r3
     d50:	9009883a 	mov	r4,r18
     d54:	800b883a 	mov	r5,r16
     d58:	000401c0 	call	401c <__subdf3>
     d5c:	003fb106 	br	c24 <__alt_data_end+0xff800c24>
     d60:	009000f4 	movhi	r2,16387
     d64:	109fffc4 	addi	r2,r2,32767
     d68:	14401a16 	blt	r2,r17,dd4 <atan+0x510>
     d6c:	9009883a 	mov	r4,r18
     d70:	000d883a 	mov	r6,zero
     d74:	01cffe34 	movhi	r7,16376
     d78:	180b883a 	mov	r5,r3
     d7c:	000401c0 	call	401c <__subdf3>
     d80:	9009883a 	mov	r4,r18
     d84:	800b883a 	mov	r5,r16
     d88:	000d883a 	mov	r6,zero
     d8c:	01cffe34 	movhi	r7,16376
     d90:	1027883a 	mov	r19,r2
     d94:	1823883a 	mov	r17,r3
     d98:	00039040 	call	3904 <__muldf3>
     d9c:	000d883a 	mov	r6,zero
     da0:	01cffc34 	movhi	r7,16368
     da4:	1009883a 	mov	r4,r2
     da8:	180b883a 	mov	r5,r3
     dac:	00025a00 	call	25a0 <__adddf3>
     db0:	100d883a 	mov	r6,r2
     db4:	180f883a 	mov	r7,r3
     db8:	9809883a 	mov	r4,r19
     dbc:	880b883a 	mov	r5,r17
     dc0:	0002e4c0 	call	2e4c <__divdf3>
     dc4:	1025883a 	mov	r18,r2
     dc8:	1821883a 	mov	r16,r3
     dcc:	05000084 	movi	r20,2
     dd0:	003edf06 	br	950 <__alt_data_end+0xff800950>
     dd4:	900d883a 	mov	r6,r18
     dd8:	180f883a 	mov	r7,r3
     ddc:	0009883a 	mov	r4,zero
     de0:	016ffc34 	movhi	r5,49136
     de4:	0002e4c0 	call	2e4c <__divdf3>
     de8:	1025883a 	mov	r18,r2
     dec:	1821883a 	mov	r16,r3
     df0:	050000c4 	movi	r20,3
     df4:	003ed606 	br	950 <__alt_data_end+0xff800950>
     df8:	9009883a 	mov	r4,r18
     dfc:	000d883a 	mov	r6,zero
     e00:	01cffc34 	movhi	r7,16368
     e04:	180b883a 	mov	r5,r3
     e08:	000401c0 	call	401c <__subdf3>
     e0c:	9009883a 	mov	r4,r18
     e10:	800b883a 	mov	r5,r16
     e14:	000d883a 	mov	r6,zero
     e18:	01cffc34 	movhi	r7,16368
     e1c:	1027883a 	mov	r19,r2
     e20:	1823883a 	mov	r17,r3
     e24:	00025a00 	call	25a0 <__adddf3>
     e28:	100d883a 	mov	r6,r2
     e2c:	180f883a 	mov	r7,r3
     e30:	9809883a 	mov	r4,r19
     e34:	880b883a 	mov	r5,r17
     e38:	0002e4c0 	call	2e4c <__divdf3>
     e3c:	1025883a 	mov	r18,r2
     e40:	1821883a 	mov	r16,r3
     e44:	05000044 	movi	r20,1
     e48:	003ec106 	br	950 <__alt_data_end+0xff800950>

00000e4c <fabs>:
     e4c:	00e00034 	movhi	r3,32768
     e50:	18ffffc4 	addi	r3,r3,-1
     e54:	2005883a 	mov	r2,r4
     e58:	28c6703a 	and	r3,r5,r3
     e5c:	f800283a 	ret

00000e60 <sqrt>:
     e60:	defff104 	addi	sp,sp,-60
     e64:	dd000d15 	stw	r20,52(sp)
     e68:	05000074 	movhi	r20,1
     e6c:	dcc00c15 	stw	r19,48(sp)
     e70:	dc800b15 	stw	r18,44(sp)
     e74:	dc400a15 	stw	r17,40(sp)
     e78:	dc000915 	stw	r16,36(sp)
     e7c:	dfc00e15 	stw	ra,56(sp)
     e80:	a50b4904 	addi	r20,r20,11556
     e84:	2027883a 	mov	r19,r4
     e88:	2825883a 	mov	r18,r5
     e8c:	0000f900 	call	f90 <__ieee754_sqrt>
     e90:	1821883a 	mov	r16,r3
     e94:	a0c00017 	ldw	r3,0(r20)
     e98:	1023883a 	mov	r17,r2
     e9c:	00bfffc4 	movi	r2,-1
     ea0:	18800a26 	beq	r3,r2,ecc <sqrt+0x6c>
     ea4:	9809883a 	mov	r4,r19
     ea8:	900b883a 	mov	r5,r18
     eac:	00012180 	call	1218 <__fpclassifyd>
     eb0:	10000626 	beq	r2,zero,ecc <sqrt+0x6c>
     eb4:	000d883a 	mov	r6,zero
     eb8:	000f883a 	mov	r7,zero
     ebc:	9809883a 	mov	r4,r19
     ec0:	900b883a 	mov	r5,r18
     ec4:	00038100 	call	3810 <__ledf2>
     ec8:	10000a16 	blt	r2,zero,ef4 <sqrt+0x94>
     ecc:	8805883a 	mov	r2,r17
     ed0:	8007883a 	mov	r3,r16
     ed4:	dfc00e17 	ldw	ra,56(sp)
     ed8:	dd000d17 	ldw	r20,52(sp)
     edc:	dcc00c17 	ldw	r19,48(sp)
     ee0:	dc800b17 	ldw	r18,44(sp)
     ee4:	dc400a17 	ldw	r17,40(sp)
     ee8:	dc000917 	ldw	r16,36(sp)
     eec:	dec00f04 	addi	sp,sp,60
     ef0:	f800283a 	ret
     ef4:	00800044 	movi	r2,1
     ef8:	d8800015 	stw	r2,0(sp)
     efc:	a4000017 	ldw	r16,0(r20)
     f00:	00800074 	movhi	r2,1
     f04:	10842204 	addi	r2,r2,4232
     f08:	d8800115 	stw	r2,4(sp)
     f0c:	d8000815 	stw	zero,32(sp)
     f10:	dcc00415 	stw	r19,16(sp)
     f14:	dc800515 	stw	r18,20(sp)
     f18:	dcc00215 	stw	r19,8(sp)
     f1c:	dc800315 	stw	r18,12(sp)
     f20:	80000a1e 	bne	r16,zero,f4c <sqrt+0xec>
     f24:	d8000615 	stw	zero,24(sp)
     f28:	d8000715 	stw	zero,28(sp)
     f2c:	d809883a 	mov	r4,sp
     f30:	000128c0 	call	128c <matherr>
     f34:	10000e26 	beq	r2,zero,f70 <sqrt+0x110>
     f38:	d8800817 	ldw	r2,32(sp)
     f3c:	1000101e 	bne	r2,zero,f80 <sqrt+0x120>
     f40:	d8800617 	ldw	r2,24(sp)
     f44:	d8c00717 	ldw	r3,28(sp)
     f48:	003fe206 	br	ed4 <__alt_data_end+0xff800ed4>
     f4c:	000d883a 	mov	r6,zero
     f50:	000f883a 	mov	r7,zero
     f54:	0009883a 	mov	r4,zero
     f58:	000b883a 	mov	r5,zero
     f5c:	0002e4c0 	call	2e4c <__divdf3>
     f60:	d8800615 	stw	r2,24(sp)
     f64:	d8c00715 	stw	r3,28(sp)
     f68:	00800084 	movi	r2,2
     f6c:	80bfef1e 	bne	r16,r2,f2c <__alt_data_end+0xff800f2c>
     f70:	0004ec40 	call	4ec4 <__errno>
     f74:	00c00844 	movi	r3,33
     f78:	10c00015 	stw	r3,0(r2)
     f7c:	003fee06 	br	f38 <__alt_data_end+0xff800f38>
     f80:	0004ec40 	call	4ec4 <__errno>
     f84:	d8c00817 	ldw	r3,32(sp)
     f88:	10c00015 	stw	r3,0(r2)
     f8c:	003fec06 	br	f40 <__alt_data_end+0xff800f40>

00000f90 <__ieee754_sqrt>:
     f90:	defffd04 	addi	sp,sp,-12
     f94:	dc400115 	stw	r17,4(sp)
     f98:	dc000015 	stw	r16,0(sp)
     f9c:	dfc00215 	stw	ra,8(sp)
     fa0:	28dffc2c 	andhi	r3,r5,32752
     fa4:	009ffc34 	movhi	r2,32752
     fa8:	2821883a 	mov	r16,r5
     fac:	2023883a 	mov	r17,r4
     fb0:	200d883a 	mov	r6,r4
     fb4:	18807b26 	beq	r3,r2,11a4 <__ieee754_sqrt+0x214>
     fb8:	01405f0e 	bge	zero,r5,1138 <__ieee754_sqrt+0x1a8>
     fbc:	2815d53a 	srai	r10,r5,20
     fc0:	50006a26 	beq	r10,zero,116c <__ieee754_sqrt+0x1dc>
     fc4:	00c00434 	movhi	r3,16
     fc8:	52bf0044 	addi	r10,r10,-1023
     fcc:	18ffffc4 	addi	r3,r3,-1
     fd0:	80c6703a 	and	r3,r16,r3
     fd4:	5080004c 	andi	r2,r10,1
     fd8:	18c00434 	orhi	r3,r3,16
     fdc:	1000511e 	bne	r2,zero,1124 <__ieee754_sqrt+0x194>
     fe0:	3004d7fa 	srli	r2,r6,31
     fe4:	5015d07a 	srai	r10,r10,1
     fe8:	18c7883a 	add	r3,r3,r3
     fec:	10c5883a 	add	r2,r2,r3
     ff0:	01400584 	movi	r5,22
     ff4:	3187883a 	add	r3,r6,r6
     ff8:	0013883a 	mov	r9,zero
     ffc:	000f883a 	mov	r7,zero
    1000:	01000834 	movhi	r4,32
    1004:	390d883a 	add	r6,r7,r4
    1008:	1810d7fa 	srli	r8,r3,31
    100c:	297fffc4 	addi	r5,r5,-1
    1010:	11800316 	blt	r2,r6,1020 <__ieee754_sqrt+0x90>
    1014:	1185c83a 	sub	r2,r2,r6
    1018:	310f883a 	add	r7,r6,r4
    101c:	4913883a 	add	r9,r9,r4
    1020:	1085883a 	add	r2,r2,r2
    1024:	4085883a 	add	r2,r8,r2
    1028:	18c7883a 	add	r3,r3,r3
    102c:	2008d07a 	srli	r4,r4,1
    1030:	283ff41e 	bne	r5,zero,1004 <__alt_data_end+0xff801004>
    1034:	01200034 	movhi	r4,32768
    1038:	01800804 	movi	r6,32
    103c:	0011883a 	mov	r8,zero
    1040:	0019883a 	mov	r12,zero
    1044:	201b883a 	mov	r13,r4
    1048:	00000806 	br	106c <__ieee754_sqrt+0xdc>
    104c:	38801726 	beq	r7,r2,10ac <__ieee754_sqrt+0x11c>
    1050:	180ad7fa 	srli	r5,r3,31
    1054:	1085883a 	add	r2,r2,r2
    1058:	31bfffc4 	addi	r6,r6,-1
    105c:	2885883a 	add	r2,r5,r2
    1060:	18c7883a 	add	r3,r3,r3
    1064:	2008d07a 	srli	r4,r4,1
    1068:	30001726 	beq	r6,zero,10c8 <__ieee754_sqrt+0x138>
    106c:	230b883a 	add	r5,r4,r12
    1070:	38bff60e 	bge	r7,r2,104c <__alt_data_end+0xff80104c>
    1074:	2ae0002c 	andhi	r11,r5,32768
    1078:	2919883a 	add	r12,r5,r4
    107c:	5b400826 	beq	r11,r13,10a0 <__ieee754_sqrt+0x110>
    1080:	3817883a 	mov	r11,r7
    1084:	11c5c83a 	sub	r2,r2,r7
    1088:	1940012e 	bgeu	r3,r5,1090 <__ieee754_sqrt+0x100>
    108c:	10bfffc4 	addi	r2,r2,-1
    1090:	1947c83a 	sub	r3,r3,r5
    1094:	4111883a 	add	r8,r8,r4
    1098:	580f883a 	mov	r7,r11
    109c:	003fec06 	br	1050 <__alt_data_end+0xff801050>
    10a0:	603ff716 	blt	r12,zero,1080 <__alt_data_end+0xff801080>
    10a4:	3ac00044 	addi	r11,r7,1
    10a8:	003ff606 	br	1084 <__alt_data_end+0xff801084>
    10ac:	19401936 	bltu	r3,r5,1114 <__ieee754_sqrt+0x184>
    10b0:	2ae0002c 	andhi	r11,r5,32768
    10b4:	2919883a 	add	r12,r5,r4
    10b8:	5b404526 	beq	r11,r13,11d0 <__ieee754_sqrt+0x240>
    10bc:	1017883a 	mov	r11,r2
    10c0:	0005883a 	mov	r2,zero
    10c4:	003ff206 	br	1090 <__alt_data_end+0xff801090>
    10c8:	10c4b03a 	or	r2,r2,r3
    10cc:	10000426 	beq	r2,zero,10e0 <__ieee754_sqrt+0x150>
    10d0:	00bfffc4 	movi	r2,-1
    10d4:	40804026 	beq	r8,r2,11d8 <__ieee754_sqrt+0x248>
    10d8:	4080004c 	andi	r2,r8,1
    10dc:	4091883a 	add	r8,r8,r2
    10e0:	4004d07a 	srli	r2,r8,1
    10e4:	4807d07a 	srai	r3,r9,1
    10e8:	010ff834 	movhi	r4,16352
    10ec:	4a40004c 	andi	r9,r9,1
    10f0:	1909883a 	add	r4,r3,r4
    10f4:	4800091e 	bne	r9,zero,111c <__ieee754_sqrt+0x18c>
    10f8:	5006953a 	slli	r3,r10,20
    10fc:	1907883a 	add	r3,r3,r4
    1100:	dfc00217 	ldw	ra,8(sp)
    1104:	dc400117 	ldw	r17,4(sp)
    1108:	dc000017 	ldw	r16,0(sp)
    110c:	dec00304 	addi	sp,sp,12
    1110:	f800283a 	ret
    1114:	3805883a 	mov	r2,r7
    1118:	003fcd06 	br	1050 <__alt_data_end+0xff801050>
    111c:	10a00034 	orhi	r2,r2,32768
    1120:	003ff506 	br	10f8 <__alt_data_end+0xff8010f8>
    1124:	3004d7fa 	srli	r2,r6,31
    1128:	18c7883a 	add	r3,r3,r3
    112c:	318d883a 	add	r6,r6,r6
    1130:	10c7883a 	add	r3,r2,r3
    1134:	003faa06 	br	fe0 <__alt_data_end+0xff800fe0>
    1138:	00a00034 	movhi	r2,32768
    113c:	10bfffc4 	addi	r2,r2,-1
    1140:	2884703a 	and	r2,r5,r2
    1144:	1104b03a 	or	r2,r2,r4
    1148:	10001e26 	beq	r2,zero,11c4 <__ieee754_sqrt+0x234>
    114c:	2800291e 	bne	r5,zero,11f4 <__ieee754_sqrt+0x264>
    1150:	0015883a 	mov	r10,zero
    1154:	3020d2fa 	srli	r16,r6,11
    1158:	52bffac4 	addi	r10,r10,-21
    115c:	300c957a 	slli	r6,r6,21
    1160:	803ffc26 	beq	r16,zero,1154 <__alt_data_end+0xff801154>
    1164:	8080042c 	andhi	r2,r16,16
    1168:	10001e1e 	bne	r2,zero,11e4 <__ieee754_sqrt+0x254>
    116c:	0005883a 	mov	r2,zero
    1170:	00000106 	br	1178 <__ieee754_sqrt+0x1e8>
    1174:	1805883a 	mov	r2,r3
    1178:	8421883a 	add	r16,r16,r16
    117c:	8100042c 	andhi	r4,r16,16
    1180:	10c00044 	addi	r3,r2,1
    1184:	203ffb26 	beq	r4,zero,1174 <__alt_data_end+0xff801174>
    1188:	01000804 	movi	r4,32
    118c:	20c9c83a 	sub	r4,r4,r3
    1190:	3108d83a 	srl	r4,r6,r4
    1194:	5095c83a 	sub	r10,r10,r2
    1198:	30cc983a 	sll	r6,r6,r3
    119c:	2420b03a 	or	r16,r4,r16
    11a0:	003f8806 	br	fc4 <__alt_data_end+0xff800fc4>
    11a4:	280f883a 	mov	r7,r5
    11a8:	00039040 	call	3904 <__muldf3>
    11ac:	880d883a 	mov	r6,r17
    11b0:	800f883a 	mov	r7,r16
    11b4:	1009883a 	mov	r4,r2
    11b8:	180b883a 	mov	r5,r3
    11bc:	00025a00 	call	25a0 <__adddf3>
    11c0:	003fcf06 	br	1100 <__alt_data_end+0xff801100>
    11c4:	2005883a 	mov	r2,r4
    11c8:	2807883a 	mov	r3,r5
    11cc:	003fcc06 	br	1100 <__alt_data_end+0xff801100>
    11d0:	603fba16 	blt	r12,zero,10bc <__alt_data_end+0xff8010bc>
    11d4:	003fb306 	br	10a4 <__alt_data_end+0xff8010a4>
    11d8:	4a400044 	addi	r9,r9,1
    11dc:	0005883a 	mov	r2,zero
    11e0:	003fc006 	br	10e4 <__alt_data_end+0xff8010e4>
    11e4:	01000804 	movi	r4,32
    11e8:	00bfffc4 	movi	r2,-1
    11ec:	0007883a 	mov	r3,zero
    11f0:	003fe706 	br	1190 <__alt_data_end+0xff801190>
    11f4:	200d883a 	mov	r6,r4
    11f8:	280f883a 	mov	r7,r5
    11fc:	000401c0 	call	401c <__subdf3>
    1200:	100d883a 	mov	r6,r2
    1204:	180f883a 	mov	r7,r3
    1208:	1009883a 	mov	r4,r2
    120c:	180b883a 	mov	r5,r3
    1210:	0002e4c0 	call	2e4c <__divdf3>
    1214:	003fba06 	br	1100 <__alt_data_end+0xff801100>

00001218 <__fpclassifyd>:
    1218:	00a00034 	movhi	r2,32768
    121c:	10bfffc4 	addi	r2,r2,-1
    1220:	2884703a 	and	r2,r5,r2
    1224:	10000726 	beq	r2,zero,1244 <__fpclassifyd+0x2c>
    1228:	00fffc34 	movhi	r3,65520
    122c:	019ff834 	movhi	r6,32736
    1230:	28c7883a 	add	r3,r5,r3
    1234:	31bfffc4 	addi	r6,r6,-1
    1238:	30c00536 	bltu	r6,r3,1250 <__fpclassifyd+0x38>
    123c:	00800104 	movi	r2,4
    1240:	f800283a 	ret
    1244:	2000021e 	bne	r4,zero,1250 <__fpclassifyd+0x38>
    1248:	00800084 	movi	r2,2
    124c:	f800283a 	ret
    1250:	00dffc34 	movhi	r3,32752
    1254:	019ff834 	movhi	r6,32736
    1258:	28cb883a 	add	r5,r5,r3
    125c:	31bfffc4 	addi	r6,r6,-1
    1260:	317ff62e 	bgeu	r6,r5,123c <__alt_data_end+0xff80123c>
    1264:	01400434 	movhi	r5,16
    1268:	297fffc4 	addi	r5,r5,-1
    126c:	28800236 	bltu	r5,r2,1278 <__fpclassifyd+0x60>
    1270:	008000c4 	movi	r2,3
    1274:	f800283a 	ret
    1278:	10c00226 	beq	r2,r3,1284 <__fpclassifyd+0x6c>
    127c:	0005883a 	mov	r2,zero
    1280:	f800283a 	ret
    1284:	2005003a 	cmpeq	r2,r4,zero
    1288:	f800283a 	ret

0000128c <matherr>:
    128c:	0005883a 	mov	r2,zero
    1290:	f800283a 	ret

00001294 <__addsf3>:
    1294:	defffc04 	addi	sp,sp,-16
    1298:	2004d7fa 	srli	r2,r4,31
    129c:	280cd5fa 	srli	r6,r5,23
    12a0:	dc000015 	stw	r16,0(sp)
    12a4:	00c02034 	movhi	r3,128
    12a8:	2020d5fa 	srli	r16,r4,23
    12ac:	280ed7fa 	srli	r7,r5,31
    12b0:	18ffffc4 	addi	r3,r3,-1
    12b4:	dc400115 	stw	r17,4(sp)
    12b8:	1908703a 	and	r4,r3,r4
    12bc:	194a703a 	and	r5,r3,r5
    12c0:	dfc00315 	stw	ra,12(sp)
    12c4:	dc800215 	stw	r18,8(sp)
    12c8:	14403fcc 	andi	r17,r2,255
    12cc:	84003fcc 	andi	r16,r16,255
    12d0:	200890fa 	slli	r4,r4,3
    12d4:	31803fcc 	andi	r6,r6,255
    12d8:	280a90fa 	slli	r5,r5,3
    12dc:	89c05026 	beq	r17,r7,1420 <__addsf3+0x18c>
    12e0:	8185c83a 	sub	r2,r16,r6
    12e4:	00807a0e 	bge	zero,r2,14d0 <__addsf3+0x23c>
    12e8:	30001e1e 	bne	r6,zero,1364 <__addsf3+0xd0>
    12ec:	28006d1e 	bne	r5,zero,14a4 <__addsf3+0x210>
    12f0:	208001cc 	andi	r2,r4,7
    12f4:	10000426 	beq	r2,zero,1308 <__addsf3+0x74>
    12f8:	208003cc 	andi	r2,r4,15
    12fc:	00c00104 	movi	r3,4
    1300:	10c00126 	beq	r2,r3,1308 <__addsf3+0x74>
    1304:	20c9883a 	add	r4,r4,r3
    1308:	2081002c 	andhi	r2,r4,1024
    130c:	10003926 	beq	r2,zero,13f4 <__addsf3+0x160>
    1310:	84000044 	addi	r16,r16,1
    1314:	00803fc4 	movi	r2,255
    1318:	80807826 	beq	r16,r2,14fc <__addsf3+0x268>
    131c:	200891ba 	slli	r4,r4,6
    1320:	8805883a 	mov	r2,r17
    1324:	2008d27a 	srli	r4,r4,9
    1328:	84003fcc 	andi	r16,r16,255
    132c:	800695fa 	slli	r3,r16,23
    1330:	10803fcc 	andi	r2,r2,255
    1334:	04002034 	movhi	r16,128
    1338:	843fffc4 	addi	r16,r16,-1
    133c:	100497fa 	slli	r2,r2,31
    1340:	2408703a 	and	r4,r4,r16
    1344:	20e0b03a 	or	r16,r4,r3
    1348:	8084b03a 	or	r2,r16,r2
    134c:	dfc00317 	ldw	ra,12(sp)
    1350:	dc800217 	ldw	r18,8(sp)
    1354:	dc400117 	ldw	r17,4(sp)
    1358:	dc000017 	ldw	r16,0(sp)
    135c:	dec00404 	addi	sp,sp,16
    1360:	f800283a 	ret
    1364:	00c03fc4 	movi	r3,255
    1368:	80ffe126 	beq	r16,r3,12f0 <__alt_data_end+0xff8012f0>
    136c:	29410034 	orhi	r5,r5,1024
    1370:	00c006c4 	movi	r3,27
    1374:	18807516 	blt	r3,r2,154c <__addsf3+0x2b8>
    1378:	00c00804 	movi	r3,32
    137c:	1887c83a 	sub	r3,r3,r2
    1380:	28c6983a 	sll	r3,r5,r3
    1384:	288ad83a 	srl	r5,r5,r2
    1388:	1804c03a 	cmpne	r2,r3,zero
    138c:	288ab03a 	or	r5,r5,r2
    1390:	2149c83a 	sub	r4,r4,r5
    1394:	2081002c 	andhi	r2,r4,1024
    1398:	10001426 	beq	r2,zero,13ec <__addsf3+0x158>
    139c:	04810034 	movhi	r18,1024
    13a0:	94bfffc4 	addi	r18,r18,-1
    13a4:	24a4703a 	and	r18,r4,r18
    13a8:	9009883a 	mov	r4,r18
    13ac:	0004cac0 	call	4cac <__clzsi2>
    13b0:	10bffec4 	addi	r2,r2,-5
    13b4:	90a4983a 	sll	r18,r18,r2
    13b8:	14005416 	blt	r2,r16,150c <__addsf3+0x278>
    13bc:	1405c83a 	sub	r2,r2,r16
    13c0:	11000044 	addi	r4,r2,1
    13c4:	00800804 	movi	r2,32
    13c8:	1105c83a 	sub	r2,r2,r4
    13cc:	9084983a 	sll	r2,r18,r2
    13d0:	9124d83a 	srl	r18,r18,r4
    13d4:	0021883a 	mov	r16,zero
    13d8:	1008c03a 	cmpne	r4,r2,zero
    13dc:	9108b03a 	or	r4,r18,r4
    13e0:	003fc306 	br	12f0 <__alt_data_end+0xff8012f0>
    13e4:	1000db26 	beq	r2,zero,1754 <__addsf3+0x4c0>
    13e8:	1009883a 	mov	r4,r2
    13ec:	208001cc 	andi	r2,r4,7
    13f0:	103fc11e 	bne	r2,zero,12f8 <__alt_data_end+0xff8012f8>
    13f4:	2006d0fa 	srli	r3,r4,3
    13f8:	01003fc4 	movi	r4,255
    13fc:	8805883a 	mov	r2,r17
    1400:	8100241e 	bne	r16,r4,1494 <__addsf3+0x200>
    1404:	18006e26 	beq	r3,zero,15c0 <__addsf3+0x32c>
    1408:	19001034 	orhi	r4,r3,64
    140c:	00c02034 	movhi	r3,128
    1410:	18ffffc4 	addi	r3,r3,-1
    1414:	043fffc4 	movi	r16,-1
    1418:	20c8703a 	and	r4,r4,r3
    141c:	003fc206 	br	1328 <__alt_data_end+0xff801328>
    1420:	8187c83a 	sub	r3,r16,r6
    1424:	00c03e0e 	bge	zero,r3,1520 <__addsf3+0x28c>
    1428:	30002326 	beq	r6,zero,14b8 <__addsf3+0x224>
    142c:	01803fc4 	movi	r6,255
    1430:	81bfaf26 	beq	r16,r6,12f0 <__alt_data_end+0xff8012f0>
    1434:	29410034 	orhi	r5,r5,1024
    1438:	018006c4 	movi	r6,27
    143c:	30c07416 	blt	r6,r3,1610 <__addsf3+0x37c>
    1440:	01800804 	movi	r6,32
    1444:	30cdc83a 	sub	r6,r6,r3
    1448:	298c983a 	sll	r6,r5,r6
    144c:	28cad83a 	srl	r5,r5,r3
    1450:	3006c03a 	cmpne	r3,r6,zero
    1454:	28cab03a 	or	r5,r5,r3
    1458:	2149883a 	add	r4,r4,r5
    145c:	20c1002c 	andhi	r3,r4,1024
    1460:	183fe226 	beq	r3,zero,13ec <__alt_data_end+0xff8013ec>
    1464:	84000044 	addi	r16,r16,1
    1468:	00c03fc4 	movi	r3,255
    146c:	80c05426 	beq	r16,r3,15c0 <__addsf3+0x32c>
    1470:	00bf0034 	movhi	r2,64512
    1474:	10bfffc4 	addi	r2,r2,-1
    1478:	20c0004c 	andi	r3,r4,1
    147c:	2088703a 	and	r4,r4,r2
    1480:	2008d07a 	srli	r4,r4,1
    1484:	20c8b03a 	or	r4,r4,r3
    1488:	003f9906 	br	12f0 <__alt_data_end+0xff8012f0>
    148c:	0007883a 	mov	r3,zero
    1490:	0005883a 	mov	r2,zero
    1494:	01002034 	movhi	r4,128
    1498:	213fffc4 	addi	r4,r4,-1
    149c:	1908703a 	and	r4,r3,r4
    14a0:	003fa106 	br	1328 <__alt_data_end+0xff801328>
    14a4:	10bfffc4 	addi	r2,r2,-1
    14a8:	103fb926 	beq	r2,zero,1390 <__alt_data_end+0xff801390>
    14ac:	00c03fc4 	movi	r3,255
    14b0:	80ffaf1e 	bne	r16,r3,1370 <__alt_data_end+0xff801370>
    14b4:	003f8e06 	br	12f0 <__alt_data_end+0xff8012f0>
    14b8:	283f8d26 	beq	r5,zero,12f0 <__alt_data_end+0xff8012f0>
    14bc:	18ffffc4 	addi	r3,r3,-1
    14c0:	183fe526 	beq	r3,zero,1458 <__alt_data_end+0xff801458>
    14c4:	01803fc4 	movi	r6,255
    14c8:	81bfdb1e 	bne	r16,r6,1438 <__alt_data_end+0xff801438>
    14cc:	003f8806 	br	12f0 <__alt_data_end+0xff8012f0>
    14d0:	1000201e 	bne	r2,zero,1554 <__addsf3+0x2c0>
    14d4:	80800044 	addi	r2,r16,1
    14d8:	10803fcc 	andi	r2,r2,255
    14dc:	01800044 	movi	r6,1
    14e0:	3080450e 	bge	r6,r2,15f8 <__addsf3+0x364>
    14e4:	2165c83a 	sub	r18,r4,r5
    14e8:	90c1002c 	andhi	r3,r18,1024
    14ec:	18002b26 	beq	r3,zero,159c <__addsf3+0x308>
    14f0:	2925c83a 	sub	r18,r5,r4
    14f4:	3823883a 	mov	r17,r7
    14f8:	003fab06 	br	13a8 <__alt_data_end+0xff8013a8>
    14fc:	8805883a 	mov	r2,r17
    1500:	043fffc4 	movi	r16,-1
    1504:	0009883a 	mov	r4,zero
    1508:	003f8706 	br	1328 <__alt_data_end+0xff801328>
    150c:	013f0034 	movhi	r4,64512
    1510:	213fffc4 	addi	r4,r4,-1
    1514:	80a1c83a 	sub	r16,r16,r2
    1518:	9108703a 	and	r4,r18,r4
    151c:	003f7406 	br	12f0 <__alt_data_end+0xff8012f0>
    1520:	1800411e 	bne	r3,zero,1628 <__addsf3+0x394>
    1524:	80c00044 	addi	r3,r16,1
    1528:	19c03fcc 	andi	r7,r3,255
    152c:	01800044 	movi	r6,1
    1530:	31c0260e 	bge	r6,r7,15cc <__addsf3+0x338>
    1534:	01803fc4 	movi	r6,255
    1538:	19802126 	beq	r3,r6,15c0 <__addsf3+0x32c>
    153c:	2149883a 	add	r4,r4,r5
    1540:	2008d07a 	srli	r4,r4,1
    1544:	1821883a 	mov	r16,r3
    1548:	003f6906 	br	12f0 <__alt_data_end+0xff8012f0>
    154c:	01400044 	movi	r5,1
    1550:	003f8f06 	br	1390 <__alt_data_end+0xff801390>
    1554:	8000151e 	bne	r16,zero,15ac <__addsf3+0x318>
    1558:	20002f26 	beq	r4,zero,1618 <__addsf3+0x384>
    155c:	0084303a 	nor	r2,zero,r2
    1560:	10000a26 	beq	r2,zero,158c <__addsf3+0x2f8>
    1564:	00c03fc4 	movi	r3,255
    1568:	30c02b26 	beq	r6,r3,1618 <__addsf3+0x384>
    156c:	00c006c4 	movi	r3,27
    1570:	18806d16 	blt	r3,r2,1728 <__addsf3+0x494>
    1574:	00c00804 	movi	r3,32
    1578:	1887c83a 	sub	r3,r3,r2
    157c:	20c6983a 	sll	r3,r4,r3
    1580:	2084d83a 	srl	r2,r4,r2
    1584:	1808c03a 	cmpne	r4,r3,zero
    1588:	1108b03a 	or	r4,r2,r4
    158c:	2909c83a 	sub	r4,r5,r4
    1590:	3021883a 	mov	r16,r6
    1594:	3823883a 	mov	r17,r7
    1598:	003f7e06 	br	1394 <__alt_data_end+0xff801394>
    159c:	903f821e 	bne	r18,zero,13a8 <__alt_data_end+0xff8013a8>
    15a0:	0005883a 	mov	r2,zero
    15a4:	0021883a 	mov	r16,zero
    15a8:	003fba06 	br	1494 <__alt_data_end+0xff801494>
    15ac:	00c03fc4 	movi	r3,255
    15b0:	30c01926 	beq	r6,r3,1618 <__addsf3+0x384>
    15b4:	0085c83a 	sub	r2,zero,r2
    15b8:	21010034 	orhi	r4,r4,1024
    15bc:	003feb06 	br	156c <__alt_data_end+0xff80156c>
    15c0:	043fffc4 	movi	r16,-1
    15c4:	0009883a 	mov	r4,zero
    15c8:	003f5706 	br	1328 <__alt_data_end+0xff801328>
    15cc:	80004a1e 	bne	r16,zero,16f8 <__addsf3+0x464>
    15d0:	20005926 	beq	r4,zero,1738 <__addsf3+0x4a4>
    15d4:	283f4626 	beq	r5,zero,12f0 <__alt_data_end+0xff8012f0>
    15d8:	2149883a 	add	r4,r4,r5
    15dc:	2081002c 	andhi	r2,r4,1024
    15e0:	103f8226 	beq	r2,zero,13ec <__alt_data_end+0xff8013ec>
    15e4:	00bf0034 	movhi	r2,64512
    15e8:	10bfffc4 	addi	r2,r2,-1
    15ec:	3021883a 	mov	r16,r6
    15f0:	2088703a 	and	r4,r4,r2
    15f4:	003f3e06 	br	12f0 <__alt_data_end+0xff8012f0>
    15f8:	8000121e 	bne	r16,zero,1644 <__addsf3+0x3b0>
    15fc:	2000261e 	bne	r4,zero,1698 <__addsf3+0x404>
    1600:	283fa226 	beq	r5,zero,148c <__alt_data_end+0xff80148c>
    1604:	2809883a 	mov	r4,r5
    1608:	3823883a 	mov	r17,r7
    160c:	003f3806 	br	12f0 <__alt_data_end+0xff8012f0>
    1610:	01400044 	movi	r5,1
    1614:	003f9006 	br	1458 <__alt_data_end+0xff801458>
    1618:	2809883a 	mov	r4,r5
    161c:	3021883a 	mov	r16,r6
    1620:	3823883a 	mov	r17,r7
    1624:	003f3206 	br	12f0 <__alt_data_end+0xff8012f0>
    1628:	80000c1e 	bne	r16,zero,165c <__addsf3+0x3c8>
    162c:	20002f26 	beq	r4,zero,16ec <__addsf3+0x458>
    1630:	00c6303a 	nor	r3,zero,r3
    1634:	18002b1e 	bne	r3,zero,16e4 <__addsf3+0x450>
    1638:	2149883a 	add	r4,r4,r5
    163c:	3021883a 	mov	r16,r6
    1640:	003f8606 	br	145c <__alt_data_end+0xff80145c>
    1644:	20001b1e 	bne	r4,zero,16b4 <__addsf3+0x420>
    1648:	28003926 	beq	r5,zero,1730 <__addsf3+0x49c>
    164c:	2809883a 	mov	r4,r5
    1650:	3823883a 	mov	r17,r7
    1654:	04003fc4 	movi	r16,255
    1658:	003f2506 	br	12f0 <__alt_data_end+0xff8012f0>
    165c:	01c03fc4 	movi	r7,255
    1660:	31c02226 	beq	r6,r7,16ec <__addsf3+0x458>
    1664:	00c7c83a 	sub	r3,zero,r3
    1668:	21010034 	orhi	r4,r4,1024
    166c:	01c006c4 	movi	r7,27
    1670:	38c03616 	blt	r7,r3,174c <__addsf3+0x4b8>
    1674:	01c00804 	movi	r7,32
    1678:	38cfc83a 	sub	r7,r7,r3
    167c:	21ce983a 	sll	r7,r4,r7
    1680:	20c6d83a 	srl	r3,r4,r3
    1684:	3808c03a 	cmpne	r4,r7,zero
    1688:	1906b03a 	or	r3,r3,r4
    168c:	1949883a 	add	r4,r3,r5
    1690:	3021883a 	mov	r16,r6
    1694:	003f7106 	br	145c <__alt_data_end+0xff80145c>
    1698:	283f1526 	beq	r5,zero,12f0 <__alt_data_end+0xff8012f0>
    169c:	2145c83a 	sub	r2,r4,r5
    16a0:	10c1002c 	andhi	r3,r2,1024
    16a4:	183f4f26 	beq	r3,zero,13e4 <__alt_data_end+0xff8013e4>
    16a8:	2909c83a 	sub	r4,r5,r4
    16ac:	3823883a 	mov	r17,r7
    16b0:	003f0f06 	br	12f0 <__alt_data_end+0xff8012f0>
    16b4:	28001a26 	beq	r5,zero,1720 <__addsf3+0x48c>
    16b8:	2008d0fa 	srli	r4,r4,3
    16bc:	2080102c 	andhi	r2,r4,64
    16c0:	10000526 	beq	r2,zero,16d8 <__addsf3+0x444>
    16c4:	280ad0fa 	srli	r5,r5,3
    16c8:	2880102c 	andhi	r2,r5,64
    16cc:	1000021e 	bne	r2,zero,16d8 <__addsf3+0x444>
    16d0:	2809883a 	mov	r4,r5
    16d4:	3823883a 	mov	r17,r7
    16d8:	200890fa 	slli	r4,r4,3
    16dc:	04003fc4 	movi	r16,255
    16e0:	003f0306 	br	12f0 <__alt_data_end+0xff8012f0>
    16e4:	01c03fc4 	movi	r7,255
    16e8:	31ffe01e 	bne	r6,r7,166c <__alt_data_end+0xff80166c>
    16ec:	2809883a 	mov	r4,r5
    16f0:	3021883a 	mov	r16,r6
    16f4:	003efe06 	br	12f0 <__alt_data_end+0xff8012f0>
    16f8:	20001126 	beq	r4,zero,1740 <__addsf3+0x4ac>
    16fc:	28000826 	beq	r5,zero,1720 <__addsf3+0x48c>
    1700:	2008d0fa 	srli	r4,r4,3
    1704:	2080102c 	andhi	r2,r4,64
    1708:	103ff326 	beq	r2,zero,16d8 <__alt_data_end+0xff8016d8>
    170c:	280ad0fa 	srli	r5,r5,3
    1710:	2880102c 	andhi	r2,r5,64
    1714:	103ff01e 	bne	r2,zero,16d8 <__alt_data_end+0xff8016d8>
    1718:	2809883a 	mov	r4,r5
    171c:	003fee06 	br	16d8 <__alt_data_end+0xff8016d8>
    1720:	04003fc4 	movi	r16,255
    1724:	003ef206 	br	12f0 <__alt_data_end+0xff8012f0>
    1728:	01000044 	movi	r4,1
    172c:	003f9706 	br	158c <__alt_data_end+0xff80158c>
    1730:	0005883a 	mov	r2,zero
    1734:	003f3406 	br	1408 <__alt_data_end+0xff801408>
    1738:	2809883a 	mov	r4,r5
    173c:	003eec06 	br	12f0 <__alt_data_end+0xff8012f0>
    1740:	2809883a 	mov	r4,r5
    1744:	04003fc4 	movi	r16,255
    1748:	003ee906 	br	12f0 <__alt_data_end+0xff8012f0>
    174c:	00c00044 	movi	r3,1
    1750:	003fce06 	br	168c <__alt_data_end+0xff80168c>
    1754:	0005883a 	mov	r2,zero
    1758:	003f4e06 	br	1494 <__alt_data_end+0xff801494>

0000175c <__divsf3>:
    175c:	defff504 	addi	sp,sp,-44
    1760:	200cd5fa 	srli	r6,r4,23
    1764:	dcc00415 	stw	r19,16(sp)
    1768:	2026d7fa 	srli	r19,r4,31
    176c:	00c02034 	movhi	r3,128
    1770:	dd800715 	stw	r22,28(sp)
    1774:	dd000515 	stw	r20,20(sp)
    1778:	dc800315 	stw	r18,12(sp)
    177c:	18ffffc4 	addi	r3,r3,-1
    1780:	dfc00a15 	stw	ra,40(sp)
    1784:	df000915 	stw	fp,36(sp)
    1788:	ddc00815 	stw	r23,32(sp)
    178c:	dd400615 	stw	r21,24(sp)
    1790:	dc400215 	stw	r17,8(sp)
    1794:	dc000115 	stw	r16,4(sp)
    1798:	35003fcc 	andi	r20,r6,255
    179c:	1924703a 	and	r18,r3,r4
    17a0:	9d803fcc 	andi	r22,r19,255
    17a4:	a0005226 	beq	r20,zero,18f0 <__divsf3+0x194>
    17a8:	00803fc4 	movi	r2,255
    17ac:	a0802e26 	beq	r20,r2,1868 <__divsf3+0x10c>
    17b0:	91002034 	orhi	r4,r18,128
    17b4:	202490fa 	slli	r18,r4,3
    17b8:	a53fe044 	addi	r20,r20,-127
    17bc:	0021883a 	mov	r16,zero
    17c0:	002f883a 	mov	r23,zero
    17c4:	280cd5fa 	srli	r6,r5,23
    17c8:	282ad7fa 	srli	r21,r5,31
    17cc:	00c02034 	movhi	r3,128
    17d0:	18ffffc4 	addi	r3,r3,-1
    17d4:	31803fcc 	andi	r6,r6,255
    17d8:	1962703a 	and	r17,r3,r5
    17dc:	af003fcc 	andi	fp,r21,255
    17e0:	30004a26 	beq	r6,zero,190c <__divsf3+0x1b0>
    17e4:	00803fc4 	movi	r2,255
    17e8:	30804526 	beq	r6,r2,1900 <__divsf3+0x1a4>
    17ec:	89402034 	orhi	r5,r17,128
    17f0:	282290fa 	slli	r17,r5,3
    17f4:	31bfe044 	addi	r6,r6,-127
    17f8:	000b883a 	mov	r5,zero
    17fc:	2c20b03a 	or	r16,r5,r16
    1800:	802090ba 	slli	r16,r16,2
    1804:	00800034 	movhi	r2,0
    1808:	10860a04 	addi	r2,r2,6184
    180c:	80a1883a 	add	r16,r16,r2
    1810:	81000017 	ldw	r4,0(r16)
    1814:	9d46f03a 	xor	r3,r19,r21
    1818:	180f883a 	mov	r7,r3
    181c:	18803fcc 	andi	r2,r3,255
    1820:	a18dc83a 	sub	r6,r20,r6
    1824:	2000683a 	jmp	r4
    1828:	00001a0c 	andi	zero,zero,104
    182c:	00001890 	cmplti	zero,zero,98
    1830:	00001a00 	call	1a0 <getAngle+0xac>
    1834:	0000187c 	xorhi	zero,zero,97
    1838:	00001a00 	call	1a0 <getAngle+0xac>
    183c:	000019d8 	cmpnei	zero,zero,103
    1840:	00001a00 	call	1a0 <getAngle+0xac>
    1844:	0000187c 	xorhi	zero,zero,97
    1848:	00001890 	cmplti	zero,zero,98
    184c:	00001890 	cmplti	zero,zero,98
    1850:	000019d8 	cmpnei	zero,zero,103
    1854:	0000187c 	xorhi	zero,zero,97
    1858:	00001aec 	andhi	zero,zero,107
    185c:	00001aec 	andhi	zero,zero,107
    1860:	00001aec 	andhi	zero,zero,107
    1864:	00001aa0 	cmpeqi	zero,zero,106
    1868:	9000581e 	bne	r18,zero,19cc <__divsf3+0x270>
    186c:	04000204 	movi	r16,8
    1870:	05c00084 	movi	r23,2
    1874:	003fd306 	br	17c4 <__alt_data_end+0xff8017c4>
    1878:	0023883a 	mov	r17,zero
    187c:	e02d883a 	mov	r22,fp
    1880:	282f883a 	mov	r23,r5
    1884:	00800084 	movi	r2,2
    1888:	b8808f1e 	bne	r23,r2,1ac8 <__divsf3+0x36c>
    188c:	b005883a 	mov	r2,r22
    1890:	11c0004c 	andi	r7,r2,1
    1894:	013fffc4 	movi	r4,-1
    1898:	000d883a 	mov	r6,zero
    189c:	21003fcc 	andi	r4,r4,255
    18a0:	200895fa 	slli	r4,r4,23
    18a4:	38803fcc 	andi	r2,r7,255
    18a8:	00c02034 	movhi	r3,128
    18ac:	100497fa 	slli	r2,r2,31
    18b0:	18ffffc4 	addi	r3,r3,-1
    18b4:	30c6703a 	and	r3,r6,r3
    18b8:	1906b03a 	or	r3,r3,r4
    18bc:	1884b03a 	or	r2,r3,r2
    18c0:	dfc00a17 	ldw	ra,40(sp)
    18c4:	df000917 	ldw	fp,36(sp)
    18c8:	ddc00817 	ldw	r23,32(sp)
    18cc:	dd800717 	ldw	r22,28(sp)
    18d0:	dd400617 	ldw	r21,24(sp)
    18d4:	dd000517 	ldw	r20,20(sp)
    18d8:	dcc00417 	ldw	r19,16(sp)
    18dc:	dc800317 	ldw	r18,12(sp)
    18e0:	dc400217 	ldw	r17,8(sp)
    18e4:	dc000117 	ldw	r16,4(sp)
    18e8:	dec00b04 	addi	sp,sp,44
    18ec:	f800283a 	ret
    18f0:	90002b1e 	bne	r18,zero,19a0 <__divsf3+0x244>
    18f4:	04000104 	movi	r16,4
    18f8:	05c00044 	movi	r23,1
    18fc:	003fb106 	br	17c4 <__alt_data_end+0xff8017c4>
    1900:	8800251e 	bne	r17,zero,1998 <__divsf3+0x23c>
    1904:	01400084 	movi	r5,2
    1908:	00000206 	br	1914 <__divsf3+0x1b8>
    190c:	88001a1e 	bne	r17,zero,1978 <__divsf3+0x21c>
    1910:	01400044 	movi	r5,1
    1914:	8160b03a 	or	r16,r16,r5
    1918:	802090ba 	slli	r16,r16,2
    191c:	00c00034 	movhi	r3,0
    1920:	18c64e04 	addi	r3,r3,6456
    1924:	80e1883a 	add	r16,r16,r3
    1928:	80c00017 	ldw	r3,0(r16)
    192c:	9d44f03a 	xor	r2,r19,r21
    1930:	a18dc83a 	sub	r6,r20,r6
    1934:	1800683a 	jmp	r3
    1938:	00001890 	cmplti	zero,zero,98
    193c:	00001890 	cmplti	zero,zero,98
    1940:	00001adc 	xori	zero,zero,107
    1944:	00001878 	rdprs	zero,zero,97
    1948:	00001adc 	xori	zero,zero,107
    194c:	000019d8 	cmpnei	zero,zero,103
    1950:	00001adc 	xori	zero,zero,107
    1954:	00001878 	rdprs	zero,zero,97
    1958:	00001890 	cmplti	zero,zero,98
    195c:	00001890 	cmplti	zero,zero,98
    1960:	000019d8 	cmpnei	zero,zero,103
    1964:	00001878 	rdprs	zero,zero,97
    1968:	00001aec 	andhi	zero,zero,107
    196c:	00001aec 	andhi	zero,zero,107
    1970:	00001aec 	andhi	zero,zero,107
    1974:	00001b04 	movi	zero,108
    1978:	8809883a 	mov	r4,r17
    197c:	0004cac0 	call	4cac <__clzsi2>
    1980:	10fffec4 	addi	r3,r2,-5
    1984:	10801d84 	addi	r2,r2,118
    1988:	88e2983a 	sll	r17,r17,r3
    198c:	008dc83a 	sub	r6,zero,r2
    1990:	000b883a 	mov	r5,zero
    1994:	003f9906 	br	17fc <__alt_data_end+0xff8017fc>
    1998:	014000c4 	movi	r5,3
    199c:	003f9706 	br	17fc <__alt_data_end+0xff8017fc>
    19a0:	9009883a 	mov	r4,r18
    19a4:	d9400015 	stw	r5,0(sp)
    19a8:	0004cac0 	call	4cac <__clzsi2>
    19ac:	10fffec4 	addi	r3,r2,-5
    19b0:	11801d84 	addi	r6,r2,118
    19b4:	90e4983a 	sll	r18,r18,r3
    19b8:	01a9c83a 	sub	r20,zero,r6
    19bc:	0021883a 	mov	r16,zero
    19c0:	002f883a 	mov	r23,zero
    19c4:	d9400017 	ldw	r5,0(sp)
    19c8:	003f7e06 	br	17c4 <__alt_data_end+0xff8017c4>
    19cc:	04000304 	movi	r16,12
    19d0:	05c000c4 	movi	r23,3
    19d4:	003f7b06 	br	17c4 <__alt_data_end+0xff8017c4>
    19d8:	01802034 	movhi	r6,128
    19dc:	000f883a 	mov	r7,zero
    19e0:	31bfffc4 	addi	r6,r6,-1
    19e4:	013fffc4 	movi	r4,-1
    19e8:	003fac06 	br	189c <__alt_data_end+0xff80189c>
    19ec:	01400044 	movi	r5,1
    19f0:	2909c83a 	sub	r4,r5,r4
    19f4:	00c006c4 	movi	r3,27
    19f8:	19004b0e 	bge	r3,r4,1b28 <__divsf3+0x3cc>
    19fc:	114e703a 	and	r7,r2,r5
    1a00:	0009883a 	mov	r4,zero
    1a04:	000d883a 	mov	r6,zero
    1a08:	003fa406 	br	189c <__alt_data_end+0xff80189c>
    1a0c:	9006917a 	slli	r3,r18,5
    1a10:	8822917a 	slli	r17,r17,5
    1a14:	1c40372e 	bgeu	r3,r17,1af4 <__divsf3+0x398>
    1a18:	31bfffc4 	addi	r6,r6,-1
    1a1c:	010006c4 	movi	r4,27
    1a20:	000b883a 	mov	r5,zero
    1a24:	180f883a 	mov	r7,r3
    1a28:	294b883a 	add	r5,r5,r5
    1a2c:	18c7883a 	add	r3,r3,r3
    1a30:	38000116 	blt	r7,zero,1a38 <__divsf3+0x2dc>
    1a34:	1c400236 	bltu	r3,r17,1a40 <__divsf3+0x2e4>
    1a38:	1c47c83a 	sub	r3,r3,r17
    1a3c:	29400054 	ori	r5,r5,1
    1a40:	213fffc4 	addi	r4,r4,-1
    1a44:	203ff71e 	bne	r4,zero,1a24 <__alt_data_end+0xff801a24>
    1a48:	1806c03a 	cmpne	r3,r3,zero
    1a4c:	1962b03a 	or	r17,r3,r5
    1a50:	31001fc4 	addi	r4,r6,127
    1a54:	013fe50e 	bge	zero,r4,19ec <__alt_data_end+0xff8019ec>
    1a58:	88c001cc 	andi	r3,r17,7
    1a5c:	18000426 	beq	r3,zero,1a70 <__divsf3+0x314>
    1a60:	88c003cc 	andi	r3,r17,15
    1a64:	01400104 	movi	r5,4
    1a68:	19400126 	beq	r3,r5,1a70 <__divsf3+0x314>
    1a6c:	8963883a 	add	r17,r17,r5
    1a70:	88c2002c 	andhi	r3,r17,2048
    1a74:	18000426 	beq	r3,zero,1a88 <__divsf3+0x32c>
    1a78:	00fe0034 	movhi	r3,63488
    1a7c:	18ffffc4 	addi	r3,r3,-1
    1a80:	31002004 	addi	r4,r6,128
    1a84:	88e2703a 	and	r17,r17,r3
    1a88:	00c03f84 	movi	r3,254
    1a8c:	193f8016 	blt	r3,r4,1890 <__alt_data_end+0xff801890>
    1a90:	880c91ba 	slli	r6,r17,6
    1a94:	11c0004c 	andi	r7,r2,1
    1a98:	300cd27a 	srli	r6,r6,9
    1a9c:	003f7f06 	br	189c <__alt_data_end+0xff80189c>
    1aa0:	9080102c 	andhi	r2,r18,64
    1aa4:	10000226 	beq	r2,zero,1ab0 <__divsf3+0x354>
    1aa8:	8880102c 	andhi	r2,r17,64
    1aac:	10001826 	beq	r2,zero,1b10 <__divsf3+0x3b4>
    1ab0:	00802034 	movhi	r2,128
    1ab4:	91801034 	orhi	r6,r18,64
    1ab8:	10bfffc4 	addi	r2,r2,-1
    1abc:	980f883a 	mov	r7,r19
    1ac0:	308c703a 	and	r6,r6,r2
    1ac4:	003fc706 	br	19e4 <__alt_data_end+0xff8019e4>
    1ac8:	008000c4 	movi	r2,3
    1acc:	b8802d26 	beq	r23,r2,1b84 <__divsf3+0x428>
    1ad0:	00c00044 	movi	r3,1
    1ad4:	b005883a 	mov	r2,r22
    1ad8:	b8ffdd1e 	bne	r23,r3,1a50 <__alt_data_end+0xff801a50>
    1adc:	11c0004c 	andi	r7,r2,1
    1ae0:	0009883a 	mov	r4,zero
    1ae4:	000d883a 	mov	r6,zero
    1ae8:	003f6c06 	br	189c <__alt_data_end+0xff80189c>
    1aec:	9023883a 	mov	r17,r18
    1af0:	003f6406 	br	1884 <__alt_data_end+0xff801884>
    1af4:	1c47c83a 	sub	r3,r3,r17
    1af8:	01000684 	movi	r4,26
    1afc:	01400044 	movi	r5,1
    1b00:	003fc806 	br	1a24 <__alt_data_end+0xff801a24>
    1b04:	9080102c 	andhi	r2,r18,64
    1b08:	103fe926 	beq	r2,zero,1ab0 <__alt_data_end+0xff801ab0>
    1b0c:	0023883a 	mov	r17,zero
    1b10:	00802034 	movhi	r2,128
    1b14:	89801034 	orhi	r6,r17,64
    1b18:	10bfffc4 	addi	r2,r2,-1
    1b1c:	a80f883a 	mov	r7,r21
    1b20:	308c703a 	and	r6,r6,r2
    1b24:	003faf06 	br	19e4 <__alt_data_end+0xff8019e4>
    1b28:	01c00804 	movi	r7,32
    1b2c:	390fc83a 	sub	r7,r7,r4
    1b30:	89ce983a 	sll	r7,r17,r7
    1b34:	890ad83a 	srl	r5,r17,r4
    1b38:	380ec03a 	cmpne	r7,r7,zero
    1b3c:	29cab03a 	or	r5,r5,r7
    1b40:	28c001cc 	andi	r3,r5,7
    1b44:	18000426 	beq	r3,zero,1b58 <__divsf3+0x3fc>
    1b48:	28c003cc 	andi	r3,r5,15
    1b4c:	01000104 	movi	r4,4
    1b50:	19000126 	beq	r3,r4,1b58 <__divsf3+0x3fc>
    1b54:	290b883a 	add	r5,r5,r4
    1b58:	28c1002c 	andhi	r3,r5,1024
    1b5c:	18000426 	beq	r3,zero,1b70 <__divsf3+0x414>
    1b60:	11c0004c 	andi	r7,r2,1
    1b64:	01000044 	movi	r4,1
    1b68:	000d883a 	mov	r6,zero
    1b6c:	003f4b06 	br	189c <__alt_data_end+0xff80189c>
    1b70:	280a91ba 	slli	r5,r5,6
    1b74:	11c0004c 	andi	r7,r2,1
    1b78:	0009883a 	mov	r4,zero
    1b7c:	280cd27a 	srli	r6,r5,9
    1b80:	003f4606 	br	189c <__alt_data_end+0xff80189c>
    1b84:	00802034 	movhi	r2,128
    1b88:	89801034 	orhi	r6,r17,64
    1b8c:	10bfffc4 	addi	r2,r2,-1
    1b90:	b00f883a 	mov	r7,r22
    1b94:	308c703a 	and	r6,r6,r2
    1b98:	003f9206 	br	19e4 <__alt_data_end+0xff8019e4>

00001b9c <__mulsf3>:
    1b9c:	defff504 	addi	sp,sp,-44
    1ba0:	dc000115 	stw	r16,4(sp)
    1ba4:	2020d5fa 	srli	r16,r4,23
    1ba8:	dd400615 	stw	r21,24(sp)
    1bac:	202ad7fa 	srli	r21,r4,31
    1bb0:	dc800315 	stw	r18,12(sp)
    1bb4:	04802034 	movhi	r18,128
    1bb8:	df000915 	stw	fp,36(sp)
    1bbc:	dd000515 	stw	r20,20(sp)
    1bc0:	94bfffc4 	addi	r18,r18,-1
    1bc4:	dfc00a15 	stw	ra,40(sp)
    1bc8:	ddc00815 	stw	r23,32(sp)
    1bcc:	dd800715 	stw	r22,28(sp)
    1bd0:	dcc00415 	stw	r19,16(sp)
    1bd4:	dc400215 	stw	r17,8(sp)
    1bd8:	84003fcc 	andi	r16,r16,255
    1bdc:	9124703a 	and	r18,r18,r4
    1be0:	a829883a 	mov	r20,r21
    1be4:	af003fcc 	andi	fp,r21,255
    1be8:	80005426 	beq	r16,zero,1d3c <__mulsf3+0x1a0>
    1bec:	00803fc4 	movi	r2,255
    1bf0:	80802f26 	beq	r16,r2,1cb0 <__mulsf3+0x114>
    1bf4:	91002034 	orhi	r4,r18,128
    1bf8:	202490fa 	slli	r18,r4,3
    1bfc:	843fe044 	addi	r16,r16,-127
    1c00:	0023883a 	mov	r17,zero
    1c04:	002f883a 	mov	r23,zero
    1c08:	2804d5fa 	srli	r2,r5,23
    1c0c:	282cd7fa 	srli	r22,r5,31
    1c10:	01002034 	movhi	r4,128
    1c14:	213fffc4 	addi	r4,r4,-1
    1c18:	10803fcc 	andi	r2,r2,255
    1c1c:	2166703a 	and	r19,r4,r5
    1c20:	b1803fcc 	andi	r6,r22,255
    1c24:	10004c26 	beq	r2,zero,1d58 <__mulsf3+0x1bc>
    1c28:	00c03fc4 	movi	r3,255
    1c2c:	10c04726 	beq	r2,r3,1d4c <__mulsf3+0x1b0>
    1c30:	99002034 	orhi	r4,r19,128
    1c34:	202690fa 	slli	r19,r4,3
    1c38:	10bfe044 	addi	r2,r2,-127
    1c3c:	0007883a 	mov	r3,zero
    1c40:	80a1883a 	add	r16,r16,r2
    1c44:	010003c4 	movi	r4,15
    1c48:	1c44b03a 	or	r2,r3,r17
    1c4c:	b56af03a 	xor	r21,r22,r21
    1c50:	81c00044 	addi	r7,r16,1
    1c54:	20806b36 	bltu	r4,r2,1e04 <__mulsf3+0x268>
    1c58:	100490ba 	slli	r2,r2,2
    1c5c:	01000034 	movhi	r4,0
    1c60:	21071c04 	addi	r4,r4,7280
    1c64:	1105883a 	add	r2,r2,r4
    1c68:	10800017 	ldw	r2,0(r2)
    1c6c:	1000683a 	jmp	r2
    1c70:	00001e04 	movi	zero,120
    1c74:	00001cc4 	movi	zero,115
    1c78:	00001cc4 	movi	zero,115
    1c7c:	00001cc0 	call	1cc <getAngle+0xd8>
    1c80:	00001de8 	cmpgeui	zero,zero,119
    1c84:	00001de8 	cmpgeui	zero,zero,119
    1c88:	00001dd4 	movui	zero,119
    1c8c:	00001cc0 	call	1cc <getAngle+0xd8>
    1c90:	00001de8 	cmpgeui	zero,zero,119
    1c94:	00001dd4 	movui	zero,119
    1c98:	00001de8 	cmpgeui	zero,zero,119
    1c9c:	00001cc0 	call	1cc <getAngle+0xd8>
    1ca0:	00001df4 	movhi	zero,119
    1ca4:	00001df4 	movhi	zero,119
    1ca8:	00001df4 	movhi	zero,119
    1cac:	00001ed0 	cmplti	zero,zero,123
    1cb0:	90003b1e 	bne	r18,zero,1da0 <__mulsf3+0x204>
    1cb4:	04400204 	movi	r17,8
    1cb8:	05c00084 	movi	r23,2
    1cbc:	003fd206 	br	1c08 <__alt_data_end+0xff801c08>
    1cc0:	302b883a 	mov	r21,r6
    1cc4:	00800084 	movi	r2,2
    1cc8:	18802626 	beq	r3,r2,1d64 <__mulsf3+0x1c8>
    1ccc:	008000c4 	movi	r2,3
    1cd0:	1880ab26 	beq	r3,r2,1f80 <__mulsf3+0x3e4>
    1cd4:	00800044 	movi	r2,1
    1cd8:	1880a21e 	bne	r3,r2,1f64 <__mulsf3+0x3c8>
    1cdc:	a829883a 	mov	r20,r21
    1ce0:	0007883a 	mov	r3,zero
    1ce4:	0009883a 	mov	r4,zero
    1ce8:	18803fcc 	andi	r2,r3,255
    1cec:	100695fa 	slli	r3,r2,23
    1cf0:	a0803fcc 	andi	r2,r20,255
    1cf4:	100a97fa 	slli	r5,r2,31
    1cf8:	00802034 	movhi	r2,128
    1cfc:	10bfffc4 	addi	r2,r2,-1
    1d00:	2084703a 	and	r2,r4,r2
    1d04:	10c4b03a 	or	r2,r2,r3
    1d08:	1144b03a 	or	r2,r2,r5
    1d0c:	dfc00a17 	ldw	ra,40(sp)
    1d10:	df000917 	ldw	fp,36(sp)
    1d14:	ddc00817 	ldw	r23,32(sp)
    1d18:	dd800717 	ldw	r22,28(sp)
    1d1c:	dd400617 	ldw	r21,24(sp)
    1d20:	dd000517 	ldw	r20,20(sp)
    1d24:	dcc00417 	ldw	r19,16(sp)
    1d28:	dc800317 	ldw	r18,12(sp)
    1d2c:	dc400217 	ldw	r17,8(sp)
    1d30:	dc000117 	ldw	r16,4(sp)
    1d34:	dec00b04 	addi	sp,sp,44
    1d38:	f800283a 	ret
    1d3c:	90000d1e 	bne	r18,zero,1d74 <__mulsf3+0x1d8>
    1d40:	04400104 	movi	r17,4
    1d44:	05c00044 	movi	r23,1
    1d48:	003faf06 	br	1c08 <__alt_data_end+0xff801c08>
    1d4c:	9806c03a 	cmpne	r3,r19,zero
    1d50:	18c00084 	addi	r3,r3,2
    1d54:	003fba06 	br	1c40 <__alt_data_end+0xff801c40>
    1d58:	9800141e 	bne	r19,zero,1dac <__mulsf3+0x210>
    1d5c:	00c00044 	movi	r3,1
    1d60:	003fb706 	br	1c40 <__alt_data_end+0xff801c40>
    1d64:	a829883a 	mov	r20,r21
    1d68:	00ffffc4 	movi	r3,-1
    1d6c:	0009883a 	mov	r4,zero
    1d70:	003fdd06 	br	1ce8 <__alt_data_end+0xff801ce8>
    1d74:	9009883a 	mov	r4,r18
    1d78:	d9400015 	stw	r5,0(sp)
    1d7c:	0004cac0 	call	4cac <__clzsi2>
    1d80:	10fffec4 	addi	r3,r2,-5
    1d84:	10801d84 	addi	r2,r2,118
    1d88:	90e4983a 	sll	r18,r18,r3
    1d8c:	00a1c83a 	sub	r16,zero,r2
    1d90:	0023883a 	mov	r17,zero
    1d94:	002f883a 	mov	r23,zero
    1d98:	d9400017 	ldw	r5,0(sp)
    1d9c:	003f9a06 	br	1c08 <__alt_data_end+0xff801c08>
    1da0:	04400304 	movi	r17,12
    1da4:	05c000c4 	movi	r23,3
    1da8:	003f9706 	br	1c08 <__alt_data_end+0xff801c08>
    1dac:	9809883a 	mov	r4,r19
    1db0:	d9800015 	stw	r6,0(sp)
    1db4:	0004cac0 	call	4cac <__clzsi2>
    1db8:	10fffec4 	addi	r3,r2,-5
    1dbc:	10801d84 	addi	r2,r2,118
    1dc0:	98e6983a 	sll	r19,r19,r3
    1dc4:	0085c83a 	sub	r2,zero,r2
    1dc8:	0007883a 	mov	r3,zero
    1dcc:	d9800017 	ldw	r6,0(sp)
    1dd0:	003f9b06 	br	1c40 <__alt_data_end+0xff801c40>
    1dd4:	01002034 	movhi	r4,128
    1dd8:	0029883a 	mov	r20,zero
    1ddc:	213fffc4 	addi	r4,r4,-1
    1de0:	00ffffc4 	movi	r3,-1
    1de4:	003fc006 	br	1ce8 <__alt_data_end+0xff801ce8>
    1de8:	9027883a 	mov	r19,r18
    1dec:	b807883a 	mov	r3,r23
    1df0:	003fb406 	br	1cc4 <__alt_data_end+0xff801cc4>
    1df4:	9027883a 	mov	r19,r18
    1df8:	e02b883a 	mov	r21,fp
    1dfc:	b807883a 	mov	r3,r23
    1e00:	003fb006 	br	1cc4 <__alt_data_end+0xff801cc4>
    1e04:	9004d43a 	srli	r2,r18,16
    1e08:	9810d43a 	srli	r8,r19,16
    1e0c:	94bfffcc 	andi	r18,r18,65535
    1e10:	993fffcc 	andi	r4,r19,65535
    1e14:	910d383a 	mul	r6,r18,r4
    1e18:	20a7383a 	mul	r19,r4,r2
    1e1c:	9225383a 	mul	r18,r18,r8
    1e20:	3006d43a 	srli	r3,r6,16
    1e24:	1211383a 	mul	r8,r2,r8
    1e28:	94e5883a 	add	r18,r18,r19
    1e2c:	1c87883a 	add	r3,r3,r18
    1e30:	1cc0022e 	bgeu	r3,r19,1e3c <__mulsf3+0x2a0>
    1e34:	00800074 	movhi	r2,1
    1e38:	4091883a 	add	r8,r8,r2
    1e3c:	1804943a 	slli	r2,r3,16
    1e40:	31bfffcc 	andi	r6,r6,65535
    1e44:	1806d43a 	srli	r3,r3,16
    1e48:	1185883a 	add	r2,r2,r6
    1e4c:	102691ba 	slli	r19,r2,6
    1e50:	1a07883a 	add	r3,r3,r8
    1e54:	1004d6ba 	srli	r2,r2,26
    1e58:	180891ba 	slli	r4,r3,6
    1e5c:	9826c03a 	cmpne	r19,r19,zero
    1e60:	9884b03a 	or	r2,r19,r2
    1e64:	1126b03a 	or	r19,r2,r4
    1e68:	9882002c 	andhi	r2,r19,2048
    1e6c:	10000426 	beq	r2,zero,1e80 <__mulsf3+0x2e4>
    1e70:	9804d07a 	srli	r2,r19,1
    1e74:	9900004c 	andi	r4,r19,1
    1e78:	3821883a 	mov	r16,r7
    1e7c:	1126b03a 	or	r19,r2,r4
    1e80:	80c01fc4 	addi	r3,r16,127
    1e84:	00c0210e 	bge	zero,r3,1f0c <__mulsf3+0x370>
    1e88:	988001cc 	andi	r2,r19,7
    1e8c:	10000426 	beq	r2,zero,1ea0 <__mulsf3+0x304>
    1e90:	988003cc 	andi	r2,r19,15
    1e94:	01000104 	movi	r4,4
    1e98:	11000126 	beq	r2,r4,1ea0 <__mulsf3+0x304>
    1e9c:	9927883a 	add	r19,r19,r4
    1ea0:	9882002c 	andhi	r2,r19,2048
    1ea4:	10000426 	beq	r2,zero,1eb8 <__mulsf3+0x31c>
    1ea8:	00be0034 	movhi	r2,63488
    1eac:	10bfffc4 	addi	r2,r2,-1
    1eb0:	80c02004 	addi	r3,r16,128
    1eb4:	98a6703a 	and	r19,r19,r2
    1eb8:	00803f84 	movi	r2,254
    1ebc:	10ffa916 	blt	r2,r3,1d64 <__alt_data_end+0xff801d64>
    1ec0:	980891ba 	slli	r4,r19,6
    1ec4:	a829883a 	mov	r20,r21
    1ec8:	2008d27a 	srli	r4,r4,9
    1ecc:	003f8606 	br	1ce8 <__alt_data_end+0xff801ce8>
    1ed0:	9080102c 	andhi	r2,r18,64
    1ed4:	10000826 	beq	r2,zero,1ef8 <__mulsf3+0x35c>
    1ed8:	9880102c 	andhi	r2,r19,64
    1edc:	1000061e 	bne	r2,zero,1ef8 <__mulsf3+0x35c>
    1ee0:	00802034 	movhi	r2,128
    1ee4:	99001034 	orhi	r4,r19,64
    1ee8:	10bfffc4 	addi	r2,r2,-1
    1eec:	b029883a 	mov	r20,r22
    1ef0:	2088703a 	and	r4,r4,r2
    1ef4:	003fba06 	br	1de0 <__alt_data_end+0xff801de0>
    1ef8:	00802034 	movhi	r2,128
    1efc:	91001034 	orhi	r4,r18,64
    1f00:	10bfffc4 	addi	r2,r2,-1
    1f04:	2088703a 	and	r4,r4,r2
    1f08:	003fb506 	br	1de0 <__alt_data_end+0xff801de0>
    1f0c:	00800044 	movi	r2,1
    1f10:	10c7c83a 	sub	r3,r2,r3
    1f14:	008006c4 	movi	r2,27
    1f18:	10ff7016 	blt	r2,r3,1cdc <__alt_data_end+0xff801cdc>
    1f1c:	00800804 	movi	r2,32
    1f20:	10c5c83a 	sub	r2,r2,r3
    1f24:	9884983a 	sll	r2,r19,r2
    1f28:	98c6d83a 	srl	r3,r19,r3
    1f2c:	1004c03a 	cmpne	r2,r2,zero
    1f30:	1884b03a 	or	r2,r3,r2
    1f34:	10c001cc 	andi	r3,r2,7
    1f38:	18000426 	beq	r3,zero,1f4c <__mulsf3+0x3b0>
    1f3c:	10c003cc 	andi	r3,r2,15
    1f40:	01000104 	movi	r4,4
    1f44:	19000126 	beq	r3,r4,1f4c <__mulsf3+0x3b0>
    1f48:	1105883a 	add	r2,r2,r4
    1f4c:	10c1002c 	andhi	r3,r2,1024
    1f50:	18000626 	beq	r3,zero,1f6c <__mulsf3+0x3d0>
    1f54:	a829883a 	mov	r20,r21
    1f58:	00c00044 	movi	r3,1
    1f5c:	0009883a 	mov	r4,zero
    1f60:	003f6106 	br	1ce8 <__alt_data_end+0xff801ce8>
    1f64:	3821883a 	mov	r16,r7
    1f68:	003fc506 	br	1e80 <__alt_data_end+0xff801e80>
    1f6c:	100491ba 	slli	r2,r2,6
    1f70:	a829883a 	mov	r20,r21
    1f74:	0007883a 	mov	r3,zero
    1f78:	1008d27a 	srli	r4,r2,9
    1f7c:	003f5a06 	br	1ce8 <__alt_data_end+0xff801ce8>
    1f80:	00802034 	movhi	r2,128
    1f84:	99001034 	orhi	r4,r19,64
    1f88:	10bfffc4 	addi	r2,r2,-1
    1f8c:	a829883a 	mov	r20,r21
    1f90:	2088703a 	and	r4,r4,r2
    1f94:	003f9206 	br	1de0 <__alt_data_end+0xff801de0>

00001f98 <__subsf3>:
    1f98:	defffc04 	addi	sp,sp,-16
    1f9c:	280cd5fa 	srli	r6,r5,23
    1fa0:	dc000015 	stw	r16,0(sp)
    1fa4:	01c02034 	movhi	r7,128
    1fa8:	2020d5fa 	srli	r16,r4,23
    1fac:	39ffffc4 	addi	r7,r7,-1
    1fb0:	3906703a 	and	r3,r7,r4
    1fb4:	dc400115 	stw	r17,4(sp)
    1fb8:	394e703a 	and	r7,r7,r5
    1fbc:	2022d7fa 	srli	r17,r4,31
    1fc0:	dfc00315 	stw	ra,12(sp)
    1fc4:	dc800215 	stw	r18,8(sp)
    1fc8:	31803fcc 	andi	r6,r6,255
    1fcc:	01003fc4 	movi	r4,255
    1fd0:	84003fcc 	andi	r16,r16,255
    1fd4:	180690fa 	slli	r3,r3,3
    1fd8:	2804d7fa 	srli	r2,r5,31
    1fdc:	380e90fa 	slli	r7,r7,3
    1fe0:	31006d26 	beq	r6,r4,2198 <__subsf3+0x200>
    1fe4:	1080005c 	xori	r2,r2,1
    1fe8:	8189c83a 	sub	r4,r16,r6
    1fec:	14404f26 	beq	r2,r17,212c <__subsf3+0x194>
    1ff0:	0100770e 	bge	zero,r4,21d0 <__subsf3+0x238>
    1ff4:	30001e1e 	bne	r6,zero,2070 <__subsf3+0xd8>
    1ff8:	38006a1e 	bne	r7,zero,21a4 <__subsf3+0x20c>
    1ffc:	188001cc 	andi	r2,r3,7
    2000:	10000426 	beq	r2,zero,2014 <__subsf3+0x7c>
    2004:	188003cc 	andi	r2,r3,15
    2008:	01000104 	movi	r4,4
    200c:	11000126 	beq	r2,r4,2014 <__subsf3+0x7c>
    2010:	1907883a 	add	r3,r3,r4
    2014:	1881002c 	andhi	r2,r3,1024
    2018:	10003926 	beq	r2,zero,2100 <__subsf3+0x168>
    201c:	84000044 	addi	r16,r16,1
    2020:	00803fc4 	movi	r2,255
    2024:	80807526 	beq	r16,r2,21fc <__subsf3+0x264>
    2028:	180691ba 	slli	r3,r3,6
    202c:	8880004c 	andi	r2,r17,1
    2030:	180ad27a 	srli	r5,r3,9
    2034:	84003fcc 	andi	r16,r16,255
    2038:	800695fa 	slli	r3,r16,23
    203c:	10803fcc 	andi	r2,r2,255
    2040:	01002034 	movhi	r4,128
    2044:	213fffc4 	addi	r4,r4,-1
    2048:	100497fa 	slli	r2,r2,31
    204c:	2920703a 	and	r16,r5,r4
    2050:	80e0b03a 	or	r16,r16,r3
    2054:	8084b03a 	or	r2,r16,r2
    2058:	dfc00317 	ldw	ra,12(sp)
    205c:	dc800217 	ldw	r18,8(sp)
    2060:	dc400117 	ldw	r17,4(sp)
    2064:	dc000017 	ldw	r16,0(sp)
    2068:	dec00404 	addi	sp,sp,16
    206c:	f800283a 	ret
    2070:	00803fc4 	movi	r2,255
    2074:	80bfe126 	beq	r16,r2,1ffc <__alt_data_end+0xff801ffc>
    2078:	39c10034 	orhi	r7,r7,1024
    207c:	008006c4 	movi	r2,27
    2080:	11007416 	blt	r2,r4,2254 <__subsf3+0x2bc>
    2084:	00800804 	movi	r2,32
    2088:	1105c83a 	sub	r2,r2,r4
    208c:	3884983a 	sll	r2,r7,r2
    2090:	390ed83a 	srl	r7,r7,r4
    2094:	1008c03a 	cmpne	r4,r2,zero
    2098:	390eb03a 	or	r7,r7,r4
    209c:	19c7c83a 	sub	r3,r3,r7
    20a0:	1881002c 	andhi	r2,r3,1024
    20a4:	10001426 	beq	r2,zero,20f8 <__subsf3+0x160>
    20a8:	04810034 	movhi	r18,1024
    20ac:	94bfffc4 	addi	r18,r18,-1
    20b0:	1ca4703a 	and	r18,r3,r18
    20b4:	9009883a 	mov	r4,r18
    20b8:	0004cac0 	call	4cac <__clzsi2>
    20bc:	10bffec4 	addi	r2,r2,-5
    20c0:	90a4983a 	sll	r18,r18,r2
    20c4:	14005116 	blt	r2,r16,220c <__subsf3+0x274>
    20c8:	1405c83a 	sub	r2,r2,r16
    20cc:	10c00044 	addi	r3,r2,1
    20d0:	00800804 	movi	r2,32
    20d4:	10c5c83a 	sub	r2,r2,r3
    20d8:	9084983a 	sll	r2,r18,r2
    20dc:	90e4d83a 	srl	r18,r18,r3
    20e0:	0021883a 	mov	r16,zero
    20e4:	1006c03a 	cmpne	r3,r2,zero
    20e8:	90c6b03a 	or	r3,r18,r3
    20ec:	003fc306 	br	1ffc <__alt_data_end+0xff801ffc>
    20f0:	2000e026 	beq	r4,zero,2474 <__subsf3+0x4dc>
    20f4:	2007883a 	mov	r3,r4
    20f8:	188001cc 	andi	r2,r3,7
    20fc:	103fc11e 	bne	r2,zero,2004 <__alt_data_end+0xff802004>
    2100:	180ad0fa 	srli	r5,r3,3
    2104:	00c03fc4 	movi	r3,255
    2108:	8880004c 	andi	r2,r17,1
    210c:	80c0031e 	bne	r16,r3,211c <__subsf3+0x184>
    2110:	28006d26 	beq	r5,zero,22c8 <__subsf3+0x330>
    2114:	29401034 	orhi	r5,r5,64
    2118:	043fffc4 	movi	r16,-1
    211c:	00c02034 	movhi	r3,128
    2120:	18ffffc4 	addi	r3,r3,-1
    2124:	28ca703a 	and	r5,r5,r3
    2128:	003fc206 	br	2034 <__alt_data_end+0xff802034>
    212c:	01003c0e 	bge	zero,r4,2220 <__subsf3+0x288>
    2130:	30002126 	beq	r6,zero,21b8 <__subsf3+0x220>
    2134:	01403fc4 	movi	r5,255
    2138:	817fb026 	beq	r16,r5,1ffc <__alt_data_end+0xff801ffc>
    213c:	39c10034 	orhi	r7,r7,1024
    2140:	014006c4 	movi	r5,27
    2144:	29007416 	blt	r5,r4,2318 <__subsf3+0x380>
    2148:	01400804 	movi	r5,32
    214c:	290bc83a 	sub	r5,r5,r4
    2150:	394a983a 	sll	r5,r7,r5
    2154:	390ed83a 	srl	r7,r7,r4
    2158:	2808c03a 	cmpne	r4,r5,zero
    215c:	390eb03a 	or	r7,r7,r4
    2160:	19c7883a 	add	r3,r3,r7
    2164:	1901002c 	andhi	r4,r3,1024
    2168:	20003826 	beq	r4,zero,224c <__subsf3+0x2b4>
    216c:	84000044 	addi	r16,r16,1
    2170:	01003fc4 	movi	r4,255
    2174:	81005426 	beq	r16,r4,22c8 <__subsf3+0x330>
    2178:	1023883a 	mov	r17,r2
    217c:	00bf0034 	movhi	r2,64512
    2180:	10bfffc4 	addi	r2,r2,-1
    2184:	1900004c 	andi	r4,r3,1
    2188:	1886703a 	and	r3,r3,r2
    218c:	1806d07a 	srli	r3,r3,1
    2190:	1906b03a 	or	r3,r3,r4
    2194:	003f9906 	br	1ffc <__alt_data_end+0xff801ffc>
    2198:	383f9226 	beq	r7,zero,1fe4 <__alt_data_end+0xff801fe4>
    219c:	10803fcc 	andi	r2,r2,255
    21a0:	003f9106 	br	1fe8 <__alt_data_end+0xff801fe8>
    21a4:	213fffc4 	addi	r4,r4,-1
    21a8:	203fbc26 	beq	r4,zero,209c <__alt_data_end+0xff80209c>
    21ac:	00803fc4 	movi	r2,255
    21b0:	80bfb21e 	bne	r16,r2,207c <__alt_data_end+0xff80207c>
    21b4:	003f9106 	br	1ffc <__alt_data_end+0xff801ffc>
    21b8:	383f9026 	beq	r7,zero,1ffc <__alt_data_end+0xff801ffc>
    21bc:	213fffc4 	addi	r4,r4,-1
    21c0:	203fe726 	beq	r4,zero,2160 <__alt_data_end+0xff802160>
    21c4:	01403fc4 	movi	r5,255
    21c8:	817fdd1e 	bne	r16,r5,2140 <__alt_data_end+0xff802140>
    21cc:	003f8b06 	br	1ffc <__alt_data_end+0xff801ffc>
    21d0:	2000221e 	bne	r4,zero,225c <__subsf3+0x2c4>
    21d4:	81000044 	addi	r4,r16,1
    21d8:	21003fcc 	andi	r4,r4,255
    21dc:	01400044 	movi	r5,1
    21e0:	2900470e 	bge	r5,r4,2300 <__subsf3+0x368>
    21e4:	19e5c83a 	sub	r18,r3,r7
    21e8:	9141002c 	andhi	r5,r18,1024
    21ec:	28002d26 	beq	r5,zero,22a4 <__subsf3+0x30c>
    21f0:	38e5c83a 	sub	r18,r7,r3
    21f4:	1023883a 	mov	r17,r2
    21f8:	003fae06 	br	20b4 <__alt_data_end+0xff8020b4>
    21fc:	8880004c 	andi	r2,r17,1
    2200:	043fffc4 	movi	r16,-1
    2204:	000b883a 	mov	r5,zero
    2208:	003f8a06 	br	2034 <__alt_data_end+0xff802034>
    220c:	00ff0034 	movhi	r3,64512
    2210:	18ffffc4 	addi	r3,r3,-1
    2214:	80a1c83a 	sub	r16,r16,r2
    2218:	90c6703a 	and	r3,r18,r3
    221c:	003f7706 	br	1ffc <__alt_data_end+0xff801ffc>
    2220:	2000431e 	bne	r4,zero,2330 <__subsf3+0x398>
    2224:	81000044 	addi	r4,r16,1
    2228:	21803fcc 	andi	r6,r4,255
    222c:	01400044 	movi	r5,1
    2230:	2980280e 	bge	r5,r6,22d4 <__subsf3+0x33c>
    2234:	01403fc4 	movi	r5,255
    2238:	21402326 	beq	r4,r5,22c8 <__subsf3+0x330>
    223c:	19c7883a 	add	r3,r3,r7
    2240:	1806d07a 	srli	r3,r3,1
    2244:	2021883a 	mov	r16,r4
    2248:	003f6c06 	br	1ffc <__alt_data_end+0xff801ffc>
    224c:	1023883a 	mov	r17,r2
    2250:	003fa906 	br	20f8 <__alt_data_end+0xff8020f8>
    2254:	01c00044 	movi	r7,1
    2258:	003f9006 	br	209c <__alt_data_end+0xff80209c>
    225c:	8000151e 	bne	r16,zero,22b4 <__subsf3+0x31c>
    2260:	18002f26 	beq	r3,zero,2320 <__subsf3+0x388>
    2264:	0108303a 	nor	r4,zero,r4
    2268:	20000a26 	beq	r4,zero,2294 <__subsf3+0x2fc>
    226c:	01403fc4 	movi	r5,255
    2270:	31402b26 	beq	r6,r5,2320 <__subsf3+0x388>
    2274:	014006c4 	movi	r5,27
    2278:	29006e16 	blt	r5,r4,2434 <__subsf3+0x49c>
    227c:	01400804 	movi	r5,32
    2280:	290bc83a 	sub	r5,r5,r4
    2284:	194a983a 	sll	r5,r3,r5
    2288:	1908d83a 	srl	r4,r3,r4
    228c:	2806c03a 	cmpne	r3,r5,zero
    2290:	20c6b03a 	or	r3,r4,r3
    2294:	38c7c83a 	sub	r3,r7,r3
    2298:	3021883a 	mov	r16,r6
    229c:	1023883a 	mov	r17,r2
    22a0:	003f7f06 	br	20a0 <__alt_data_end+0xff8020a0>
    22a4:	903f831e 	bne	r18,zero,20b4 <__alt_data_end+0xff8020b4>
    22a8:	0005883a 	mov	r2,zero
    22ac:	0021883a 	mov	r16,zero
    22b0:	003f9a06 	br	211c <__alt_data_end+0xff80211c>
    22b4:	01403fc4 	movi	r5,255
    22b8:	31401926 	beq	r6,r5,2320 <__subsf3+0x388>
    22bc:	0109c83a 	sub	r4,zero,r4
    22c0:	18c10034 	orhi	r3,r3,1024
    22c4:	003feb06 	br	2274 <__alt_data_end+0xff802274>
    22c8:	043fffc4 	movi	r16,-1
    22cc:	000b883a 	mov	r5,zero
    22d0:	003f5806 	br	2034 <__alt_data_end+0xff802034>
    22d4:	8000481e 	bne	r16,zero,23f8 <__subsf3+0x460>
    22d8:	18006226 	beq	r3,zero,2464 <__subsf3+0x4cc>
    22dc:	383f4726 	beq	r7,zero,1ffc <__alt_data_end+0xff801ffc>
    22e0:	19c7883a 	add	r3,r3,r7
    22e4:	1881002c 	andhi	r2,r3,1024
    22e8:	103f8326 	beq	r2,zero,20f8 <__alt_data_end+0xff8020f8>
    22ec:	00bf0034 	movhi	r2,64512
    22f0:	10bfffc4 	addi	r2,r2,-1
    22f4:	2821883a 	mov	r16,r5
    22f8:	1886703a 	and	r3,r3,r2
    22fc:	003f3f06 	br	1ffc <__alt_data_end+0xff801ffc>
    2300:	80001c1e 	bne	r16,zero,2374 <__subsf3+0x3dc>
    2304:	1800261e 	bne	r3,zero,23a0 <__subsf3+0x408>
    2308:	38004c26 	beq	r7,zero,243c <__subsf3+0x4a4>
    230c:	3807883a 	mov	r3,r7
    2310:	1023883a 	mov	r17,r2
    2314:	003f3906 	br	1ffc <__alt_data_end+0xff801ffc>
    2318:	01c00044 	movi	r7,1
    231c:	003f9006 	br	2160 <__alt_data_end+0xff802160>
    2320:	3807883a 	mov	r3,r7
    2324:	3021883a 	mov	r16,r6
    2328:	1023883a 	mov	r17,r2
    232c:	003f3306 	br	1ffc <__alt_data_end+0xff801ffc>
    2330:	8000161e 	bne	r16,zero,238c <__subsf3+0x3f4>
    2334:	18002d26 	beq	r3,zero,23ec <__subsf3+0x454>
    2338:	0108303a 	nor	r4,zero,r4
    233c:	20000a26 	beq	r4,zero,2368 <__subsf3+0x3d0>
    2340:	01403fc4 	movi	r5,255
    2344:	31402926 	beq	r6,r5,23ec <__subsf3+0x454>
    2348:	014006c4 	movi	r5,27
    234c:	29004716 	blt	r5,r4,246c <__subsf3+0x4d4>
    2350:	01400804 	movi	r5,32
    2354:	290bc83a 	sub	r5,r5,r4
    2358:	194a983a 	sll	r5,r3,r5
    235c:	1908d83a 	srl	r4,r3,r4
    2360:	2806c03a 	cmpne	r3,r5,zero
    2364:	20c6b03a 	or	r3,r4,r3
    2368:	19c7883a 	add	r3,r3,r7
    236c:	3021883a 	mov	r16,r6
    2370:	003f7c06 	br	2164 <__alt_data_end+0xff802164>
    2374:	1800111e 	bne	r3,zero,23bc <__subsf3+0x424>
    2378:	38003326 	beq	r7,zero,2448 <__subsf3+0x4b0>
    237c:	3807883a 	mov	r3,r7
    2380:	1023883a 	mov	r17,r2
    2384:	04003fc4 	movi	r16,255
    2388:	003f1c06 	br	1ffc <__alt_data_end+0xff801ffc>
    238c:	01403fc4 	movi	r5,255
    2390:	31401626 	beq	r6,r5,23ec <__subsf3+0x454>
    2394:	0109c83a 	sub	r4,zero,r4
    2398:	18c10034 	orhi	r3,r3,1024
    239c:	003fea06 	br	2348 <__alt_data_end+0xff802348>
    23a0:	383f1626 	beq	r7,zero,1ffc <__alt_data_end+0xff801ffc>
    23a4:	19c9c83a 	sub	r4,r3,r7
    23a8:	2141002c 	andhi	r5,r4,1024
    23ac:	283f5026 	beq	r5,zero,20f0 <__alt_data_end+0xff8020f0>
    23b0:	38c7c83a 	sub	r3,r7,r3
    23b4:	1023883a 	mov	r17,r2
    23b8:	003f1006 	br	1ffc <__alt_data_end+0xff801ffc>
    23bc:	38001b26 	beq	r7,zero,242c <__subsf3+0x494>
    23c0:	1806d0fa 	srli	r3,r3,3
    23c4:	1900102c 	andhi	r4,r3,64
    23c8:	20000526 	beq	r4,zero,23e0 <__subsf3+0x448>
    23cc:	380ed0fa 	srli	r7,r7,3
    23d0:	3900102c 	andhi	r4,r7,64
    23d4:	2000021e 	bne	r4,zero,23e0 <__subsf3+0x448>
    23d8:	3807883a 	mov	r3,r7
    23dc:	1023883a 	mov	r17,r2
    23e0:	180690fa 	slli	r3,r3,3
    23e4:	04003fc4 	movi	r16,255
    23e8:	003f0406 	br	1ffc <__alt_data_end+0xff801ffc>
    23ec:	3807883a 	mov	r3,r7
    23f0:	3021883a 	mov	r16,r6
    23f4:	003f0106 	br	1ffc <__alt_data_end+0xff801ffc>
    23f8:	18001726 	beq	r3,zero,2458 <__subsf3+0x4c0>
    23fc:	38000b26 	beq	r7,zero,242c <__subsf3+0x494>
    2400:	1806d0fa 	srli	r3,r3,3
    2404:	1900102c 	andhi	r4,r3,64
    2408:	20000426 	beq	r4,zero,241c <__subsf3+0x484>
    240c:	380ed0fa 	srli	r7,r7,3
    2410:	3900102c 	andhi	r4,r7,64
    2414:	2000011e 	bne	r4,zero,241c <__subsf3+0x484>
    2418:	3807883a 	mov	r3,r7
    241c:	180690fa 	slli	r3,r3,3
    2420:	1023883a 	mov	r17,r2
    2424:	04003fc4 	movi	r16,255
    2428:	003ef406 	br	1ffc <__alt_data_end+0xff801ffc>
    242c:	04003fc4 	movi	r16,255
    2430:	003ef206 	br	1ffc <__alt_data_end+0xff801ffc>
    2434:	00c00044 	movi	r3,1
    2438:	003f9606 	br	2294 <__alt_data_end+0xff802294>
    243c:	000b883a 	mov	r5,zero
    2440:	0005883a 	mov	r2,zero
    2444:	003f3506 	br	211c <__alt_data_end+0xff80211c>
    2448:	01402034 	movhi	r5,128
    244c:	297fffc4 	addi	r5,r5,-1
    2450:	0005883a 	mov	r2,zero
    2454:	003f2f06 	br	2114 <__alt_data_end+0xff802114>
    2458:	3807883a 	mov	r3,r7
    245c:	04003fc4 	movi	r16,255
    2460:	003ee606 	br	1ffc <__alt_data_end+0xff801ffc>
    2464:	3807883a 	mov	r3,r7
    2468:	003ee406 	br	1ffc <__alt_data_end+0xff801ffc>
    246c:	00c00044 	movi	r3,1
    2470:	003fbd06 	br	2368 <__alt_data_end+0xff802368>
    2474:	0005883a 	mov	r2,zero
    2478:	003f2806 	br	211c <__alt_data_end+0xff80211c>

0000247c <__floatsisf>:
    247c:	defffd04 	addi	sp,sp,-12
    2480:	dfc00215 	stw	ra,8(sp)
    2484:	dc400115 	stw	r17,4(sp)
    2488:	dc000015 	stw	r16,0(sp)
    248c:	20003526 	beq	r4,zero,2564 <__floatsisf+0xe8>
    2490:	2021883a 	mov	r16,r4
    2494:	2022d7fa 	srli	r17,r4,31
    2498:	20003616 	blt	r4,zero,2574 <__floatsisf+0xf8>
    249c:	8009883a 	mov	r4,r16
    24a0:	0004cac0 	call	4cac <__clzsi2>
    24a4:	00c02784 	movi	r3,158
    24a8:	1887c83a 	sub	r3,r3,r2
    24ac:	01002584 	movi	r4,150
    24b0:	20c01416 	blt	r4,r3,2504 <__floatsisf+0x88>
    24b4:	20c9c83a 	sub	r4,r4,r3
    24b8:	8120983a 	sll	r16,r16,r4
    24bc:	00802034 	movhi	r2,128
    24c0:	10bfffc4 	addi	r2,r2,-1
    24c4:	8809883a 	mov	r4,r17
    24c8:	80a0703a 	and	r16,r16,r2
    24cc:	18803fcc 	andi	r2,r3,255
    24d0:	100695fa 	slli	r3,r2,23
    24d4:	20803fcc 	andi	r2,r4,255
    24d8:	100897fa 	slli	r4,r2,31
    24dc:	00802034 	movhi	r2,128
    24e0:	10bfffc4 	addi	r2,r2,-1
    24e4:	8084703a 	and	r2,r16,r2
    24e8:	10c4b03a 	or	r2,r2,r3
    24ec:	1104b03a 	or	r2,r2,r4
    24f0:	dfc00217 	ldw	ra,8(sp)
    24f4:	dc400117 	ldw	r17,4(sp)
    24f8:	dc000017 	ldw	r16,0(sp)
    24fc:	dec00304 	addi	sp,sp,12
    2500:	f800283a 	ret
    2504:	01002644 	movi	r4,153
    2508:	20c01c16 	blt	r4,r3,257c <__floatsisf+0x100>
    250c:	20c9c83a 	sub	r4,r4,r3
    2510:	8120983a 	sll	r16,r16,r4
    2514:	013f0034 	movhi	r4,64512
    2518:	213fffc4 	addi	r4,r4,-1
    251c:	814001cc 	andi	r5,r16,7
    2520:	8108703a 	and	r4,r16,r4
    2524:	28000426 	beq	r5,zero,2538 <__floatsisf+0xbc>
    2528:	840003cc 	andi	r16,r16,15
    252c:	01400104 	movi	r5,4
    2530:	81400126 	beq	r16,r5,2538 <__floatsisf+0xbc>
    2534:	2149883a 	add	r4,r4,r5
    2538:	2141002c 	andhi	r5,r4,1024
    253c:	28000526 	beq	r5,zero,2554 <__floatsisf+0xd8>
    2540:	00c027c4 	movi	r3,159
    2544:	1887c83a 	sub	r3,r3,r2
    2548:	00bf0034 	movhi	r2,64512
    254c:	10bfffc4 	addi	r2,r2,-1
    2550:	2088703a 	and	r4,r4,r2
    2554:	202091ba 	slli	r16,r4,6
    2558:	8809883a 	mov	r4,r17
    255c:	8020d27a 	srli	r16,r16,9
    2560:	003fda06 	br	24cc <__alt_data_end+0xff8024cc>
    2564:	0009883a 	mov	r4,zero
    2568:	0007883a 	mov	r3,zero
    256c:	0021883a 	mov	r16,zero
    2570:	003fd606 	br	24cc <__alt_data_end+0xff8024cc>
    2574:	0121c83a 	sub	r16,zero,r4
    2578:	003fc806 	br	249c <__alt_data_end+0xff80249c>
    257c:	01002e44 	movi	r4,185
    2580:	20c9c83a 	sub	r4,r4,r3
    2584:	01400144 	movi	r5,5
    2588:	8108983a 	sll	r4,r16,r4
    258c:	288bc83a 	sub	r5,r5,r2
    2590:	8160d83a 	srl	r16,r16,r5
    2594:	2008c03a 	cmpne	r4,r4,zero
    2598:	8120b03a 	or	r16,r16,r4
    259c:	003fdd06 	br	2514 <__alt_data_end+0xff802514>

000025a0 <__adddf3>:
    25a0:	02c00434 	movhi	r11,16
    25a4:	5affffc4 	addi	r11,r11,-1
    25a8:	2806d7fa 	srli	r3,r5,31
    25ac:	2ad4703a 	and	r10,r5,r11
    25b0:	3ad2703a 	and	r9,r7,r11
    25b4:	3804d53a 	srli	r2,r7,20
    25b8:	3018d77a 	srli	r12,r6,29
    25bc:	280ad53a 	srli	r5,r5,20
    25c0:	501490fa 	slli	r10,r10,3
    25c4:	2010d77a 	srli	r8,r4,29
    25c8:	481290fa 	slli	r9,r9,3
    25cc:	380ed7fa 	srli	r7,r7,31
    25d0:	defffb04 	addi	sp,sp,-20
    25d4:	dc800215 	stw	r18,8(sp)
    25d8:	dc400115 	stw	r17,4(sp)
    25dc:	dc000015 	stw	r16,0(sp)
    25e0:	dfc00415 	stw	ra,16(sp)
    25e4:	dcc00315 	stw	r19,12(sp)
    25e8:	1c803fcc 	andi	r18,r3,255
    25ec:	2c01ffcc 	andi	r16,r5,2047
    25f0:	5210b03a 	or	r8,r10,r8
    25f4:	202290fa 	slli	r17,r4,3
    25f8:	1081ffcc 	andi	r2,r2,2047
    25fc:	4b12b03a 	or	r9,r9,r12
    2600:	300c90fa 	slli	r6,r6,3
    2604:	91c07526 	beq	r18,r7,27dc <__adddf3+0x23c>
    2608:	8087c83a 	sub	r3,r16,r2
    260c:	00c0ab0e 	bge	zero,r3,28bc <__adddf3+0x31c>
    2610:	10002a1e 	bne	r2,zero,26bc <__adddf3+0x11c>
    2614:	4984b03a 	or	r2,r9,r6
    2618:	1000961e 	bne	r2,zero,2874 <__adddf3+0x2d4>
    261c:	888001cc 	andi	r2,r17,7
    2620:	10000726 	beq	r2,zero,2640 <__adddf3+0xa0>
    2624:	888003cc 	andi	r2,r17,15
    2628:	00c00104 	movi	r3,4
    262c:	10c00426 	beq	r2,r3,2640 <__adddf3+0xa0>
    2630:	88c7883a 	add	r3,r17,r3
    2634:	1c63803a 	cmpltu	r17,r3,r17
    2638:	4451883a 	add	r8,r8,r17
    263c:	1823883a 	mov	r17,r3
    2640:	4080202c 	andhi	r2,r8,128
    2644:	10005926 	beq	r2,zero,27ac <__adddf3+0x20c>
    2648:	84000044 	addi	r16,r16,1
    264c:	0081ffc4 	movi	r2,2047
    2650:	8080ba26 	beq	r16,r2,293c <__adddf3+0x39c>
    2654:	00bfe034 	movhi	r2,65408
    2658:	10bfffc4 	addi	r2,r2,-1
    265c:	4090703a 	and	r8,r8,r2
    2660:	4004977a 	slli	r2,r8,29
    2664:	4010927a 	slli	r8,r8,9
    2668:	8822d0fa 	srli	r17,r17,3
    266c:	8401ffcc 	andi	r16,r16,2047
    2670:	4010d33a 	srli	r8,r8,12
    2674:	9007883a 	mov	r3,r18
    2678:	1444b03a 	or	r2,r2,r17
    267c:	8401ffcc 	andi	r16,r16,2047
    2680:	8020953a 	slli	r16,r16,20
    2684:	18c03fcc 	andi	r3,r3,255
    2688:	01000434 	movhi	r4,16
    268c:	213fffc4 	addi	r4,r4,-1
    2690:	180697fa 	slli	r3,r3,31
    2694:	4110703a 	and	r8,r8,r4
    2698:	4410b03a 	or	r8,r8,r16
    269c:	40c6b03a 	or	r3,r8,r3
    26a0:	dfc00417 	ldw	ra,16(sp)
    26a4:	dcc00317 	ldw	r19,12(sp)
    26a8:	dc800217 	ldw	r18,8(sp)
    26ac:	dc400117 	ldw	r17,4(sp)
    26b0:	dc000017 	ldw	r16,0(sp)
    26b4:	dec00504 	addi	sp,sp,20
    26b8:	f800283a 	ret
    26bc:	0081ffc4 	movi	r2,2047
    26c0:	80bfd626 	beq	r16,r2,261c <__alt_data_end+0xff80261c>
    26c4:	4a402034 	orhi	r9,r9,128
    26c8:	00800e04 	movi	r2,56
    26cc:	10c09f16 	blt	r2,r3,294c <__adddf3+0x3ac>
    26d0:	008007c4 	movi	r2,31
    26d4:	10c0c216 	blt	r2,r3,29e0 <__adddf3+0x440>
    26d8:	00800804 	movi	r2,32
    26dc:	10c5c83a 	sub	r2,r2,r3
    26e0:	488a983a 	sll	r5,r9,r2
    26e4:	30c8d83a 	srl	r4,r6,r3
    26e8:	3084983a 	sll	r2,r6,r2
    26ec:	48c6d83a 	srl	r3,r9,r3
    26f0:	290cb03a 	or	r6,r5,r4
    26f4:	1004c03a 	cmpne	r2,r2,zero
    26f8:	308cb03a 	or	r6,r6,r2
    26fc:	898dc83a 	sub	r6,r17,r6
    2700:	89a3803a 	cmpltu	r17,r17,r6
    2704:	40d1c83a 	sub	r8,r8,r3
    2708:	4451c83a 	sub	r8,r8,r17
    270c:	3023883a 	mov	r17,r6
    2710:	4080202c 	andhi	r2,r8,128
    2714:	10002326 	beq	r2,zero,27a4 <__adddf3+0x204>
    2718:	04c02034 	movhi	r19,128
    271c:	9cffffc4 	addi	r19,r19,-1
    2720:	44e6703a 	and	r19,r8,r19
    2724:	98007626 	beq	r19,zero,2900 <__adddf3+0x360>
    2728:	9809883a 	mov	r4,r19
    272c:	0004cac0 	call	4cac <__clzsi2>
    2730:	10fffe04 	addi	r3,r2,-8
    2734:	010007c4 	movi	r4,31
    2738:	20c07716 	blt	r4,r3,2918 <__adddf3+0x378>
    273c:	00800804 	movi	r2,32
    2740:	10c5c83a 	sub	r2,r2,r3
    2744:	8884d83a 	srl	r2,r17,r2
    2748:	98d0983a 	sll	r8,r19,r3
    274c:	88e2983a 	sll	r17,r17,r3
    2750:	1204b03a 	or	r2,r2,r8
    2754:	1c007416 	blt	r3,r16,2928 <__adddf3+0x388>
    2758:	1c21c83a 	sub	r16,r3,r16
    275c:	82000044 	addi	r8,r16,1
    2760:	00c007c4 	movi	r3,31
    2764:	1a009116 	blt	r3,r8,29ac <__adddf3+0x40c>
    2768:	00c00804 	movi	r3,32
    276c:	1a07c83a 	sub	r3,r3,r8
    2770:	8a08d83a 	srl	r4,r17,r8
    2774:	88e2983a 	sll	r17,r17,r3
    2778:	10c6983a 	sll	r3,r2,r3
    277c:	1210d83a 	srl	r8,r2,r8
    2780:	8804c03a 	cmpne	r2,r17,zero
    2784:	1906b03a 	or	r3,r3,r4
    2788:	18a2b03a 	or	r17,r3,r2
    278c:	0021883a 	mov	r16,zero
    2790:	003fa206 	br	261c <__alt_data_end+0xff80261c>
    2794:	1890b03a 	or	r8,r3,r2
    2798:	40017d26 	beq	r8,zero,2d90 <__adddf3+0x7f0>
    279c:	1011883a 	mov	r8,r2
    27a0:	1823883a 	mov	r17,r3
    27a4:	888001cc 	andi	r2,r17,7
    27a8:	103f9e1e 	bne	r2,zero,2624 <__alt_data_end+0xff802624>
    27ac:	4004977a 	slli	r2,r8,29
    27b0:	8822d0fa 	srli	r17,r17,3
    27b4:	4010d0fa 	srli	r8,r8,3
    27b8:	9007883a 	mov	r3,r18
    27bc:	1444b03a 	or	r2,r2,r17
    27c0:	0101ffc4 	movi	r4,2047
    27c4:	81002426 	beq	r16,r4,2858 <__adddf3+0x2b8>
    27c8:	8120703a 	and	r16,r16,r4
    27cc:	01000434 	movhi	r4,16
    27d0:	213fffc4 	addi	r4,r4,-1
    27d4:	4110703a 	and	r8,r8,r4
    27d8:	003fa806 	br	267c <__alt_data_end+0xff80267c>
    27dc:	8089c83a 	sub	r4,r16,r2
    27e0:	01005e0e 	bge	zero,r4,295c <__adddf3+0x3bc>
    27e4:	10002b26 	beq	r2,zero,2894 <__adddf3+0x2f4>
    27e8:	0081ffc4 	movi	r2,2047
    27ec:	80bf8b26 	beq	r16,r2,261c <__alt_data_end+0xff80261c>
    27f0:	4a402034 	orhi	r9,r9,128
    27f4:	00800e04 	movi	r2,56
    27f8:	1100a40e 	bge	r2,r4,2a8c <__adddf3+0x4ec>
    27fc:	498cb03a 	or	r6,r9,r6
    2800:	300ac03a 	cmpne	r5,r6,zero
    2804:	0013883a 	mov	r9,zero
    2808:	2c4b883a 	add	r5,r5,r17
    280c:	2c63803a 	cmpltu	r17,r5,r17
    2810:	4a11883a 	add	r8,r9,r8
    2814:	8a11883a 	add	r8,r17,r8
    2818:	2823883a 	mov	r17,r5
    281c:	4080202c 	andhi	r2,r8,128
    2820:	103fe026 	beq	r2,zero,27a4 <__alt_data_end+0xff8027a4>
    2824:	84000044 	addi	r16,r16,1
    2828:	0081ffc4 	movi	r2,2047
    282c:	8080d226 	beq	r16,r2,2b78 <__adddf3+0x5d8>
    2830:	00bfe034 	movhi	r2,65408
    2834:	10bfffc4 	addi	r2,r2,-1
    2838:	4090703a 	and	r8,r8,r2
    283c:	880ad07a 	srli	r5,r17,1
    2840:	400897fa 	slli	r4,r8,31
    2844:	88c0004c 	andi	r3,r17,1
    2848:	28e2b03a 	or	r17,r5,r3
    284c:	4010d07a 	srli	r8,r8,1
    2850:	2462b03a 	or	r17,r4,r17
    2854:	003f7106 	br	261c <__alt_data_end+0xff80261c>
    2858:	4088b03a 	or	r4,r8,r2
    285c:	20014526 	beq	r4,zero,2d74 <__adddf3+0x7d4>
    2860:	01000434 	movhi	r4,16
    2864:	42000234 	orhi	r8,r8,8
    2868:	213fffc4 	addi	r4,r4,-1
    286c:	4110703a 	and	r8,r8,r4
    2870:	003f8206 	br	267c <__alt_data_end+0xff80267c>
    2874:	18ffffc4 	addi	r3,r3,-1
    2878:	1800491e 	bne	r3,zero,29a0 <__adddf3+0x400>
    287c:	898bc83a 	sub	r5,r17,r6
    2880:	8963803a 	cmpltu	r17,r17,r5
    2884:	4251c83a 	sub	r8,r8,r9
    2888:	4451c83a 	sub	r8,r8,r17
    288c:	2823883a 	mov	r17,r5
    2890:	003f9f06 	br	2710 <__alt_data_end+0xff802710>
    2894:	4984b03a 	or	r2,r9,r6
    2898:	103f6026 	beq	r2,zero,261c <__alt_data_end+0xff80261c>
    289c:	213fffc4 	addi	r4,r4,-1
    28a0:	2000931e 	bne	r4,zero,2af0 <__adddf3+0x550>
    28a4:	898d883a 	add	r6,r17,r6
    28a8:	3463803a 	cmpltu	r17,r6,r17
    28ac:	4251883a 	add	r8,r8,r9
    28b0:	8a11883a 	add	r8,r17,r8
    28b4:	3023883a 	mov	r17,r6
    28b8:	003fd806 	br	281c <__alt_data_end+0xff80281c>
    28bc:	1800541e 	bne	r3,zero,2a10 <__adddf3+0x470>
    28c0:	80800044 	addi	r2,r16,1
    28c4:	1081ffcc 	andi	r2,r2,2047
    28c8:	00c00044 	movi	r3,1
    28cc:	1880a00e 	bge	r3,r2,2b50 <__adddf3+0x5b0>
    28d0:	8989c83a 	sub	r4,r17,r6
    28d4:	8905803a 	cmpltu	r2,r17,r4
    28d8:	4267c83a 	sub	r19,r8,r9
    28dc:	98a7c83a 	sub	r19,r19,r2
    28e0:	9880202c 	andhi	r2,r19,128
    28e4:	10006326 	beq	r2,zero,2a74 <__adddf3+0x4d4>
    28e8:	3463c83a 	sub	r17,r6,r17
    28ec:	4a07c83a 	sub	r3,r9,r8
    28f0:	344d803a 	cmpltu	r6,r6,r17
    28f4:	19a7c83a 	sub	r19,r3,r6
    28f8:	3825883a 	mov	r18,r7
    28fc:	983f8a1e 	bne	r19,zero,2728 <__alt_data_end+0xff802728>
    2900:	8809883a 	mov	r4,r17
    2904:	0004cac0 	call	4cac <__clzsi2>
    2908:	10800804 	addi	r2,r2,32
    290c:	10fffe04 	addi	r3,r2,-8
    2910:	010007c4 	movi	r4,31
    2914:	20ff890e 	bge	r4,r3,273c <__alt_data_end+0xff80273c>
    2918:	10bff604 	addi	r2,r2,-40
    291c:	8884983a 	sll	r2,r17,r2
    2920:	0023883a 	mov	r17,zero
    2924:	1c3f8c0e 	bge	r3,r16,2758 <__alt_data_end+0xff802758>
    2928:	023fe034 	movhi	r8,65408
    292c:	423fffc4 	addi	r8,r8,-1
    2930:	80e1c83a 	sub	r16,r16,r3
    2934:	1210703a 	and	r8,r2,r8
    2938:	003f3806 	br	261c <__alt_data_end+0xff80261c>
    293c:	9007883a 	mov	r3,r18
    2940:	0011883a 	mov	r8,zero
    2944:	0005883a 	mov	r2,zero
    2948:	003f4c06 	br	267c <__alt_data_end+0xff80267c>
    294c:	498cb03a 	or	r6,r9,r6
    2950:	300cc03a 	cmpne	r6,r6,zero
    2954:	0007883a 	mov	r3,zero
    2958:	003f6806 	br	26fc <__alt_data_end+0xff8026fc>
    295c:	20009c1e 	bne	r4,zero,2bd0 <__adddf3+0x630>
    2960:	80800044 	addi	r2,r16,1
    2964:	1141ffcc 	andi	r5,r2,2047
    2968:	01000044 	movi	r4,1
    296c:	2140670e 	bge	r4,r5,2b0c <__adddf3+0x56c>
    2970:	0101ffc4 	movi	r4,2047
    2974:	11007f26 	beq	r2,r4,2b74 <__adddf3+0x5d4>
    2978:	898d883a 	add	r6,r17,r6
    297c:	4247883a 	add	r3,r8,r9
    2980:	3451803a 	cmpltu	r8,r6,r17
    2984:	40d1883a 	add	r8,r8,r3
    2988:	402297fa 	slli	r17,r8,31
    298c:	300cd07a 	srli	r6,r6,1
    2990:	4010d07a 	srli	r8,r8,1
    2994:	1021883a 	mov	r16,r2
    2998:	89a2b03a 	or	r17,r17,r6
    299c:	003f1f06 	br	261c <__alt_data_end+0xff80261c>
    29a0:	0081ffc4 	movi	r2,2047
    29a4:	80bf481e 	bne	r16,r2,26c8 <__alt_data_end+0xff8026c8>
    29a8:	003f1c06 	br	261c <__alt_data_end+0xff80261c>
    29ac:	843ff844 	addi	r16,r16,-31
    29b0:	01000804 	movi	r4,32
    29b4:	1406d83a 	srl	r3,r2,r16
    29b8:	41005026 	beq	r8,r4,2afc <__adddf3+0x55c>
    29bc:	01001004 	movi	r4,64
    29c0:	2211c83a 	sub	r8,r4,r8
    29c4:	1204983a 	sll	r2,r2,r8
    29c8:	88a2b03a 	or	r17,r17,r2
    29cc:	8822c03a 	cmpne	r17,r17,zero
    29d0:	1c62b03a 	or	r17,r3,r17
    29d4:	0011883a 	mov	r8,zero
    29d8:	0021883a 	mov	r16,zero
    29dc:	003f7106 	br	27a4 <__alt_data_end+0xff8027a4>
    29e0:	193ff804 	addi	r4,r3,-32
    29e4:	00800804 	movi	r2,32
    29e8:	4908d83a 	srl	r4,r9,r4
    29ec:	18804526 	beq	r3,r2,2b04 <__adddf3+0x564>
    29f0:	00801004 	movi	r2,64
    29f4:	10c5c83a 	sub	r2,r2,r3
    29f8:	4886983a 	sll	r3,r9,r2
    29fc:	198cb03a 	or	r6,r3,r6
    2a00:	300cc03a 	cmpne	r6,r6,zero
    2a04:	218cb03a 	or	r6,r4,r6
    2a08:	0007883a 	mov	r3,zero
    2a0c:	003f3b06 	br	26fc <__alt_data_end+0xff8026fc>
    2a10:	80002a26 	beq	r16,zero,2abc <__adddf3+0x51c>
    2a14:	0101ffc4 	movi	r4,2047
    2a18:	11006826 	beq	r2,r4,2bbc <__adddf3+0x61c>
    2a1c:	00c7c83a 	sub	r3,zero,r3
    2a20:	42002034 	orhi	r8,r8,128
    2a24:	01000e04 	movi	r4,56
    2a28:	20c07c16 	blt	r4,r3,2c1c <__adddf3+0x67c>
    2a2c:	010007c4 	movi	r4,31
    2a30:	20c0da16 	blt	r4,r3,2d9c <__adddf3+0x7fc>
    2a34:	01000804 	movi	r4,32
    2a38:	20c9c83a 	sub	r4,r4,r3
    2a3c:	4114983a 	sll	r10,r8,r4
    2a40:	88cad83a 	srl	r5,r17,r3
    2a44:	8908983a 	sll	r4,r17,r4
    2a48:	40c6d83a 	srl	r3,r8,r3
    2a4c:	5162b03a 	or	r17,r10,r5
    2a50:	2008c03a 	cmpne	r4,r4,zero
    2a54:	8922b03a 	or	r17,r17,r4
    2a58:	3463c83a 	sub	r17,r6,r17
    2a5c:	48c7c83a 	sub	r3,r9,r3
    2a60:	344d803a 	cmpltu	r6,r6,r17
    2a64:	1991c83a 	sub	r8,r3,r6
    2a68:	1021883a 	mov	r16,r2
    2a6c:	3825883a 	mov	r18,r7
    2a70:	003f2706 	br	2710 <__alt_data_end+0xff802710>
    2a74:	24d0b03a 	or	r8,r4,r19
    2a78:	40001b1e 	bne	r8,zero,2ae8 <__adddf3+0x548>
    2a7c:	0005883a 	mov	r2,zero
    2a80:	0007883a 	mov	r3,zero
    2a84:	0021883a 	mov	r16,zero
    2a88:	003f4d06 	br	27c0 <__alt_data_end+0xff8027c0>
    2a8c:	008007c4 	movi	r2,31
    2a90:	11003c16 	blt	r2,r4,2b84 <__adddf3+0x5e4>
    2a94:	00800804 	movi	r2,32
    2a98:	1105c83a 	sub	r2,r2,r4
    2a9c:	488e983a 	sll	r7,r9,r2
    2aa0:	310ad83a 	srl	r5,r6,r4
    2aa4:	3084983a 	sll	r2,r6,r2
    2aa8:	4912d83a 	srl	r9,r9,r4
    2aac:	394ab03a 	or	r5,r7,r5
    2ab0:	1004c03a 	cmpne	r2,r2,zero
    2ab4:	288ab03a 	or	r5,r5,r2
    2ab8:	003f5306 	br	2808 <__alt_data_end+0xff802808>
    2abc:	4448b03a 	or	r4,r8,r17
    2ac0:	20003e26 	beq	r4,zero,2bbc <__adddf3+0x61c>
    2ac4:	00c6303a 	nor	r3,zero,r3
    2ac8:	18003a1e 	bne	r3,zero,2bb4 <__adddf3+0x614>
    2acc:	3463c83a 	sub	r17,r6,r17
    2ad0:	4a07c83a 	sub	r3,r9,r8
    2ad4:	344d803a 	cmpltu	r6,r6,r17
    2ad8:	1991c83a 	sub	r8,r3,r6
    2adc:	1021883a 	mov	r16,r2
    2ae0:	3825883a 	mov	r18,r7
    2ae4:	003f0a06 	br	2710 <__alt_data_end+0xff802710>
    2ae8:	2023883a 	mov	r17,r4
    2aec:	003f0d06 	br	2724 <__alt_data_end+0xff802724>
    2af0:	0081ffc4 	movi	r2,2047
    2af4:	80bf3f1e 	bne	r16,r2,27f4 <__alt_data_end+0xff8027f4>
    2af8:	003ec806 	br	261c <__alt_data_end+0xff80261c>
    2afc:	0005883a 	mov	r2,zero
    2b00:	003fb106 	br	29c8 <__alt_data_end+0xff8029c8>
    2b04:	0007883a 	mov	r3,zero
    2b08:	003fbc06 	br	29fc <__alt_data_end+0xff8029fc>
    2b0c:	4444b03a 	or	r2,r8,r17
    2b10:	8000871e 	bne	r16,zero,2d30 <__adddf3+0x790>
    2b14:	1000ba26 	beq	r2,zero,2e00 <__adddf3+0x860>
    2b18:	4984b03a 	or	r2,r9,r6
    2b1c:	103ebf26 	beq	r2,zero,261c <__alt_data_end+0xff80261c>
    2b20:	8985883a 	add	r2,r17,r6
    2b24:	4247883a 	add	r3,r8,r9
    2b28:	1451803a 	cmpltu	r8,r2,r17
    2b2c:	40d1883a 	add	r8,r8,r3
    2b30:	40c0202c 	andhi	r3,r8,128
    2b34:	1023883a 	mov	r17,r2
    2b38:	183f1a26 	beq	r3,zero,27a4 <__alt_data_end+0xff8027a4>
    2b3c:	00bfe034 	movhi	r2,65408
    2b40:	10bfffc4 	addi	r2,r2,-1
    2b44:	2021883a 	mov	r16,r4
    2b48:	4090703a 	and	r8,r8,r2
    2b4c:	003eb306 	br	261c <__alt_data_end+0xff80261c>
    2b50:	4444b03a 	or	r2,r8,r17
    2b54:	8000291e 	bne	r16,zero,2bfc <__adddf3+0x65c>
    2b58:	10004b1e 	bne	r2,zero,2c88 <__adddf3+0x6e8>
    2b5c:	4990b03a 	or	r8,r9,r6
    2b60:	40008b26 	beq	r8,zero,2d90 <__adddf3+0x7f0>
    2b64:	4811883a 	mov	r8,r9
    2b68:	3023883a 	mov	r17,r6
    2b6c:	3825883a 	mov	r18,r7
    2b70:	003eaa06 	br	261c <__alt_data_end+0xff80261c>
    2b74:	1021883a 	mov	r16,r2
    2b78:	0011883a 	mov	r8,zero
    2b7c:	0005883a 	mov	r2,zero
    2b80:	003f0f06 	br	27c0 <__alt_data_end+0xff8027c0>
    2b84:	217ff804 	addi	r5,r4,-32
    2b88:	00800804 	movi	r2,32
    2b8c:	494ad83a 	srl	r5,r9,r5
    2b90:	20807d26 	beq	r4,r2,2d88 <__adddf3+0x7e8>
    2b94:	00801004 	movi	r2,64
    2b98:	1109c83a 	sub	r4,r2,r4
    2b9c:	4912983a 	sll	r9,r9,r4
    2ba0:	498cb03a 	or	r6,r9,r6
    2ba4:	300cc03a 	cmpne	r6,r6,zero
    2ba8:	298ab03a 	or	r5,r5,r6
    2bac:	0013883a 	mov	r9,zero
    2bb0:	003f1506 	br	2808 <__alt_data_end+0xff802808>
    2bb4:	0101ffc4 	movi	r4,2047
    2bb8:	113f9a1e 	bne	r2,r4,2a24 <__alt_data_end+0xff802a24>
    2bbc:	4811883a 	mov	r8,r9
    2bc0:	3023883a 	mov	r17,r6
    2bc4:	1021883a 	mov	r16,r2
    2bc8:	3825883a 	mov	r18,r7
    2bcc:	003e9306 	br	261c <__alt_data_end+0xff80261c>
    2bd0:	8000161e 	bne	r16,zero,2c2c <__adddf3+0x68c>
    2bd4:	444ab03a 	or	r5,r8,r17
    2bd8:	28005126 	beq	r5,zero,2d20 <__adddf3+0x780>
    2bdc:	0108303a 	nor	r4,zero,r4
    2be0:	20004d1e 	bne	r4,zero,2d18 <__adddf3+0x778>
    2be4:	89a3883a 	add	r17,r17,r6
    2be8:	4253883a 	add	r9,r8,r9
    2bec:	898d803a 	cmpltu	r6,r17,r6
    2bf0:	3251883a 	add	r8,r6,r9
    2bf4:	1021883a 	mov	r16,r2
    2bf8:	003f0806 	br	281c <__alt_data_end+0xff80281c>
    2bfc:	1000301e 	bne	r2,zero,2cc0 <__adddf3+0x720>
    2c00:	4984b03a 	or	r2,r9,r6
    2c04:	10007126 	beq	r2,zero,2dcc <__adddf3+0x82c>
    2c08:	4811883a 	mov	r8,r9
    2c0c:	3023883a 	mov	r17,r6
    2c10:	3825883a 	mov	r18,r7
    2c14:	0401ffc4 	movi	r16,2047
    2c18:	003e8006 	br	261c <__alt_data_end+0xff80261c>
    2c1c:	4462b03a 	or	r17,r8,r17
    2c20:	8822c03a 	cmpne	r17,r17,zero
    2c24:	0007883a 	mov	r3,zero
    2c28:	003f8b06 	br	2a58 <__alt_data_end+0xff802a58>
    2c2c:	0141ffc4 	movi	r5,2047
    2c30:	11403b26 	beq	r2,r5,2d20 <__adddf3+0x780>
    2c34:	0109c83a 	sub	r4,zero,r4
    2c38:	42002034 	orhi	r8,r8,128
    2c3c:	01400e04 	movi	r5,56
    2c40:	29006716 	blt	r5,r4,2de0 <__adddf3+0x840>
    2c44:	014007c4 	movi	r5,31
    2c48:	29007016 	blt	r5,r4,2e0c <__adddf3+0x86c>
    2c4c:	01400804 	movi	r5,32
    2c50:	290bc83a 	sub	r5,r5,r4
    2c54:	4154983a 	sll	r10,r8,r5
    2c58:	890ed83a 	srl	r7,r17,r4
    2c5c:	894a983a 	sll	r5,r17,r5
    2c60:	4108d83a 	srl	r4,r8,r4
    2c64:	51e2b03a 	or	r17,r10,r7
    2c68:	280ac03a 	cmpne	r5,r5,zero
    2c6c:	8962b03a 	or	r17,r17,r5
    2c70:	89a3883a 	add	r17,r17,r6
    2c74:	2253883a 	add	r9,r4,r9
    2c78:	898d803a 	cmpltu	r6,r17,r6
    2c7c:	3251883a 	add	r8,r6,r9
    2c80:	1021883a 	mov	r16,r2
    2c84:	003ee506 	br	281c <__alt_data_end+0xff80281c>
    2c88:	4984b03a 	or	r2,r9,r6
    2c8c:	103e6326 	beq	r2,zero,261c <__alt_data_end+0xff80261c>
    2c90:	8987c83a 	sub	r3,r17,r6
    2c94:	88c9803a 	cmpltu	r4,r17,r3
    2c98:	4245c83a 	sub	r2,r8,r9
    2c9c:	1105c83a 	sub	r2,r2,r4
    2ca0:	1100202c 	andhi	r4,r2,128
    2ca4:	203ebb26 	beq	r4,zero,2794 <__alt_data_end+0xff802794>
    2ca8:	3463c83a 	sub	r17,r6,r17
    2cac:	4a07c83a 	sub	r3,r9,r8
    2cb0:	344d803a 	cmpltu	r6,r6,r17
    2cb4:	1991c83a 	sub	r8,r3,r6
    2cb8:	3825883a 	mov	r18,r7
    2cbc:	003e5706 	br	261c <__alt_data_end+0xff80261c>
    2cc0:	4984b03a 	or	r2,r9,r6
    2cc4:	10002e26 	beq	r2,zero,2d80 <__adddf3+0x7e0>
    2cc8:	4004d0fa 	srli	r2,r8,3
    2ccc:	8822d0fa 	srli	r17,r17,3
    2cd0:	4010977a 	slli	r8,r8,29
    2cd4:	10c0022c 	andhi	r3,r2,8
    2cd8:	4462b03a 	or	r17,r8,r17
    2cdc:	18000826 	beq	r3,zero,2d00 <__adddf3+0x760>
    2ce0:	4808d0fa 	srli	r4,r9,3
    2ce4:	20c0022c 	andhi	r3,r4,8
    2ce8:	1800051e 	bne	r3,zero,2d00 <__adddf3+0x760>
    2cec:	300cd0fa 	srli	r6,r6,3
    2cf0:	4806977a 	slli	r3,r9,29
    2cf4:	2005883a 	mov	r2,r4
    2cf8:	3825883a 	mov	r18,r7
    2cfc:	19a2b03a 	or	r17,r3,r6
    2d00:	8810d77a 	srli	r8,r17,29
    2d04:	100490fa 	slli	r2,r2,3
    2d08:	882290fa 	slli	r17,r17,3
    2d0c:	0401ffc4 	movi	r16,2047
    2d10:	4090b03a 	or	r8,r8,r2
    2d14:	003e4106 	br	261c <__alt_data_end+0xff80261c>
    2d18:	0141ffc4 	movi	r5,2047
    2d1c:	117fc71e 	bne	r2,r5,2c3c <__alt_data_end+0xff802c3c>
    2d20:	4811883a 	mov	r8,r9
    2d24:	3023883a 	mov	r17,r6
    2d28:	1021883a 	mov	r16,r2
    2d2c:	003e3b06 	br	261c <__alt_data_end+0xff80261c>
    2d30:	10002f26 	beq	r2,zero,2df0 <__adddf3+0x850>
    2d34:	4984b03a 	or	r2,r9,r6
    2d38:	10001126 	beq	r2,zero,2d80 <__adddf3+0x7e0>
    2d3c:	4004d0fa 	srli	r2,r8,3
    2d40:	8822d0fa 	srli	r17,r17,3
    2d44:	4010977a 	slli	r8,r8,29
    2d48:	10c0022c 	andhi	r3,r2,8
    2d4c:	4462b03a 	or	r17,r8,r17
    2d50:	183feb26 	beq	r3,zero,2d00 <__alt_data_end+0xff802d00>
    2d54:	4808d0fa 	srli	r4,r9,3
    2d58:	20c0022c 	andhi	r3,r4,8
    2d5c:	183fe81e 	bne	r3,zero,2d00 <__alt_data_end+0xff802d00>
    2d60:	300cd0fa 	srli	r6,r6,3
    2d64:	4806977a 	slli	r3,r9,29
    2d68:	2005883a 	mov	r2,r4
    2d6c:	19a2b03a 	or	r17,r3,r6
    2d70:	003fe306 	br	2d00 <__alt_data_end+0xff802d00>
    2d74:	0011883a 	mov	r8,zero
    2d78:	0005883a 	mov	r2,zero
    2d7c:	003e3f06 	br	267c <__alt_data_end+0xff80267c>
    2d80:	0401ffc4 	movi	r16,2047
    2d84:	003e2506 	br	261c <__alt_data_end+0xff80261c>
    2d88:	0013883a 	mov	r9,zero
    2d8c:	003f8406 	br	2ba0 <__alt_data_end+0xff802ba0>
    2d90:	0005883a 	mov	r2,zero
    2d94:	0007883a 	mov	r3,zero
    2d98:	003e8906 	br	27c0 <__alt_data_end+0xff8027c0>
    2d9c:	197ff804 	addi	r5,r3,-32
    2da0:	01000804 	movi	r4,32
    2da4:	414ad83a 	srl	r5,r8,r5
    2da8:	19002426 	beq	r3,r4,2e3c <__adddf3+0x89c>
    2dac:	01001004 	movi	r4,64
    2db0:	20c7c83a 	sub	r3,r4,r3
    2db4:	40c6983a 	sll	r3,r8,r3
    2db8:	1c46b03a 	or	r3,r3,r17
    2dbc:	1806c03a 	cmpne	r3,r3,zero
    2dc0:	28e2b03a 	or	r17,r5,r3
    2dc4:	0007883a 	mov	r3,zero
    2dc8:	003f2306 	br	2a58 <__alt_data_end+0xff802a58>
    2dcc:	0007883a 	mov	r3,zero
    2dd0:	5811883a 	mov	r8,r11
    2dd4:	00bfffc4 	movi	r2,-1
    2dd8:	0401ffc4 	movi	r16,2047
    2ddc:	003e7806 	br	27c0 <__alt_data_end+0xff8027c0>
    2de0:	4462b03a 	or	r17,r8,r17
    2de4:	8822c03a 	cmpne	r17,r17,zero
    2de8:	0009883a 	mov	r4,zero
    2dec:	003fa006 	br	2c70 <__alt_data_end+0xff802c70>
    2df0:	4811883a 	mov	r8,r9
    2df4:	3023883a 	mov	r17,r6
    2df8:	0401ffc4 	movi	r16,2047
    2dfc:	003e0706 	br	261c <__alt_data_end+0xff80261c>
    2e00:	4811883a 	mov	r8,r9
    2e04:	3023883a 	mov	r17,r6
    2e08:	003e0406 	br	261c <__alt_data_end+0xff80261c>
    2e0c:	21fff804 	addi	r7,r4,-32
    2e10:	01400804 	movi	r5,32
    2e14:	41ced83a 	srl	r7,r8,r7
    2e18:	21400a26 	beq	r4,r5,2e44 <__adddf3+0x8a4>
    2e1c:	01401004 	movi	r5,64
    2e20:	2909c83a 	sub	r4,r5,r4
    2e24:	4108983a 	sll	r4,r8,r4
    2e28:	2448b03a 	or	r4,r4,r17
    2e2c:	2008c03a 	cmpne	r4,r4,zero
    2e30:	3922b03a 	or	r17,r7,r4
    2e34:	0009883a 	mov	r4,zero
    2e38:	003f8d06 	br	2c70 <__alt_data_end+0xff802c70>
    2e3c:	0007883a 	mov	r3,zero
    2e40:	003fdd06 	br	2db8 <__alt_data_end+0xff802db8>
    2e44:	0009883a 	mov	r4,zero
    2e48:	003ff706 	br	2e28 <__alt_data_end+0xff802e28>

00002e4c <__divdf3>:
    2e4c:	defff204 	addi	sp,sp,-56
    2e50:	dd400915 	stw	r21,36(sp)
    2e54:	282ad53a 	srli	r21,r5,20
    2e58:	dd000815 	stw	r20,32(sp)
    2e5c:	2828d7fa 	srli	r20,r5,31
    2e60:	dc000415 	stw	r16,16(sp)
    2e64:	04000434 	movhi	r16,16
    2e68:	df000c15 	stw	fp,48(sp)
    2e6c:	843fffc4 	addi	r16,r16,-1
    2e70:	dfc00d15 	stw	ra,52(sp)
    2e74:	ddc00b15 	stw	r23,44(sp)
    2e78:	dd800a15 	stw	r22,40(sp)
    2e7c:	dcc00715 	stw	r19,28(sp)
    2e80:	dc800615 	stw	r18,24(sp)
    2e84:	dc400515 	stw	r17,20(sp)
    2e88:	ad41ffcc 	andi	r21,r21,2047
    2e8c:	2c20703a 	and	r16,r5,r16
    2e90:	a7003fcc 	andi	fp,r20,255
    2e94:	a8006126 	beq	r21,zero,301c <__divdf3+0x1d0>
    2e98:	0081ffc4 	movi	r2,2047
    2e9c:	2025883a 	mov	r18,r4
    2ea0:	a8803726 	beq	r21,r2,2f80 <__divdf3+0x134>
    2ea4:	80800434 	orhi	r2,r16,16
    2ea8:	100490fa 	slli	r2,r2,3
    2eac:	2020d77a 	srli	r16,r4,29
    2eb0:	202490fa 	slli	r18,r4,3
    2eb4:	ad7f0044 	addi	r21,r21,-1023
    2eb8:	80a0b03a 	or	r16,r16,r2
    2ebc:	0027883a 	mov	r19,zero
    2ec0:	0013883a 	mov	r9,zero
    2ec4:	3804d53a 	srli	r2,r7,20
    2ec8:	382cd7fa 	srli	r22,r7,31
    2ecc:	04400434 	movhi	r17,16
    2ed0:	8c7fffc4 	addi	r17,r17,-1
    2ed4:	1081ffcc 	andi	r2,r2,2047
    2ed8:	3011883a 	mov	r8,r6
    2edc:	3c62703a 	and	r17,r7,r17
    2ee0:	b5c03fcc 	andi	r23,r22,255
    2ee4:	10006c26 	beq	r2,zero,3098 <__divdf3+0x24c>
    2ee8:	00c1ffc4 	movi	r3,2047
    2eec:	10c06426 	beq	r2,r3,3080 <__divdf3+0x234>
    2ef0:	88c00434 	orhi	r3,r17,16
    2ef4:	180690fa 	slli	r3,r3,3
    2ef8:	3022d77a 	srli	r17,r6,29
    2efc:	301090fa 	slli	r8,r6,3
    2f00:	10bf0044 	addi	r2,r2,-1023
    2f04:	88e2b03a 	or	r17,r17,r3
    2f08:	000f883a 	mov	r7,zero
    2f0c:	a58cf03a 	xor	r6,r20,r22
    2f10:	3cc8b03a 	or	r4,r7,r19
    2f14:	a8abc83a 	sub	r21,r21,r2
    2f18:	008003c4 	movi	r2,15
    2f1c:	3007883a 	mov	r3,r6
    2f20:	34c03fcc 	andi	r19,r6,255
    2f24:	11009036 	bltu	r2,r4,3168 <__divdf3+0x31c>
    2f28:	200890ba 	slli	r4,r4,2
    2f2c:	00800034 	movhi	r2,0
    2f30:	108bd004 	addi	r2,r2,12096
    2f34:	2089883a 	add	r4,r4,r2
    2f38:	20800017 	ldw	r2,0(r4)
    2f3c:	1000683a 	jmp	r2
    2f40:	00003168 	cmpgeui	zero,zero,197
    2f44:	00002fb8 	rdprs	zero,zero,190
    2f48:	00003158 	cmpnei	zero,zero,197
    2f4c:	00002fac 	andhi	zero,zero,190
    2f50:	00003158 	cmpnei	zero,zero,197
    2f54:	0000312c 	andhi	zero,zero,196
    2f58:	00003158 	cmpnei	zero,zero,197
    2f5c:	00002fac 	andhi	zero,zero,190
    2f60:	00002fb8 	rdprs	zero,zero,190
    2f64:	00002fb8 	rdprs	zero,zero,190
    2f68:	0000312c 	andhi	zero,zero,196
    2f6c:	00002fac 	andhi	zero,zero,190
    2f70:	00002f9c 	xori	zero,zero,190
    2f74:	00002f9c 	xori	zero,zero,190
    2f78:	00002f9c 	xori	zero,zero,190
    2f7c:	0000344c 	andi	zero,zero,209
    2f80:	2404b03a 	or	r2,r4,r16
    2f84:	1000661e 	bne	r2,zero,3120 <__divdf3+0x2d4>
    2f88:	04c00204 	movi	r19,8
    2f8c:	0021883a 	mov	r16,zero
    2f90:	0025883a 	mov	r18,zero
    2f94:	02400084 	movi	r9,2
    2f98:	003fca06 	br	2ec4 <__alt_data_end+0xff802ec4>
    2f9c:	8023883a 	mov	r17,r16
    2fa0:	9011883a 	mov	r8,r18
    2fa4:	e02f883a 	mov	r23,fp
    2fa8:	480f883a 	mov	r7,r9
    2fac:	00800084 	movi	r2,2
    2fb0:	3881311e 	bne	r7,r2,3478 <__divdf3+0x62c>
    2fb4:	b827883a 	mov	r19,r23
    2fb8:	98c0004c 	andi	r3,r19,1
    2fbc:	0081ffc4 	movi	r2,2047
    2fc0:	000b883a 	mov	r5,zero
    2fc4:	0025883a 	mov	r18,zero
    2fc8:	1004953a 	slli	r2,r2,20
    2fcc:	18c03fcc 	andi	r3,r3,255
    2fd0:	04400434 	movhi	r17,16
    2fd4:	8c7fffc4 	addi	r17,r17,-1
    2fd8:	180697fa 	slli	r3,r3,31
    2fdc:	2c4a703a 	and	r5,r5,r17
    2fe0:	288ab03a 	or	r5,r5,r2
    2fe4:	28c6b03a 	or	r3,r5,r3
    2fe8:	9005883a 	mov	r2,r18
    2fec:	dfc00d17 	ldw	ra,52(sp)
    2ff0:	df000c17 	ldw	fp,48(sp)
    2ff4:	ddc00b17 	ldw	r23,44(sp)
    2ff8:	dd800a17 	ldw	r22,40(sp)
    2ffc:	dd400917 	ldw	r21,36(sp)
    3000:	dd000817 	ldw	r20,32(sp)
    3004:	dcc00717 	ldw	r19,28(sp)
    3008:	dc800617 	ldw	r18,24(sp)
    300c:	dc400517 	ldw	r17,20(sp)
    3010:	dc000417 	ldw	r16,16(sp)
    3014:	dec00e04 	addi	sp,sp,56
    3018:	f800283a 	ret
    301c:	2404b03a 	or	r2,r4,r16
    3020:	2027883a 	mov	r19,r4
    3024:	10003926 	beq	r2,zero,310c <__divdf3+0x2c0>
    3028:	80012e26 	beq	r16,zero,34e4 <__divdf3+0x698>
    302c:	8009883a 	mov	r4,r16
    3030:	d9800315 	stw	r6,12(sp)
    3034:	d9c00215 	stw	r7,8(sp)
    3038:	0004cac0 	call	4cac <__clzsi2>
    303c:	d9800317 	ldw	r6,12(sp)
    3040:	d9c00217 	ldw	r7,8(sp)
    3044:	113ffd44 	addi	r4,r2,-11
    3048:	00c00704 	movi	r3,28
    304c:	19012116 	blt	r3,r4,34d4 <__divdf3+0x688>
    3050:	00c00744 	movi	r3,29
    3054:	147ffe04 	addi	r17,r2,-8
    3058:	1907c83a 	sub	r3,r3,r4
    305c:	8460983a 	sll	r16,r16,r17
    3060:	98c6d83a 	srl	r3,r19,r3
    3064:	9c64983a 	sll	r18,r19,r17
    3068:	1c20b03a 	or	r16,r3,r16
    306c:	1080fcc4 	addi	r2,r2,1011
    3070:	00abc83a 	sub	r21,zero,r2
    3074:	0027883a 	mov	r19,zero
    3078:	0013883a 	mov	r9,zero
    307c:	003f9106 	br	2ec4 <__alt_data_end+0xff802ec4>
    3080:	3446b03a 	or	r3,r6,r17
    3084:	18001f1e 	bne	r3,zero,3104 <__divdf3+0x2b8>
    3088:	0023883a 	mov	r17,zero
    308c:	0011883a 	mov	r8,zero
    3090:	01c00084 	movi	r7,2
    3094:	003f9d06 	br	2f0c <__alt_data_end+0xff802f0c>
    3098:	3446b03a 	or	r3,r6,r17
    309c:	18001526 	beq	r3,zero,30f4 <__divdf3+0x2a8>
    30a0:	88011b26 	beq	r17,zero,3510 <__divdf3+0x6c4>
    30a4:	8809883a 	mov	r4,r17
    30a8:	d9800315 	stw	r6,12(sp)
    30ac:	da400115 	stw	r9,4(sp)
    30b0:	0004cac0 	call	4cac <__clzsi2>
    30b4:	d9800317 	ldw	r6,12(sp)
    30b8:	da400117 	ldw	r9,4(sp)
    30bc:	113ffd44 	addi	r4,r2,-11
    30c0:	00c00704 	movi	r3,28
    30c4:	19010e16 	blt	r3,r4,3500 <__divdf3+0x6b4>
    30c8:	00c00744 	movi	r3,29
    30cc:	123ffe04 	addi	r8,r2,-8
    30d0:	1907c83a 	sub	r3,r3,r4
    30d4:	8a22983a 	sll	r17,r17,r8
    30d8:	30c6d83a 	srl	r3,r6,r3
    30dc:	3210983a 	sll	r8,r6,r8
    30e0:	1c62b03a 	or	r17,r3,r17
    30e4:	1080fcc4 	addi	r2,r2,1011
    30e8:	0085c83a 	sub	r2,zero,r2
    30ec:	000f883a 	mov	r7,zero
    30f0:	003f8606 	br	2f0c <__alt_data_end+0xff802f0c>
    30f4:	0023883a 	mov	r17,zero
    30f8:	0011883a 	mov	r8,zero
    30fc:	01c00044 	movi	r7,1
    3100:	003f8206 	br	2f0c <__alt_data_end+0xff802f0c>
    3104:	01c000c4 	movi	r7,3
    3108:	003f8006 	br	2f0c <__alt_data_end+0xff802f0c>
    310c:	04c00104 	movi	r19,4
    3110:	0021883a 	mov	r16,zero
    3114:	0025883a 	mov	r18,zero
    3118:	02400044 	movi	r9,1
    311c:	003f6906 	br	2ec4 <__alt_data_end+0xff802ec4>
    3120:	04c00304 	movi	r19,12
    3124:	024000c4 	movi	r9,3
    3128:	003f6606 	br	2ec4 <__alt_data_end+0xff802ec4>
    312c:	01400434 	movhi	r5,16
    3130:	0007883a 	mov	r3,zero
    3134:	297fffc4 	addi	r5,r5,-1
    3138:	04bfffc4 	movi	r18,-1
    313c:	0081ffc4 	movi	r2,2047
    3140:	003fa106 	br	2fc8 <__alt_data_end+0xff802fc8>
    3144:	00c00044 	movi	r3,1
    3148:	1887c83a 	sub	r3,r3,r2
    314c:	01000e04 	movi	r4,56
    3150:	20c1210e 	bge	r4,r3,35d8 <__divdf3+0x78c>
    3154:	98c0004c 	andi	r3,r19,1
    3158:	0005883a 	mov	r2,zero
    315c:	000b883a 	mov	r5,zero
    3160:	0025883a 	mov	r18,zero
    3164:	003f9806 	br	2fc8 <__alt_data_end+0xff802fc8>
    3168:	8c00fd36 	bltu	r17,r16,3560 <__divdf3+0x714>
    316c:	8440fb26 	beq	r16,r17,355c <__divdf3+0x710>
    3170:	8007883a 	mov	r3,r16
    3174:	ad7fffc4 	addi	r21,r21,-1
    3178:	0021883a 	mov	r16,zero
    317c:	4004d63a 	srli	r2,r8,24
    3180:	8822923a 	slli	r17,r17,8
    3184:	1809883a 	mov	r4,r3
    3188:	402c923a 	slli	r22,r8,8
    318c:	88b8b03a 	or	fp,r17,r2
    3190:	e028d43a 	srli	r20,fp,16
    3194:	d8c00015 	stw	r3,0(sp)
    3198:	e5ffffcc 	andi	r23,fp,65535
    319c:	a00b883a 	mov	r5,r20
    31a0:	0004e080 	call	4e08 <__udivsi3>
    31a4:	d8c00017 	ldw	r3,0(sp)
    31a8:	a00b883a 	mov	r5,r20
    31ac:	d8800315 	stw	r2,12(sp)
    31b0:	1809883a 	mov	r4,r3
    31b4:	0004e6c0 	call	4e6c <__umodsi3>
    31b8:	d9800317 	ldw	r6,12(sp)
    31bc:	1006943a 	slli	r3,r2,16
    31c0:	9004d43a 	srli	r2,r18,16
    31c4:	b9a3383a 	mul	r17,r23,r6
    31c8:	10c4b03a 	or	r2,r2,r3
    31cc:	1440062e 	bgeu	r2,r17,31e8 <__divdf3+0x39c>
    31d0:	1705883a 	add	r2,r2,fp
    31d4:	30ffffc4 	addi	r3,r6,-1
    31d8:	1700ee36 	bltu	r2,fp,3594 <__divdf3+0x748>
    31dc:	1440ed2e 	bgeu	r2,r17,3594 <__divdf3+0x748>
    31e0:	31bfff84 	addi	r6,r6,-2
    31e4:	1705883a 	add	r2,r2,fp
    31e8:	1463c83a 	sub	r17,r2,r17
    31ec:	a00b883a 	mov	r5,r20
    31f0:	8809883a 	mov	r4,r17
    31f4:	d9800315 	stw	r6,12(sp)
    31f8:	0004e080 	call	4e08 <__udivsi3>
    31fc:	a00b883a 	mov	r5,r20
    3200:	8809883a 	mov	r4,r17
    3204:	d8800215 	stw	r2,8(sp)
    3208:	0004e6c0 	call	4e6c <__umodsi3>
    320c:	d9c00217 	ldw	r7,8(sp)
    3210:	1004943a 	slli	r2,r2,16
    3214:	94bfffcc 	andi	r18,r18,65535
    3218:	b9d1383a 	mul	r8,r23,r7
    321c:	90a4b03a 	or	r18,r18,r2
    3220:	d9800317 	ldw	r6,12(sp)
    3224:	9200062e 	bgeu	r18,r8,3240 <__divdf3+0x3f4>
    3228:	9725883a 	add	r18,r18,fp
    322c:	38bfffc4 	addi	r2,r7,-1
    3230:	9700d636 	bltu	r18,fp,358c <__divdf3+0x740>
    3234:	9200d52e 	bgeu	r18,r8,358c <__divdf3+0x740>
    3238:	39ffff84 	addi	r7,r7,-2
    323c:	9725883a 	add	r18,r18,fp
    3240:	3004943a 	slli	r2,r6,16
    3244:	b012d43a 	srli	r9,r22,16
    3248:	b1bfffcc 	andi	r6,r22,65535
    324c:	11e2b03a 	or	r17,r2,r7
    3250:	8806d43a 	srli	r3,r17,16
    3254:	893fffcc 	andi	r4,r17,65535
    3258:	218b383a 	mul	r5,r4,r6
    325c:	30c5383a 	mul	r2,r6,r3
    3260:	2249383a 	mul	r4,r4,r9
    3264:	280ed43a 	srli	r7,r5,16
    3268:	9225c83a 	sub	r18,r18,r8
    326c:	2089883a 	add	r4,r4,r2
    3270:	3909883a 	add	r4,r7,r4
    3274:	1a47383a 	mul	r3,r3,r9
    3278:	2080022e 	bgeu	r4,r2,3284 <__divdf3+0x438>
    327c:	00800074 	movhi	r2,1
    3280:	1887883a 	add	r3,r3,r2
    3284:	2004d43a 	srli	r2,r4,16
    3288:	2008943a 	slli	r4,r4,16
    328c:	297fffcc 	andi	r5,r5,65535
    3290:	10c7883a 	add	r3,r2,r3
    3294:	2149883a 	add	r4,r4,r5
    3298:	90c0a536 	bltu	r18,r3,3530 <__divdf3+0x6e4>
    329c:	90c0bf26 	beq	r18,r3,359c <__divdf3+0x750>
    32a0:	90c7c83a 	sub	r3,r18,r3
    32a4:	810fc83a 	sub	r7,r16,r4
    32a8:	81e5803a 	cmpltu	r18,r16,r7
    32ac:	1ca5c83a 	sub	r18,r3,r18
    32b0:	e480c126 	beq	fp,r18,35b8 <__divdf3+0x76c>
    32b4:	a00b883a 	mov	r5,r20
    32b8:	9009883a 	mov	r4,r18
    32bc:	d9800315 	stw	r6,12(sp)
    32c0:	d9c00215 	stw	r7,8(sp)
    32c4:	da400115 	stw	r9,4(sp)
    32c8:	0004e080 	call	4e08 <__udivsi3>
    32cc:	a00b883a 	mov	r5,r20
    32d0:	9009883a 	mov	r4,r18
    32d4:	d8800015 	stw	r2,0(sp)
    32d8:	0004e6c0 	call	4e6c <__umodsi3>
    32dc:	d9c00217 	ldw	r7,8(sp)
    32e0:	da000017 	ldw	r8,0(sp)
    32e4:	1006943a 	slli	r3,r2,16
    32e8:	3804d43a 	srli	r2,r7,16
    32ec:	ba21383a 	mul	r16,r23,r8
    32f0:	d9800317 	ldw	r6,12(sp)
    32f4:	10c4b03a 	or	r2,r2,r3
    32f8:	da400117 	ldw	r9,4(sp)
    32fc:	1400062e 	bgeu	r2,r16,3318 <__divdf3+0x4cc>
    3300:	1705883a 	add	r2,r2,fp
    3304:	40ffffc4 	addi	r3,r8,-1
    3308:	1700ad36 	bltu	r2,fp,35c0 <__divdf3+0x774>
    330c:	1400ac2e 	bgeu	r2,r16,35c0 <__divdf3+0x774>
    3310:	423fff84 	addi	r8,r8,-2
    3314:	1705883a 	add	r2,r2,fp
    3318:	1421c83a 	sub	r16,r2,r16
    331c:	a00b883a 	mov	r5,r20
    3320:	8009883a 	mov	r4,r16
    3324:	d9800315 	stw	r6,12(sp)
    3328:	d9c00215 	stw	r7,8(sp)
    332c:	da000015 	stw	r8,0(sp)
    3330:	da400115 	stw	r9,4(sp)
    3334:	0004e080 	call	4e08 <__udivsi3>
    3338:	8009883a 	mov	r4,r16
    333c:	a00b883a 	mov	r5,r20
    3340:	1025883a 	mov	r18,r2
    3344:	0004e6c0 	call	4e6c <__umodsi3>
    3348:	d9c00217 	ldw	r7,8(sp)
    334c:	1004943a 	slli	r2,r2,16
    3350:	bcaf383a 	mul	r23,r23,r18
    3354:	393fffcc 	andi	r4,r7,65535
    3358:	2088b03a 	or	r4,r4,r2
    335c:	d9800317 	ldw	r6,12(sp)
    3360:	da000017 	ldw	r8,0(sp)
    3364:	da400117 	ldw	r9,4(sp)
    3368:	25c0062e 	bgeu	r4,r23,3384 <__divdf3+0x538>
    336c:	2709883a 	add	r4,r4,fp
    3370:	90bfffc4 	addi	r2,r18,-1
    3374:	27009436 	bltu	r4,fp,35c8 <__divdf3+0x77c>
    3378:	25c0932e 	bgeu	r4,r23,35c8 <__divdf3+0x77c>
    337c:	94bfff84 	addi	r18,r18,-2
    3380:	2709883a 	add	r4,r4,fp
    3384:	4004943a 	slli	r2,r8,16
    3388:	25efc83a 	sub	r23,r4,r23
    338c:	1490b03a 	or	r8,r2,r18
    3390:	4008d43a 	srli	r4,r8,16
    3394:	40ffffcc 	andi	r3,r8,65535
    3398:	30c5383a 	mul	r2,r6,r3
    339c:	1a47383a 	mul	r3,r3,r9
    33a0:	310d383a 	mul	r6,r6,r4
    33a4:	100ad43a 	srli	r5,r2,16
    33a8:	4913383a 	mul	r9,r9,r4
    33ac:	1987883a 	add	r3,r3,r6
    33b0:	28c7883a 	add	r3,r5,r3
    33b4:	1980022e 	bgeu	r3,r6,33c0 <__divdf3+0x574>
    33b8:	01000074 	movhi	r4,1
    33bc:	4913883a 	add	r9,r9,r4
    33c0:	1808d43a 	srli	r4,r3,16
    33c4:	1806943a 	slli	r3,r3,16
    33c8:	10bfffcc 	andi	r2,r2,65535
    33cc:	2253883a 	add	r9,r4,r9
    33d0:	1887883a 	add	r3,r3,r2
    33d4:	ba403836 	bltu	r23,r9,34b8 <__divdf3+0x66c>
    33d8:	ba403626 	beq	r23,r9,34b4 <__divdf3+0x668>
    33dc:	42000054 	ori	r8,r8,1
    33e0:	a880ffc4 	addi	r2,r21,1023
    33e4:	00bf570e 	bge	zero,r2,3144 <__alt_data_end+0xff803144>
    33e8:	40c001cc 	andi	r3,r8,7
    33ec:	18000726 	beq	r3,zero,340c <__divdf3+0x5c0>
    33f0:	40c003cc 	andi	r3,r8,15
    33f4:	01000104 	movi	r4,4
    33f8:	19000426 	beq	r3,r4,340c <__divdf3+0x5c0>
    33fc:	4107883a 	add	r3,r8,r4
    3400:	1a11803a 	cmpltu	r8,r3,r8
    3404:	8a23883a 	add	r17,r17,r8
    3408:	1811883a 	mov	r8,r3
    340c:	88c0402c 	andhi	r3,r17,256
    3410:	18000426 	beq	r3,zero,3424 <__divdf3+0x5d8>
    3414:	00ffc034 	movhi	r3,65280
    3418:	18ffffc4 	addi	r3,r3,-1
    341c:	a8810004 	addi	r2,r21,1024
    3420:	88e2703a 	and	r17,r17,r3
    3424:	00c1ff84 	movi	r3,2046
    3428:	18bee316 	blt	r3,r2,2fb8 <__alt_data_end+0xff802fb8>
    342c:	8824977a 	slli	r18,r17,29
    3430:	4010d0fa 	srli	r8,r8,3
    3434:	8822927a 	slli	r17,r17,9
    3438:	1081ffcc 	andi	r2,r2,2047
    343c:	9224b03a 	or	r18,r18,r8
    3440:	880ad33a 	srli	r5,r17,12
    3444:	98c0004c 	andi	r3,r19,1
    3448:	003edf06 	br	2fc8 <__alt_data_end+0xff802fc8>
    344c:	8080022c 	andhi	r2,r16,8
    3450:	10001226 	beq	r2,zero,349c <__divdf3+0x650>
    3454:	8880022c 	andhi	r2,r17,8
    3458:	1000101e 	bne	r2,zero,349c <__divdf3+0x650>
    345c:	00800434 	movhi	r2,16
    3460:	89400234 	orhi	r5,r17,8
    3464:	10bfffc4 	addi	r2,r2,-1
    3468:	b007883a 	mov	r3,r22
    346c:	288a703a 	and	r5,r5,r2
    3470:	4025883a 	mov	r18,r8
    3474:	003f3106 	br	313c <__alt_data_end+0xff80313c>
    3478:	008000c4 	movi	r2,3
    347c:	3880a626 	beq	r7,r2,3718 <__divdf3+0x8cc>
    3480:	00800044 	movi	r2,1
    3484:	3880521e 	bne	r7,r2,35d0 <__divdf3+0x784>
    3488:	b807883a 	mov	r3,r23
    348c:	0005883a 	mov	r2,zero
    3490:	000b883a 	mov	r5,zero
    3494:	0025883a 	mov	r18,zero
    3498:	003ecb06 	br	2fc8 <__alt_data_end+0xff802fc8>
    349c:	00800434 	movhi	r2,16
    34a0:	81400234 	orhi	r5,r16,8
    34a4:	10bfffc4 	addi	r2,r2,-1
    34a8:	a007883a 	mov	r3,r20
    34ac:	288a703a 	and	r5,r5,r2
    34b0:	003f2206 	br	313c <__alt_data_end+0xff80313c>
    34b4:	183fca26 	beq	r3,zero,33e0 <__alt_data_end+0xff8033e0>
    34b8:	e5ef883a 	add	r23,fp,r23
    34bc:	40bfffc4 	addi	r2,r8,-1
    34c0:	bf00392e 	bgeu	r23,fp,35a8 <__divdf3+0x75c>
    34c4:	1011883a 	mov	r8,r2
    34c8:	ba7fc41e 	bne	r23,r9,33dc <__alt_data_end+0xff8033dc>
    34cc:	b0ffc31e 	bne	r22,r3,33dc <__alt_data_end+0xff8033dc>
    34d0:	003fc306 	br	33e0 <__alt_data_end+0xff8033e0>
    34d4:	143ff604 	addi	r16,r2,-40
    34d8:	9c20983a 	sll	r16,r19,r16
    34dc:	0025883a 	mov	r18,zero
    34e0:	003ee206 	br	306c <__alt_data_end+0xff80306c>
    34e4:	d9800315 	stw	r6,12(sp)
    34e8:	d9c00215 	stw	r7,8(sp)
    34ec:	0004cac0 	call	4cac <__clzsi2>
    34f0:	10800804 	addi	r2,r2,32
    34f4:	d9c00217 	ldw	r7,8(sp)
    34f8:	d9800317 	ldw	r6,12(sp)
    34fc:	003ed106 	br	3044 <__alt_data_end+0xff803044>
    3500:	147ff604 	addi	r17,r2,-40
    3504:	3462983a 	sll	r17,r6,r17
    3508:	0011883a 	mov	r8,zero
    350c:	003ef506 	br	30e4 <__alt_data_end+0xff8030e4>
    3510:	3009883a 	mov	r4,r6
    3514:	d9800315 	stw	r6,12(sp)
    3518:	da400115 	stw	r9,4(sp)
    351c:	0004cac0 	call	4cac <__clzsi2>
    3520:	10800804 	addi	r2,r2,32
    3524:	da400117 	ldw	r9,4(sp)
    3528:	d9800317 	ldw	r6,12(sp)
    352c:	003ee306 	br	30bc <__alt_data_end+0xff8030bc>
    3530:	85a1883a 	add	r16,r16,r22
    3534:	8585803a 	cmpltu	r2,r16,r22
    3538:	1705883a 	add	r2,r2,fp
    353c:	14a5883a 	add	r18,r2,r18
    3540:	88bfffc4 	addi	r2,r17,-1
    3544:	e4800c2e 	bgeu	fp,r18,3578 <__divdf3+0x72c>
    3548:	90c03e36 	bltu	r18,r3,3644 <__divdf3+0x7f8>
    354c:	1c806926 	beq	r3,r18,36f4 <__divdf3+0x8a8>
    3550:	90c7c83a 	sub	r3,r18,r3
    3554:	1023883a 	mov	r17,r2
    3558:	003f5206 	br	32a4 <__alt_data_end+0xff8032a4>
    355c:	923f0436 	bltu	r18,r8,3170 <__alt_data_end+0xff803170>
    3560:	800897fa 	slli	r4,r16,31
    3564:	9004d07a 	srli	r2,r18,1
    3568:	8006d07a 	srli	r3,r16,1
    356c:	902097fa 	slli	r16,r18,31
    3570:	20a4b03a 	or	r18,r4,r2
    3574:	003f0106 	br	317c <__alt_data_end+0xff80317c>
    3578:	e4bff51e 	bne	fp,r18,3550 <__alt_data_end+0xff803550>
    357c:	85bff22e 	bgeu	r16,r22,3548 <__alt_data_end+0xff803548>
    3580:	e0c7c83a 	sub	r3,fp,r3
    3584:	1023883a 	mov	r17,r2
    3588:	003f4606 	br	32a4 <__alt_data_end+0xff8032a4>
    358c:	100f883a 	mov	r7,r2
    3590:	003f2b06 	br	3240 <__alt_data_end+0xff803240>
    3594:	180d883a 	mov	r6,r3
    3598:	003f1306 	br	31e8 <__alt_data_end+0xff8031e8>
    359c:	813fe436 	bltu	r16,r4,3530 <__alt_data_end+0xff803530>
    35a0:	0007883a 	mov	r3,zero
    35a4:	003f3f06 	br	32a4 <__alt_data_end+0xff8032a4>
    35a8:	ba402c36 	bltu	r23,r9,365c <__divdf3+0x810>
    35ac:	4dc05426 	beq	r9,r23,3700 <__divdf3+0x8b4>
    35b0:	1011883a 	mov	r8,r2
    35b4:	003f8906 	br	33dc <__alt_data_end+0xff8033dc>
    35b8:	023fffc4 	movi	r8,-1
    35bc:	003f8806 	br	33e0 <__alt_data_end+0xff8033e0>
    35c0:	1811883a 	mov	r8,r3
    35c4:	003f5406 	br	3318 <__alt_data_end+0xff803318>
    35c8:	1025883a 	mov	r18,r2
    35cc:	003f6d06 	br	3384 <__alt_data_end+0xff803384>
    35d0:	b827883a 	mov	r19,r23
    35d4:	003f8206 	br	33e0 <__alt_data_end+0xff8033e0>
    35d8:	010007c4 	movi	r4,31
    35dc:	20c02616 	blt	r4,r3,3678 <__divdf3+0x82c>
    35e0:	00800804 	movi	r2,32
    35e4:	10c5c83a 	sub	r2,r2,r3
    35e8:	888a983a 	sll	r5,r17,r2
    35ec:	40c8d83a 	srl	r4,r8,r3
    35f0:	4084983a 	sll	r2,r8,r2
    35f4:	88e2d83a 	srl	r17,r17,r3
    35f8:	2906b03a 	or	r3,r5,r4
    35fc:	1004c03a 	cmpne	r2,r2,zero
    3600:	1886b03a 	or	r3,r3,r2
    3604:	188001cc 	andi	r2,r3,7
    3608:	10000726 	beq	r2,zero,3628 <__divdf3+0x7dc>
    360c:	188003cc 	andi	r2,r3,15
    3610:	01000104 	movi	r4,4
    3614:	11000426 	beq	r2,r4,3628 <__divdf3+0x7dc>
    3618:	1805883a 	mov	r2,r3
    361c:	10c00104 	addi	r3,r2,4
    3620:	1885803a 	cmpltu	r2,r3,r2
    3624:	88a3883a 	add	r17,r17,r2
    3628:	8880202c 	andhi	r2,r17,128
    362c:	10002726 	beq	r2,zero,36cc <__divdf3+0x880>
    3630:	98c0004c 	andi	r3,r19,1
    3634:	00800044 	movi	r2,1
    3638:	000b883a 	mov	r5,zero
    363c:	0025883a 	mov	r18,zero
    3640:	003e6106 	br	2fc8 <__alt_data_end+0xff802fc8>
    3644:	85a1883a 	add	r16,r16,r22
    3648:	8585803a 	cmpltu	r2,r16,r22
    364c:	1705883a 	add	r2,r2,fp
    3650:	14a5883a 	add	r18,r2,r18
    3654:	8c7fff84 	addi	r17,r17,-2
    3658:	003f1106 	br	32a0 <__alt_data_end+0xff8032a0>
    365c:	b589883a 	add	r4,r22,r22
    3660:	25ad803a 	cmpltu	r22,r4,r22
    3664:	b739883a 	add	fp,r22,fp
    3668:	40bfff84 	addi	r2,r8,-2
    366c:	bf2f883a 	add	r23,r23,fp
    3670:	202d883a 	mov	r22,r4
    3674:	003f9306 	br	34c4 <__alt_data_end+0xff8034c4>
    3678:	013ff844 	movi	r4,-31
    367c:	2085c83a 	sub	r2,r4,r2
    3680:	8888d83a 	srl	r4,r17,r2
    3684:	00800804 	movi	r2,32
    3688:	18802126 	beq	r3,r2,3710 <__divdf3+0x8c4>
    368c:	00801004 	movi	r2,64
    3690:	10c5c83a 	sub	r2,r2,r3
    3694:	8884983a 	sll	r2,r17,r2
    3698:	1204b03a 	or	r2,r2,r8
    369c:	1004c03a 	cmpne	r2,r2,zero
    36a0:	2084b03a 	or	r2,r4,r2
    36a4:	144001cc 	andi	r17,r2,7
    36a8:	88000d1e 	bne	r17,zero,36e0 <__divdf3+0x894>
    36ac:	000b883a 	mov	r5,zero
    36b0:	1024d0fa 	srli	r18,r2,3
    36b4:	98c0004c 	andi	r3,r19,1
    36b8:	0005883a 	mov	r2,zero
    36bc:	9464b03a 	or	r18,r18,r17
    36c0:	003e4106 	br	2fc8 <__alt_data_end+0xff802fc8>
    36c4:	1007883a 	mov	r3,r2
    36c8:	0023883a 	mov	r17,zero
    36cc:	880a927a 	slli	r5,r17,9
    36d0:	1805883a 	mov	r2,r3
    36d4:	8822977a 	slli	r17,r17,29
    36d8:	280ad33a 	srli	r5,r5,12
    36dc:	003ff406 	br	36b0 <__alt_data_end+0xff8036b0>
    36e0:	10c003cc 	andi	r3,r2,15
    36e4:	01000104 	movi	r4,4
    36e8:	193ff626 	beq	r3,r4,36c4 <__alt_data_end+0xff8036c4>
    36ec:	0023883a 	mov	r17,zero
    36f0:	003fca06 	br	361c <__alt_data_end+0xff80361c>
    36f4:	813fd336 	bltu	r16,r4,3644 <__alt_data_end+0xff803644>
    36f8:	1023883a 	mov	r17,r2
    36fc:	003fa806 	br	35a0 <__alt_data_end+0xff8035a0>
    3700:	b0ffd636 	bltu	r22,r3,365c <__alt_data_end+0xff80365c>
    3704:	1011883a 	mov	r8,r2
    3708:	b0ff341e 	bne	r22,r3,33dc <__alt_data_end+0xff8033dc>
    370c:	003f3406 	br	33e0 <__alt_data_end+0xff8033e0>
    3710:	0005883a 	mov	r2,zero
    3714:	003fe006 	br	3698 <__alt_data_end+0xff803698>
    3718:	00800434 	movhi	r2,16
    371c:	89400234 	orhi	r5,r17,8
    3720:	10bfffc4 	addi	r2,r2,-1
    3724:	b807883a 	mov	r3,r23
    3728:	288a703a 	and	r5,r5,r2
    372c:	4025883a 	mov	r18,r8
    3730:	003e8206 	br	313c <__alt_data_end+0xff80313c>

00003734 <__gedf2>:
    3734:	2804d53a 	srli	r2,r5,20
    3738:	3806d53a 	srli	r3,r7,20
    373c:	02000434 	movhi	r8,16
    3740:	423fffc4 	addi	r8,r8,-1
    3744:	1081ffcc 	andi	r2,r2,2047
    3748:	0241ffc4 	movi	r9,2047
    374c:	2a14703a 	and	r10,r5,r8
    3750:	18c1ffcc 	andi	r3,r3,2047
    3754:	3a10703a 	and	r8,r7,r8
    3758:	280ad7fa 	srli	r5,r5,31
    375c:	380ed7fa 	srli	r7,r7,31
    3760:	12401d26 	beq	r2,r9,37d8 <__gedf2+0xa4>
    3764:	0241ffc4 	movi	r9,2047
    3768:	1a401226 	beq	r3,r9,37b4 <__gedf2+0x80>
    376c:	1000081e 	bne	r2,zero,3790 <__gedf2+0x5c>
    3770:	2296b03a 	or	r11,r4,r10
    3774:	5813003a 	cmpeq	r9,r11,zero
    3778:	1800091e 	bne	r3,zero,37a0 <__gedf2+0x6c>
    377c:	3218b03a 	or	r12,r6,r8
    3780:	6000071e 	bne	r12,zero,37a0 <__gedf2+0x6c>
    3784:	0005883a 	mov	r2,zero
    3788:	5800101e 	bne	r11,zero,37cc <__gedf2+0x98>
    378c:	f800283a 	ret
    3790:	18000c1e 	bne	r3,zero,37c4 <__gedf2+0x90>
    3794:	3212b03a 	or	r9,r6,r8
    3798:	48000c26 	beq	r9,zero,37cc <__gedf2+0x98>
    379c:	0013883a 	mov	r9,zero
    37a0:	39c03fcc 	andi	r7,r7,255
    37a4:	48000826 	beq	r9,zero,37c8 <__gedf2+0x94>
    37a8:	38000926 	beq	r7,zero,37d0 <__gedf2+0x9c>
    37ac:	00800044 	movi	r2,1
    37b0:	f800283a 	ret
    37b4:	3212b03a 	or	r9,r6,r8
    37b8:	483fec26 	beq	r9,zero,376c <__alt_data_end+0xff80376c>
    37bc:	00bfff84 	movi	r2,-2
    37c0:	f800283a 	ret
    37c4:	39c03fcc 	andi	r7,r7,255
    37c8:	29c00626 	beq	r5,r7,37e4 <__gedf2+0xb0>
    37cc:	283ff726 	beq	r5,zero,37ac <__alt_data_end+0xff8037ac>
    37d0:	00bfffc4 	movi	r2,-1
    37d4:	f800283a 	ret
    37d8:	2292b03a 	or	r9,r4,r10
    37dc:	483fe126 	beq	r9,zero,3764 <__alt_data_end+0xff803764>
    37e0:	003ff606 	br	37bc <__alt_data_end+0xff8037bc>
    37e4:	18bff916 	blt	r3,r2,37cc <__alt_data_end+0xff8037cc>
    37e8:	10c00316 	blt	r2,r3,37f8 <__gedf2+0xc4>
    37ec:	42bff736 	bltu	r8,r10,37cc <__alt_data_end+0xff8037cc>
    37f0:	52000326 	beq	r10,r8,3800 <__gedf2+0xcc>
    37f4:	5200042e 	bgeu	r10,r8,3808 <__gedf2+0xd4>
    37f8:	283fec1e 	bne	r5,zero,37ac <__alt_data_end+0xff8037ac>
    37fc:	003ff406 	br	37d0 <__alt_data_end+0xff8037d0>
    3800:	313ff236 	bltu	r6,r4,37cc <__alt_data_end+0xff8037cc>
    3804:	21bffc36 	bltu	r4,r6,37f8 <__alt_data_end+0xff8037f8>
    3808:	0005883a 	mov	r2,zero
    380c:	f800283a 	ret

00003810 <__ledf2>:
    3810:	2804d53a 	srli	r2,r5,20
    3814:	3810d53a 	srli	r8,r7,20
    3818:	00c00434 	movhi	r3,16
    381c:	18ffffc4 	addi	r3,r3,-1
    3820:	1081ffcc 	andi	r2,r2,2047
    3824:	0241ffc4 	movi	r9,2047
    3828:	28d4703a 	and	r10,r5,r3
    382c:	4201ffcc 	andi	r8,r8,2047
    3830:	38c6703a 	and	r3,r7,r3
    3834:	280ad7fa 	srli	r5,r5,31
    3838:	380ed7fa 	srli	r7,r7,31
    383c:	12401f26 	beq	r2,r9,38bc <__ledf2+0xac>
    3840:	0241ffc4 	movi	r9,2047
    3844:	42401426 	beq	r8,r9,3898 <__ledf2+0x88>
    3848:	1000091e 	bne	r2,zero,3870 <__ledf2+0x60>
    384c:	2296b03a 	or	r11,r4,r10
    3850:	5813003a 	cmpeq	r9,r11,zero
    3854:	29403fcc 	andi	r5,r5,255
    3858:	40000a1e 	bne	r8,zero,3884 <__ledf2+0x74>
    385c:	30d8b03a 	or	r12,r6,r3
    3860:	6000081e 	bne	r12,zero,3884 <__ledf2+0x74>
    3864:	0005883a 	mov	r2,zero
    3868:	5800111e 	bne	r11,zero,38b0 <__ledf2+0xa0>
    386c:	f800283a 	ret
    3870:	29403fcc 	andi	r5,r5,255
    3874:	40000c1e 	bne	r8,zero,38a8 <__ledf2+0x98>
    3878:	30d2b03a 	or	r9,r6,r3
    387c:	48000c26 	beq	r9,zero,38b0 <__ledf2+0xa0>
    3880:	0013883a 	mov	r9,zero
    3884:	39c03fcc 	andi	r7,r7,255
    3888:	48000826 	beq	r9,zero,38ac <__ledf2+0x9c>
    388c:	38001126 	beq	r7,zero,38d4 <__ledf2+0xc4>
    3890:	00800044 	movi	r2,1
    3894:	f800283a 	ret
    3898:	30d2b03a 	or	r9,r6,r3
    389c:	483fea26 	beq	r9,zero,3848 <__alt_data_end+0xff803848>
    38a0:	00800084 	movi	r2,2
    38a4:	f800283a 	ret
    38a8:	39c03fcc 	andi	r7,r7,255
    38ac:	39400726 	beq	r7,r5,38cc <__ledf2+0xbc>
    38b0:	2800081e 	bne	r5,zero,38d4 <__ledf2+0xc4>
    38b4:	00800044 	movi	r2,1
    38b8:	f800283a 	ret
    38bc:	2292b03a 	or	r9,r4,r10
    38c0:	483fdf26 	beq	r9,zero,3840 <__alt_data_end+0xff803840>
    38c4:	00800084 	movi	r2,2
    38c8:	f800283a 	ret
    38cc:	4080030e 	bge	r8,r2,38dc <__ledf2+0xcc>
    38d0:	383fef26 	beq	r7,zero,3890 <__alt_data_end+0xff803890>
    38d4:	00bfffc4 	movi	r2,-1
    38d8:	f800283a 	ret
    38dc:	123feb16 	blt	r2,r8,388c <__alt_data_end+0xff80388c>
    38e0:	1abff336 	bltu	r3,r10,38b0 <__alt_data_end+0xff8038b0>
    38e4:	50c00326 	beq	r10,r3,38f4 <__ledf2+0xe4>
    38e8:	50c0042e 	bgeu	r10,r3,38fc <__ledf2+0xec>
    38ec:	283fe81e 	bne	r5,zero,3890 <__alt_data_end+0xff803890>
    38f0:	003ff806 	br	38d4 <__alt_data_end+0xff8038d4>
    38f4:	313fee36 	bltu	r6,r4,38b0 <__alt_data_end+0xff8038b0>
    38f8:	21bffc36 	bltu	r4,r6,38ec <__alt_data_end+0xff8038ec>
    38fc:	0005883a 	mov	r2,zero
    3900:	f800283a 	ret

00003904 <__muldf3>:
    3904:	defff304 	addi	sp,sp,-52
    3908:	2804d53a 	srli	r2,r5,20
    390c:	dd800915 	stw	r22,36(sp)
    3910:	282cd7fa 	srli	r22,r5,31
    3914:	dc000315 	stw	r16,12(sp)
    3918:	04000434 	movhi	r16,16
    391c:	dd400815 	stw	r21,32(sp)
    3920:	dc800515 	stw	r18,20(sp)
    3924:	843fffc4 	addi	r16,r16,-1
    3928:	dfc00c15 	stw	ra,48(sp)
    392c:	df000b15 	stw	fp,44(sp)
    3930:	ddc00a15 	stw	r23,40(sp)
    3934:	dd000715 	stw	r20,28(sp)
    3938:	dcc00615 	stw	r19,24(sp)
    393c:	dc400415 	stw	r17,16(sp)
    3940:	1481ffcc 	andi	r18,r2,2047
    3944:	2c20703a 	and	r16,r5,r16
    3948:	b02b883a 	mov	r21,r22
    394c:	b2403fcc 	andi	r9,r22,255
    3950:	90006026 	beq	r18,zero,3ad4 <__muldf3+0x1d0>
    3954:	0081ffc4 	movi	r2,2047
    3958:	2029883a 	mov	r20,r4
    395c:	90803626 	beq	r18,r2,3a38 <__muldf3+0x134>
    3960:	80800434 	orhi	r2,r16,16
    3964:	100490fa 	slli	r2,r2,3
    3968:	2020d77a 	srli	r16,r4,29
    396c:	202890fa 	slli	r20,r4,3
    3970:	94bf0044 	addi	r18,r18,-1023
    3974:	80a0b03a 	or	r16,r16,r2
    3978:	0027883a 	mov	r19,zero
    397c:	0039883a 	mov	fp,zero
    3980:	3804d53a 	srli	r2,r7,20
    3984:	382ed7fa 	srli	r23,r7,31
    3988:	04400434 	movhi	r17,16
    398c:	8c7fffc4 	addi	r17,r17,-1
    3990:	1081ffcc 	andi	r2,r2,2047
    3994:	3011883a 	mov	r8,r6
    3998:	3c62703a 	and	r17,r7,r17
    399c:	ba803fcc 	andi	r10,r23,255
    39a0:	10006d26 	beq	r2,zero,3b58 <__muldf3+0x254>
    39a4:	00c1ffc4 	movi	r3,2047
    39a8:	10c06526 	beq	r2,r3,3b40 <__muldf3+0x23c>
    39ac:	88c00434 	orhi	r3,r17,16
    39b0:	180690fa 	slli	r3,r3,3
    39b4:	3022d77a 	srli	r17,r6,29
    39b8:	301090fa 	slli	r8,r6,3
    39bc:	10bf0044 	addi	r2,r2,-1023
    39c0:	88e2b03a 	or	r17,r17,r3
    39c4:	000b883a 	mov	r5,zero
    39c8:	9085883a 	add	r2,r18,r2
    39cc:	2cc8b03a 	or	r4,r5,r19
    39d0:	00c003c4 	movi	r3,15
    39d4:	bdacf03a 	xor	r22,r23,r22
    39d8:	12c00044 	addi	r11,r2,1
    39dc:	19009936 	bltu	r3,r4,3c44 <__muldf3+0x340>
    39e0:	200890ba 	slli	r4,r4,2
    39e4:	00c00034 	movhi	r3,0
    39e8:	18ce7e04 	addi	r3,r3,14840
    39ec:	20c9883a 	add	r4,r4,r3
    39f0:	20c00017 	ldw	r3,0(r4)
    39f4:	1800683a 	jmp	r3
    39f8:	00003c44 	movi	zero,241
    39fc:	00003a58 	cmpnei	zero,zero,233
    3a00:	00003a58 	cmpnei	zero,zero,233
    3a04:	00003a54 	movui	zero,233
    3a08:	00003c20 	cmpeqi	zero,zero,240
    3a0c:	00003c20 	cmpeqi	zero,zero,240
    3a10:	00003c08 	cmpgei	zero,zero,240
    3a14:	00003a54 	movui	zero,233
    3a18:	00003c20 	cmpeqi	zero,zero,240
    3a1c:	00003c08 	cmpgei	zero,zero,240
    3a20:	00003c20 	cmpeqi	zero,zero,240
    3a24:	00003a54 	movui	zero,233
    3a28:	00003c30 	cmpltui	zero,zero,240
    3a2c:	00003c30 	cmpltui	zero,zero,240
    3a30:	00003c30 	cmpltui	zero,zero,240
    3a34:	00003e4c 	andi	zero,zero,249
    3a38:	2404b03a 	or	r2,r4,r16
    3a3c:	10006f1e 	bne	r2,zero,3bfc <__muldf3+0x2f8>
    3a40:	04c00204 	movi	r19,8
    3a44:	0021883a 	mov	r16,zero
    3a48:	0029883a 	mov	r20,zero
    3a4c:	07000084 	movi	fp,2
    3a50:	003fcb06 	br	3980 <__alt_data_end+0xff803980>
    3a54:	502d883a 	mov	r22,r10
    3a58:	00800084 	movi	r2,2
    3a5c:	28805726 	beq	r5,r2,3bbc <__muldf3+0x2b8>
    3a60:	008000c4 	movi	r2,3
    3a64:	28816626 	beq	r5,r2,4000 <__muldf3+0x6fc>
    3a68:	00800044 	movi	r2,1
    3a6c:	2881411e 	bne	r5,r2,3f74 <__muldf3+0x670>
    3a70:	b02b883a 	mov	r21,r22
    3a74:	0005883a 	mov	r2,zero
    3a78:	000b883a 	mov	r5,zero
    3a7c:	0029883a 	mov	r20,zero
    3a80:	1004953a 	slli	r2,r2,20
    3a84:	a8c03fcc 	andi	r3,r21,255
    3a88:	04400434 	movhi	r17,16
    3a8c:	8c7fffc4 	addi	r17,r17,-1
    3a90:	180697fa 	slli	r3,r3,31
    3a94:	2c4a703a 	and	r5,r5,r17
    3a98:	288ab03a 	or	r5,r5,r2
    3a9c:	28c6b03a 	or	r3,r5,r3
    3aa0:	a005883a 	mov	r2,r20
    3aa4:	dfc00c17 	ldw	ra,48(sp)
    3aa8:	df000b17 	ldw	fp,44(sp)
    3aac:	ddc00a17 	ldw	r23,40(sp)
    3ab0:	dd800917 	ldw	r22,36(sp)
    3ab4:	dd400817 	ldw	r21,32(sp)
    3ab8:	dd000717 	ldw	r20,28(sp)
    3abc:	dcc00617 	ldw	r19,24(sp)
    3ac0:	dc800517 	ldw	r18,20(sp)
    3ac4:	dc400417 	ldw	r17,16(sp)
    3ac8:	dc000317 	ldw	r16,12(sp)
    3acc:	dec00d04 	addi	sp,sp,52
    3ad0:	f800283a 	ret
    3ad4:	2404b03a 	or	r2,r4,r16
    3ad8:	2027883a 	mov	r19,r4
    3adc:	10004226 	beq	r2,zero,3be8 <__muldf3+0x2e4>
    3ae0:	8000fc26 	beq	r16,zero,3ed4 <__muldf3+0x5d0>
    3ae4:	8009883a 	mov	r4,r16
    3ae8:	d9800215 	stw	r6,8(sp)
    3aec:	d9c00015 	stw	r7,0(sp)
    3af0:	da400115 	stw	r9,4(sp)
    3af4:	0004cac0 	call	4cac <__clzsi2>
    3af8:	d9800217 	ldw	r6,8(sp)
    3afc:	d9c00017 	ldw	r7,0(sp)
    3b00:	da400117 	ldw	r9,4(sp)
    3b04:	113ffd44 	addi	r4,r2,-11
    3b08:	00c00704 	movi	r3,28
    3b0c:	1900ed16 	blt	r3,r4,3ec4 <__muldf3+0x5c0>
    3b10:	00c00744 	movi	r3,29
    3b14:	147ffe04 	addi	r17,r2,-8
    3b18:	1907c83a 	sub	r3,r3,r4
    3b1c:	8460983a 	sll	r16,r16,r17
    3b20:	98c6d83a 	srl	r3,r19,r3
    3b24:	9c68983a 	sll	r20,r19,r17
    3b28:	1c20b03a 	or	r16,r3,r16
    3b2c:	1080fcc4 	addi	r2,r2,1011
    3b30:	00a5c83a 	sub	r18,zero,r2
    3b34:	0027883a 	mov	r19,zero
    3b38:	0039883a 	mov	fp,zero
    3b3c:	003f9006 	br	3980 <__alt_data_end+0xff803980>
    3b40:	3446b03a 	or	r3,r6,r17
    3b44:	1800261e 	bne	r3,zero,3be0 <__muldf3+0x2dc>
    3b48:	0023883a 	mov	r17,zero
    3b4c:	0011883a 	mov	r8,zero
    3b50:	01400084 	movi	r5,2
    3b54:	003f9c06 	br	39c8 <__alt_data_end+0xff8039c8>
    3b58:	3446b03a 	or	r3,r6,r17
    3b5c:	18001c26 	beq	r3,zero,3bd0 <__muldf3+0x2cc>
    3b60:	8800ce26 	beq	r17,zero,3e9c <__muldf3+0x598>
    3b64:	8809883a 	mov	r4,r17
    3b68:	d9800215 	stw	r6,8(sp)
    3b6c:	da400115 	stw	r9,4(sp)
    3b70:	da800015 	stw	r10,0(sp)
    3b74:	0004cac0 	call	4cac <__clzsi2>
    3b78:	d9800217 	ldw	r6,8(sp)
    3b7c:	da400117 	ldw	r9,4(sp)
    3b80:	da800017 	ldw	r10,0(sp)
    3b84:	113ffd44 	addi	r4,r2,-11
    3b88:	00c00704 	movi	r3,28
    3b8c:	1900bf16 	blt	r3,r4,3e8c <__muldf3+0x588>
    3b90:	00c00744 	movi	r3,29
    3b94:	123ffe04 	addi	r8,r2,-8
    3b98:	1907c83a 	sub	r3,r3,r4
    3b9c:	8a22983a 	sll	r17,r17,r8
    3ba0:	30c6d83a 	srl	r3,r6,r3
    3ba4:	3210983a 	sll	r8,r6,r8
    3ba8:	1c62b03a 	or	r17,r3,r17
    3bac:	1080fcc4 	addi	r2,r2,1011
    3bb0:	0085c83a 	sub	r2,zero,r2
    3bb4:	000b883a 	mov	r5,zero
    3bb8:	003f8306 	br	39c8 <__alt_data_end+0xff8039c8>
    3bbc:	b02b883a 	mov	r21,r22
    3bc0:	0081ffc4 	movi	r2,2047
    3bc4:	000b883a 	mov	r5,zero
    3bc8:	0029883a 	mov	r20,zero
    3bcc:	003fac06 	br	3a80 <__alt_data_end+0xff803a80>
    3bd0:	0023883a 	mov	r17,zero
    3bd4:	0011883a 	mov	r8,zero
    3bd8:	01400044 	movi	r5,1
    3bdc:	003f7a06 	br	39c8 <__alt_data_end+0xff8039c8>
    3be0:	014000c4 	movi	r5,3
    3be4:	003f7806 	br	39c8 <__alt_data_end+0xff8039c8>
    3be8:	04c00104 	movi	r19,4
    3bec:	0021883a 	mov	r16,zero
    3bf0:	0029883a 	mov	r20,zero
    3bf4:	07000044 	movi	fp,1
    3bf8:	003f6106 	br	3980 <__alt_data_end+0xff803980>
    3bfc:	04c00304 	movi	r19,12
    3c00:	070000c4 	movi	fp,3
    3c04:	003f5e06 	br	3980 <__alt_data_end+0xff803980>
    3c08:	01400434 	movhi	r5,16
    3c0c:	002b883a 	mov	r21,zero
    3c10:	297fffc4 	addi	r5,r5,-1
    3c14:	053fffc4 	movi	r20,-1
    3c18:	0081ffc4 	movi	r2,2047
    3c1c:	003f9806 	br	3a80 <__alt_data_end+0xff803a80>
    3c20:	8023883a 	mov	r17,r16
    3c24:	a011883a 	mov	r8,r20
    3c28:	e00b883a 	mov	r5,fp
    3c2c:	003f8a06 	br	3a58 <__alt_data_end+0xff803a58>
    3c30:	8023883a 	mov	r17,r16
    3c34:	a011883a 	mov	r8,r20
    3c38:	482d883a 	mov	r22,r9
    3c3c:	e00b883a 	mov	r5,fp
    3c40:	003f8506 	br	3a58 <__alt_data_end+0xff803a58>
    3c44:	a00ad43a 	srli	r5,r20,16
    3c48:	401ad43a 	srli	r13,r8,16
    3c4c:	a53fffcc 	andi	r20,r20,65535
    3c50:	423fffcc 	andi	r8,r8,65535
    3c54:	4519383a 	mul	r12,r8,r20
    3c58:	4147383a 	mul	r3,r8,r5
    3c5c:	6d09383a 	mul	r4,r13,r20
    3c60:	600cd43a 	srli	r6,r12,16
    3c64:	2b5d383a 	mul	r14,r5,r13
    3c68:	20c9883a 	add	r4,r4,r3
    3c6c:	310d883a 	add	r6,r6,r4
    3c70:	30c0022e 	bgeu	r6,r3,3c7c <__muldf3+0x378>
    3c74:	00c00074 	movhi	r3,1
    3c78:	70dd883a 	add	r14,r14,r3
    3c7c:	8826d43a 	srli	r19,r17,16
    3c80:	8bffffcc 	andi	r15,r17,65535
    3c84:	7d23383a 	mul	r17,r15,r20
    3c88:	7949383a 	mul	r4,r15,r5
    3c8c:	9d29383a 	mul	r20,r19,r20
    3c90:	8814d43a 	srli	r10,r17,16
    3c94:	3012943a 	slli	r9,r6,16
    3c98:	a129883a 	add	r20,r20,r4
    3c9c:	633fffcc 	andi	r12,r12,65535
    3ca0:	5515883a 	add	r10,r10,r20
    3ca4:	3006d43a 	srli	r3,r6,16
    3ca8:	4b13883a 	add	r9,r9,r12
    3cac:	2ccb383a 	mul	r5,r5,r19
    3cb0:	5100022e 	bgeu	r10,r4,3cbc <__muldf3+0x3b8>
    3cb4:	01000074 	movhi	r4,1
    3cb8:	290b883a 	add	r5,r5,r4
    3cbc:	802ad43a 	srli	r21,r16,16
    3cc0:	843fffcc 	andi	r16,r16,65535
    3cc4:	440d383a 	mul	r6,r8,r16
    3cc8:	4565383a 	mul	r18,r8,r21
    3ccc:	8349383a 	mul	r4,r16,r13
    3cd0:	500e943a 	slli	r7,r10,16
    3cd4:	3010d43a 	srli	r8,r6,16
    3cd8:	5028d43a 	srli	r20,r10,16
    3cdc:	2489883a 	add	r4,r4,r18
    3ce0:	8abfffcc 	andi	r10,r17,65535
    3ce4:	3a95883a 	add	r10,r7,r10
    3ce8:	4119883a 	add	r12,r8,r4
    3cec:	a169883a 	add	r20,r20,r5
    3cf0:	1a87883a 	add	r3,r3,r10
    3cf4:	6d5b383a 	mul	r13,r13,r21
    3cf8:	6480022e 	bgeu	r12,r18,3d04 <__muldf3+0x400>
    3cfc:	01000074 	movhi	r4,1
    3d00:	691b883a 	add	r13,r13,r4
    3d04:	7c25383a 	mul	r18,r15,r16
    3d08:	7d4b383a 	mul	r5,r15,r21
    3d0c:	84cf383a 	mul	r7,r16,r19
    3d10:	901ed43a 	srli	r15,r18,16
    3d14:	6008d43a 	srli	r4,r12,16
    3d18:	6010943a 	slli	r8,r12,16
    3d1c:	394f883a 	add	r7,r7,r5
    3d20:	333fffcc 	andi	r12,r6,65535
    3d24:	79df883a 	add	r15,r15,r7
    3d28:	235b883a 	add	r13,r4,r13
    3d2c:	9d63383a 	mul	r17,r19,r21
    3d30:	4309883a 	add	r4,r8,r12
    3d34:	7940022e 	bgeu	r15,r5,3d40 <__muldf3+0x43c>
    3d38:	01400074 	movhi	r5,1
    3d3c:	8963883a 	add	r17,r17,r5
    3d40:	780a943a 	slli	r5,r15,16
    3d44:	91bfffcc 	andi	r6,r18,65535
    3d48:	70c7883a 	add	r3,r14,r3
    3d4c:	298d883a 	add	r6,r5,r6
    3d50:	1a8f803a 	cmpltu	r7,r3,r10
    3d54:	350b883a 	add	r5,r6,r20
    3d58:	20c7883a 	add	r3,r4,r3
    3d5c:	3955883a 	add	r10,r7,r5
    3d60:	1909803a 	cmpltu	r4,r3,r4
    3d64:	6a91883a 	add	r8,r13,r10
    3d68:	780cd43a 	srli	r6,r15,16
    3d6c:	2219883a 	add	r12,r4,r8
    3d70:	2d0b803a 	cmpltu	r5,r5,r20
    3d74:	51cf803a 	cmpltu	r7,r10,r7
    3d78:	29ceb03a 	or	r7,r5,r7
    3d7c:	4351803a 	cmpltu	r8,r8,r13
    3d80:	610b803a 	cmpltu	r5,r12,r4
    3d84:	4148b03a 	or	r4,r8,r5
    3d88:	398f883a 	add	r7,r7,r6
    3d8c:	3909883a 	add	r4,r7,r4
    3d90:	1810927a 	slli	r8,r3,9
    3d94:	2449883a 	add	r4,r4,r17
    3d98:	2008927a 	slli	r4,r4,9
    3d9c:	6022d5fa 	srli	r17,r12,23
    3da0:	1806d5fa 	srli	r3,r3,23
    3da4:	4252b03a 	or	r9,r8,r9
    3da8:	600a927a 	slli	r5,r12,9
    3dac:	4810c03a 	cmpne	r8,r9,zero
    3db0:	2462b03a 	or	r17,r4,r17
    3db4:	40c6b03a 	or	r3,r8,r3
    3db8:	8900402c 	andhi	r4,r17,256
    3dbc:	1950b03a 	or	r8,r3,r5
    3dc0:	20000726 	beq	r4,zero,3de0 <__muldf3+0x4dc>
    3dc4:	4006d07a 	srli	r3,r8,1
    3dc8:	880497fa 	slli	r2,r17,31
    3dcc:	4200004c 	andi	r8,r8,1
    3dd0:	8822d07a 	srli	r17,r17,1
    3dd4:	1a10b03a 	or	r8,r3,r8
    3dd8:	1210b03a 	or	r8,r2,r8
    3ddc:	5805883a 	mov	r2,r11
    3de0:	1140ffc4 	addi	r5,r2,1023
    3de4:	0140440e 	bge	zero,r5,3ef8 <__muldf3+0x5f4>
    3de8:	40c001cc 	andi	r3,r8,7
    3dec:	18000726 	beq	r3,zero,3e0c <__muldf3+0x508>
    3df0:	40c003cc 	andi	r3,r8,15
    3df4:	01000104 	movi	r4,4
    3df8:	19000426 	beq	r3,r4,3e0c <__muldf3+0x508>
    3dfc:	4107883a 	add	r3,r8,r4
    3e00:	1a11803a 	cmpltu	r8,r3,r8
    3e04:	8a23883a 	add	r17,r17,r8
    3e08:	1811883a 	mov	r8,r3
    3e0c:	88c0402c 	andhi	r3,r17,256
    3e10:	18000426 	beq	r3,zero,3e24 <__muldf3+0x520>
    3e14:	11410004 	addi	r5,r2,1024
    3e18:	00bfc034 	movhi	r2,65280
    3e1c:	10bfffc4 	addi	r2,r2,-1
    3e20:	88a2703a 	and	r17,r17,r2
    3e24:	0081ff84 	movi	r2,2046
    3e28:	117f6416 	blt	r2,r5,3bbc <__alt_data_end+0xff803bbc>
    3e2c:	8828977a 	slli	r20,r17,29
    3e30:	4010d0fa 	srli	r8,r8,3
    3e34:	8822927a 	slli	r17,r17,9
    3e38:	2881ffcc 	andi	r2,r5,2047
    3e3c:	a228b03a 	or	r20,r20,r8
    3e40:	880ad33a 	srli	r5,r17,12
    3e44:	b02b883a 	mov	r21,r22
    3e48:	003f0d06 	br	3a80 <__alt_data_end+0xff803a80>
    3e4c:	8080022c 	andhi	r2,r16,8
    3e50:	10000926 	beq	r2,zero,3e78 <__muldf3+0x574>
    3e54:	8880022c 	andhi	r2,r17,8
    3e58:	1000071e 	bne	r2,zero,3e78 <__muldf3+0x574>
    3e5c:	00800434 	movhi	r2,16
    3e60:	89400234 	orhi	r5,r17,8
    3e64:	10bfffc4 	addi	r2,r2,-1
    3e68:	b82b883a 	mov	r21,r23
    3e6c:	288a703a 	and	r5,r5,r2
    3e70:	4029883a 	mov	r20,r8
    3e74:	003f6806 	br	3c18 <__alt_data_end+0xff803c18>
    3e78:	00800434 	movhi	r2,16
    3e7c:	81400234 	orhi	r5,r16,8
    3e80:	10bfffc4 	addi	r2,r2,-1
    3e84:	288a703a 	and	r5,r5,r2
    3e88:	003f6306 	br	3c18 <__alt_data_end+0xff803c18>
    3e8c:	147ff604 	addi	r17,r2,-40
    3e90:	3462983a 	sll	r17,r6,r17
    3e94:	0011883a 	mov	r8,zero
    3e98:	003f4406 	br	3bac <__alt_data_end+0xff803bac>
    3e9c:	3009883a 	mov	r4,r6
    3ea0:	d9800215 	stw	r6,8(sp)
    3ea4:	da400115 	stw	r9,4(sp)
    3ea8:	da800015 	stw	r10,0(sp)
    3eac:	0004cac0 	call	4cac <__clzsi2>
    3eb0:	10800804 	addi	r2,r2,32
    3eb4:	da800017 	ldw	r10,0(sp)
    3eb8:	da400117 	ldw	r9,4(sp)
    3ebc:	d9800217 	ldw	r6,8(sp)
    3ec0:	003f3006 	br	3b84 <__alt_data_end+0xff803b84>
    3ec4:	143ff604 	addi	r16,r2,-40
    3ec8:	9c20983a 	sll	r16,r19,r16
    3ecc:	0029883a 	mov	r20,zero
    3ed0:	003f1606 	br	3b2c <__alt_data_end+0xff803b2c>
    3ed4:	d9800215 	stw	r6,8(sp)
    3ed8:	d9c00015 	stw	r7,0(sp)
    3edc:	da400115 	stw	r9,4(sp)
    3ee0:	0004cac0 	call	4cac <__clzsi2>
    3ee4:	10800804 	addi	r2,r2,32
    3ee8:	da400117 	ldw	r9,4(sp)
    3eec:	d9c00017 	ldw	r7,0(sp)
    3ef0:	d9800217 	ldw	r6,8(sp)
    3ef4:	003f0306 	br	3b04 <__alt_data_end+0xff803b04>
    3ef8:	00c00044 	movi	r3,1
    3efc:	1947c83a 	sub	r3,r3,r5
    3f00:	00800e04 	movi	r2,56
    3f04:	10feda16 	blt	r2,r3,3a70 <__alt_data_end+0xff803a70>
    3f08:	008007c4 	movi	r2,31
    3f0c:	10c01b16 	blt	r2,r3,3f7c <__muldf3+0x678>
    3f10:	00800804 	movi	r2,32
    3f14:	10c5c83a 	sub	r2,r2,r3
    3f18:	888a983a 	sll	r5,r17,r2
    3f1c:	40c8d83a 	srl	r4,r8,r3
    3f20:	4084983a 	sll	r2,r8,r2
    3f24:	88e2d83a 	srl	r17,r17,r3
    3f28:	2906b03a 	or	r3,r5,r4
    3f2c:	1004c03a 	cmpne	r2,r2,zero
    3f30:	1886b03a 	or	r3,r3,r2
    3f34:	188001cc 	andi	r2,r3,7
    3f38:	10000726 	beq	r2,zero,3f58 <__muldf3+0x654>
    3f3c:	188003cc 	andi	r2,r3,15
    3f40:	01000104 	movi	r4,4
    3f44:	11000426 	beq	r2,r4,3f58 <__muldf3+0x654>
    3f48:	1805883a 	mov	r2,r3
    3f4c:	10c00104 	addi	r3,r2,4
    3f50:	1885803a 	cmpltu	r2,r3,r2
    3f54:	88a3883a 	add	r17,r17,r2
    3f58:	8880202c 	andhi	r2,r17,128
    3f5c:	10001c26 	beq	r2,zero,3fd0 <__muldf3+0x6cc>
    3f60:	b02b883a 	mov	r21,r22
    3f64:	00800044 	movi	r2,1
    3f68:	000b883a 	mov	r5,zero
    3f6c:	0029883a 	mov	r20,zero
    3f70:	003ec306 	br	3a80 <__alt_data_end+0xff803a80>
    3f74:	5805883a 	mov	r2,r11
    3f78:	003f9906 	br	3de0 <__alt_data_end+0xff803de0>
    3f7c:	00bff844 	movi	r2,-31
    3f80:	1145c83a 	sub	r2,r2,r5
    3f84:	8888d83a 	srl	r4,r17,r2
    3f88:	00800804 	movi	r2,32
    3f8c:	18801a26 	beq	r3,r2,3ff8 <__muldf3+0x6f4>
    3f90:	00801004 	movi	r2,64
    3f94:	10c5c83a 	sub	r2,r2,r3
    3f98:	8884983a 	sll	r2,r17,r2
    3f9c:	1204b03a 	or	r2,r2,r8
    3fa0:	1004c03a 	cmpne	r2,r2,zero
    3fa4:	2084b03a 	or	r2,r4,r2
    3fa8:	144001cc 	andi	r17,r2,7
    3fac:	88000d1e 	bne	r17,zero,3fe4 <__muldf3+0x6e0>
    3fb0:	000b883a 	mov	r5,zero
    3fb4:	1028d0fa 	srli	r20,r2,3
    3fb8:	b02b883a 	mov	r21,r22
    3fbc:	0005883a 	mov	r2,zero
    3fc0:	a468b03a 	or	r20,r20,r17
    3fc4:	003eae06 	br	3a80 <__alt_data_end+0xff803a80>
    3fc8:	1007883a 	mov	r3,r2
    3fcc:	0023883a 	mov	r17,zero
    3fd0:	880a927a 	slli	r5,r17,9
    3fd4:	1805883a 	mov	r2,r3
    3fd8:	8822977a 	slli	r17,r17,29
    3fdc:	280ad33a 	srli	r5,r5,12
    3fe0:	003ff406 	br	3fb4 <__alt_data_end+0xff803fb4>
    3fe4:	10c003cc 	andi	r3,r2,15
    3fe8:	01000104 	movi	r4,4
    3fec:	193ff626 	beq	r3,r4,3fc8 <__alt_data_end+0xff803fc8>
    3ff0:	0023883a 	mov	r17,zero
    3ff4:	003fd506 	br	3f4c <__alt_data_end+0xff803f4c>
    3ff8:	0005883a 	mov	r2,zero
    3ffc:	003fe706 	br	3f9c <__alt_data_end+0xff803f9c>
    4000:	00800434 	movhi	r2,16
    4004:	89400234 	orhi	r5,r17,8
    4008:	10bfffc4 	addi	r2,r2,-1
    400c:	b02b883a 	mov	r21,r22
    4010:	288a703a 	and	r5,r5,r2
    4014:	4029883a 	mov	r20,r8
    4018:	003eff06 	br	3c18 <__alt_data_end+0xff803c18>

0000401c <__subdf3>:
    401c:	02000434 	movhi	r8,16
    4020:	423fffc4 	addi	r8,r8,-1
    4024:	defffb04 	addi	sp,sp,-20
    4028:	2a14703a 	and	r10,r5,r8
    402c:	3812d53a 	srli	r9,r7,20
    4030:	3a10703a 	and	r8,r7,r8
    4034:	2006d77a 	srli	r3,r4,29
    4038:	3004d77a 	srli	r2,r6,29
    403c:	dc000015 	stw	r16,0(sp)
    4040:	501490fa 	slli	r10,r10,3
    4044:	2820d53a 	srli	r16,r5,20
    4048:	401090fa 	slli	r8,r8,3
    404c:	dc800215 	stw	r18,8(sp)
    4050:	dc400115 	stw	r17,4(sp)
    4054:	dfc00415 	stw	ra,16(sp)
    4058:	202290fa 	slli	r17,r4,3
    405c:	dcc00315 	stw	r19,12(sp)
    4060:	4a41ffcc 	andi	r9,r9,2047
    4064:	0101ffc4 	movi	r4,2047
    4068:	2824d7fa 	srli	r18,r5,31
    406c:	8401ffcc 	andi	r16,r16,2047
    4070:	50c6b03a 	or	r3,r10,r3
    4074:	380ed7fa 	srli	r7,r7,31
    4078:	408ab03a 	or	r5,r8,r2
    407c:	300c90fa 	slli	r6,r6,3
    4080:	49009626 	beq	r9,r4,42dc <__subdf3+0x2c0>
    4084:	39c0005c 	xori	r7,r7,1
    4088:	8245c83a 	sub	r2,r16,r9
    408c:	3c807426 	beq	r7,r18,4260 <__subdf3+0x244>
    4090:	0080af0e 	bge	zero,r2,4350 <__subdf3+0x334>
    4094:	48002a1e 	bne	r9,zero,4140 <__subdf3+0x124>
    4098:	2988b03a 	or	r4,r5,r6
    409c:	20009a1e 	bne	r4,zero,4308 <__subdf3+0x2ec>
    40a0:	888001cc 	andi	r2,r17,7
    40a4:	10000726 	beq	r2,zero,40c4 <__subdf3+0xa8>
    40a8:	888003cc 	andi	r2,r17,15
    40ac:	01000104 	movi	r4,4
    40b0:	11000426 	beq	r2,r4,40c4 <__subdf3+0xa8>
    40b4:	890b883a 	add	r5,r17,r4
    40b8:	2c63803a 	cmpltu	r17,r5,r17
    40bc:	1c47883a 	add	r3,r3,r17
    40c0:	2823883a 	mov	r17,r5
    40c4:	1880202c 	andhi	r2,r3,128
    40c8:	10005926 	beq	r2,zero,4230 <__subdf3+0x214>
    40cc:	84000044 	addi	r16,r16,1
    40d0:	0081ffc4 	movi	r2,2047
    40d4:	8080be26 	beq	r16,r2,43d0 <__subdf3+0x3b4>
    40d8:	017fe034 	movhi	r5,65408
    40dc:	297fffc4 	addi	r5,r5,-1
    40e0:	1946703a 	and	r3,r3,r5
    40e4:	1804977a 	slli	r2,r3,29
    40e8:	1806927a 	slli	r3,r3,9
    40ec:	8822d0fa 	srli	r17,r17,3
    40f0:	8401ffcc 	andi	r16,r16,2047
    40f4:	180ad33a 	srli	r5,r3,12
    40f8:	9100004c 	andi	r4,r18,1
    40fc:	1444b03a 	or	r2,r2,r17
    4100:	80c1ffcc 	andi	r3,r16,2047
    4104:	1820953a 	slli	r16,r3,20
    4108:	20c03fcc 	andi	r3,r4,255
    410c:	180897fa 	slli	r4,r3,31
    4110:	00c00434 	movhi	r3,16
    4114:	18ffffc4 	addi	r3,r3,-1
    4118:	28c6703a 	and	r3,r5,r3
    411c:	1c06b03a 	or	r3,r3,r16
    4120:	1906b03a 	or	r3,r3,r4
    4124:	dfc00417 	ldw	ra,16(sp)
    4128:	dcc00317 	ldw	r19,12(sp)
    412c:	dc800217 	ldw	r18,8(sp)
    4130:	dc400117 	ldw	r17,4(sp)
    4134:	dc000017 	ldw	r16,0(sp)
    4138:	dec00504 	addi	sp,sp,20
    413c:	f800283a 	ret
    4140:	0101ffc4 	movi	r4,2047
    4144:	813fd626 	beq	r16,r4,40a0 <__alt_data_end+0xff8040a0>
    4148:	29402034 	orhi	r5,r5,128
    414c:	01000e04 	movi	r4,56
    4150:	2080a316 	blt	r4,r2,43e0 <__subdf3+0x3c4>
    4154:	010007c4 	movi	r4,31
    4158:	2080c616 	blt	r4,r2,4474 <__subdf3+0x458>
    415c:	01000804 	movi	r4,32
    4160:	2089c83a 	sub	r4,r4,r2
    4164:	2910983a 	sll	r8,r5,r4
    4168:	308ed83a 	srl	r7,r6,r2
    416c:	3108983a 	sll	r4,r6,r4
    4170:	2884d83a 	srl	r2,r5,r2
    4174:	41ccb03a 	or	r6,r8,r7
    4178:	2008c03a 	cmpne	r4,r4,zero
    417c:	310cb03a 	or	r6,r6,r4
    4180:	898dc83a 	sub	r6,r17,r6
    4184:	89a3803a 	cmpltu	r17,r17,r6
    4188:	1887c83a 	sub	r3,r3,r2
    418c:	1c47c83a 	sub	r3,r3,r17
    4190:	3023883a 	mov	r17,r6
    4194:	1880202c 	andhi	r2,r3,128
    4198:	10002326 	beq	r2,zero,4228 <__subdf3+0x20c>
    419c:	04c02034 	movhi	r19,128
    41a0:	9cffffc4 	addi	r19,r19,-1
    41a4:	1ce6703a 	and	r19,r3,r19
    41a8:	98007a26 	beq	r19,zero,4394 <__subdf3+0x378>
    41ac:	9809883a 	mov	r4,r19
    41b0:	0004cac0 	call	4cac <__clzsi2>
    41b4:	113ffe04 	addi	r4,r2,-8
    41b8:	00c007c4 	movi	r3,31
    41bc:	19007b16 	blt	r3,r4,43ac <__subdf3+0x390>
    41c0:	00800804 	movi	r2,32
    41c4:	1105c83a 	sub	r2,r2,r4
    41c8:	8884d83a 	srl	r2,r17,r2
    41cc:	9906983a 	sll	r3,r19,r4
    41d0:	8922983a 	sll	r17,r17,r4
    41d4:	10c4b03a 	or	r2,r2,r3
    41d8:	24007816 	blt	r4,r16,43bc <__subdf3+0x3a0>
    41dc:	2421c83a 	sub	r16,r4,r16
    41e0:	80c00044 	addi	r3,r16,1
    41e4:	010007c4 	movi	r4,31
    41e8:	20c09516 	blt	r4,r3,4440 <__subdf3+0x424>
    41ec:	01400804 	movi	r5,32
    41f0:	28cbc83a 	sub	r5,r5,r3
    41f4:	88c8d83a 	srl	r4,r17,r3
    41f8:	8962983a 	sll	r17,r17,r5
    41fc:	114a983a 	sll	r5,r2,r5
    4200:	10c6d83a 	srl	r3,r2,r3
    4204:	8804c03a 	cmpne	r2,r17,zero
    4208:	290ab03a 	or	r5,r5,r4
    420c:	28a2b03a 	or	r17,r5,r2
    4210:	0021883a 	mov	r16,zero
    4214:	003fa206 	br	40a0 <__alt_data_end+0xff8040a0>
    4218:	2090b03a 	or	r8,r4,r2
    421c:	40018e26 	beq	r8,zero,4858 <__subdf3+0x83c>
    4220:	1007883a 	mov	r3,r2
    4224:	2023883a 	mov	r17,r4
    4228:	888001cc 	andi	r2,r17,7
    422c:	103f9e1e 	bne	r2,zero,40a8 <__alt_data_end+0xff8040a8>
    4230:	1804977a 	slli	r2,r3,29
    4234:	8822d0fa 	srli	r17,r17,3
    4238:	1810d0fa 	srli	r8,r3,3
    423c:	9100004c 	andi	r4,r18,1
    4240:	1444b03a 	or	r2,r2,r17
    4244:	00c1ffc4 	movi	r3,2047
    4248:	80c02826 	beq	r16,r3,42ec <__subdf3+0x2d0>
    424c:	01400434 	movhi	r5,16
    4250:	297fffc4 	addi	r5,r5,-1
    4254:	80e0703a 	and	r16,r16,r3
    4258:	414a703a 	and	r5,r8,r5
    425c:	003fa806 	br	4100 <__alt_data_end+0xff804100>
    4260:	0080630e 	bge	zero,r2,43f0 <__subdf3+0x3d4>
    4264:	48003026 	beq	r9,zero,4328 <__subdf3+0x30c>
    4268:	0101ffc4 	movi	r4,2047
    426c:	813f8c26 	beq	r16,r4,40a0 <__alt_data_end+0xff8040a0>
    4270:	29402034 	orhi	r5,r5,128
    4274:	01000e04 	movi	r4,56
    4278:	2080a90e 	bge	r4,r2,4520 <__subdf3+0x504>
    427c:	298cb03a 	or	r6,r5,r6
    4280:	3012c03a 	cmpne	r9,r6,zero
    4284:	0005883a 	mov	r2,zero
    4288:	4c53883a 	add	r9,r9,r17
    428c:	4c63803a 	cmpltu	r17,r9,r17
    4290:	10c7883a 	add	r3,r2,r3
    4294:	88c7883a 	add	r3,r17,r3
    4298:	4823883a 	mov	r17,r9
    429c:	1880202c 	andhi	r2,r3,128
    42a0:	1000d026 	beq	r2,zero,45e4 <__subdf3+0x5c8>
    42a4:	84000044 	addi	r16,r16,1
    42a8:	0081ffc4 	movi	r2,2047
    42ac:	8080fe26 	beq	r16,r2,46a8 <__subdf3+0x68c>
    42b0:	00bfe034 	movhi	r2,65408
    42b4:	10bfffc4 	addi	r2,r2,-1
    42b8:	1886703a 	and	r3,r3,r2
    42bc:	880ad07a 	srli	r5,r17,1
    42c0:	180497fa 	slli	r2,r3,31
    42c4:	8900004c 	andi	r4,r17,1
    42c8:	2922b03a 	or	r17,r5,r4
    42cc:	1806d07a 	srli	r3,r3,1
    42d0:	1462b03a 	or	r17,r2,r17
    42d4:	3825883a 	mov	r18,r7
    42d8:	003f7106 	br	40a0 <__alt_data_end+0xff8040a0>
    42dc:	2984b03a 	or	r2,r5,r6
    42e0:	103f6826 	beq	r2,zero,4084 <__alt_data_end+0xff804084>
    42e4:	39c03fcc 	andi	r7,r7,255
    42e8:	003f6706 	br	4088 <__alt_data_end+0xff804088>
    42ec:	4086b03a 	or	r3,r8,r2
    42f0:	18015226 	beq	r3,zero,483c <__subdf3+0x820>
    42f4:	00c00434 	movhi	r3,16
    42f8:	41400234 	orhi	r5,r8,8
    42fc:	18ffffc4 	addi	r3,r3,-1
    4300:	28ca703a 	and	r5,r5,r3
    4304:	003f7e06 	br	4100 <__alt_data_end+0xff804100>
    4308:	10bfffc4 	addi	r2,r2,-1
    430c:	1000491e 	bne	r2,zero,4434 <__subdf3+0x418>
    4310:	898fc83a 	sub	r7,r17,r6
    4314:	89e3803a 	cmpltu	r17,r17,r7
    4318:	1947c83a 	sub	r3,r3,r5
    431c:	1c47c83a 	sub	r3,r3,r17
    4320:	3823883a 	mov	r17,r7
    4324:	003f9b06 	br	4194 <__alt_data_end+0xff804194>
    4328:	2988b03a 	or	r4,r5,r6
    432c:	203f5c26 	beq	r4,zero,40a0 <__alt_data_end+0xff8040a0>
    4330:	10bfffc4 	addi	r2,r2,-1
    4334:	1000931e 	bne	r2,zero,4584 <__subdf3+0x568>
    4338:	898d883a 	add	r6,r17,r6
    433c:	3463803a 	cmpltu	r17,r6,r17
    4340:	1947883a 	add	r3,r3,r5
    4344:	88c7883a 	add	r3,r17,r3
    4348:	3023883a 	mov	r17,r6
    434c:	003fd306 	br	429c <__alt_data_end+0xff80429c>
    4350:	1000541e 	bne	r2,zero,44a4 <__subdf3+0x488>
    4354:	80800044 	addi	r2,r16,1
    4358:	1081ffcc 	andi	r2,r2,2047
    435c:	01000044 	movi	r4,1
    4360:	2080a20e 	bge	r4,r2,45ec <__subdf3+0x5d0>
    4364:	8989c83a 	sub	r4,r17,r6
    4368:	8905803a 	cmpltu	r2,r17,r4
    436c:	1967c83a 	sub	r19,r3,r5
    4370:	98a7c83a 	sub	r19,r19,r2
    4374:	9880202c 	andhi	r2,r19,128
    4378:	10006326 	beq	r2,zero,4508 <__subdf3+0x4ec>
    437c:	3463c83a 	sub	r17,r6,r17
    4380:	28c7c83a 	sub	r3,r5,r3
    4384:	344d803a 	cmpltu	r6,r6,r17
    4388:	19a7c83a 	sub	r19,r3,r6
    438c:	3825883a 	mov	r18,r7
    4390:	983f861e 	bne	r19,zero,41ac <__alt_data_end+0xff8041ac>
    4394:	8809883a 	mov	r4,r17
    4398:	0004cac0 	call	4cac <__clzsi2>
    439c:	10800804 	addi	r2,r2,32
    43a0:	113ffe04 	addi	r4,r2,-8
    43a4:	00c007c4 	movi	r3,31
    43a8:	193f850e 	bge	r3,r4,41c0 <__alt_data_end+0xff8041c0>
    43ac:	10bff604 	addi	r2,r2,-40
    43b0:	8884983a 	sll	r2,r17,r2
    43b4:	0023883a 	mov	r17,zero
    43b8:	243f880e 	bge	r4,r16,41dc <__alt_data_end+0xff8041dc>
    43bc:	00ffe034 	movhi	r3,65408
    43c0:	18ffffc4 	addi	r3,r3,-1
    43c4:	8121c83a 	sub	r16,r16,r4
    43c8:	10c6703a 	and	r3,r2,r3
    43cc:	003f3406 	br	40a0 <__alt_data_end+0xff8040a0>
    43d0:	9100004c 	andi	r4,r18,1
    43d4:	000b883a 	mov	r5,zero
    43d8:	0005883a 	mov	r2,zero
    43dc:	003f4806 	br	4100 <__alt_data_end+0xff804100>
    43e0:	298cb03a 	or	r6,r5,r6
    43e4:	300cc03a 	cmpne	r6,r6,zero
    43e8:	0005883a 	mov	r2,zero
    43ec:	003f6406 	br	4180 <__alt_data_end+0xff804180>
    43f0:	10009a1e 	bne	r2,zero,465c <__subdf3+0x640>
    43f4:	82400044 	addi	r9,r16,1
    43f8:	4881ffcc 	andi	r2,r9,2047
    43fc:	02800044 	movi	r10,1
    4400:	5080670e 	bge	r10,r2,45a0 <__subdf3+0x584>
    4404:	0081ffc4 	movi	r2,2047
    4408:	4880af26 	beq	r9,r2,46c8 <__subdf3+0x6ac>
    440c:	898d883a 	add	r6,r17,r6
    4410:	1945883a 	add	r2,r3,r5
    4414:	3447803a 	cmpltu	r3,r6,r17
    4418:	1887883a 	add	r3,r3,r2
    441c:	182297fa 	slli	r17,r3,31
    4420:	300cd07a 	srli	r6,r6,1
    4424:	1806d07a 	srli	r3,r3,1
    4428:	4821883a 	mov	r16,r9
    442c:	89a2b03a 	or	r17,r17,r6
    4430:	003f1b06 	br	40a0 <__alt_data_end+0xff8040a0>
    4434:	0101ffc4 	movi	r4,2047
    4438:	813f441e 	bne	r16,r4,414c <__alt_data_end+0xff80414c>
    443c:	003f1806 	br	40a0 <__alt_data_end+0xff8040a0>
    4440:	843ff844 	addi	r16,r16,-31
    4444:	01400804 	movi	r5,32
    4448:	1408d83a 	srl	r4,r2,r16
    444c:	19405026 	beq	r3,r5,4590 <__subdf3+0x574>
    4450:	01401004 	movi	r5,64
    4454:	28c7c83a 	sub	r3,r5,r3
    4458:	10c4983a 	sll	r2,r2,r3
    445c:	88a2b03a 	or	r17,r17,r2
    4460:	8822c03a 	cmpne	r17,r17,zero
    4464:	2462b03a 	or	r17,r4,r17
    4468:	0007883a 	mov	r3,zero
    446c:	0021883a 	mov	r16,zero
    4470:	003f6d06 	br	4228 <__alt_data_end+0xff804228>
    4474:	11fff804 	addi	r7,r2,-32
    4478:	01000804 	movi	r4,32
    447c:	29ced83a 	srl	r7,r5,r7
    4480:	11004526 	beq	r2,r4,4598 <__subdf3+0x57c>
    4484:	01001004 	movi	r4,64
    4488:	2089c83a 	sub	r4,r4,r2
    448c:	2904983a 	sll	r2,r5,r4
    4490:	118cb03a 	or	r6,r2,r6
    4494:	300cc03a 	cmpne	r6,r6,zero
    4498:	398cb03a 	or	r6,r7,r6
    449c:	0005883a 	mov	r2,zero
    44a0:	003f3706 	br	4180 <__alt_data_end+0xff804180>
    44a4:	80002a26 	beq	r16,zero,4550 <__subdf3+0x534>
    44a8:	0101ffc4 	movi	r4,2047
    44ac:	49006626 	beq	r9,r4,4648 <__subdf3+0x62c>
    44b0:	0085c83a 	sub	r2,zero,r2
    44b4:	18c02034 	orhi	r3,r3,128
    44b8:	01000e04 	movi	r4,56
    44bc:	20807e16 	blt	r4,r2,46b8 <__subdf3+0x69c>
    44c0:	010007c4 	movi	r4,31
    44c4:	2080e716 	blt	r4,r2,4864 <__subdf3+0x848>
    44c8:	01000804 	movi	r4,32
    44cc:	2089c83a 	sub	r4,r4,r2
    44d0:	1914983a 	sll	r10,r3,r4
    44d4:	8890d83a 	srl	r8,r17,r2
    44d8:	8908983a 	sll	r4,r17,r4
    44dc:	1884d83a 	srl	r2,r3,r2
    44e0:	5222b03a 	or	r17,r10,r8
    44e4:	2006c03a 	cmpne	r3,r4,zero
    44e8:	88e2b03a 	or	r17,r17,r3
    44ec:	3463c83a 	sub	r17,r6,r17
    44f0:	2885c83a 	sub	r2,r5,r2
    44f4:	344d803a 	cmpltu	r6,r6,r17
    44f8:	1187c83a 	sub	r3,r2,r6
    44fc:	4821883a 	mov	r16,r9
    4500:	3825883a 	mov	r18,r7
    4504:	003f2306 	br	4194 <__alt_data_end+0xff804194>
    4508:	24d0b03a 	or	r8,r4,r19
    450c:	40001b1e 	bne	r8,zero,457c <__subdf3+0x560>
    4510:	0005883a 	mov	r2,zero
    4514:	0009883a 	mov	r4,zero
    4518:	0021883a 	mov	r16,zero
    451c:	003f4906 	br	4244 <__alt_data_end+0xff804244>
    4520:	010007c4 	movi	r4,31
    4524:	20803a16 	blt	r4,r2,4610 <__subdf3+0x5f4>
    4528:	01000804 	movi	r4,32
    452c:	2089c83a 	sub	r4,r4,r2
    4530:	2912983a 	sll	r9,r5,r4
    4534:	3090d83a 	srl	r8,r6,r2
    4538:	3108983a 	sll	r4,r6,r4
    453c:	2884d83a 	srl	r2,r5,r2
    4540:	4a12b03a 	or	r9,r9,r8
    4544:	2008c03a 	cmpne	r4,r4,zero
    4548:	4912b03a 	or	r9,r9,r4
    454c:	003f4e06 	br	4288 <__alt_data_end+0xff804288>
    4550:	1c48b03a 	or	r4,r3,r17
    4554:	20003c26 	beq	r4,zero,4648 <__subdf3+0x62c>
    4558:	0084303a 	nor	r2,zero,r2
    455c:	1000381e 	bne	r2,zero,4640 <__subdf3+0x624>
    4560:	3463c83a 	sub	r17,r6,r17
    4564:	28c5c83a 	sub	r2,r5,r3
    4568:	344d803a 	cmpltu	r6,r6,r17
    456c:	1187c83a 	sub	r3,r2,r6
    4570:	4821883a 	mov	r16,r9
    4574:	3825883a 	mov	r18,r7
    4578:	003f0606 	br	4194 <__alt_data_end+0xff804194>
    457c:	2023883a 	mov	r17,r4
    4580:	003f0906 	br	41a8 <__alt_data_end+0xff8041a8>
    4584:	0101ffc4 	movi	r4,2047
    4588:	813f3a1e 	bne	r16,r4,4274 <__alt_data_end+0xff804274>
    458c:	003ec406 	br	40a0 <__alt_data_end+0xff8040a0>
    4590:	0005883a 	mov	r2,zero
    4594:	003fb106 	br	445c <__alt_data_end+0xff80445c>
    4598:	0005883a 	mov	r2,zero
    459c:	003fbc06 	br	4490 <__alt_data_end+0xff804490>
    45a0:	1c44b03a 	or	r2,r3,r17
    45a4:	80008e1e 	bne	r16,zero,47e0 <__subdf3+0x7c4>
    45a8:	1000c826 	beq	r2,zero,48cc <__subdf3+0x8b0>
    45ac:	2984b03a 	or	r2,r5,r6
    45b0:	103ebb26 	beq	r2,zero,40a0 <__alt_data_end+0xff8040a0>
    45b4:	8989883a 	add	r4,r17,r6
    45b8:	1945883a 	add	r2,r3,r5
    45bc:	2447803a 	cmpltu	r3,r4,r17
    45c0:	1887883a 	add	r3,r3,r2
    45c4:	1880202c 	andhi	r2,r3,128
    45c8:	2023883a 	mov	r17,r4
    45cc:	103f1626 	beq	r2,zero,4228 <__alt_data_end+0xff804228>
    45d0:	00bfe034 	movhi	r2,65408
    45d4:	10bfffc4 	addi	r2,r2,-1
    45d8:	5021883a 	mov	r16,r10
    45dc:	1886703a 	and	r3,r3,r2
    45e0:	003eaf06 	br	40a0 <__alt_data_end+0xff8040a0>
    45e4:	3825883a 	mov	r18,r7
    45e8:	003f0f06 	br	4228 <__alt_data_end+0xff804228>
    45ec:	1c44b03a 	or	r2,r3,r17
    45f0:	8000251e 	bne	r16,zero,4688 <__subdf3+0x66c>
    45f4:	1000661e 	bne	r2,zero,4790 <__subdf3+0x774>
    45f8:	2990b03a 	or	r8,r5,r6
    45fc:	40009626 	beq	r8,zero,4858 <__subdf3+0x83c>
    4600:	2807883a 	mov	r3,r5
    4604:	3023883a 	mov	r17,r6
    4608:	3825883a 	mov	r18,r7
    460c:	003ea406 	br	40a0 <__alt_data_end+0xff8040a0>
    4610:	127ff804 	addi	r9,r2,-32
    4614:	01000804 	movi	r4,32
    4618:	2a52d83a 	srl	r9,r5,r9
    461c:	11008c26 	beq	r2,r4,4850 <__subdf3+0x834>
    4620:	01001004 	movi	r4,64
    4624:	2085c83a 	sub	r2,r4,r2
    4628:	2884983a 	sll	r2,r5,r2
    462c:	118cb03a 	or	r6,r2,r6
    4630:	300cc03a 	cmpne	r6,r6,zero
    4634:	4992b03a 	or	r9,r9,r6
    4638:	0005883a 	mov	r2,zero
    463c:	003f1206 	br	4288 <__alt_data_end+0xff804288>
    4640:	0101ffc4 	movi	r4,2047
    4644:	493f9c1e 	bne	r9,r4,44b8 <__alt_data_end+0xff8044b8>
    4648:	2807883a 	mov	r3,r5
    464c:	3023883a 	mov	r17,r6
    4650:	4821883a 	mov	r16,r9
    4654:	3825883a 	mov	r18,r7
    4658:	003e9106 	br	40a0 <__alt_data_end+0xff8040a0>
    465c:	80001f1e 	bne	r16,zero,46dc <__subdf3+0x6c0>
    4660:	1c48b03a 	or	r4,r3,r17
    4664:	20005a26 	beq	r4,zero,47d0 <__subdf3+0x7b4>
    4668:	0084303a 	nor	r2,zero,r2
    466c:	1000561e 	bne	r2,zero,47c8 <__subdf3+0x7ac>
    4670:	89a3883a 	add	r17,r17,r6
    4674:	1945883a 	add	r2,r3,r5
    4678:	898d803a 	cmpltu	r6,r17,r6
    467c:	3087883a 	add	r3,r6,r2
    4680:	4821883a 	mov	r16,r9
    4684:	003f0506 	br	429c <__alt_data_end+0xff80429c>
    4688:	10002b1e 	bne	r2,zero,4738 <__subdf3+0x71c>
    468c:	2984b03a 	or	r2,r5,r6
    4690:	10008026 	beq	r2,zero,4894 <__subdf3+0x878>
    4694:	2807883a 	mov	r3,r5
    4698:	3023883a 	mov	r17,r6
    469c:	3825883a 	mov	r18,r7
    46a0:	0401ffc4 	movi	r16,2047
    46a4:	003e7e06 	br	40a0 <__alt_data_end+0xff8040a0>
    46a8:	3809883a 	mov	r4,r7
    46ac:	0011883a 	mov	r8,zero
    46b0:	0005883a 	mov	r2,zero
    46b4:	003ee306 	br	4244 <__alt_data_end+0xff804244>
    46b8:	1c62b03a 	or	r17,r3,r17
    46bc:	8822c03a 	cmpne	r17,r17,zero
    46c0:	0005883a 	mov	r2,zero
    46c4:	003f8906 	br	44ec <__alt_data_end+0xff8044ec>
    46c8:	3809883a 	mov	r4,r7
    46cc:	4821883a 	mov	r16,r9
    46d0:	0011883a 	mov	r8,zero
    46d4:	0005883a 	mov	r2,zero
    46d8:	003eda06 	br	4244 <__alt_data_end+0xff804244>
    46dc:	0101ffc4 	movi	r4,2047
    46e0:	49003b26 	beq	r9,r4,47d0 <__subdf3+0x7b4>
    46e4:	0085c83a 	sub	r2,zero,r2
    46e8:	18c02034 	orhi	r3,r3,128
    46ec:	01000e04 	movi	r4,56
    46f0:	20806e16 	blt	r4,r2,48ac <__subdf3+0x890>
    46f4:	010007c4 	movi	r4,31
    46f8:	20807716 	blt	r4,r2,48d8 <__subdf3+0x8bc>
    46fc:	01000804 	movi	r4,32
    4700:	2089c83a 	sub	r4,r4,r2
    4704:	1914983a 	sll	r10,r3,r4
    4708:	8890d83a 	srl	r8,r17,r2
    470c:	8908983a 	sll	r4,r17,r4
    4710:	1884d83a 	srl	r2,r3,r2
    4714:	5222b03a 	or	r17,r10,r8
    4718:	2006c03a 	cmpne	r3,r4,zero
    471c:	88e2b03a 	or	r17,r17,r3
    4720:	89a3883a 	add	r17,r17,r6
    4724:	1145883a 	add	r2,r2,r5
    4728:	898d803a 	cmpltu	r6,r17,r6
    472c:	3087883a 	add	r3,r6,r2
    4730:	4821883a 	mov	r16,r9
    4734:	003ed906 	br	429c <__alt_data_end+0xff80429c>
    4738:	2984b03a 	or	r2,r5,r6
    473c:	10004226 	beq	r2,zero,4848 <__subdf3+0x82c>
    4740:	1808d0fa 	srli	r4,r3,3
    4744:	8822d0fa 	srli	r17,r17,3
    4748:	1806977a 	slli	r3,r3,29
    474c:	2080022c 	andhi	r2,r4,8
    4750:	1c62b03a 	or	r17,r3,r17
    4754:	10000826 	beq	r2,zero,4778 <__subdf3+0x75c>
    4758:	2812d0fa 	srli	r9,r5,3
    475c:	4880022c 	andhi	r2,r9,8
    4760:	1000051e 	bne	r2,zero,4778 <__subdf3+0x75c>
    4764:	300cd0fa 	srli	r6,r6,3
    4768:	2804977a 	slli	r2,r5,29
    476c:	4809883a 	mov	r4,r9
    4770:	3825883a 	mov	r18,r7
    4774:	11a2b03a 	or	r17,r2,r6
    4778:	8806d77a 	srli	r3,r17,29
    477c:	200890fa 	slli	r4,r4,3
    4780:	882290fa 	slli	r17,r17,3
    4784:	0401ffc4 	movi	r16,2047
    4788:	1906b03a 	or	r3,r3,r4
    478c:	003e4406 	br	40a0 <__alt_data_end+0xff8040a0>
    4790:	2984b03a 	or	r2,r5,r6
    4794:	103e4226 	beq	r2,zero,40a0 <__alt_data_end+0xff8040a0>
    4798:	8989c83a 	sub	r4,r17,r6
    479c:	8911803a 	cmpltu	r8,r17,r4
    47a0:	1945c83a 	sub	r2,r3,r5
    47a4:	1205c83a 	sub	r2,r2,r8
    47a8:	1200202c 	andhi	r8,r2,128
    47ac:	403e9a26 	beq	r8,zero,4218 <__alt_data_end+0xff804218>
    47b0:	3463c83a 	sub	r17,r6,r17
    47b4:	28c5c83a 	sub	r2,r5,r3
    47b8:	344d803a 	cmpltu	r6,r6,r17
    47bc:	1187c83a 	sub	r3,r2,r6
    47c0:	3825883a 	mov	r18,r7
    47c4:	003e3606 	br	40a0 <__alt_data_end+0xff8040a0>
    47c8:	0101ffc4 	movi	r4,2047
    47cc:	493fc71e 	bne	r9,r4,46ec <__alt_data_end+0xff8046ec>
    47d0:	2807883a 	mov	r3,r5
    47d4:	3023883a 	mov	r17,r6
    47d8:	4821883a 	mov	r16,r9
    47dc:	003e3006 	br	40a0 <__alt_data_end+0xff8040a0>
    47e0:	10003626 	beq	r2,zero,48bc <__subdf3+0x8a0>
    47e4:	2984b03a 	or	r2,r5,r6
    47e8:	10001726 	beq	r2,zero,4848 <__subdf3+0x82c>
    47ec:	1808d0fa 	srli	r4,r3,3
    47f0:	8822d0fa 	srli	r17,r17,3
    47f4:	1806977a 	slli	r3,r3,29
    47f8:	2080022c 	andhi	r2,r4,8
    47fc:	1c62b03a 	or	r17,r3,r17
    4800:	10000726 	beq	r2,zero,4820 <__subdf3+0x804>
    4804:	2812d0fa 	srli	r9,r5,3
    4808:	4880022c 	andhi	r2,r9,8
    480c:	1000041e 	bne	r2,zero,4820 <__subdf3+0x804>
    4810:	300cd0fa 	srli	r6,r6,3
    4814:	2804977a 	slli	r2,r5,29
    4818:	4809883a 	mov	r4,r9
    481c:	11a2b03a 	or	r17,r2,r6
    4820:	8806d77a 	srli	r3,r17,29
    4824:	200890fa 	slli	r4,r4,3
    4828:	882290fa 	slli	r17,r17,3
    482c:	3825883a 	mov	r18,r7
    4830:	1906b03a 	or	r3,r3,r4
    4834:	0401ffc4 	movi	r16,2047
    4838:	003e1906 	br	40a0 <__alt_data_end+0xff8040a0>
    483c:	000b883a 	mov	r5,zero
    4840:	0005883a 	mov	r2,zero
    4844:	003e2e06 	br	4100 <__alt_data_end+0xff804100>
    4848:	0401ffc4 	movi	r16,2047
    484c:	003e1406 	br	40a0 <__alt_data_end+0xff8040a0>
    4850:	0005883a 	mov	r2,zero
    4854:	003f7506 	br	462c <__alt_data_end+0xff80462c>
    4858:	0005883a 	mov	r2,zero
    485c:	0009883a 	mov	r4,zero
    4860:	003e7806 	br	4244 <__alt_data_end+0xff804244>
    4864:	123ff804 	addi	r8,r2,-32
    4868:	01000804 	movi	r4,32
    486c:	1a10d83a 	srl	r8,r3,r8
    4870:	11002526 	beq	r2,r4,4908 <__subdf3+0x8ec>
    4874:	01001004 	movi	r4,64
    4878:	2085c83a 	sub	r2,r4,r2
    487c:	1884983a 	sll	r2,r3,r2
    4880:	1444b03a 	or	r2,r2,r17
    4884:	1004c03a 	cmpne	r2,r2,zero
    4888:	40a2b03a 	or	r17,r8,r2
    488c:	0005883a 	mov	r2,zero
    4890:	003f1606 	br	44ec <__alt_data_end+0xff8044ec>
    4894:	02000434 	movhi	r8,16
    4898:	0009883a 	mov	r4,zero
    489c:	423fffc4 	addi	r8,r8,-1
    48a0:	00bfffc4 	movi	r2,-1
    48a4:	0401ffc4 	movi	r16,2047
    48a8:	003e6606 	br	4244 <__alt_data_end+0xff804244>
    48ac:	1c62b03a 	or	r17,r3,r17
    48b0:	8822c03a 	cmpne	r17,r17,zero
    48b4:	0005883a 	mov	r2,zero
    48b8:	003f9906 	br	4720 <__alt_data_end+0xff804720>
    48bc:	2807883a 	mov	r3,r5
    48c0:	3023883a 	mov	r17,r6
    48c4:	0401ffc4 	movi	r16,2047
    48c8:	003df506 	br	40a0 <__alt_data_end+0xff8040a0>
    48cc:	2807883a 	mov	r3,r5
    48d0:	3023883a 	mov	r17,r6
    48d4:	003df206 	br	40a0 <__alt_data_end+0xff8040a0>
    48d8:	123ff804 	addi	r8,r2,-32
    48dc:	01000804 	movi	r4,32
    48e0:	1a10d83a 	srl	r8,r3,r8
    48e4:	11000a26 	beq	r2,r4,4910 <__subdf3+0x8f4>
    48e8:	01001004 	movi	r4,64
    48ec:	2085c83a 	sub	r2,r4,r2
    48f0:	1884983a 	sll	r2,r3,r2
    48f4:	1444b03a 	or	r2,r2,r17
    48f8:	1004c03a 	cmpne	r2,r2,zero
    48fc:	40a2b03a 	or	r17,r8,r2
    4900:	0005883a 	mov	r2,zero
    4904:	003f8606 	br	4720 <__alt_data_end+0xff804720>
    4908:	0005883a 	mov	r2,zero
    490c:	003fdc06 	br	4880 <__alt_data_end+0xff804880>
    4910:	0005883a 	mov	r2,zero
    4914:	003ff706 	br	48f4 <__alt_data_end+0xff8048f4>

00004918 <__floatsidf>:
    4918:	defffd04 	addi	sp,sp,-12
    491c:	dfc00215 	stw	ra,8(sp)
    4920:	dc400115 	stw	r17,4(sp)
    4924:	dc000015 	stw	r16,0(sp)
    4928:	20002b26 	beq	r4,zero,49d8 <__floatsidf+0xc0>
    492c:	2023883a 	mov	r17,r4
    4930:	2020d7fa 	srli	r16,r4,31
    4934:	20002d16 	blt	r4,zero,49ec <__floatsidf+0xd4>
    4938:	8809883a 	mov	r4,r17
    493c:	0004cac0 	call	4cac <__clzsi2>
    4940:	01410784 	movi	r5,1054
    4944:	288bc83a 	sub	r5,r5,r2
    4948:	01010cc4 	movi	r4,1075
    494c:	2149c83a 	sub	r4,r4,r5
    4950:	00c007c4 	movi	r3,31
    4954:	1900160e 	bge	r3,r4,49b0 <__floatsidf+0x98>
    4958:	00c104c4 	movi	r3,1043
    495c:	1947c83a 	sub	r3,r3,r5
    4960:	88c6983a 	sll	r3,r17,r3
    4964:	00800434 	movhi	r2,16
    4968:	10bfffc4 	addi	r2,r2,-1
    496c:	1886703a 	and	r3,r3,r2
    4970:	2941ffcc 	andi	r5,r5,2047
    4974:	800d883a 	mov	r6,r16
    4978:	0005883a 	mov	r2,zero
    497c:	280a953a 	slli	r5,r5,20
    4980:	31803fcc 	andi	r6,r6,255
    4984:	01000434 	movhi	r4,16
    4988:	300c97fa 	slli	r6,r6,31
    498c:	213fffc4 	addi	r4,r4,-1
    4990:	1906703a 	and	r3,r3,r4
    4994:	1946b03a 	or	r3,r3,r5
    4998:	1986b03a 	or	r3,r3,r6
    499c:	dfc00217 	ldw	ra,8(sp)
    49a0:	dc400117 	ldw	r17,4(sp)
    49a4:	dc000017 	ldw	r16,0(sp)
    49a8:	dec00304 	addi	sp,sp,12
    49ac:	f800283a 	ret
    49b0:	00c002c4 	movi	r3,11
    49b4:	1887c83a 	sub	r3,r3,r2
    49b8:	88c6d83a 	srl	r3,r17,r3
    49bc:	8904983a 	sll	r2,r17,r4
    49c0:	01000434 	movhi	r4,16
    49c4:	213fffc4 	addi	r4,r4,-1
    49c8:	2941ffcc 	andi	r5,r5,2047
    49cc:	1906703a 	and	r3,r3,r4
    49d0:	800d883a 	mov	r6,r16
    49d4:	003fe906 	br	497c <__alt_data_end+0xff80497c>
    49d8:	000d883a 	mov	r6,zero
    49dc:	000b883a 	mov	r5,zero
    49e0:	0007883a 	mov	r3,zero
    49e4:	0005883a 	mov	r2,zero
    49e8:	003fe406 	br	497c <__alt_data_end+0xff80497c>
    49ec:	0123c83a 	sub	r17,zero,r4
    49f0:	003fd106 	br	4938 <__alt_data_end+0xff804938>

000049f4 <__extendsfdf2>:
    49f4:	200ad5fa 	srli	r5,r4,23
    49f8:	defffd04 	addi	sp,sp,-12
    49fc:	dc400115 	stw	r17,4(sp)
    4a00:	29403fcc 	andi	r5,r5,255
    4a04:	29800044 	addi	r6,r5,1
    4a08:	04402034 	movhi	r17,128
    4a0c:	dc000015 	stw	r16,0(sp)
    4a10:	8c7fffc4 	addi	r17,r17,-1
    4a14:	dfc00215 	stw	ra,8(sp)
    4a18:	31803fcc 	andi	r6,r6,255
    4a1c:	00800044 	movi	r2,1
    4a20:	8922703a 	and	r17,r17,r4
    4a24:	2020d7fa 	srli	r16,r4,31
    4a28:	1180110e 	bge	r2,r6,4a70 <__extendsfdf2+0x7c>
    4a2c:	880cd0fa 	srli	r6,r17,3
    4a30:	8822977a 	slli	r17,r17,29
    4a34:	2940e004 	addi	r5,r5,896
    4a38:	2941ffcc 	andi	r5,r5,2047
    4a3c:	2804953a 	slli	r2,r5,20
    4a40:	01400434 	movhi	r5,16
    4a44:	800697fa 	slli	r3,r16,31
    4a48:	297fffc4 	addi	r5,r5,-1
    4a4c:	314a703a 	and	r5,r6,r5
    4a50:	288ab03a 	or	r5,r5,r2
    4a54:	28c6b03a 	or	r3,r5,r3
    4a58:	8805883a 	mov	r2,r17
    4a5c:	dfc00217 	ldw	ra,8(sp)
    4a60:	dc400117 	ldw	r17,4(sp)
    4a64:	dc000017 	ldw	r16,0(sp)
    4a68:	dec00304 	addi	sp,sp,12
    4a6c:	f800283a 	ret
    4a70:	2800111e 	bne	r5,zero,4ab8 <__extendsfdf2+0xc4>
    4a74:	88001c26 	beq	r17,zero,4ae8 <__extendsfdf2+0xf4>
    4a78:	8809883a 	mov	r4,r17
    4a7c:	0004cac0 	call	4cac <__clzsi2>
    4a80:	00c00284 	movi	r3,10
    4a84:	18801b16 	blt	r3,r2,4af4 <__extendsfdf2+0x100>
    4a88:	018002c4 	movi	r6,11
    4a8c:	308dc83a 	sub	r6,r6,r2
    4a90:	11000544 	addi	r4,r2,21
    4a94:	8986d83a 	srl	r3,r17,r6
    4a98:	8922983a 	sll	r17,r17,r4
    4a9c:	0180e244 	movi	r6,905
    4aa0:	01400434 	movhi	r5,16
    4aa4:	3085c83a 	sub	r2,r6,r2
    4aa8:	297fffc4 	addi	r5,r5,-1
    4aac:	194c703a 	and	r6,r3,r5
    4ab0:	1141ffcc 	andi	r5,r2,2047
    4ab4:	003fe006 	br	4a38 <__alt_data_end+0xff804a38>
    4ab8:	88000826 	beq	r17,zero,4adc <__extendsfdf2+0xe8>
    4abc:	880cd0fa 	srli	r6,r17,3
    4ac0:	00800434 	movhi	r2,16
    4ac4:	10bfffc4 	addi	r2,r2,-1
    4ac8:	31800234 	orhi	r6,r6,8
    4acc:	8822977a 	slli	r17,r17,29
    4ad0:	308c703a 	and	r6,r6,r2
    4ad4:	0141ffc4 	movi	r5,2047
    4ad8:	003fd706 	br	4a38 <__alt_data_end+0xff804a38>
    4adc:	0141ffc4 	movi	r5,2047
    4ae0:	000d883a 	mov	r6,zero
    4ae4:	003fd406 	br	4a38 <__alt_data_end+0xff804a38>
    4ae8:	000b883a 	mov	r5,zero
    4aec:	000d883a 	mov	r6,zero
    4af0:	003fd106 	br	4a38 <__alt_data_end+0xff804a38>
    4af4:	11bffd44 	addi	r6,r2,-11
    4af8:	8986983a 	sll	r3,r17,r6
    4afc:	0023883a 	mov	r17,zero
    4b00:	003fe606 	br	4a9c <__alt_data_end+0xff804a9c>

00004b04 <__truncdfsf2>:
    4b04:	2810d53a 	srli	r8,r5,20
    4b08:	01c00434 	movhi	r7,16
    4b0c:	39ffffc4 	addi	r7,r7,-1
    4b10:	29ce703a 	and	r7,r5,r7
    4b14:	4201ffcc 	andi	r8,r8,2047
    4b18:	380e90fa 	slli	r7,r7,3
    4b1c:	200cd77a 	srli	r6,r4,29
    4b20:	42400044 	addi	r9,r8,1
    4b24:	4a41ffcc 	andi	r9,r9,2047
    4b28:	00c00044 	movi	r3,1
    4b2c:	280ad7fa 	srli	r5,r5,31
    4b30:	31ceb03a 	or	r7,r6,r7
    4b34:	200490fa 	slli	r2,r4,3
    4b38:	1a40230e 	bge	r3,r9,4bc8 <__truncdfsf2+0xc4>
    4b3c:	40ff2004 	addi	r3,r8,-896
    4b40:	01803f84 	movi	r6,254
    4b44:	30c01516 	blt	r6,r3,4b9c <__truncdfsf2+0x98>
    4b48:	00c0380e 	bge	zero,r3,4c2c <__truncdfsf2+0x128>
    4b4c:	200c91ba 	slli	r6,r4,6
    4b50:	380e90fa 	slli	r7,r7,3
    4b54:	1004d77a 	srli	r2,r2,29
    4b58:	300cc03a 	cmpne	r6,r6,zero
    4b5c:	31ccb03a 	or	r6,r6,r7
    4b60:	308cb03a 	or	r6,r6,r2
    4b64:	308001cc 	andi	r2,r6,7
    4b68:	10000426 	beq	r2,zero,4b7c <__truncdfsf2+0x78>
    4b6c:	308003cc 	andi	r2,r6,15
    4b70:	01000104 	movi	r4,4
    4b74:	11000126 	beq	r2,r4,4b7c <__truncdfsf2+0x78>
    4b78:	31800104 	addi	r6,r6,4
    4b7c:	3081002c 	andhi	r2,r6,1024
    4b80:	10001626 	beq	r2,zero,4bdc <__truncdfsf2+0xd8>
    4b84:	18c00044 	addi	r3,r3,1
    4b88:	00803fc4 	movi	r2,255
    4b8c:	18800326 	beq	r3,r2,4b9c <__truncdfsf2+0x98>
    4b90:	300c91ba 	slli	r6,r6,6
    4b94:	300cd27a 	srli	r6,r6,9
    4b98:	00000206 	br	4ba4 <__truncdfsf2+0xa0>
    4b9c:	00ffffc4 	movi	r3,-1
    4ba0:	000d883a 	mov	r6,zero
    4ba4:	18c03fcc 	andi	r3,r3,255
    4ba8:	180895fa 	slli	r4,r3,23
    4bac:	00c02034 	movhi	r3,128
    4bb0:	280a97fa 	slli	r5,r5,31
    4bb4:	18ffffc4 	addi	r3,r3,-1
    4bb8:	30c6703a 	and	r3,r6,r3
    4bbc:	1906b03a 	or	r3,r3,r4
    4bc0:	1944b03a 	or	r2,r3,r5
    4bc4:	f800283a 	ret
    4bc8:	40000b1e 	bne	r8,zero,4bf8 <__truncdfsf2+0xf4>
    4bcc:	388cb03a 	or	r6,r7,r2
    4bd0:	0007883a 	mov	r3,zero
    4bd4:	30000426 	beq	r6,zero,4be8 <__truncdfsf2+0xe4>
    4bd8:	01800144 	movi	r6,5
    4bdc:	00803fc4 	movi	r2,255
    4be0:	300cd0fa 	srli	r6,r6,3
    4be4:	18800a26 	beq	r3,r2,4c10 <__truncdfsf2+0x10c>
    4be8:	00802034 	movhi	r2,128
    4bec:	10bfffc4 	addi	r2,r2,-1
    4bf0:	308c703a 	and	r6,r6,r2
    4bf4:	003feb06 	br	4ba4 <__alt_data_end+0xff804ba4>
    4bf8:	3888b03a 	or	r4,r7,r2
    4bfc:	203fe726 	beq	r4,zero,4b9c <__alt_data_end+0xff804b9c>
    4c00:	380c90fa 	slli	r6,r7,3
    4c04:	00c03fc4 	movi	r3,255
    4c08:	31808034 	orhi	r6,r6,512
    4c0c:	003fd506 	br	4b64 <__alt_data_end+0xff804b64>
    4c10:	303fe226 	beq	r6,zero,4b9c <__alt_data_end+0xff804b9c>
    4c14:	00802034 	movhi	r2,128
    4c18:	31801034 	orhi	r6,r6,64
    4c1c:	10bfffc4 	addi	r2,r2,-1
    4c20:	00ffffc4 	movi	r3,-1
    4c24:	308c703a 	and	r6,r6,r2
    4c28:	003fde06 	br	4ba4 <__alt_data_end+0xff804ba4>
    4c2c:	013ffa44 	movi	r4,-23
    4c30:	19000e16 	blt	r3,r4,4c6c <__truncdfsf2+0x168>
    4c34:	01000784 	movi	r4,30
    4c38:	20c9c83a 	sub	r4,r4,r3
    4c3c:	018007c4 	movi	r6,31
    4c40:	39c02034 	orhi	r7,r7,128
    4c44:	31000b16 	blt	r6,r4,4c74 <__truncdfsf2+0x170>
    4c48:	423f2084 	addi	r8,r8,-894
    4c4c:	120c983a 	sll	r6,r2,r8
    4c50:	3a0e983a 	sll	r7,r7,r8
    4c54:	1104d83a 	srl	r2,r2,r4
    4c58:	300cc03a 	cmpne	r6,r6,zero
    4c5c:	31ceb03a 	or	r7,r6,r7
    4c60:	388cb03a 	or	r6,r7,r2
    4c64:	0007883a 	mov	r3,zero
    4c68:	003fbe06 	br	4b64 <__alt_data_end+0xff804b64>
    4c6c:	0007883a 	mov	r3,zero
    4c70:	003fd906 	br	4bd8 <__alt_data_end+0xff804bd8>
    4c74:	01bfff84 	movi	r6,-2
    4c78:	30cdc83a 	sub	r6,r6,r3
    4c7c:	00c00804 	movi	r3,32
    4c80:	398cd83a 	srl	r6,r7,r6
    4c84:	20c00726 	beq	r4,r3,4ca4 <__truncdfsf2+0x1a0>
    4c88:	423f2884 	addi	r8,r8,-862
    4c8c:	3a0e983a 	sll	r7,r7,r8
    4c90:	3884b03a 	or	r2,r7,r2
    4c94:	1004c03a 	cmpne	r2,r2,zero
    4c98:	118cb03a 	or	r6,r2,r6
    4c9c:	0007883a 	mov	r3,zero
    4ca0:	003fb006 	br	4b64 <__alt_data_end+0xff804b64>
    4ca4:	000f883a 	mov	r7,zero
    4ca8:	003ff906 	br	4c90 <__alt_data_end+0xff804c90>

00004cac <__clzsi2>:
    4cac:	00bfffd4 	movui	r2,65535
    4cb0:	11000536 	bltu	r2,r4,4cc8 <__clzsi2+0x1c>
    4cb4:	00803fc4 	movi	r2,255
    4cb8:	11000f36 	bltu	r2,r4,4cf8 <__clzsi2+0x4c>
    4cbc:	00800804 	movi	r2,32
    4cc0:	0007883a 	mov	r3,zero
    4cc4:	00000506 	br	4cdc <__clzsi2+0x30>
    4cc8:	00804034 	movhi	r2,256
    4ccc:	10bfffc4 	addi	r2,r2,-1
    4cd0:	11000c2e 	bgeu	r2,r4,4d04 <__clzsi2+0x58>
    4cd4:	00800204 	movi	r2,8
    4cd8:	00c00604 	movi	r3,24
    4cdc:	20c8d83a 	srl	r4,r4,r3
    4ce0:	00c00074 	movhi	r3,1
    4ce4:	18c42344 	addi	r3,r3,4237
    4ce8:	1909883a 	add	r4,r3,r4
    4cec:	20c00003 	ldbu	r3,0(r4)
    4cf0:	10c5c83a 	sub	r2,r2,r3
    4cf4:	f800283a 	ret
    4cf8:	00800604 	movi	r2,24
    4cfc:	00c00204 	movi	r3,8
    4d00:	003ff606 	br	4cdc <__alt_data_end+0xff804cdc>
    4d04:	00800404 	movi	r2,16
    4d08:	1007883a 	mov	r3,r2
    4d0c:	003ff306 	br	4cdc <__alt_data_end+0xff804cdc>

00004d10 <__divsi3>:
    4d10:	20001b16 	blt	r4,zero,4d80 <__divsi3+0x70>
    4d14:	000f883a 	mov	r7,zero
    4d18:	28001616 	blt	r5,zero,4d74 <__divsi3+0x64>
    4d1c:	200d883a 	mov	r6,r4
    4d20:	29001a2e 	bgeu	r5,r4,4d8c <__divsi3+0x7c>
    4d24:	00800804 	movi	r2,32
    4d28:	00c00044 	movi	r3,1
    4d2c:	00000106 	br	4d34 <__divsi3+0x24>
    4d30:	10000d26 	beq	r2,zero,4d68 <__divsi3+0x58>
    4d34:	294b883a 	add	r5,r5,r5
    4d38:	10bfffc4 	addi	r2,r2,-1
    4d3c:	18c7883a 	add	r3,r3,r3
    4d40:	293ffb36 	bltu	r5,r4,4d30 <__alt_data_end+0xff804d30>
    4d44:	0005883a 	mov	r2,zero
    4d48:	18000726 	beq	r3,zero,4d68 <__divsi3+0x58>
    4d4c:	0005883a 	mov	r2,zero
    4d50:	31400236 	bltu	r6,r5,4d5c <__divsi3+0x4c>
    4d54:	314dc83a 	sub	r6,r6,r5
    4d58:	10c4b03a 	or	r2,r2,r3
    4d5c:	1806d07a 	srli	r3,r3,1
    4d60:	280ad07a 	srli	r5,r5,1
    4d64:	183ffa1e 	bne	r3,zero,4d50 <__alt_data_end+0xff804d50>
    4d68:	38000126 	beq	r7,zero,4d70 <__divsi3+0x60>
    4d6c:	0085c83a 	sub	r2,zero,r2
    4d70:	f800283a 	ret
    4d74:	014bc83a 	sub	r5,zero,r5
    4d78:	39c0005c 	xori	r7,r7,1
    4d7c:	003fe706 	br	4d1c <__alt_data_end+0xff804d1c>
    4d80:	0109c83a 	sub	r4,zero,r4
    4d84:	01c00044 	movi	r7,1
    4d88:	003fe306 	br	4d18 <__alt_data_end+0xff804d18>
    4d8c:	00c00044 	movi	r3,1
    4d90:	003fee06 	br	4d4c <__alt_data_end+0xff804d4c>

00004d94 <__modsi3>:
    4d94:	20001716 	blt	r4,zero,4df4 <__modsi3+0x60>
    4d98:	000f883a 	mov	r7,zero
    4d9c:	2005883a 	mov	r2,r4
    4da0:	28001216 	blt	r5,zero,4dec <__modsi3+0x58>
    4da4:	2900162e 	bgeu	r5,r4,4e00 <__modsi3+0x6c>
    4da8:	01800804 	movi	r6,32
    4dac:	00c00044 	movi	r3,1
    4db0:	00000106 	br	4db8 <__modsi3+0x24>
    4db4:	30000a26 	beq	r6,zero,4de0 <__modsi3+0x4c>
    4db8:	294b883a 	add	r5,r5,r5
    4dbc:	31bfffc4 	addi	r6,r6,-1
    4dc0:	18c7883a 	add	r3,r3,r3
    4dc4:	293ffb36 	bltu	r5,r4,4db4 <__alt_data_end+0xff804db4>
    4dc8:	18000526 	beq	r3,zero,4de0 <__modsi3+0x4c>
    4dcc:	1806d07a 	srli	r3,r3,1
    4dd0:	11400136 	bltu	r2,r5,4dd8 <__modsi3+0x44>
    4dd4:	1145c83a 	sub	r2,r2,r5
    4dd8:	280ad07a 	srli	r5,r5,1
    4ddc:	183ffb1e 	bne	r3,zero,4dcc <__alt_data_end+0xff804dcc>
    4de0:	38000126 	beq	r7,zero,4de8 <__modsi3+0x54>
    4de4:	0085c83a 	sub	r2,zero,r2
    4de8:	f800283a 	ret
    4dec:	014bc83a 	sub	r5,zero,r5
    4df0:	003fec06 	br	4da4 <__alt_data_end+0xff804da4>
    4df4:	0109c83a 	sub	r4,zero,r4
    4df8:	01c00044 	movi	r7,1
    4dfc:	003fe706 	br	4d9c <__alt_data_end+0xff804d9c>
    4e00:	00c00044 	movi	r3,1
    4e04:	003ff106 	br	4dcc <__alt_data_end+0xff804dcc>

00004e08 <__udivsi3>:
    4e08:	200d883a 	mov	r6,r4
    4e0c:	2900152e 	bgeu	r5,r4,4e64 <__udivsi3+0x5c>
    4e10:	28001416 	blt	r5,zero,4e64 <__udivsi3+0x5c>
    4e14:	00800804 	movi	r2,32
    4e18:	00c00044 	movi	r3,1
    4e1c:	00000206 	br	4e28 <__udivsi3+0x20>
    4e20:	10000e26 	beq	r2,zero,4e5c <__udivsi3+0x54>
    4e24:	28000516 	blt	r5,zero,4e3c <__udivsi3+0x34>
    4e28:	294b883a 	add	r5,r5,r5
    4e2c:	10bfffc4 	addi	r2,r2,-1
    4e30:	18c7883a 	add	r3,r3,r3
    4e34:	293ffa36 	bltu	r5,r4,4e20 <__alt_data_end+0xff804e20>
    4e38:	18000826 	beq	r3,zero,4e5c <__udivsi3+0x54>
    4e3c:	0005883a 	mov	r2,zero
    4e40:	31400236 	bltu	r6,r5,4e4c <__udivsi3+0x44>
    4e44:	314dc83a 	sub	r6,r6,r5
    4e48:	10c4b03a 	or	r2,r2,r3
    4e4c:	1806d07a 	srli	r3,r3,1
    4e50:	280ad07a 	srli	r5,r5,1
    4e54:	183ffa1e 	bne	r3,zero,4e40 <__alt_data_end+0xff804e40>
    4e58:	f800283a 	ret
    4e5c:	0005883a 	mov	r2,zero
    4e60:	f800283a 	ret
    4e64:	00c00044 	movi	r3,1
    4e68:	003ff406 	br	4e3c <__alt_data_end+0xff804e3c>

00004e6c <__umodsi3>:
    4e6c:	2005883a 	mov	r2,r4
    4e70:	2900122e 	bgeu	r5,r4,4ebc <__umodsi3+0x50>
    4e74:	28001116 	blt	r5,zero,4ebc <__umodsi3+0x50>
    4e78:	01800804 	movi	r6,32
    4e7c:	00c00044 	movi	r3,1
    4e80:	00000206 	br	4e8c <__umodsi3+0x20>
    4e84:	30000c26 	beq	r6,zero,4eb8 <__umodsi3+0x4c>
    4e88:	28000516 	blt	r5,zero,4ea0 <__umodsi3+0x34>
    4e8c:	294b883a 	add	r5,r5,r5
    4e90:	31bfffc4 	addi	r6,r6,-1
    4e94:	18c7883a 	add	r3,r3,r3
    4e98:	293ffa36 	bltu	r5,r4,4e84 <__alt_data_end+0xff804e84>
    4e9c:	18000626 	beq	r3,zero,4eb8 <__umodsi3+0x4c>
    4ea0:	1806d07a 	srli	r3,r3,1
    4ea4:	11400136 	bltu	r2,r5,4eac <__umodsi3+0x40>
    4ea8:	1145c83a 	sub	r2,r2,r5
    4eac:	280ad07a 	srli	r5,r5,1
    4eb0:	183ffb1e 	bne	r3,zero,4ea0 <__alt_data_end+0xff804ea0>
    4eb4:	f800283a 	ret
    4eb8:	f800283a 	ret
    4ebc:	00c00044 	movi	r3,1
    4ec0:	003ff706 	br	4ea0 <__alt_data_end+0xff804ea0>

00004ec4 <__errno>:
    4ec4:	00800074 	movhi	r2,1
    4ec8:	108b4b04 	addi	r2,r2,11564
    4ecc:	10800017 	ldw	r2,0(r2)
    4ed0:	f800283a 	ret

00004ed4 <memcpy>:
    4ed4:	defffd04 	addi	sp,sp,-12
    4ed8:	dfc00215 	stw	ra,8(sp)
    4edc:	dc400115 	stw	r17,4(sp)
    4ee0:	dc000015 	stw	r16,0(sp)
    4ee4:	00c003c4 	movi	r3,15
    4ee8:	2005883a 	mov	r2,r4
    4eec:	1980452e 	bgeu	r3,r6,5004 <memcpy+0x130>
    4ef0:	2906b03a 	or	r3,r5,r4
    4ef4:	18c000cc 	andi	r3,r3,3
    4ef8:	1800441e 	bne	r3,zero,500c <memcpy+0x138>
    4efc:	347ffc04 	addi	r17,r6,-16
    4f00:	8822d13a 	srli	r17,r17,4
    4f04:	28c00104 	addi	r3,r5,4
    4f08:	23400104 	addi	r13,r4,4
    4f0c:	8820913a 	slli	r16,r17,4
    4f10:	2b000204 	addi	r12,r5,8
    4f14:	22c00204 	addi	r11,r4,8
    4f18:	84000504 	addi	r16,r16,20
    4f1c:	2a800304 	addi	r10,r5,12
    4f20:	22400304 	addi	r9,r4,12
    4f24:	2c21883a 	add	r16,r5,r16
    4f28:	2811883a 	mov	r8,r5
    4f2c:	200f883a 	mov	r7,r4
    4f30:	41000017 	ldw	r4,0(r8)
    4f34:	1fc00017 	ldw	ra,0(r3)
    4f38:	63c00017 	ldw	r15,0(r12)
    4f3c:	39000015 	stw	r4,0(r7)
    4f40:	53800017 	ldw	r14,0(r10)
    4f44:	6fc00015 	stw	ra,0(r13)
    4f48:	5bc00015 	stw	r15,0(r11)
    4f4c:	4b800015 	stw	r14,0(r9)
    4f50:	18c00404 	addi	r3,r3,16
    4f54:	39c00404 	addi	r7,r7,16
    4f58:	42000404 	addi	r8,r8,16
    4f5c:	6b400404 	addi	r13,r13,16
    4f60:	63000404 	addi	r12,r12,16
    4f64:	5ac00404 	addi	r11,r11,16
    4f68:	52800404 	addi	r10,r10,16
    4f6c:	4a400404 	addi	r9,r9,16
    4f70:	1c3fef1e 	bne	r3,r16,4f30 <__alt_data_end+0xff804f30>
    4f74:	89c00044 	addi	r7,r17,1
    4f78:	380e913a 	slli	r7,r7,4
    4f7c:	310003cc 	andi	r4,r6,15
    4f80:	02c000c4 	movi	r11,3
    4f84:	11c7883a 	add	r3,r2,r7
    4f88:	29cb883a 	add	r5,r5,r7
    4f8c:	5900212e 	bgeu	r11,r4,5014 <memcpy+0x140>
    4f90:	1813883a 	mov	r9,r3
    4f94:	2811883a 	mov	r8,r5
    4f98:	200f883a 	mov	r7,r4
    4f9c:	42800017 	ldw	r10,0(r8)
    4fa0:	4a400104 	addi	r9,r9,4
    4fa4:	39ffff04 	addi	r7,r7,-4
    4fa8:	4abfff15 	stw	r10,-4(r9)
    4fac:	42000104 	addi	r8,r8,4
    4fb0:	59fffa36 	bltu	r11,r7,4f9c <__alt_data_end+0xff804f9c>
    4fb4:	213fff04 	addi	r4,r4,-4
    4fb8:	2008d0ba 	srli	r4,r4,2
    4fbc:	318000cc 	andi	r6,r6,3
    4fc0:	21000044 	addi	r4,r4,1
    4fc4:	2109883a 	add	r4,r4,r4
    4fc8:	2109883a 	add	r4,r4,r4
    4fcc:	1907883a 	add	r3,r3,r4
    4fd0:	290b883a 	add	r5,r5,r4
    4fd4:	30000626 	beq	r6,zero,4ff0 <memcpy+0x11c>
    4fd8:	198d883a 	add	r6,r3,r6
    4fdc:	29c00003 	ldbu	r7,0(r5)
    4fe0:	18c00044 	addi	r3,r3,1
    4fe4:	29400044 	addi	r5,r5,1
    4fe8:	19ffffc5 	stb	r7,-1(r3)
    4fec:	19bffb1e 	bne	r3,r6,4fdc <__alt_data_end+0xff804fdc>
    4ff0:	dfc00217 	ldw	ra,8(sp)
    4ff4:	dc400117 	ldw	r17,4(sp)
    4ff8:	dc000017 	ldw	r16,0(sp)
    4ffc:	dec00304 	addi	sp,sp,12
    5000:	f800283a 	ret
    5004:	2007883a 	mov	r3,r4
    5008:	003ff206 	br	4fd4 <__alt_data_end+0xff804fd4>
    500c:	2007883a 	mov	r3,r4
    5010:	003ff106 	br	4fd8 <__alt_data_end+0xff804fd8>
    5014:	200d883a 	mov	r6,r4
    5018:	003fee06 	br	4fd4 <__alt_data_end+0xff804fd4>

0000501c <_printf_r>:
    501c:	defffd04 	addi	sp,sp,-12
    5020:	2805883a 	mov	r2,r5
    5024:	dfc00015 	stw	ra,0(sp)
    5028:	d9800115 	stw	r6,4(sp)
    502c:	d9c00215 	stw	r7,8(sp)
    5030:	21400217 	ldw	r5,8(r4)
    5034:	d9c00104 	addi	r7,sp,4
    5038:	100d883a 	mov	r6,r2
    503c:	00051f40 	call	51f4 <___vfprintf_internal_r>
    5040:	dfc00017 	ldw	ra,0(sp)
    5044:	dec00304 	addi	sp,sp,12
    5048:	f800283a 	ret

0000504c <printf>:
    504c:	defffc04 	addi	sp,sp,-16
    5050:	dfc00015 	stw	ra,0(sp)
    5054:	d9400115 	stw	r5,4(sp)
    5058:	d9800215 	stw	r6,8(sp)
    505c:	d9c00315 	stw	r7,12(sp)
    5060:	00800074 	movhi	r2,1
    5064:	108b4b04 	addi	r2,r2,11564
    5068:	10800017 	ldw	r2,0(r2)
    506c:	200b883a 	mov	r5,r4
    5070:	d9800104 	addi	r6,sp,4
    5074:	11000217 	ldw	r4,8(r2)
    5078:	00073ec0 	call	73ec <__vfprintf_internal>
    507c:	dfc00017 	ldw	ra,0(sp)
    5080:	dec00404 	addi	sp,sp,16
    5084:	f800283a 	ret

00005088 <_puts_r>:
    5088:	defff604 	addi	sp,sp,-40
    508c:	dc000715 	stw	r16,28(sp)
    5090:	2021883a 	mov	r16,r4
    5094:	2809883a 	mov	r4,r5
    5098:	dc400815 	stw	r17,32(sp)
    509c:	dfc00915 	stw	ra,36(sp)
    50a0:	2823883a 	mov	r17,r5
    50a4:	000515c0 	call	515c <strlen>
    50a8:	10c00044 	addi	r3,r2,1
    50ac:	d8800115 	stw	r2,4(sp)
    50b0:	00800074 	movhi	r2,1
    50b4:	10840604 	addi	r2,r2,4120
    50b8:	d8800215 	stw	r2,8(sp)
    50bc:	00800044 	movi	r2,1
    50c0:	d8800315 	stw	r2,12(sp)
    50c4:	00800084 	movi	r2,2
    50c8:	dc400015 	stw	r17,0(sp)
    50cc:	d8c00615 	stw	r3,24(sp)
    50d0:	dec00415 	stw	sp,16(sp)
    50d4:	d8800515 	stw	r2,20(sp)
    50d8:	80000226 	beq	r16,zero,50e4 <_puts_r+0x5c>
    50dc:	80800e17 	ldw	r2,56(r16)
    50e0:	10001426 	beq	r2,zero,5134 <_puts_r+0xac>
    50e4:	81400217 	ldw	r5,8(r16)
    50e8:	2880030b 	ldhu	r2,12(r5)
    50ec:	10c8000c 	andi	r3,r2,8192
    50f0:	1800061e 	bne	r3,zero,510c <_puts_r+0x84>
    50f4:	29001917 	ldw	r4,100(r5)
    50f8:	00f7ffc4 	movi	r3,-8193
    50fc:	10880014 	ori	r2,r2,8192
    5100:	20c6703a 	and	r3,r4,r3
    5104:	2880030d 	sth	r2,12(r5)
    5108:	28c01915 	stw	r3,100(r5)
    510c:	d9800404 	addi	r6,sp,16
    5110:	8009883a 	mov	r4,r16
    5114:	000991c0 	call	991c <__sfvwrite_r>
    5118:	1000091e 	bne	r2,zero,5140 <_puts_r+0xb8>
    511c:	00800284 	movi	r2,10
    5120:	dfc00917 	ldw	ra,36(sp)
    5124:	dc400817 	ldw	r17,32(sp)
    5128:	dc000717 	ldw	r16,28(sp)
    512c:	dec00a04 	addi	sp,sp,40
    5130:	f800283a 	ret
    5134:	8009883a 	mov	r4,r16
    5138:	00094980 	call	9498 <__sinit>
    513c:	003fe906 	br	50e4 <__alt_data_end+0xff8050e4>
    5140:	00bfffc4 	movi	r2,-1
    5144:	003ff606 	br	5120 <__alt_data_end+0xff805120>

00005148 <puts>:
    5148:	00800074 	movhi	r2,1
    514c:	108b4b04 	addi	r2,r2,11564
    5150:	200b883a 	mov	r5,r4
    5154:	11000017 	ldw	r4,0(r2)
    5158:	00050881 	jmpi	5088 <_puts_r>

0000515c <strlen>:
    515c:	208000cc 	andi	r2,r4,3
    5160:	10002026 	beq	r2,zero,51e4 <strlen+0x88>
    5164:	20800007 	ldb	r2,0(r4)
    5168:	10002026 	beq	r2,zero,51ec <strlen+0x90>
    516c:	2005883a 	mov	r2,r4
    5170:	00000206 	br	517c <strlen+0x20>
    5174:	10c00007 	ldb	r3,0(r2)
    5178:	18001826 	beq	r3,zero,51dc <strlen+0x80>
    517c:	10800044 	addi	r2,r2,1
    5180:	10c000cc 	andi	r3,r2,3
    5184:	183ffb1e 	bne	r3,zero,5174 <__alt_data_end+0xff805174>
    5188:	10c00017 	ldw	r3,0(r2)
    518c:	01ffbff4 	movhi	r7,65279
    5190:	39ffbfc4 	addi	r7,r7,-257
    5194:	00ca303a 	nor	r5,zero,r3
    5198:	01a02074 	movhi	r6,32897
    519c:	19c7883a 	add	r3,r3,r7
    51a0:	31a02004 	addi	r6,r6,-32640
    51a4:	1946703a 	and	r3,r3,r5
    51a8:	1986703a 	and	r3,r3,r6
    51ac:	1800091e 	bne	r3,zero,51d4 <strlen+0x78>
    51b0:	10800104 	addi	r2,r2,4
    51b4:	10c00017 	ldw	r3,0(r2)
    51b8:	19cb883a 	add	r5,r3,r7
    51bc:	00c6303a 	nor	r3,zero,r3
    51c0:	28c6703a 	and	r3,r5,r3
    51c4:	1986703a 	and	r3,r3,r6
    51c8:	183ff926 	beq	r3,zero,51b0 <__alt_data_end+0xff8051b0>
    51cc:	00000106 	br	51d4 <strlen+0x78>
    51d0:	10800044 	addi	r2,r2,1
    51d4:	10c00007 	ldb	r3,0(r2)
    51d8:	183ffd1e 	bne	r3,zero,51d0 <__alt_data_end+0xff8051d0>
    51dc:	1105c83a 	sub	r2,r2,r4
    51e0:	f800283a 	ret
    51e4:	2005883a 	mov	r2,r4
    51e8:	003fe706 	br	5188 <__alt_data_end+0xff805188>
    51ec:	0005883a 	mov	r2,zero
    51f0:	f800283a 	ret

000051f4 <___vfprintf_internal_r>:
    51f4:	deffb804 	addi	sp,sp,-288
    51f8:	dfc04715 	stw	ra,284(sp)
    51fc:	ddc04515 	stw	r23,276(sp)
    5200:	dd404315 	stw	r21,268(sp)
    5204:	d9002c15 	stw	r4,176(sp)
    5208:	282f883a 	mov	r23,r5
    520c:	302b883a 	mov	r21,r6
    5210:	d9c02d15 	stw	r7,180(sp)
    5214:	df004615 	stw	fp,280(sp)
    5218:	dd804415 	stw	r22,272(sp)
    521c:	dd004215 	stw	r20,264(sp)
    5220:	dcc04115 	stw	r19,260(sp)
    5224:	dc804015 	stw	r18,256(sp)
    5228:	dc403f15 	stw	r17,252(sp)
    522c:	dc003e15 	stw	r16,248(sp)
    5230:	000a00c0 	call	a00c <_localeconv_r>
    5234:	10800017 	ldw	r2,0(r2)
    5238:	1009883a 	mov	r4,r2
    523c:	d8803415 	stw	r2,208(sp)
    5240:	000515c0 	call	515c <strlen>
    5244:	d8803715 	stw	r2,220(sp)
    5248:	d8802c17 	ldw	r2,176(sp)
    524c:	10000226 	beq	r2,zero,5258 <___vfprintf_internal_r+0x64>
    5250:	10800e17 	ldw	r2,56(r2)
    5254:	1000f926 	beq	r2,zero,563c <___vfprintf_internal_r+0x448>
    5258:	b880030b 	ldhu	r2,12(r23)
    525c:	10c8000c 	andi	r3,r2,8192
    5260:	1800061e 	bne	r3,zero,527c <___vfprintf_internal_r+0x88>
    5264:	b9001917 	ldw	r4,100(r23)
    5268:	00f7ffc4 	movi	r3,-8193
    526c:	10880014 	ori	r2,r2,8192
    5270:	20c6703a 	and	r3,r4,r3
    5274:	b880030d 	sth	r2,12(r23)
    5278:	b8c01915 	stw	r3,100(r23)
    527c:	10c0020c 	andi	r3,r2,8
    5280:	1800c126 	beq	r3,zero,5588 <___vfprintf_internal_r+0x394>
    5284:	b8c00417 	ldw	r3,16(r23)
    5288:	1800bf26 	beq	r3,zero,5588 <___vfprintf_internal_r+0x394>
    528c:	1080068c 	andi	r2,r2,26
    5290:	00c00284 	movi	r3,10
    5294:	10c0c426 	beq	r2,r3,55a8 <___vfprintf_internal_r+0x3b4>
    5298:	d8c00404 	addi	r3,sp,16
    529c:	05000074 	movhi	r20,1
    52a0:	d9001e04 	addi	r4,sp,120
    52a4:	a50474c4 	addi	r20,r20,4563
    52a8:	d8c01e15 	stw	r3,120(sp)
    52ac:	d8002015 	stw	zero,128(sp)
    52b0:	d8001f15 	stw	zero,124(sp)
    52b4:	d8003315 	stw	zero,204(sp)
    52b8:	d8003615 	stw	zero,216(sp)
    52bc:	d8003815 	stw	zero,224(sp)
    52c0:	1811883a 	mov	r8,r3
    52c4:	d8003915 	stw	zero,228(sp)
    52c8:	d8003a15 	stw	zero,232(sp)
    52cc:	d8002f15 	stw	zero,188(sp)
    52d0:	d9002815 	stw	r4,160(sp)
    52d4:	a8800007 	ldb	r2,0(r21)
    52d8:	10027b26 	beq	r2,zero,5cc8 <___vfprintf_internal_r+0xad4>
    52dc:	00c00944 	movi	r3,37
    52e0:	a821883a 	mov	r16,r21
    52e4:	10c0021e 	bne	r2,r3,52f0 <___vfprintf_internal_r+0xfc>
    52e8:	00001406 	br	533c <___vfprintf_internal_r+0x148>
    52ec:	10c00326 	beq	r2,r3,52fc <___vfprintf_internal_r+0x108>
    52f0:	84000044 	addi	r16,r16,1
    52f4:	80800007 	ldb	r2,0(r16)
    52f8:	103ffc1e 	bne	r2,zero,52ec <__alt_data_end+0xff8052ec>
    52fc:	8563c83a 	sub	r17,r16,r21
    5300:	88000e26 	beq	r17,zero,533c <___vfprintf_internal_r+0x148>
    5304:	d8c02017 	ldw	r3,128(sp)
    5308:	d8801f17 	ldw	r2,124(sp)
    530c:	45400015 	stw	r21,0(r8)
    5310:	1c47883a 	add	r3,r3,r17
    5314:	10800044 	addi	r2,r2,1
    5318:	d8c02015 	stw	r3,128(sp)
    531c:	44400115 	stw	r17,4(r8)
    5320:	d8801f15 	stw	r2,124(sp)
    5324:	00c001c4 	movi	r3,7
    5328:	1880a716 	blt	r3,r2,55c8 <___vfprintf_internal_r+0x3d4>
    532c:	42000204 	addi	r8,r8,8
    5330:	d9402f17 	ldw	r5,188(sp)
    5334:	2c4b883a 	add	r5,r5,r17
    5338:	d9402f15 	stw	r5,188(sp)
    533c:	80800007 	ldb	r2,0(r16)
    5340:	1000a826 	beq	r2,zero,55e4 <___vfprintf_internal_r+0x3f0>
    5344:	84400047 	ldb	r17,1(r16)
    5348:	00bfffc4 	movi	r2,-1
    534c:	85400044 	addi	r21,r16,1
    5350:	d8002785 	stb	zero,158(sp)
    5354:	0007883a 	mov	r3,zero
    5358:	000f883a 	mov	r7,zero
    535c:	d8802915 	stw	r2,164(sp)
    5360:	d8003115 	stw	zero,196(sp)
    5364:	0025883a 	mov	r18,zero
    5368:	01401604 	movi	r5,88
    536c:	01800244 	movi	r6,9
    5370:	02800a84 	movi	r10,42
    5374:	02401b04 	movi	r9,108
    5378:	ad400044 	addi	r21,r21,1
    537c:	88bff804 	addi	r2,r17,-32
    5380:	28830436 	bltu	r5,r2,5f94 <___vfprintf_internal_r+0xda0>
    5384:	100490ba 	slli	r2,r2,2
    5388:	01000034 	movhi	r4,0
    538c:	2114e704 	addi	r4,r4,21404
    5390:	1105883a 	add	r2,r2,r4
    5394:	10800017 	ldw	r2,0(r2)
    5398:	1000683a 	jmp	r2
    539c:	00005eb4 	movhi	zero,378
    53a0:	00005f94 	movui	zero,382
    53a4:	00005f94 	movui	zero,382
    53a8:	00005ed4 	movui	zero,379
    53ac:	00005f94 	movui	zero,382
    53b0:	00005f94 	movui	zero,382
    53b4:	00005f94 	movui	zero,382
    53b8:	00005f94 	movui	zero,382
    53bc:	00005f94 	movui	zero,382
    53c0:	00005f94 	movui	zero,382
    53c4:	00005648 	cmpgei	zero,zero,345
    53c8:	00005df0 	cmpltui	zero,zero,375
    53cc:	00005f94 	movui	zero,382
    53d0:	00005510 	cmplti	zero,zero,340
    53d4:	00005670 	cmpltui	zero,zero,345
    53d8:	00005f94 	movui	zero,382
    53dc:	000056b0 	cmpltui	zero,zero,346
    53e0:	000056bc 	xorhi	zero,zero,346
    53e4:	000056bc 	xorhi	zero,zero,346
    53e8:	000056bc 	xorhi	zero,zero,346
    53ec:	000056bc 	xorhi	zero,zero,346
    53f0:	000056bc 	xorhi	zero,zero,346
    53f4:	000056bc 	xorhi	zero,zero,346
    53f8:	000056bc 	xorhi	zero,zero,346
    53fc:	000056bc 	xorhi	zero,zero,346
    5400:	000056bc 	xorhi	zero,zero,346
    5404:	00005f94 	movui	zero,382
    5408:	00005f94 	movui	zero,382
    540c:	00005f94 	movui	zero,382
    5410:	00005f94 	movui	zero,382
    5414:	00005f94 	movui	zero,382
    5418:	00005f94 	movui	zero,382
    541c:	00005f94 	movui	zero,382
    5420:	00005f94 	movui	zero,382
    5424:	00005f94 	movui	zero,382
    5428:	00005f94 	movui	zero,382
    542c:	000056f0 	cmpltui	zero,zero,347
    5430:	000057ac 	andhi	zero,zero,350
    5434:	00005f94 	movui	zero,382
    5438:	000057ac 	andhi	zero,zero,350
    543c:	00005f94 	movui	zero,382
    5440:	00005f94 	movui	zero,382
    5444:	00005f94 	movui	zero,382
    5448:	00005f94 	movui	zero,382
    544c:	0000584c 	andi	zero,zero,353
    5450:	00005f94 	movui	zero,382
    5454:	00005f94 	movui	zero,382
    5458:	00005858 	cmpnei	zero,zero,353
    545c:	00005f94 	movui	zero,382
    5460:	00005f94 	movui	zero,382
    5464:	00005f94 	movui	zero,382
    5468:	00005f94 	movui	zero,382
    546c:	00005f94 	movui	zero,382
    5470:	00005cd0 	cmplti	zero,zero,371
    5474:	00005f94 	movui	zero,382
    5478:	00005f94 	movui	zero,382
    547c:	00005d30 	cmpltui	zero,zero,372
    5480:	00005f94 	movui	zero,382
    5484:	00005f94 	movui	zero,382
    5488:	00005f94 	movui	zero,382
    548c:	00005f94 	movui	zero,382
    5490:	00005f94 	movui	zero,382
    5494:	00005f94 	movui	zero,382
    5498:	00005f94 	movui	zero,382
    549c:	00005f94 	movui	zero,382
    54a0:	00005f94 	movui	zero,382
    54a4:	00005f94 	movui	zero,382
    54a8:	00005f40 	call	5f4 <get_z_accel_MPU+0x34>
    54ac:	00005ee0 	cmpeqi	zero,zero,379
    54b0:	000057ac 	andhi	zero,zero,350
    54b4:	000057ac 	andhi	zero,zero,350
    54b8:	000057ac 	andhi	zero,zero,350
    54bc:	00005ef0 	cmpltui	zero,zero,379
    54c0:	00005ee0 	cmpeqi	zero,zero,379
    54c4:	00005f94 	movui	zero,382
    54c8:	00005f94 	movui	zero,382
    54cc:	00005efc 	xorhi	zero,zero,379
    54d0:	00005f94 	movui	zero,382
    54d4:	00005f0c 	andi	zero,zero,380
    54d8:	00005de0 	cmpeqi	zero,zero,375
    54dc:	0000551c 	xori	zero,zero,340
    54e0:	00005e00 	call	5e0 <get_z_accel_MPU+0x20>
    54e4:	00005f94 	movui	zero,382
    54e8:	00005e0c 	andi	zero,zero,376
    54ec:	00005f94 	movui	zero,382
    54f0:	00005e68 	cmpgeui	zero,zero,377
    54f4:	00005f94 	movui	zero,382
    54f8:	00005f94 	movui	zero,382
    54fc:	00005e78 	rdprs	zero,zero,377
    5500:	d9003117 	ldw	r4,196(sp)
    5504:	d8802d15 	stw	r2,180(sp)
    5508:	0109c83a 	sub	r4,zero,r4
    550c:	d9003115 	stw	r4,196(sp)
    5510:	94800114 	ori	r18,r18,4
    5514:	ac400007 	ldb	r17,0(r21)
    5518:	003f9706 	br	5378 <__alt_data_end+0xff805378>
    551c:	00800c04 	movi	r2,48
    5520:	d9002d17 	ldw	r4,180(sp)
    5524:	d9402917 	ldw	r5,164(sp)
    5528:	d8802705 	stb	r2,156(sp)
    552c:	00801e04 	movi	r2,120
    5530:	d8802745 	stb	r2,157(sp)
    5534:	d8002785 	stb	zero,158(sp)
    5538:	20c00104 	addi	r3,r4,4
    553c:	24c00017 	ldw	r19,0(r4)
    5540:	002d883a 	mov	r22,zero
    5544:	90800094 	ori	r2,r18,2
    5548:	28029a16 	blt	r5,zero,5fb4 <___vfprintf_internal_r+0xdc0>
    554c:	00bfdfc4 	movi	r2,-129
    5550:	90a4703a 	and	r18,r18,r2
    5554:	d8c02d15 	stw	r3,180(sp)
    5558:	94800094 	ori	r18,r18,2
    555c:	9802871e 	bne	r19,zero,5f7c <___vfprintf_internal_r+0xd88>
    5560:	00800074 	movhi	r2,1
    5564:	10846e04 	addi	r2,r2,4536
    5568:	d8803915 	stw	r2,228(sp)
    556c:	04401e04 	movi	r17,120
    5570:	d8802917 	ldw	r2,164(sp)
    5574:	0039883a 	mov	fp,zero
    5578:	1001e926 	beq	r2,zero,5d20 <___vfprintf_internal_r+0xb2c>
    557c:	0027883a 	mov	r19,zero
    5580:	002d883a 	mov	r22,zero
    5584:	00020506 	br	5d9c <___vfprintf_internal_r+0xba8>
    5588:	d9002c17 	ldw	r4,176(sp)
    558c:	b80b883a 	mov	r5,r23
    5590:	00074c40 	call	74c4 <__swsetup_r>
    5594:	1005ac1e 	bne	r2,zero,6c48 <___vfprintf_internal_r+0x1a54>
    5598:	b880030b 	ldhu	r2,12(r23)
    559c:	00c00284 	movi	r3,10
    55a0:	1080068c 	andi	r2,r2,26
    55a4:	10ff3c1e 	bne	r2,r3,5298 <__alt_data_end+0xff805298>
    55a8:	b880038f 	ldh	r2,14(r23)
    55ac:	103f3a16 	blt	r2,zero,5298 <__alt_data_end+0xff805298>
    55b0:	d9c02d17 	ldw	r7,180(sp)
    55b4:	d9002c17 	ldw	r4,176(sp)
    55b8:	a80d883a 	mov	r6,r21
    55bc:	b80b883a 	mov	r5,r23
    55c0:	00074080 	call	7408 <__sbprintf>
    55c4:	00001106 	br	560c <___vfprintf_internal_r+0x418>
    55c8:	d9002c17 	ldw	r4,176(sp)
    55cc:	d9801e04 	addi	r6,sp,120
    55d0:	b80b883a 	mov	r5,r23
    55d4:	000c6340 	call	c634 <__sprint_r>
    55d8:	1000081e 	bne	r2,zero,55fc <___vfprintf_internal_r+0x408>
    55dc:	da000404 	addi	r8,sp,16
    55e0:	003f5306 	br	5330 <__alt_data_end+0xff805330>
    55e4:	d8802017 	ldw	r2,128(sp)
    55e8:	10000426 	beq	r2,zero,55fc <___vfprintf_internal_r+0x408>
    55ec:	d9002c17 	ldw	r4,176(sp)
    55f0:	d9801e04 	addi	r6,sp,120
    55f4:	b80b883a 	mov	r5,r23
    55f8:	000c6340 	call	c634 <__sprint_r>
    55fc:	b880030b 	ldhu	r2,12(r23)
    5600:	1080100c 	andi	r2,r2,64
    5604:	1005901e 	bne	r2,zero,6c48 <___vfprintf_internal_r+0x1a54>
    5608:	d8802f17 	ldw	r2,188(sp)
    560c:	dfc04717 	ldw	ra,284(sp)
    5610:	df004617 	ldw	fp,280(sp)
    5614:	ddc04517 	ldw	r23,276(sp)
    5618:	dd804417 	ldw	r22,272(sp)
    561c:	dd404317 	ldw	r21,268(sp)
    5620:	dd004217 	ldw	r20,264(sp)
    5624:	dcc04117 	ldw	r19,260(sp)
    5628:	dc804017 	ldw	r18,256(sp)
    562c:	dc403f17 	ldw	r17,252(sp)
    5630:	dc003e17 	ldw	r16,248(sp)
    5634:	dec04804 	addi	sp,sp,288
    5638:	f800283a 	ret
    563c:	d9002c17 	ldw	r4,176(sp)
    5640:	00094980 	call	9498 <__sinit>
    5644:	003f0406 	br	5258 <__alt_data_end+0xff805258>
    5648:	d8802d17 	ldw	r2,180(sp)
    564c:	d9002d17 	ldw	r4,180(sp)
    5650:	10800017 	ldw	r2,0(r2)
    5654:	d8803115 	stw	r2,196(sp)
    5658:	20800104 	addi	r2,r4,4
    565c:	d9003117 	ldw	r4,196(sp)
    5660:	203fa716 	blt	r4,zero,5500 <__alt_data_end+0xff805500>
    5664:	d8802d15 	stw	r2,180(sp)
    5668:	ac400007 	ldb	r17,0(r21)
    566c:	003f4206 	br	5378 <__alt_data_end+0xff805378>
    5670:	ac400007 	ldb	r17,0(r21)
    5674:	aac00044 	addi	r11,r21,1
    5678:	8a872826 	beq	r17,r10,731c <___vfprintf_internal_r+0x2128>
    567c:	88bff404 	addi	r2,r17,-48
    5680:	0009883a 	mov	r4,zero
    5684:	30867d36 	bltu	r6,r2,707c <___vfprintf_internal_r+0x1e88>
    5688:	5c400007 	ldb	r17,0(r11)
    568c:	210002a4 	muli	r4,r4,10
    5690:	5d400044 	addi	r21,r11,1
    5694:	a817883a 	mov	r11,r21
    5698:	2089883a 	add	r4,r4,r2
    569c:	88bff404 	addi	r2,r17,-48
    56a0:	30bff92e 	bgeu	r6,r2,5688 <__alt_data_end+0xff805688>
    56a4:	2005c916 	blt	r4,zero,6dcc <___vfprintf_internal_r+0x1bd8>
    56a8:	d9002915 	stw	r4,164(sp)
    56ac:	003f3306 	br	537c <__alt_data_end+0xff80537c>
    56b0:	94802014 	ori	r18,r18,128
    56b4:	ac400007 	ldb	r17,0(r21)
    56b8:	003f2f06 	br	5378 <__alt_data_end+0xff805378>
    56bc:	a809883a 	mov	r4,r21
    56c0:	d8003115 	stw	zero,196(sp)
    56c4:	88bff404 	addi	r2,r17,-48
    56c8:	0017883a 	mov	r11,zero
    56cc:	24400007 	ldb	r17,0(r4)
    56d0:	5ac002a4 	muli	r11,r11,10
    56d4:	ad400044 	addi	r21,r21,1
    56d8:	a809883a 	mov	r4,r21
    56dc:	12d7883a 	add	r11,r2,r11
    56e0:	88bff404 	addi	r2,r17,-48
    56e4:	30bff92e 	bgeu	r6,r2,56cc <__alt_data_end+0xff8056cc>
    56e8:	dac03115 	stw	r11,196(sp)
    56ec:	003f2306 	br	537c <__alt_data_end+0xff80537c>
    56f0:	18c03fcc 	andi	r3,r3,255
    56f4:	18072b1e 	bne	r3,zero,73a4 <___vfprintf_internal_r+0x21b0>
    56f8:	94800414 	ori	r18,r18,16
    56fc:	9080080c 	andi	r2,r18,32
    5700:	10037b26 	beq	r2,zero,64f0 <___vfprintf_internal_r+0x12fc>
    5704:	d9402d17 	ldw	r5,180(sp)
    5708:	28800117 	ldw	r2,4(r5)
    570c:	2cc00017 	ldw	r19,0(r5)
    5710:	29400204 	addi	r5,r5,8
    5714:	d9402d15 	stw	r5,180(sp)
    5718:	102d883a 	mov	r22,r2
    571c:	10044b16 	blt	r2,zero,684c <___vfprintf_internal_r+0x1658>
    5720:	d9402917 	ldw	r5,164(sp)
    5724:	df002783 	ldbu	fp,158(sp)
    5728:	2803bc16 	blt	r5,zero,661c <___vfprintf_internal_r+0x1428>
    572c:	00ffdfc4 	movi	r3,-129
    5730:	9d84b03a 	or	r2,r19,r22
    5734:	90e4703a 	and	r18,r18,r3
    5738:	10017726 	beq	r2,zero,5d18 <___vfprintf_internal_r+0xb24>
    573c:	b0038326 	beq	r22,zero,654c <___vfprintf_internal_r+0x1358>
    5740:	dc402a15 	stw	r17,168(sp)
    5744:	dc001e04 	addi	r16,sp,120
    5748:	b023883a 	mov	r17,r22
    574c:	402d883a 	mov	r22,r8
    5750:	9809883a 	mov	r4,r19
    5754:	880b883a 	mov	r5,r17
    5758:	01800284 	movi	r6,10
    575c:	000f883a 	mov	r7,zero
    5760:	000ea2c0 	call	ea2c <__umoddi3>
    5764:	10800c04 	addi	r2,r2,48
    5768:	843fffc4 	addi	r16,r16,-1
    576c:	9809883a 	mov	r4,r19
    5770:	880b883a 	mov	r5,r17
    5774:	80800005 	stb	r2,0(r16)
    5778:	01800284 	movi	r6,10
    577c:	000f883a 	mov	r7,zero
    5780:	000e4b40 	call	e4b4 <__udivdi3>
    5784:	1027883a 	mov	r19,r2
    5788:	10c4b03a 	or	r2,r2,r3
    578c:	1823883a 	mov	r17,r3
    5790:	103fef1e 	bne	r2,zero,5750 <__alt_data_end+0xff805750>
    5794:	d8c02817 	ldw	r3,160(sp)
    5798:	dc402a17 	ldw	r17,168(sp)
    579c:	b011883a 	mov	r8,r22
    57a0:	1c07c83a 	sub	r3,r3,r16
    57a4:	d8c02e15 	stw	r3,184(sp)
    57a8:	00005906 	br	5910 <___vfprintf_internal_r+0x71c>
    57ac:	18c03fcc 	andi	r3,r3,255
    57b0:	1806fa1e 	bne	r3,zero,739c <___vfprintf_internal_r+0x21a8>
    57b4:	9080020c 	andi	r2,r18,8
    57b8:	10048a26 	beq	r2,zero,69e4 <___vfprintf_internal_r+0x17f0>
    57bc:	d8c02d17 	ldw	r3,180(sp)
    57c0:	d9002d17 	ldw	r4,180(sp)
    57c4:	d9402d17 	ldw	r5,180(sp)
    57c8:	18c00017 	ldw	r3,0(r3)
    57cc:	21000117 	ldw	r4,4(r4)
    57d0:	29400204 	addi	r5,r5,8
    57d4:	d8c03615 	stw	r3,216(sp)
    57d8:	d9003815 	stw	r4,224(sp)
    57dc:	d9402d15 	stw	r5,180(sp)
    57e0:	d9003617 	ldw	r4,216(sp)
    57e4:	d9403817 	ldw	r5,224(sp)
    57e8:	da003d15 	stw	r8,244(sp)
    57ec:	04000044 	movi	r16,1
    57f0:	00012180 	call	1218 <__fpclassifyd>
    57f4:	da003d17 	ldw	r8,244(sp)
    57f8:	14041f1e 	bne	r2,r16,6878 <___vfprintf_internal_r+0x1684>
    57fc:	d9003617 	ldw	r4,216(sp)
    5800:	d9403817 	ldw	r5,224(sp)
    5804:	000d883a 	mov	r6,zero
    5808:	000f883a 	mov	r7,zero
    580c:	00038100 	call	3810 <__ledf2>
    5810:	da003d17 	ldw	r8,244(sp)
    5814:	1005be16 	blt	r2,zero,6f10 <___vfprintf_internal_r+0x1d1c>
    5818:	df002783 	ldbu	fp,158(sp)
    581c:	008011c4 	movi	r2,71
    5820:	1445330e 	bge	r2,r17,6cf0 <___vfprintf_internal_r+0x1afc>
    5824:	04000074 	movhi	r16,1
    5828:	84046604 	addi	r16,r16,4504
    582c:	00c000c4 	movi	r3,3
    5830:	00bfdfc4 	movi	r2,-129
    5834:	d8c02a15 	stw	r3,168(sp)
    5838:	90a4703a 	and	r18,r18,r2
    583c:	d8c02e15 	stw	r3,184(sp)
    5840:	d8002915 	stw	zero,164(sp)
    5844:	d8003215 	stw	zero,200(sp)
    5848:	00003706 	br	5928 <___vfprintf_internal_r+0x734>
    584c:	94800214 	ori	r18,r18,8
    5850:	ac400007 	ldb	r17,0(r21)
    5854:	003ec806 	br	5378 <__alt_data_end+0xff805378>
    5858:	18c03fcc 	andi	r3,r3,255
    585c:	1806db1e 	bne	r3,zero,73cc <___vfprintf_internal_r+0x21d8>
    5860:	94800414 	ori	r18,r18,16
    5864:	9080080c 	andi	r2,r18,32
    5868:	1002d826 	beq	r2,zero,63cc <___vfprintf_internal_r+0x11d8>
    586c:	d9402d17 	ldw	r5,180(sp)
    5870:	d8c02917 	ldw	r3,164(sp)
    5874:	d8002785 	stb	zero,158(sp)
    5878:	28800204 	addi	r2,r5,8
    587c:	2cc00017 	ldw	r19,0(r5)
    5880:	2d800117 	ldw	r22,4(r5)
    5884:	18048f16 	blt	r3,zero,6ac4 <___vfprintf_internal_r+0x18d0>
    5888:	013fdfc4 	movi	r4,-129
    588c:	9d86b03a 	or	r3,r19,r22
    5890:	d8802d15 	stw	r2,180(sp)
    5894:	9124703a 	and	r18,r18,r4
    5898:	1802d91e 	bne	r3,zero,6400 <___vfprintf_internal_r+0x120c>
    589c:	d8c02917 	ldw	r3,164(sp)
    58a0:	0039883a 	mov	fp,zero
    58a4:	1805c326 	beq	r3,zero,6fb4 <___vfprintf_internal_r+0x1dc0>
    58a8:	0027883a 	mov	r19,zero
    58ac:	002d883a 	mov	r22,zero
    58b0:	dc001e04 	addi	r16,sp,120
    58b4:	9806d0fa 	srli	r3,r19,3
    58b8:	b008977a 	slli	r4,r22,29
    58bc:	b02cd0fa 	srli	r22,r22,3
    58c0:	9cc001cc 	andi	r19,r19,7
    58c4:	98800c04 	addi	r2,r19,48
    58c8:	843fffc4 	addi	r16,r16,-1
    58cc:	20e6b03a 	or	r19,r4,r3
    58d0:	80800005 	stb	r2,0(r16)
    58d4:	9d86b03a 	or	r3,r19,r22
    58d8:	183ff61e 	bne	r3,zero,58b4 <__alt_data_end+0xff8058b4>
    58dc:	90c0004c 	andi	r3,r18,1
    58e0:	18013b26 	beq	r3,zero,5dd0 <___vfprintf_internal_r+0xbdc>
    58e4:	10803fcc 	andi	r2,r2,255
    58e8:	1080201c 	xori	r2,r2,128
    58ec:	10bfe004 	addi	r2,r2,-128
    58f0:	00c00c04 	movi	r3,48
    58f4:	10c13626 	beq	r2,r3,5dd0 <___vfprintf_internal_r+0xbdc>
    58f8:	80ffffc5 	stb	r3,-1(r16)
    58fc:	d8c02817 	ldw	r3,160(sp)
    5900:	80bfffc4 	addi	r2,r16,-1
    5904:	1021883a 	mov	r16,r2
    5908:	1887c83a 	sub	r3,r3,r2
    590c:	d8c02e15 	stw	r3,184(sp)
    5910:	d8802e17 	ldw	r2,184(sp)
    5914:	d9002917 	ldw	r4,164(sp)
    5918:	1100010e 	bge	r2,r4,5920 <___vfprintf_internal_r+0x72c>
    591c:	2005883a 	mov	r2,r4
    5920:	d8802a15 	stw	r2,168(sp)
    5924:	d8003215 	stw	zero,200(sp)
    5928:	e7003fcc 	andi	fp,fp,255
    592c:	e700201c 	xori	fp,fp,128
    5930:	e73fe004 	addi	fp,fp,-128
    5934:	e0000326 	beq	fp,zero,5944 <___vfprintf_internal_r+0x750>
    5938:	d8c02a17 	ldw	r3,168(sp)
    593c:	18c00044 	addi	r3,r3,1
    5940:	d8c02a15 	stw	r3,168(sp)
    5944:	90c0008c 	andi	r3,r18,2
    5948:	d8c02b15 	stw	r3,172(sp)
    594c:	18000326 	beq	r3,zero,595c <___vfprintf_internal_r+0x768>
    5950:	d8c02a17 	ldw	r3,168(sp)
    5954:	18c00084 	addi	r3,r3,2
    5958:	d8c02a15 	stw	r3,168(sp)
    595c:	90c0210c 	andi	r3,r18,132
    5960:	d8c03015 	stw	r3,192(sp)
    5964:	1801a31e 	bne	r3,zero,5ff4 <___vfprintf_internal_r+0xe00>
    5968:	d9003117 	ldw	r4,196(sp)
    596c:	d8c02a17 	ldw	r3,168(sp)
    5970:	20e7c83a 	sub	r19,r4,r3
    5974:	04c19f0e 	bge	zero,r19,5ff4 <___vfprintf_internal_r+0xe00>
    5978:	02400404 	movi	r9,16
    597c:	d8c02017 	ldw	r3,128(sp)
    5980:	d8801f17 	ldw	r2,124(sp)
    5984:	4cc50d0e 	bge	r9,r19,6dbc <___vfprintf_internal_r+0x1bc8>
    5988:	01400074 	movhi	r5,1
    598c:	294478c4 	addi	r5,r5,4579
    5990:	dc403b15 	stw	r17,236(sp)
    5994:	d9403515 	stw	r5,212(sp)
    5998:	9823883a 	mov	r17,r19
    599c:	482d883a 	mov	r22,r9
    59a0:	9027883a 	mov	r19,r18
    59a4:	070001c4 	movi	fp,7
    59a8:	8025883a 	mov	r18,r16
    59ac:	dc002c17 	ldw	r16,176(sp)
    59b0:	00000306 	br	59c0 <___vfprintf_internal_r+0x7cc>
    59b4:	8c7ffc04 	addi	r17,r17,-16
    59b8:	42000204 	addi	r8,r8,8
    59bc:	b440130e 	bge	r22,r17,5a0c <___vfprintf_internal_r+0x818>
    59c0:	01000074 	movhi	r4,1
    59c4:	18c00404 	addi	r3,r3,16
    59c8:	10800044 	addi	r2,r2,1
    59cc:	210478c4 	addi	r4,r4,4579
    59d0:	41000015 	stw	r4,0(r8)
    59d4:	45800115 	stw	r22,4(r8)
    59d8:	d8c02015 	stw	r3,128(sp)
    59dc:	d8801f15 	stw	r2,124(sp)
    59e0:	e0bff40e 	bge	fp,r2,59b4 <__alt_data_end+0xff8059b4>
    59e4:	d9801e04 	addi	r6,sp,120
    59e8:	b80b883a 	mov	r5,r23
    59ec:	8009883a 	mov	r4,r16
    59f0:	000c6340 	call	c634 <__sprint_r>
    59f4:	103f011e 	bne	r2,zero,55fc <__alt_data_end+0xff8055fc>
    59f8:	8c7ffc04 	addi	r17,r17,-16
    59fc:	d8c02017 	ldw	r3,128(sp)
    5a00:	d8801f17 	ldw	r2,124(sp)
    5a04:	da000404 	addi	r8,sp,16
    5a08:	b47fed16 	blt	r22,r17,59c0 <__alt_data_end+0xff8059c0>
    5a0c:	9021883a 	mov	r16,r18
    5a10:	9825883a 	mov	r18,r19
    5a14:	8827883a 	mov	r19,r17
    5a18:	dc403b17 	ldw	r17,236(sp)
    5a1c:	d9403517 	ldw	r5,212(sp)
    5a20:	98c7883a 	add	r3,r19,r3
    5a24:	10800044 	addi	r2,r2,1
    5a28:	41400015 	stw	r5,0(r8)
    5a2c:	44c00115 	stw	r19,4(r8)
    5a30:	d8c02015 	stw	r3,128(sp)
    5a34:	d8801f15 	stw	r2,124(sp)
    5a38:	010001c4 	movi	r4,7
    5a3c:	2082a316 	blt	r4,r2,64cc <___vfprintf_internal_r+0x12d8>
    5a40:	df002787 	ldb	fp,158(sp)
    5a44:	42000204 	addi	r8,r8,8
    5a48:	e0000c26 	beq	fp,zero,5a7c <___vfprintf_internal_r+0x888>
    5a4c:	d8801f17 	ldw	r2,124(sp)
    5a50:	d9002784 	addi	r4,sp,158
    5a54:	18c00044 	addi	r3,r3,1
    5a58:	10800044 	addi	r2,r2,1
    5a5c:	41000015 	stw	r4,0(r8)
    5a60:	01000044 	movi	r4,1
    5a64:	41000115 	stw	r4,4(r8)
    5a68:	d8c02015 	stw	r3,128(sp)
    5a6c:	d8801f15 	stw	r2,124(sp)
    5a70:	010001c4 	movi	r4,7
    5a74:	20823c16 	blt	r4,r2,6368 <___vfprintf_internal_r+0x1174>
    5a78:	42000204 	addi	r8,r8,8
    5a7c:	d8802b17 	ldw	r2,172(sp)
    5a80:	10000c26 	beq	r2,zero,5ab4 <___vfprintf_internal_r+0x8c0>
    5a84:	d8801f17 	ldw	r2,124(sp)
    5a88:	d9002704 	addi	r4,sp,156
    5a8c:	18c00084 	addi	r3,r3,2
    5a90:	10800044 	addi	r2,r2,1
    5a94:	41000015 	stw	r4,0(r8)
    5a98:	01000084 	movi	r4,2
    5a9c:	41000115 	stw	r4,4(r8)
    5aa0:	d8c02015 	stw	r3,128(sp)
    5aa4:	d8801f15 	stw	r2,124(sp)
    5aa8:	010001c4 	movi	r4,7
    5aac:	20823616 	blt	r4,r2,6388 <___vfprintf_internal_r+0x1194>
    5ab0:	42000204 	addi	r8,r8,8
    5ab4:	d9003017 	ldw	r4,192(sp)
    5ab8:	00802004 	movi	r2,128
    5abc:	20819926 	beq	r4,r2,6124 <___vfprintf_internal_r+0xf30>
    5ac0:	d9402917 	ldw	r5,164(sp)
    5ac4:	d8802e17 	ldw	r2,184(sp)
    5ac8:	28adc83a 	sub	r22,r5,r2
    5acc:	0580310e 	bge	zero,r22,5b94 <___vfprintf_internal_r+0x9a0>
    5ad0:	07000404 	movi	fp,16
    5ad4:	d8801f17 	ldw	r2,124(sp)
    5ad8:	e584140e 	bge	fp,r22,6b2c <___vfprintf_internal_r+0x1938>
    5adc:	01400074 	movhi	r5,1
    5ae0:	294474c4 	addi	r5,r5,4563
    5ae4:	dc402915 	stw	r17,164(sp)
    5ae8:	d9402b15 	stw	r5,172(sp)
    5aec:	b023883a 	mov	r17,r22
    5af0:	04c001c4 	movi	r19,7
    5af4:	a82d883a 	mov	r22,r21
    5af8:	902b883a 	mov	r21,r18
    5afc:	8025883a 	mov	r18,r16
    5b00:	dc002c17 	ldw	r16,176(sp)
    5b04:	00000306 	br	5b14 <___vfprintf_internal_r+0x920>
    5b08:	8c7ffc04 	addi	r17,r17,-16
    5b0c:	42000204 	addi	r8,r8,8
    5b10:	e440110e 	bge	fp,r17,5b58 <___vfprintf_internal_r+0x964>
    5b14:	18c00404 	addi	r3,r3,16
    5b18:	10800044 	addi	r2,r2,1
    5b1c:	45000015 	stw	r20,0(r8)
    5b20:	47000115 	stw	fp,4(r8)
    5b24:	d8c02015 	stw	r3,128(sp)
    5b28:	d8801f15 	stw	r2,124(sp)
    5b2c:	98bff60e 	bge	r19,r2,5b08 <__alt_data_end+0xff805b08>
    5b30:	d9801e04 	addi	r6,sp,120
    5b34:	b80b883a 	mov	r5,r23
    5b38:	8009883a 	mov	r4,r16
    5b3c:	000c6340 	call	c634 <__sprint_r>
    5b40:	103eae1e 	bne	r2,zero,55fc <__alt_data_end+0xff8055fc>
    5b44:	8c7ffc04 	addi	r17,r17,-16
    5b48:	d8c02017 	ldw	r3,128(sp)
    5b4c:	d8801f17 	ldw	r2,124(sp)
    5b50:	da000404 	addi	r8,sp,16
    5b54:	e47fef16 	blt	fp,r17,5b14 <__alt_data_end+0xff805b14>
    5b58:	9021883a 	mov	r16,r18
    5b5c:	a825883a 	mov	r18,r21
    5b60:	b02b883a 	mov	r21,r22
    5b64:	882d883a 	mov	r22,r17
    5b68:	dc402917 	ldw	r17,164(sp)
    5b6c:	d9002b17 	ldw	r4,172(sp)
    5b70:	1d87883a 	add	r3,r3,r22
    5b74:	10800044 	addi	r2,r2,1
    5b78:	41000015 	stw	r4,0(r8)
    5b7c:	45800115 	stw	r22,4(r8)
    5b80:	d8c02015 	stw	r3,128(sp)
    5b84:	d8801f15 	stw	r2,124(sp)
    5b88:	010001c4 	movi	r4,7
    5b8c:	2081ee16 	blt	r4,r2,6348 <___vfprintf_internal_r+0x1154>
    5b90:	42000204 	addi	r8,r8,8
    5b94:	9080400c 	andi	r2,r18,256
    5b98:	1001181e 	bne	r2,zero,5ffc <___vfprintf_internal_r+0xe08>
    5b9c:	d9402e17 	ldw	r5,184(sp)
    5ba0:	d8801f17 	ldw	r2,124(sp)
    5ba4:	44000015 	stw	r16,0(r8)
    5ba8:	1947883a 	add	r3,r3,r5
    5bac:	10800044 	addi	r2,r2,1
    5bb0:	41400115 	stw	r5,4(r8)
    5bb4:	d8c02015 	stw	r3,128(sp)
    5bb8:	d8801f15 	stw	r2,124(sp)
    5bbc:	010001c4 	movi	r4,7
    5bc0:	2081d316 	blt	r4,r2,6310 <___vfprintf_internal_r+0x111c>
    5bc4:	42000204 	addi	r8,r8,8
    5bc8:	9480010c 	andi	r18,r18,4
    5bcc:	90003226 	beq	r18,zero,5c98 <___vfprintf_internal_r+0xaa4>
    5bd0:	d9403117 	ldw	r5,196(sp)
    5bd4:	d8802a17 	ldw	r2,168(sp)
    5bd8:	28a1c83a 	sub	r16,r5,r2
    5bdc:	04002e0e 	bge	zero,r16,5c98 <___vfprintf_internal_r+0xaa4>
    5be0:	04400404 	movi	r17,16
    5be4:	d8801f17 	ldw	r2,124(sp)
    5be8:	8c04a20e 	bge	r17,r16,6e74 <___vfprintf_internal_r+0x1c80>
    5bec:	01400074 	movhi	r5,1
    5bf0:	294478c4 	addi	r5,r5,4579
    5bf4:	d9403515 	stw	r5,212(sp)
    5bf8:	048001c4 	movi	r18,7
    5bfc:	dcc02c17 	ldw	r19,176(sp)
    5c00:	00000306 	br	5c10 <___vfprintf_internal_r+0xa1c>
    5c04:	843ffc04 	addi	r16,r16,-16
    5c08:	42000204 	addi	r8,r8,8
    5c0c:	8c00130e 	bge	r17,r16,5c5c <___vfprintf_internal_r+0xa68>
    5c10:	01000074 	movhi	r4,1
    5c14:	18c00404 	addi	r3,r3,16
    5c18:	10800044 	addi	r2,r2,1
    5c1c:	210478c4 	addi	r4,r4,4579
    5c20:	41000015 	stw	r4,0(r8)
    5c24:	44400115 	stw	r17,4(r8)
    5c28:	d8c02015 	stw	r3,128(sp)
    5c2c:	d8801f15 	stw	r2,124(sp)
    5c30:	90bff40e 	bge	r18,r2,5c04 <__alt_data_end+0xff805c04>
    5c34:	d9801e04 	addi	r6,sp,120
    5c38:	b80b883a 	mov	r5,r23
    5c3c:	9809883a 	mov	r4,r19
    5c40:	000c6340 	call	c634 <__sprint_r>
    5c44:	103e6d1e 	bne	r2,zero,55fc <__alt_data_end+0xff8055fc>
    5c48:	843ffc04 	addi	r16,r16,-16
    5c4c:	d8c02017 	ldw	r3,128(sp)
    5c50:	d8801f17 	ldw	r2,124(sp)
    5c54:	da000404 	addi	r8,sp,16
    5c58:	8c3fed16 	blt	r17,r16,5c10 <__alt_data_end+0xff805c10>
    5c5c:	d9403517 	ldw	r5,212(sp)
    5c60:	1c07883a 	add	r3,r3,r16
    5c64:	10800044 	addi	r2,r2,1
    5c68:	41400015 	stw	r5,0(r8)
    5c6c:	44000115 	stw	r16,4(r8)
    5c70:	d8c02015 	stw	r3,128(sp)
    5c74:	d8801f15 	stw	r2,124(sp)
    5c78:	010001c4 	movi	r4,7
    5c7c:	2080060e 	bge	r4,r2,5c98 <___vfprintf_internal_r+0xaa4>
    5c80:	d9002c17 	ldw	r4,176(sp)
    5c84:	d9801e04 	addi	r6,sp,120
    5c88:	b80b883a 	mov	r5,r23
    5c8c:	000c6340 	call	c634 <__sprint_r>
    5c90:	103e5a1e 	bne	r2,zero,55fc <__alt_data_end+0xff8055fc>
    5c94:	d8c02017 	ldw	r3,128(sp)
    5c98:	d8803117 	ldw	r2,196(sp)
    5c9c:	d9002a17 	ldw	r4,168(sp)
    5ca0:	1100010e 	bge	r2,r4,5ca8 <___vfprintf_internal_r+0xab4>
    5ca4:	2005883a 	mov	r2,r4
    5ca8:	d9402f17 	ldw	r5,188(sp)
    5cac:	288b883a 	add	r5,r5,r2
    5cb0:	d9402f15 	stw	r5,188(sp)
    5cb4:	18019e1e 	bne	r3,zero,6330 <___vfprintf_internal_r+0x113c>
    5cb8:	a8800007 	ldb	r2,0(r21)
    5cbc:	d8001f15 	stw	zero,124(sp)
    5cc0:	da000404 	addi	r8,sp,16
    5cc4:	103d851e 	bne	r2,zero,52dc <__alt_data_end+0xff8052dc>
    5cc8:	a821883a 	mov	r16,r21
    5ccc:	003d9b06 	br	533c <__alt_data_end+0xff80533c>
    5cd0:	18c03fcc 	andi	r3,r3,255
    5cd4:	1805c11e 	bne	r3,zero,73dc <___vfprintf_internal_r+0x21e8>
    5cd8:	94800414 	ori	r18,r18,16
    5cdc:	9080080c 	andi	r2,r18,32
    5ce0:	10020c26 	beq	r2,zero,6514 <___vfprintf_internal_r+0x1320>
    5ce4:	d8802d17 	ldw	r2,180(sp)
    5ce8:	d9002917 	ldw	r4,164(sp)
    5cec:	d8002785 	stb	zero,158(sp)
    5cf0:	10c00204 	addi	r3,r2,8
    5cf4:	14c00017 	ldw	r19,0(r2)
    5cf8:	15800117 	ldw	r22,4(r2)
    5cfc:	20040f16 	blt	r4,zero,6d3c <___vfprintf_internal_r+0x1b48>
    5d00:	013fdfc4 	movi	r4,-129
    5d04:	9d84b03a 	or	r2,r19,r22
    5d08:	d8c02d15 	stw	r3,180(sp)
    5d0c:	9124703a 	and	r18,r18,r4
    5d10:	0039883a 	mov	fp,zero
    5d14:	103e891e 	bne	r2,zero,573c <__alt_data_end+0xff80573c>
    5d18:	d9002917 	ldw	r4,164(sp)
    5d1c:	2002c11e 	bne	r4,zero,6824 <___vfprintf_internal_r+0x1630>
    5d20:	d8002915 	stw	zero,164(sp)
    5d24:	d8002e15 	stw	zero,184(sp)
    5d28:	dc001e04 	addi	r16,sp,120
    5d2c:	003ef806 	br	5910 <__alt_data_end+0xff805910>
    5d30:	18c03fcc 	andi	r3,r3,255
    5d34:	18059d1e 	bne	r3,zero,73ac <___vfprintf_internal_r+0x21b8>
    5d38:	01400074 	movhi	r5,1
    5d3c:	29446904 	addi	r5,r5,4516
    5d40:	d9403915 	stw	r5,228(sp)
    5d44:	9080080c 	andi	r2,r18,32
    5d48:	10005226 	beq	r2,zero,5e94 <___vfprintf_internal_r+0xca0>
    5d4c:	d8802d17 	ldw	r2,180(sp)
    5d50:	14c00017 	ldw	r19,0(r2)
    5d54:	15800117 	ldw	r22,4(r2)
    5d58:	10800204 	addi	r2,r2,8
    5d5c:	d8802d15 	stw	r2,180(sp)
    5d60:	9080004c 	andi	r2,r18,1
    5d64:	10019026 	beq	r2,zero,63a8 <___vfprintf_internal_r+0x11b4>
    5d68:	9d84b03a 	or	r2,r19,r22
    5d6c:	10036926 	beq	r2,zero,6b14 <___vfprintf_internal_r+0x1920>
    5d70:	d8c02917 	ldw	r3,164(sp)
    5d74:	00800c04 	movi	r2,48
    5d78:	d8802705 	stb	r2,156(sp)
    5d7c:	dc402745 	stb	r17,157(sp)
    5d80:	d8002785 	stb	zero,158(sp)
    5d84:	90800094 	ori	r2,r18,2
    5d88:	18045d16 	blt	r3,zero,6f00 <___vfprintf_internal_r+0x1d0c>
    5d8c:	00bfdfc4 	movi	r2,-129
    5d90:	90a4703a 	and	r18,r18,r2
    5d94:	94800094 	ori	r18,r18,2
    5d98:	0039883a 	mov	fp,zero
    5d9c:	d9003917 	ldw	r4,228(sp)
    5da0:	dc001e04 	addi	r16,sp,120
    5da4:	988003cc 	andi	r2,r19,15
    5da8:	b006973a 	slli	r3,r22,28
    5dac:	2085883a 	add	r2,r4,r2
    5db0:	9826d13a 	srli	r19,r19,4
    5db4:	10800003 	ldbu	r2,0(r2)
    5db8:	b02cd13a 	srli	r22,r22,4
    5dbc:	843fffc4 	addi	r16,r16,-1
    5dc0:	1ce6b03a 	or	r19,r3,r19
    5dc4:	80800005 	stb	r2,0(r16)
    5dc8:	9d84b03a 	or	r2,r19,r22
    5dcc:	103ff51e 	bne	r2,zero,5da4 <__alt_data_end+0xff805da4>
    5dd0:	d8c02817 	ldw	r3,160(sp)
    5dd4:	1c07c83a 	sub	r3,r3,r16
    5dd8:	d8c02e15 	stw	r3,184(sp)
    5ddc:	003ecc06 	br	5910 <__alt_data_end+0xff805910>
    5de0:	18c03fcc 	andi	r3,r3,255
    5de4:	183e9f26 	beq	r3,zero,5864 <__alt_data_end+0xff805864>
    5de8:	d9c02785 	stb	r7,158(sp)
    5dec:	003e9d06 	br	5864 <__alt_data_end+0xff805864>
    5df0:	00c00044 	movi	r3,1
    5df4:	01c00ac4 	movi	r7,43
    5df8:	ac400007 	ldb	r17,0(r21)
    5dfc:	003d5e06 	br	5378 <__alt_data_end+0xff805378>
    5e00:	94800814 	ori	r18,r18,32
    5e04:	ac400007 	ldb	r17,0(r21)
    5e08:	003d5b06 	br	5378 <__alt_data_end+0xff805378>
    5e0c:	d8c02d17 	ldw	r3,180(sp)
    5e10:	d8002785 	stb	zero,158(sp)
    5e14:	1c000017 	ldw	r16,0(r3)
    5e18:	1cc00104 	addi	r19,r3,4
    5e1c:	80041926 	beq	r16,zero,6e84 <___vfprintf_internal_r+0x1c90>
    5e20:	d9002917 	ldw	r4,164(sp)
    5e24:	2003d016 	blt	r4,zero,6d68 <___vfprintf_internal_r+0x1b74>
    5e28:	200d883a 	mov	r6,r4
    5e2c:	000b883a 	mov	r5,zero
    5e30:	8009883a 	mov	r4,r16
    5e34:	da003d15 	stw	r8,244(sp)
    5e38:	000aa040 	call	aa04 <memchr>
    5e3c:	da003d17 	ldw	r8,244(sp)
    5e40:	10045426 	beq	r2,zero,6f94 <___vfprintf_internal_r+0x1da0>
    5e44:	1405c83a 	sub	r2,r2,r16
    5e48:	d8802e15 	stw	r2,184(sp)
    5e4c:	1003cc16 	blt	r2,zero,6d80 <___vfprintf_internal_r+0x1b8c>
    5e50:	df002783 	ldbu	fp,158(sp)
    5e54:	d8802a15 	stw	r2,168(sp)
    5e58:	dcc02d15 	stw	r19,180(sp)
    5e5c:	d8002915 	stw	zero,164(sp)
    5e60:	d8003215 	stw	zero,200(sp)
    5e64:	003eb006 	br	5928 <__alt_data_end+0xff805928>
    5e68:	18c03fcc 	andi	r3,r3,255
    5e6c:	183f9b26 	beq	r3,zero,5cdc <__alt_data_end+0xff805cdc>
    5e70:	d9c02785 	stb	r7,158(sp)
    5e74:	003f9906 	br	5cdc <__alt_data_end+0xff805cdc>
    5e78:	18c03fcc 	andi	r3,r3,255
    5e7c:	1805551e 	bne	r3,zero,73d4 <___vfprintf_internal_r+0x21e0>
    5e80:	01400074 	movhi	r5,1
    5e84:	29446e04 	addi	r5,r5,4536
    5e88:	d9403915 	stw	r5,228(sp)
    5e8c:	9080080c 	andi	r2,r18,32
    5e90:	103fae1e 	bne	r2,zero,5d4c <__alt_data_end+0xff805d4c>
    5e94:	9080040c 	andi	r2,r18,16
    5e98:	1002de26 	beq	r2,zero,6a14 <___vfprintf_internal_r+0x1820>
    5e9c:	d8c02d17 	ldw	r3,180(sp)
    5ea0:	002d883a 	mov	r22,zero
    5ea4:	1cc00017 	ldw	r19,0(r3)
    5ea8:	18c00104 	addi	r3,r3,4
    5eac:	d8c02d15 	stw	r3,180(sp)
    5eb0:	003fab06 	br	5d60 <__alt_data_end+0xff805d60>
    5eb4:	38803fcc 	andi	r2,r7,255
    5eb8:	1080201c 	xori	r2,r2,128
    5ebc:	10bfe004 	addi	r2,r2,-128
    5ec0:	1002d21e 	bne	r2,zero,6a0c <___vfprintf_internal_r+0x1818>
    5ec4:	00c00044 	movi	r3,1
    5ec8:	01c00804 	movi	r7,32
    5ecc:	ac400007 	ldb	r17,0(r21)
    5ed0:	003d2906 	br	5378 <__alt_data_end+0xff805378>
    5ed4:	94800054 	ori	r18,r18,1
    5ed8:	ac400007 	ldb	r17,0(r21)
    5edc:	003d2606 	br	5378 <__alt_data_end+0xff805378>
    5ee0:	18c03fcc 	andi	r3,r3,255
    5ee4:	183e0526 	beq	r3,zero,56fc <__alt_data_end+0xff8056fc>
    5ee8:	d9c02785 	stb	r7,158(sp)
    5eec:	003e0306 	br	56fc <__alt_data_end+0xff8056fc>
    5ef0:	94801014 	ori	r18,r18,64
    5ef4:	ac400007 	ldb	r17,0(r21)
    5ef8:	003d1f06 	br	5378 <__alt_data_end+0xff805378>
    5efc:	ac400007 	ldb	r17,0(r21)
    5f00:	8a438726 	beq	r17,r9,6d20 <___vfprintf_internal_r+0x1b2c>
    5f04:	94800414 	ori	r18,r18,16
    5f08:	003d1b06 	br	5378 <__alt_data_end+0xff805378>
    5f0c:	18c03fcc 	andi	r3,r3,255
    5f10:	1805341e 	bne	r3,zero,73e4 <___vfprintf_internal_r+0x21f0>
    5f14:	9080080c 	andi	r2,r18,32
    5f18:	1002cd26 	beq	r2,zero,6a50 <___vfprintf_internal_r+0x185c>
    5f1c:	d9402d17 	ldw	r5,180(sp)
    5f20:	d9002f17 	ldw	r4,188(sp)
    5f24:	28800017 	ldw	r2,0(r5)
    5f28:	2007d7fa 	srai	r3,r4,31
    5f2c:	29400104 	addi	r5,r5,4
    5f30:	d9402d15 	stw	r5,180(sp)
    5f34:	11000015 	stw	r4,0(r2)
    5f38:	10c00115 	stw	r3,4(r2)
    5f3c:	003ce506 	br	52d4 <__alt_data_end+0xff8052d4>
    5f40:	d8c02d17 	ldw	r3,180(sp)
    5f44:	d9002d17 	ldw	r4,180(sp)
    5f48:	d8002785 	stb	zero,158(sp)
    5f4c:	18800017 	ldw	r2,0(r3)
    5f50:	21000104 	addi	r4,r4,4
    5f54:	00c00044 	movi	r3,1
    5f58:	d8c02a15 	stw	r3,168(sp)
    5f5c:	d8801405 	stb	r2,80(sp)
    5f60:	d9002d15 	stw	r4,180(sp)
    5f64:	d8c02e15 	stw	r3,184(sp)
    5f68:	d8002915 	stw	zero,164(sp)
    5f6c:	d8003215 	stw	zero,200(sp)
    5f70:	dc001404 	addi	r16,sp,80
    5f74:	0039883a 	mov	fp,zero
    5f78:	003e7206 	br	5944 <__alt_data_end+0xff805944>
    5f7c:	01000074 	movhi	r4,1
    5f80:	21046e04 	addi	r4,r4,4536
    5f84:	0039883a 	mov	fp,zero
    5f88:	d9003915 	stw	r4,228(sp)
    5f8c:	04401e04 	movi	r17,120
    5f90:	003f8206 	br	5d9c <__alt_data_end+0xff805d9c>
    5f94:	18c03fcc 	andi	r3,r3,255
    5f98:	1805061e 	bne	r3,zero,73b4 <___vfprintf_internal_r+0x21c0>
    5f9c:	883d9126 	beq	r17,zero,55e4 <__alt_data_end+0xff8055e4>
    5fa0:	00c00044 	movi	r3,1
    5fa4:	d8c02a15 	stw	r3,168(sp)
    5fa8:	dc401405 	stb	r17,80(sp)
    5fac:	d8002785 	stb	zero,158(sp)
    5fb0:	003fec06 	br	5f64 <__alt_data_end+0xff805f64>
    5fb4:	01400074 	movhi	r5,1
    5fb8:	29446e04 	addi	r5,r5,4536
    5fbc:	d9403915 	stw	r5,228(sp)
    5fc0:	d8c02d15 	stw	r3,180(sp)
    5fc4:	1025883a 	mov	r18,r2
    5fc8:	04401e04 	movi	r17,120
    5fcc:	9d84b03a 	or	r2,r19,r22
    5fd0:	1000fc1e 	bne	r2,zero,63c4 <___vfprintf_internal_r+0x11d0>
    5fd4:	0039883a 	mov	fp,zero
    5fd8:	00800084 	movi	r2,2
    5fdc:	10803fcc 	andi	r2,r2,255
    5fe0:	00c00044 	movi	r3,1
    5fe4:	10c20f26 	beq	r2,r3,6824 <___vfprintf_internal_r+0x1630>
    5fe8:	00c00084 	movi	r3,2
    5fec:	10fd6326 	beq	r2,r3,557c <__alt_data_end+0xff80557c>
    5ff0:	003e2d06 	br	58a8 <__alt_data_end+0xff8058a8>
    5ff4:	d8c02017 	ldw	r3,128(sp)
    5ff8:	003e9306 	br	5a48 <__alt_data_end+0xff805a48>
    5ffc:	00801944 	movi	r2,101
    6000:	14407e0e 	bge	r2,r17,61fc <___vfprintf_internal_r+0x1008>
    6004:	d9003617 	ldw	r4,216(sp)
    6008:	d9403817 	ldw	r5,224(sp)
    600c:	000d883a 	mov	r6,zero
    6010:	000f883a 	mov	r7,zero
    6014:	d8c03c15 	stw	r3,240(sp)
    6018:	da003d15 	stw	r8,244(sp)
    601c:	000ef640 	call	ef64 <__eqdf2>
    6020:	d8c03c17 	ldw	r3,240(sp)
    6024:	da003d17 	ldw	r8,244(sp)
    6028:	1000f71e 	bne	r2,zero,6408 <___vfprintf_internal_r+0x1214>
    602c:	d8801f17 	ldw	r2,124(sp)
    6030:	01000074 	movhi	r4,1
    6034:	2103f404 	addi	r4,r4,4048
    6038:	18c00044 	addi	r3,r3,1
    603c:	10800044 	addi	r2,r2,1
    6040:	41000015 	stw	r4,0(r8)
    6044:	01000044 	movi	r4,1
    6048:	41000115 	stw	r4,4(r8)
    604c:	d8c02015 	stw	r3,128(sp)
    6050:	d8801f15 	stw	r2,124(sp)
    6054:	010001c4 	movi	r4,7
    6058:	2082b816 	blt	r4,r2,6b3c <___vfprintf_internal_r+0x1948>
    605c:	42000204 	addi	r8,r8,8
    6060:	d8802617 	ldw	r2,152(sp)
    6064:	d9403317 	ldw	r5,204(sp)
    6068:	11400216 	blt	r2,r5,6074 <___vfprintf_internal_r+0xe80>
    606c:	9080004c 	andi	r2,r18,1
    6070:	103ed526 	beq	r2,zero,5bc8 <__alt_data_end+0xff805bc8>
    6074:	d8803717 	ldw	r2,220(sp)
    6078:	d9003417 	ldw	r4,208(sp)
    607c:	d9403717 	ldw	r5,220(sp)
    6080:	1887883a 	add	r3,r3,r2
    6084:	d8801f17 	ldw	r2,124(sp)
    6088:	41000015 	stw	r4,0(r8)
    608c:	41400115 	stw	r5,4(r8)
    6090:	10800044 	addi	r2,r2,1
    6094:	d8c02015 	stw	r3,128(sp)
    6098:	d8801f15 	stw	r2,124(sp)
    609c:	010001c4 	movi	r4,7
    60a0:	20832916 	blt	r4,r2,6d48 <___vfprintf_internal_r+0x1b54>
    60a4:	42000204 	addi	r8,r8,8
    60a8:	d8803317 	ldw	r2,204(sp)
    60ac:	143fffc4 	addi	r16,r2,-1
    60b0:	043ec50e 	bge	zero,r16,5bc8 <__alt_data_end+0xff805bc8>
    60b4:	04400404 	movi	r17,16
    60b8:	d8801f17 	ldw	r2,124(sp)
    60bc:	8c00880e 	bge	r17,r16,62e0 <___vfprintf_internal_r+0x10ec>
    60c0:	01400074 	movhi	r5,1
    60c4:	294474c4 	addi	r5,r5,4563
    60c8:	d9402b15 	stw	r5,172(sp)
    60cc:	058001c4 	movi	r22,7
    60d0:	dcc02c17 	ldw	r19,176(sp)
    60d4:	00000306 	br	60e4 <___vfprintf_internal_r+0xef0>
    60d8:	42000204 	addi	r8,r8,8
    60dc:	843ffc04 	addi	r16,r16,-16
    60e0:	8c00820e 	bge	r17,r16,62ec <___vfprintf_internal_r+0x10f8>
    60e4:	18c00404 	addi	r3,r3,16
    60e8:	10800044 	addi	r2,r2,1
    60ec:	45000015 	stw	r20,0(r8)
    60f0:	44400115 	stw	r17,4(r8)
    60f4:	d8c02015 	stw	r3,128(sp)
    60f8:	d8801f15 	stw	r2,124(sp)
    60fc:	b0bff60e 	bge	r22,r2,60d8 <__alt_data_end+0xff8060d8>
    6100:	d9801e04 	addi	r6,sp,120
    6104:	b80b883a 	mov	r5,r23
    6108:	9809883a 	mov	r4,r19
    610c:	000c6340 	call	c634 <__sprint_r>
    6110:	103d3a1e 	bne	r2,zero,55fc <__alt_data_end+0xff8055fc>
    6114:	d8c02017 	ldw	r3,128(sp)
    6118:	d8801f17 	ldw	r2,124(sp)
    611c:	da000404 	addi	r8,sp,16
    6120:	003fee06 	br	60dc <__alt_data_end+0xff8060dc>
    6124:	d9403117 	ldw	r5,196(sp)
    6128:	d8802a17 	ldw	r2,168(sp)
    612c:	28adc83a 	sub	r22,r5,r2
    6130:	05be630e 	bge	zero,r22,5ac0 <__alt_data_end+0xff805ac0>
    6134:	07000404 	movi	fp,16
    6138:	d8801f17 	ldw	r2,124(sp)
    613c:	e5838f0e 	bge	fp,r22,6f7c <___vfprintf_internal_r+0x1d88>
    6140:	01400074 	movhi	r5,1
    6144:	294474c4 	addi	r5,r5,4563
    6148:	dc403015 	stw	r17,192(sp)
    614c:	d9402b15 	stw	r5,172(sp)
    6150:	b023883a 	mov	r17,r22
    6154:	04c001c4 	movi	r19,7
    6158:	a82d883a 	mov	r22,r21
    615c:	902b883a 	mov	r21,r18
    6160:	8025883a 	mov	r18,r16
    6164:	dc002c17 	ldw	r16,176(sp)
    6168:	00000306 	br	6178 <___vfprintf_internal_r+0xf84>
    616c:	8c7ffc04 	addi	r17,r17,-16
    6170:	42000204 	addi	r8,r8,8
    6174:	e440110e 	bge	fp,r17,61bc <___vfprintf_internal_r+0xfc8>
    6178:	18c00404 	addi	r3,r3,16
    617c:	10800044 	addi	r2,r2,1
    6180:	45000015 	stw	r20,0(r8)
    6184:	47000115 	stw	fp,4(r8)
    6188:	d8c02015 	stw	r3,128(sp)
    618c:	d8801f15 	stw	r2,124(sp)
    6190:	98bff60e 	bge	r19,r2,616c <__alt_data_end+0xff80616c>
    6194:	d9801e04 	addi	r6,sp,120
    6198:	b80b883a 	mov	r5,r23
    619c:	8009883a 	mov	r4,r16
    61a0:	000c6340 	call	c634 <__sprint_r>
    61a4:	103d151e 	bne	r2,zero,55fc <__alt_data_end+0xff8055fc>
    61a8:	8c7ffc04 	addi	r17,r17,-16
    61ac:	d8c02017 	ldw	r3,128(sp)
    61b0:	d8801f17 	ldw	r2,124(sp)
    61b4:	da000404 	addi	r8,sp,16
    61b8:	e47fef16 	blt	fp,r17,6178 <__alt_data_end+0xff806178>
    61bc:	9021883a 	mov	r16,r18
    61c0:	a825883a 	mov	r18,r21
    61c4:	b02b883a 	mov	r21,r22
    61c8:	882d883a 	mov	r22,r17
    61cc:	dc403017 	ldw	r17,192(sp)
    61d0:	d9002b17 	ldw	r4,172(sp)
    61d4:	1d87883a 	add	r3,r3,r22
    61d8:	10800044 	addi	r2,r2,1
    61dc:	41000015 	stw	r4,0(r8)
    61e0:	45800115 	stw	r22,4(r8)
    61e4:	d8c02015 	stw	r3,128(sp)
    61e8:	d8801f15 	stw	r2,124(sp)
    61ec:	010001c4 	movi	r4,7
    61f0:	20818e16 	blt	r4,r2,682c <___vfprintf_internal_r+0x1638>
    61f4:	42000204 	addi	r8,r8,8
    61f8:	003e3106 	br	5ac0 <__alt_data_end+0xff805ac0>
    61fc:	d9403317 	ldw	r5,204(sp)
    6200:	00800044 	movi	r2,1
    6204:	18c00044 	addi	r3,r3,1
    6208:	1141530e 	bge	r2,r5,6758 <___vfprintf_internal_r+0x1564>
    620c:	dc401f17 	ldw	r17,124(sp)
    6210:	00800044 	movi	r2,1
    6214:	40800115 	stw	r2,4(r8)
    6218:	8c400044 	addi	r17,r17,1
    621c:	44000015 	stw	r16,0(r8)
    6220:	d8c02015 	stw	r3,128(sp)
    6224:	dc401f15 	stw	r17,124(sp)
    6228:	008001c4 	movi	r2,7
    622c:	14416b16 	blt	r2,r17,67dc <___vfprintf_internal_r+0x15e8>
    6230:	42000204 	addi	r8,r8,8
    6234:	d8803717 	ldw	r2,220(sp)
    6238:	d9003417 	ldw	r4,208(sp)
    623c:	8c400044 	addi	r17,r17,1
    6240:	10c7883a 	add	r3,r2,r3
    6244:	40800115 	stw	r2,4(r8)
    6248:	41000015 	stw	r4,0(r8)
    624c:	d8c02015 	stw	r3,128(sp)
    6250:	dc401f15 	stw	r17,124(sp)
    6254:	008001c4 	movi	r2,7
    6258:	14416916 	blt	r2,r17,6800 <___vfprintf_internal_r+0x160c>
    625c:	45800204 	addi	r22,r8,8
    6260:	d9003617 	ldw	r4,216(sp)
    6264:	d9403817 	ldw	r5,224(sp)
    6268:	000d883a 	mov	r6,zero
    626c:	000f883a 	mov	r7,zero
    6270:	d8c03c15 	stw	r3,240(sp)
    6274:	000ef640 	call	ef64 <__eqdf2>
    6278:	d8c03c17 	ldw	r3,240(sp)
    627c:	1000bc26 	beq	r2,zero,6570 <___vfprintf_internal_r+0x137c>
    6280:	d9403317 	ldw	r5,204(sp)
    6284:	84000044 	addi	r16,r16,1
    6288:	8c400044 	addi	r17,r17,1
    628c:	28bfffc4 	addi	r2,r5,-1
    6290:	1887883a 	add	r3,r3,r2
    6294:	b0800115 	stw	r2,4(r22)
    6298:	b4000015 	stw	r16,0(r22)
    629c:	d8c02015 	stw	r3,128(sp)
    62a0:	dc401f15 	stw	r17,124(sp)
    62a4:	008001c4 	movi	r2,7
    62a8:	14414316 	blt	r2,r17,67b8 <___vfprintf_internal_r+0x15c4>
    62ac:	b5800204 	addi	r22,r22,8
    62b0:	d9003a17 	ldw	r4,232(sp)
    62b4:	df0022c4 	addi	fp,sp,139
    62b8:	8c400044 	addi	r17,r17,1
    62bc:	20c7883a 	add	r3,r4,r3
    62c0:	b7000015 	stw	fp,0(r22)
    62c4:	b1000115 	stw	r4,4(r22)
    62c8:	d8c02015 	stw	r3,128(sp)
    62cc:	dc401f15 	stw	r17,124(sp)
    62d0:	008001c4 	movi	r2,7
    62d4:	14400e16 	blt	r2,r17,6310 <___vfprintf_internal_r+0x111c>
    62d8:	b2000204 	addi	r8,r22,8
    62dc:	003e3a06 	br	5bc8 <__alt_data_end+0xff805bc8>
    62e0:	01000074 	movhi	r4,1
    62e4:	210474c4 	addi	r4,r4,4563
    62e8:	d9002b15 	stw	r4,172(sp)
    62ec:	d9002b17 	ldw	r4,172(sp)
    62f0:	1c07883a 	add	r3,r3,r16
    62f4:	44000115 	stw	r16,4(r8)
    62f8:	41000015 	stw	r4,0(r8)
    62fc:	10800044 	addi	r2,r2,1
    6300:	d8c02015 	stw	r3,128(sp)
    6304:	d8801f15 	stw	r2,124(sp)
    6308:	010001c4 	movi	r4,7
    630c:	20be2d0e 	bge	r4,r2,5bc4 <__alt_data_end+0xff805bc4>
    6310:	d9002c17 	ldw	r4,176(sp)
    6314:	d9801e04 	addi	r6,sp,120
    6318:	b80b883a 	mov	r5,r23
    631c:	000c6340 	call	c634 <__sprint_r>
    6320:	103cb61e 	bne	r2,zero,55fc <__alt_data_end+0xff8055fc>
    6324:	d8c02017 	ldw	r3,128(sp)
    6328:	da000404 	addi	r8,sp,16
    632c:	003e2606 	br	5bc8 <__alt_data_end+0xff805bc8>
    6330:	d9002c17 	ldw	r4,176(sp)
    6334:	d9801e04 	addi	r6,sp,120
    6338:	b80b883a 	mov	r5,r23
    633c:	000c6340 	call	c634 <__sprint_r>
    6340:	103e5d26 	beq	r2,zero,5cb8 <__alt_data_end+0xff805cb8>
    6344:	003cad06 	br	55fc <__alt_data_end+0xff8055fc>
    6348:	d9002c17 	ldw	r4,176(sp)
    634c:	d9801e04 	addi	r6,sp,120
    6350:	b80b883a 	mov	r5,r23
    6354:	000c6340 	call	c634 <__sprint_r>
    6358:	103ca81e 	bne	r2,zero,55fc <__alt_data_end+0xff8055fc>
    635c:	d8c02017 	ldw	r3,128(sp)
    6360:	da000404 	addi	r8,sp,16
    6364:	003e0b06 	br	5b94 <__alt_data_end+0xff805b94>
    6368:	d9002c17 	ldw	r4,176(sp)
    636c:	d9801e04 	addi	r6,sp,120
    6370:	b80b883a 	mov	r5,r23
    6374:	000c6340 	call	c634 <__sprint_r>
    6378:	103ca01e 	bne	r2,zero,55fc <__alt_data_end+0xff8055fc>
    637c:	d8c02017 	ldw	r3,128(sp)
    6380:	da000404 	addi	r8,sp,16
    6384:	003dbd06 	br	5a7c <__alt_data_end+0xff805a7c>
    6388:	d9002c17 	ldw	r4,176(sp)
    638c:	d9801e04 	addi	r6,sp,120
    6390:	b80b883a 	mov	r5,r23
    6394:	000c6340 	call	c634 <__sprint_r>
    6398:	103c981e 	bne	r2,zero,55fc <__alt_data_end+0xff8055fc>
    639c:	d8c02017 	ldw	r3,128(sp)
    63a0:	da000404 	addi	r8,sp,16
    63a4:	003dc306 	br	5ab4 <__alt_data_end+0xff805ab4>
    63a8:	d8802917 	ldw	r2,164(sp)
    63ac:	d8002785 	stb	zero,158(sp)
    63b0:	103f0616 	blt	r2,zero,5fcc <__alt_data_end+0xff805fcc>
    63b4:	00ffdfc4 	movi	r3,-129
    63b8:	9d84b03a 	or	r2,r19,r22
    63bc:	90e4703a 	and	r18,r18,r3
    63c0:	103c6b26 	beq	r2,zero,5570 <__alt_data_end+0xff805570>
    63c4:	0039883a 	mov	fp,zero
    63c8:	003e7406 	br	5d9c <__alt_data_end+0xff805d9c>
    63cc:	9080040c 	andi	r2,r18,16
    63d0:	1001b326 	beq	r2,zero,6aa0 <___vfprintf_internal_r+0x18ac>
    63d4:	d9002d17 	ldw	r4,180(sp)
    63d8:	d9402917 	ldw	r5,164(sp)
    63dc:	d8002785 	stb	zero,158(sp)
    63e0:	20800104 	addi	r2,r4,4
    63e4:	24c00017 	ldw	r19,0(r4)
    63e8:	002d883a 	mov	r22,zero
    63ec:	2801b516 	blt	r5,zero,6ac4 <___vfprintf_internal_r+0x18d0>
    63f0:	00ffdfc4 	movi	r3,-129
    63f4:	d8802d15 	stw	r2,180(sp)
    63f8:	90e4703a 	and	r18,r18,r3
    63fc:	983d2726 	beq	r19,zero,589c <__alt_data_end+0xff80589c>
    6400:	0039883a 	mov	fp,zero
    6404:	003d2a06 	br	58b0 <__alt_data_end+0xff8058b0>
    6408:	dc402617 	ldw	r17,152(sp)
    640c:	0441d30e 	bge	zero,r17,6b5c <___vfprintf_internal_r+0x1968>
    6410:	dc403217 	ldw	r17,200(sp)
    6414:	d8803317 	ldw	r2,204(sp)
    6418:	1440010e 	bge	r2,r17,6420 <___vfprintf_internal_r+0x122c>
    641c:	1023883a 	mov	r17,r2
    6420:	04400a0e 	bge	zero,r17,644c <___vfprintf_internal_r+0x1258>
    6424:	d8801f17 	ldw	r2,124(sp)
    6428:	1c47883a 	add	r3,r3,r17
    642c:	44000015 	stw	r16,0(r8)
    6430:	10800044 	addi	r2,r2,1
    6434:	44400115 	stw	r17,4(r8)
    6438:	d8c02015 	stw	r3,128(sp)
    643c:	d8801f15 	stw	r2,124(sp)
    6440:	010001c4 	movi	r4,7
    6444:	20826516 	blt	r4,r2,6ddc <___vfprintf_internal_r+0x1be8>
    6448:	42000204 	addi	r8,r8,8
    644c:	88026116 	blt	r17,zero,6dd4 <___vfprintf_internal_r+0x1be0>
    6450:	d9003217 	ldw	r4,200(sp)
    6454:	2463c83a 	sub	r17,r4,r17
    6458:	04407b0e 	bge	zero,r17,6648 <___vfprintf_internal_r+0x1454>
    645c:	05800404 	movi	r22,16
    6460:	d8801f17 	ldw	r2,124(sp)
    6464:	b4419d0e 	bge	r22,r17,6adc <___vfprintf_internal_r+0x18e8>
    6468:	01000074 	movhi	r4,1
    646c:	210474c4 	addi	r4,r4,4563
    6470:	d9002b15 	stw	r4,172(sp)
    6474:	070001c4 	movi	fp,7
    6478:	dcc02c17 	ldw	r19,176(sp)
    647c:	00000306 	br	648c <___vfprintf_internal_r+0x1298>
    6480:	42000204 	addi	r8,r8,8
    6484:	8c7ffc04 	addi	r17,r17,-16
    6488:	b441970e 	bge	r22,r17,6ae8 <___vfprintf_internal_r+0x18f4>
    648c:	18c00404 	addi	r3,r3,16
    6490:	10800044 	addi	r2,r2,1
    6494:	45000015 	stw	r20,0(r8)
    6498:	45800115 	stw	r22,4(r8)
    649c:	d8c02015 	stw	r3,128(sp)
    64a0:	d8801f15 	stw	r2,124(sp)
    64a4:	e0bff60e 	bge	fp,r2,6480 <__alt_data_end+0xff806480>
    64a8:	d9801e04 	addi	r6,sp,120
    64ac:	b80b883a 	mov	r5,r23
    64b0:	9809883a 	mov	r4,r19
    64b4:	000c6340 	call	c634 <__sprint_r>
    64b8:	103c501e 	bne	r2,zero,55fc <__alt_data_end+0xff8055fc>
    64bc:	d8c02017 	ldw	r3,128(sp)
    64c0:	d8801f17 	ldw	r2,124(sp)
    64c4:	da000404 	addi	r8,sp,16
    64c8:	003fee06 	br	6484 <__alt_data_end+0xff806484>
    64cc:	d9002c17 	ldw	r4,176(sp)
    64d0:	d9801e04 	addi	r6,sp,120
    64d4:	b80b883a 	mov	r5,r23
    64d8:	000c6340 	call	c634 <__sprint_r>
    64dc:	103c471e 	bne	r2,zero,55fc <__alt_data_end+0xff8055fc>
    64e0:	d8c02017 	ldw	r3,128(sp)
    64e4:	df002787 	ldb	fp,158(sp)
    64e8:	da000404 	addi	r8,sp,16
    64ec:	003d5606 	br	5a48 <__alt_data_end+0xff805a48>
    64f0:	9080040c 	andi	r2,r18,16
    64f4:	10016126 	beq	r2,zero,6a7c <___vfprintf_internal_r+0x1888>
    64f8:	d8802d17 	ldw	r2,180(sp)
    64fc:	14c00017 	ldw	r19,0(r2)
    6500:	10800104 	addi	r2,r2,4
    6504:	d8802d15 	stw	r2,180(sp)
    6508:	982dd7fa 	srai	r22,r19,31
    650c:	b005883a 	mov	r2,r22
    6510:	003c8206 	br	571c <__alt_data_end+0xff80571c>
    6514:	9080040c 	andi	r2,r18,16
    6518:	10003526 	beq	r2,zero,65f0 <___vfprintf_internal_r+0x13fc>
    651c:	d9402d17 	ldw	r5,180(sp)
    6520:	d8c02917 	ldw	r3,164(sp)
    6524:	d8002785 	stb	zero,158(sp)
    6528:	28800104 	addi	r2,r5,4
    652c:	2cc00017 	ldw	r19,0(r5)
    6530:	002d883a 	mov	r22,zero
    6534:	18003716 	blt	r3,zero,6614 <___vfprintf_internal_r+0x1420>
    6538:	00ffdfc4 	movi	r3,-129
    653c:	d8802d15 	stw	r2,180(sp)
    6540:	90e4703a 	and	r18,r18,r3
    6544:	0039883a 	mov	fp,zero
    6548:	983df326 	beq	r19,zero,5d18 <__alt_data_end+0xff805d18>
    654c:	00800244 	movi	r2,9
    6550:	14fc7b36 	bltu	r2,r19,5740 <__alt_data_end+0xff805740>
    6554:	d8c02817 	ldw	r3,160(sp)
    6558:	dc001dc4 	addi	r16,sp,119
    655c:	9cc00c04 	addi	r19,r19,48
    6560:	1c07c83a 	sub	r3,r3,r16
    6564:	dcc01dc5 	stb	r19,119(sp)
    6568:	d8c02e15 	stw	r3,184(sp)
    656c:	003ce806 	br	5910 <__alt_data_end+0xff805910>
    6570:	d8803317 	ldw	r2,204(sp)
    6574:	143fffc4 	addi	r16,r2,-1
    6578:	043f4d0e 	bge	zero,r16,62b0 <__alt_data_end+0xff8062b0>
    657c:	07000404 	movi	fp,16
    6580:	e400810e 	bge	fp,r16,6788 <___vfprintf_internal_r+0x1594>
    6584:	01400074 	movhi	r5,1
    6588:	294474c4 	addi	r5,r5,4563
    658c:	d9402b15 	stw	r5,172(sp)
    6590:	01c001c4 	movi	r7,7
    6594:	dcc02c17 	ldw	r19,176(sp)
    6598:	00000306 	br	65a8 <___vfprintf_internal_r+0x13b4>
    659c:	b5800204 	addi	r22,r22,8
    65a0:	843ffc04 	addi	r16,r16,-16
    65a4:	e4007b0e 	bge	fp,r16,6794 <___vfprintf_internal_r+0x15a0>
    65a8:	18c00404 	addi	r3,r3,16
    65ac:	8c400044 	addi	r17,r17,1
    65b0:	b5000015 	stw	r20,0(r22)
    65b4:	b7000115 	stw	fp,4(r22)
    65b8:	d8c02015 	stw	r3,128(sp)
    65bc:	dc401f15 	stw	r17,124(sp)
    65c0:	3c7ff60e 	bge	r7,r17,659c <__alt_data_end+0xff80659c>
    65c4:	d9801e04 	addi	r6,sp,120
    65c8:	b80b883a 	mov	r5,r23
    65cc:	9809883a 	mov	r4,r19
    65d0:	d9c03c15 	stw	r7,240(sp)
    65d4:	000c6340 	call	c634 <__sprint_r>
    65d8:	d9c03c17 	ldw	r7,240(sp)
    65dc:	103c071e 	bne	r2,zero,55fc <__alt_data_end+0xff8055fc>
    65e0:	d8c02017 	ldw	r3,128(sp)
    65e4:	dc401f17 	ldw	r17,124(sp)
    65e8:	dd800404 	addi	r22,sp,16
    65ec:	003fec06 	br	65a0 <__alt_data_end+0xff8065a0>
    65f0:	9080100c 	andi	r2,r18,64
    65f4:	d8002785 	stb	zero,158(sp)
    65f8:	10010e26 	beq	r2,zero,6a34 <___vfprintf_internal_r+0x1840>
    65fc:	d9002d17 	ldw	r4,180(sp)
    6600:	d9402917 	ldw	r5,164(sp)
    6604:	002d883a 	mov	r22,zero
    6608:	20800104 	addi	r2,r4,4
    660c:	24c0000b 	ldhu	r19,0(r4)
    6610:	283fc90e 	bge	r5,zero,6538 <__alt_data_end+0xff806538>
    6614:	d8802d15 	stw	r2,180(sp)
    6618:	0039883a 	mov	fp,zero
    661c:	9d84b03a 	or	r2,r19,r22
    6620:	103c461e 	bne	r2,zero,573c <__alt_data_end+0xff80573c>
    6624:	00800044 	movi	r2,1
    6628:	003e6c06 	br	5fdc <__alt_data_end+0xff805fdc>
    662c:	d9002c17 	ldw	r4,176(sp)
    6630:	d9801e04 	addi	r6,sp,120
    6634:	b80b883a 	mov	r5,r23
    6638:	000c6340 	call	c634 <__sprint_r>
    663c:	103bef1e 	bne	r2,zero,55fc <__alt_data_end+0xff8055fc>
    6640:	d8c02017 	ldw	r3,128(sp)
    6644:	da000404 	addi	r8,sp,16
    6648:	d9003217 	ldw	r4,200(sp)
    664c:	d8802617 	ldw	r2,152(sp)
    6650:	d9403317 	ldw	r5,204(sp)
    6654:	8123883a 	add	r17,r16,r4
    6658:	11400216 	blt	r2,r5,6664 <___vfprintf_internal_r+0x1470>
    665c:	9100004c 	andi	r4,r18,1
    6660:	20000d26 	beq	r4,zero,6698 <___vfprintf_internal_r+0x14a4>
    6664:	d9003717 	ldw	r4,220(sp)
    6668:	d9403417 	ldw	r5,208(sp)
    666c:	1907883a 	add	r3,r3,r4
    6670:	d9001f17 	ldw	r4,124(sp)
    6674:	41400015 	stw	r5,0(r8)
    6678:	d9403717 	ldw	r5,220(sp)
    667c:	21000044 	addi	r4,r4,1
    6680:	d8c02015 	stw	r3,128(sp)
    6684:	41400115 	stw	r5,4(r8)
    6688:	d9001f15 	stw	r4,124(sp)
    668c:	014001c4 	movi	r5,7
    6690:	2901e816 	blt	r5,r4,6e34 <___vfprintf_internal_r+0x1c40>
    6694:	42000204 	addi	r8,r8,8
    6698:	d9003317 	ldw	r4,204(sp)
    669c:	8121883a 	add	r16,r16,r4
    66a0:	2085c83a 	sub	r2,r4,r2
    66a4:	8461c83a 	sub	r16,r16,r17
    66a8:	1400010e 	bge	r2,r16,66b0 <___vfprintf_internal_r+0x14bc>
    66ac:	1021883a 	mov	r16,r2
    66b0:	04000a0e 	bge	zero,r16,66dc <___vfprintf_internal_r+0x14e8>
    66b4:	d9001f17 	ldw	r4,124(sp)
    66b8:	1c07883a 	add	r3,r3,r16
    66bc:	44400015 	stw	r17,0(r8)
    66c0:	21000044 	addi	r4,r4,1
    66c4:	44000115 	stw	r16,4(r8)
    66c8:	d8c02015 	stw	r3,128(sp)
    66cc:	d9001f15 	stw	r4,124(sp)
    66d0:	014001c4 	movi	r5,7
    66d4:	2901fb16 	blt	r5,r4,6ec4 <___vfprintf_internal_r+0x1cd0>
    66d8:	42000204 	addi	r8,r8,8
    66dc:	8001f716 	blt	r16,zero,6ebc <___vfprintf_internal_r+0x1cc8>
    66e0:	1421c83a 	sub	r16,r2,r16
    66e4:	043d380e 	bge	zero,r16,5bc8 <__alt_data_end+0xff805bc8>
    66e8:	04400404 	movi	r17,16
    66ec:	d8801f17 	ldw	r2,124(sp)
    66f0:	8c3efb0e 	bge	r17,r16,62e0 <__alt_data_end+0xff8062e0>
    66f4:	01400074 	movhi	r5,1
    66f8:	294474c4 	addi	r5,r5,4563
    66fc:	d9402b15 	stw	r5,172(sp)
    6700:	058001c4 	movi	r22,7
    6704:	dcc02c17 	ldw	r19,176(sp)
    6708:	00000306 	br	6718 <___vfprintf_internal_r+0x1524>
    670c:	42000204 	addi	r8,r8,8
    6710:	843ffc04 	addi	r16,r16,-16
    6714:	8c3ef50e 	bge	r17,r16,62ec <__alt_data_end+0xff8062ec>
    6718:	18c00404 	addi	r3,r3,16
    671c:	10800044 	addi	r2,r2,1
    6720:	45000015 	stw	r20,0(r8)
    6724:	44400115 	stw	r17,4(r8)
    6728:	d8c02015 	stw	r3,128(sp)
    672c:	d8801f15 	stw	r2,124(sp)
    6730:	b0bff60e 	bge	r22,r2,670c <__alt_data_end+0xff80670c>
    6734:	d9801e04 	addi	r6,sp,120
    6738:	b80b883a 	mov	r5,r23
    673c:	9809883a 	mov	r4,r19
    6740:	000c6340 	call	c634 <__sprint_r>
    6744:	103bad1e 	bne	r2,zero,55fc <__alt_data_end+0xff8055fc>
    6748:	d8c02017 	ldw	r3,128(sp)
    674c:	d8801f17 	ldw	r2,124(sp)
    6750:	da000404 	addi	r8,sp,16
    6754:	003fee06 	br	6710 <__alt_data_end+0xff806710>
    6758:	9088703a 	and	r4,r18,r2
    675c:	203eab1e 	bne	r4,zero,620c <__alt_data_end+0xff80620c>
    6760:	dc401f17 	ldw	r17,124(sp)
    6764:	40800115 	stw	r2,4(r8)
    6768:	44000015 	stw	r16,0(r8)
    676c:	8c400044 	addi	r17,r17,1
    6770:	d8c02015 	stw	r3,128(sp)
    6774:	dc401f15 	stw	r17,124(sp)
    6778:	008001c4 	movi	r2,7
    677c:	14400e16 	blt	r2,r17,67b8 <___vfprintf_internal_r+0x15c4>
    6780:	45800204 	addi	r22,r8,8
    6784:	003eca06 	br	62b0 <__alt_data_end+0xff8062b0>
    6788:	01000074 	movhi	r4,1
    678c:	210474c4 	addi	r4,r4,4563
    6790:	d9002b15 	stw	r4,172(sp)
    6794:	d8802b17 	ldw	r2,172(sp)
    6798:	1c07883a 	add	r3,r3,r16
    679c:	8c400044 	addi	r17,r17,1
    67a0:	b0800015 	stw	r2,0(r22)
    67a4:	b4000115 	stw	r16,4(r22)
    67a8:	d8c02015 	stw	r3,128(sp)
    67ac:	dc401f15 	stw	r17,124(sp)
    67b0:	008001c4 	movi	r2,7
    67b4:	147ebd0e 	bge	r2,r17,62ac <__alt_data_end+0xff8062ac>
    67b8:	d9002c17 	ldw	r4,176(sp)
    67bc:	d9801e04 	addi	r6,sp,120
    67c0:	b80b883a 	mov	r5,r23
    67c4:	000c6340 	call	c634 <__sprint_r>
    67c8:	103b8c1e 	bne	r2,zero,55fc <__alt_data_end+0xff8055fc>
    67cc:	d8c02017 	ldw	r3,128(sp)
    67d0:	dc401f17 	ldw	r17,124(sp)
    67d4:	dd800404 	addi	r22,sp,16
    67d8:	003eb506 	br	62b0 <__alt_data_end+0xff8062b0>
    67dc:	d9002c17 	ldw	r4,176(sp)
    67e0:	d9801e04 	addi	r6,sp,120
    67e4:	b80b883a 	mov	r5,r23
    67e8:	000c6340 	call	c634 <__sprint_r>
    67ec:	103b831e 	bne	r2,zero,55fc <__alt_data_end+0xff8055fc>
    67f0:	d8c02017 	ldw	r3,128(sp)
    67f4:	dc401f17 	ldw	r17,124(sp)
    67f8:	da000404 	addi	r8,sp,16
    67fc:	003e8d06 	br	6234 <__alt_data_end+0xff806234>
    6800:	d9002c17 	ldw	r4,176(sp)
    6804:	d9801e04 	addi	r6,sp,120
    6808:	b80b883a 	mov	r5,r23
    680c:	000c6340 	call	c634 <__sprint_r>
    6810:	103b7a1e 	bne	r2,zero,55fc <__alt_data_end+0xff8055fc>
    6814:	d8c02017 	ldw	r3,128(sp)
    6818:	dc401f17 	ldw	r17,124(sp)
    681c:	dd800404 	addi	r22,sp,16
    6820:	003e8f06 	br	6260 <__alt_data_end+0xff806260>
    6824:	0027883a 	mov	r19,zero
    6828:	003f4a06 	br	6554 <__alt_data_end+0xff806554>
    682c:	d9002c17 	ldw	r4,176(sp)
    6830:	d9801e04 	addi	r6,sp,120
    6834:	b80b883a 	mov	r5,r23
    6838:	000c6340 	call	c634 <__sprint_r>
    683c:	103b6f1e 	bne	r2,zero,55fc <__alt_data_end+0xff8055fc>
    6840:	d8c02017 	ldw	r3,128(sp)
    6844:	da000404 	addi	r8,sp,16
    6848:	003c9d06 	br	5ac0 <__alt_data_end+0xff805ac0>
    684c:	04e7c83a 	sub	r19,zero,r19
    6850:	9804c03a 	cmpne	r2,r19,zero
    6854:	05adc83a 	sub	r22,zero,r22
    6858:	b0adc83a 	sub	r22,r22,r2
    685c:	d8802917 	ldw	r2,164(sp)
    6860:	07000b44 	movi	fp,45
    6864:	df002785 	stb	fp,158(sp)
    6868:	10017b16 	blt	r2,zero,6e58 <___vfprintf_internal_r+0x1c64>
    686c:	00bfdfc4 	movi	r2,-129
    6870:	90a4703a 	and	r18,r18,r2
    6874:	003bb106 	br	573c <__alt_data_end+0xff80573c>
    6878:	d9003617 	ldw	r4,216(sp)
    687c:	d9403817 	ldw	r5,224(sp)
    6880:	da003d15 	stw	r8,244(sp)
    6884:	00012180 	call	1218 <__fpclassifyd>
    6888:	da003d17 	ldw	r8,244(sp)
    688c:	1000f026 	beq	r2,zero,6c50 <___vfprintf_internal_r+0x1a5c>
    6890:	d9002917 	ldw	r4,164(sp)
    6894:	05bff7c4 	movi	r22,-33
    6898:	00bfffc4 	movi	r2,-1
    689c:	8dac703a 	and	r22,r17,r22
    68a0:	20820026 	beq	r4,r2,70a4 <___vfprintf_internal_r+0x1eb0>
    68a4:	008011c4 	movi	r2,71
    68a8:	b081f726 	beq	r22,r2,7088 <___vfprintf_internal_r+0x1e94>
    68ac:	d9003817 	ldw	r4,224(sp)
    68b0:	90c04014 	ori	r3,r18,256
    68b4:	d8c02b15 	stw	r3,172(sp)
    68b8:	20021516 	blt	r4,zero,7110 <___vfprintf_internal_r+0x1f1c>
    68bc:	dcc03817 	ldw	r19,224(sp)
    68c0:	d8002a05 	stb	zero,168(sp)
    68c4:	00801984 	movi	r2,102
    68c8:	8881f926 	beq	r17,r2,70b0 <___vfprintf_internal_r+0x1ebc>
    68cc:	00801184 	movi	r2,70
    68d0:	88821c26 	beq	r17,r2,7144 <___vfprintf_internal_r+0x1f50>
    68d4:	00801144 	movi	r2,69
    68d8:	b081ef26 	beq	r22,r2,7098 <___vfprintf_internal_r+0x1ea4>
    68dc:	d8c02917 	ldw	r3,164(sp)
    68e0:	d8802104 	addi	r2,sp,132
    68e4:	d8800315 	stw	r2,12(sp)
    68e8:	d9403617 	ldw	r5,216(sp)
    68ec:	d8802504 	addi	r2,sp,148
    68f0:	d9002c17 	ldw	r4,176(sp)
    68f4:	d8800215 	stw	r2,8(sp)
    68f8:	d8802604 	addi	r2,sp,152
    68fc:	d8c00015 	stw	r3,0(sp)
    6900:	d8800115 	stw	r2,4(sp)
    6904:	01c00084 	movi	r7,2
    6908:	980d883a 	mov	r6,r19
    690c:	d8c03c15 	stw	r3,240(sp)
    6910:	da003d15 	stw	r8,244(sp)
    6914:	00078180 	call	7818 <_dtoa_r>
    6918:	1021883a 	mov	r16,r2
    691c:	008019c4 	movi	r2,103
    6920:	d8c03c17 	ldw	r3,240(sp)
    6924:	da003d17 	ldw	r8,244(sp)
    6928:	88817126 	beq	r17,r2,6ef0 <___vfprintf_internal_r+0x1cfc>
    692c:	008011c4 	movi	r2,71
    6930:	88829226 	beq	r17,r2,737c <___vfprintf_internal_r+0x2188>
    6934:	80f9883a 	add	fp,r16,r3
    6938:	d9003617 	ldw	r4,216(sp)
    693c:	000d883a 	mov	r6,zero
    6940:	000f883a 	mov	r7,zero
    6944:	980b883a 	mov	r5,r19
    6948:	da003d15 	stw	r8,244(sp)
    694c:	000ef640 	call	ef64 <__eqdf2>
    6950:	da003d17 	ldw	r8,244(sp)
    6954:	10018d26 	beq	r2,zero,6f8c <___vfprintf_internal_r+0x1d98>
    6958:	d8802117 	ldw	r2,132(sp)
    695c:	1700062e 	bgeu	r2,fp,6978 <___vfprintf_internal_r+0x1784>
    6960:	01000c04 	movi	r4,48
    6964:	10c00044 	addi	r3,r2,1
    6968:	d8c02115 	stw	r3,132(sp)
    696c:	11000005 	stb	r4,0(r2)
    6970:	d8802117 	ldw	r2,132(sp)
    6974:	173ffb36 	bltu	r2,fp,6964 <__alt_data_end+0xff806964>
    6978:	1405c83a 	sub	r2,r2,r16
    697c:	d8803315 	stw	r2,204(sp)
    6980:	008011c4 	movi	r2,71
    6984:	b0817626 	beq	r22,r2,6f60 <___vfprintf_internal_r+0x1d6c>
    6988:	00801944 	movi	r2,101
    698c:	1442810e 	bge	r2,r17,7394 <___vfprintf_internal_r+0x21a0>
    6990:	d8c02617 	ldw	r3,152(sp)
    6994:	00801984 	movi	r2,102
    6998:	d8c03215 	stw	r3,200(sp)
    699c:	8881fe26 	beq	r17,r2,7198 <___vfprintf_internal_r+0x1fa4>
    69a0:	d8c03217 	ldw	r3,200(sp)
    69a4:	d9003317 	ldw	r4,204(sp)
    69a8:	1901dd16 	blt	r3,r4,7120 <___vfprintf_internal_r+0x1f2c>
    69ac:	9480004c 	andi	r18,r18,1
    69b0:	90022b1e 	bne	r18,zero,7260 <___vfprintf_internal_r+0x206c>
    69b4:	1805883a 	mov	r2,r3
    69b8:	18028016 	blt	r3,zero,73bc <___vfprintf_internal_r+0x21c8>
    69bc:	d8c03217 	ldw	r3,200(sp)
    69c0:	044019c4 	movi	r17,103
    69c4:	d8c02e15 	stw	r3,184(sp)
    69c8:	df002a07 	ldb	fp,168(sp)
    69cc:	e001531e 	bne	fp,zero,6f1c <___vfprintf_internal_r+0x1d28>
    69d0:	df002783 	ldbu	fp,158(sp)
    69d4:	d8802a15 	stw	r2,168(sp)
    69d8:	dc802b17 	ldw	r18,172(sp)
    69dc:	d8002915 	stw	zero,164(sp)
    69e0:	003bd106 	br	5928 <__alt_data_end+0xff805928>
    69e4:	d8802d17 	ldw	r2,180(sp)
    69e8:	d8c02d17 	ldw	r3,180(sp)
    69ec:	d9002d17 	ldw	r4,180(sp)
    69f0:	10800017 	ldw	r2,0(r2)
    69f4:	18c00117 	ldw	r3,4(r3)
    69f8:	21000204 	addi	r4,r4,8
    69fc:	d8803615 	stw	r2,216(sp)
    6a00:	d8c03815 	stw	r3,224(sp)
    6a04:	d9002d15 	stw	r4,180(sp)
    6a08:	003b7506 	br	57e0 <__alt_data_end+0xff8057e0>
    6a0c:	ac400007 	ldb	r17,0(r21)
    6a10:	003a5906 	br	5378 <__alt_data_end+0xff805378>
    6a14:	9080100c 	andi	r2,r18,64
    6a18:	1000a826 	beq	r2,zero,6cbc <___vfprintf_internal_r+0x1ac8>
    6a1c:	d9002d17 	ldw	r4,180(sp)
    6a20:	002d883a 	mov	r22,zero
    6a24:	24c0000b 	ldhu	r19,0(r4)
    6a28:	21000104 	addi	r4,r4,4
    6a2c:	d9002d15 	stw	r4,180(sp)
    6a30:	003ccb06 	br	5d60 <__alt_data_end+0xff805d60>
    6a34:	d8c02d17 	ldw	r3,180(sp)
    6a38:	d9002917 	ldw	r4,164(sp)
    6a3c:	002d883a 	mov	r22,zero
    6a40:	18800104 	addi	r2,r3,4
    6a44:	1cc00017 	ldw	r19,0(r3)
    6a48:	203ebb0e 	bge	r4,zero,6538 <__alt_data_end+0xff806538>
    6a4c:	003ef106 	br	6614 <__alt_data_end+0xff806614>
    6a50:	9080040c 	andi	r2,r18,16
    6a54:	1000921e 	bne	r2,zero,6ca0 <___vfprintf_internal_r+0x1aac>
    6a58:	9480100c 	andi	r18,r18,64
    6a5c:	90013926 	beq	r18,zero,6f44 <___vfprintf_internal_r+0x1d50>
    6a60:	d9002d17 	ldw	r4,180(sp)
    6a64:	d9402f17 	ldw	r5,188(sp)
    6a68:	20800017 	ldw	r2,0(r4)
    6a6c:	21000104 	addi	r4,r4,4
    6a70:	d9002d15 	stw	r4,180(sp)
    6a74:	1140000d 	sth	r5,0(r2)
    6a78:	003a1606 	br	52d4 <__alt_data_end+0xff8052d4>
    6a7c:	9080100c 	andi	r2,r18,64
    6a80:	10008026 	beq	r2,zero,6c84 <___vfprintf_internal_r+0x1a90>
    6a84:	d8c02d17 	ldw	r3,180(sp)
    6a88:	1cc0000f 	ldh	r19,0(r3)
    6a8c:	18c00104 	addi	r3,r3,4
    6a90:	d8c02d15 	stw	r3,180(sp)
    6a94:	982dd7fa 	srai	r22,r19,31
    6a98:	b005883a 	mov	r2,r22
    6a9c:	003b1f06 	br	571c <__alt_data_end+0xff80571c>
    6aa0:	9080100c 	andi	r2,r18,64
    6aa4:	d8002785 	stb	zero,158(sp)
    6aa8:	10008a1e 	bne	r2,zero,6cd4 <___vfprintf_internal_r+0x1ae0>
    6aac:	d9402d17 	ldw	r5,180(sp)
    6ab0:	d8c02917 	ldw	r3,164(sp)
    6ab4:	002d883a 	mov	r22,zero
    6ab8:	28800104 	addi	r2,r5,4
    6abc:	2cc00017 	ldw	r19,0(r5)
    6ac0:	183e4b0e 	bge	r3,zero,63f0 <__alt_data_end+0xff8063f0>
    6ac4:	9d86b03a 	or	r3,r19,r22
    6ac8:	d8802d15 	stw	r2,180(sp)
    6acc:	183e4c1e 	bne	r3,zero,6400 <__alt_data_end+0xff806400>
    6ad0:	0039883a 	mov	fp,zero
    6ad4:	0005883a 	mov	r2,zero
    6ad8:	003d4006 	br	5fdc <__alt_data_end+0xff805fdc>
    6adc:	01400074 	movhi	r5,1
    6ae0:	294474c4 	addi	r5,r5,4563
    6ae4:	d9402b15 	stw	r5,172(sp)
    6ae8:	d9402b17 	ldw	r5,172(sp)
    6aec:	1c47883a 	add	r3,r3,r17
    6af0:	10800044 	addi	r2,r2,1
    6af4:	41400015 	stw	r5,0(r8)
    6af8:	44400115 	stw	r17,4(r8)
    6afc:	d8c02015 	stw	r3,128(sp)
    6b00:	d8801f15 	stw	r2,124(sp)
    6b04:	010001c4 	movi	r4,7
    6b08:	20bec816 	blt	r4,r2,662c <__alt_data_end+0xff80662c>
    6b0c:	42000204 	addi	r8,r8,8
    6b10:	003ecd06 	br	6648 <__alt_data_end+0xff806648>
    6b14:	d9002917 	ldw	r4,164(sp)
    6b18:	d8002785 	stb	zero,158(sp)
    6b1c:	203d2d16 	blt	r4,zero,5fd4 <__alt_data_end+0xff805fd4>
    6b20:	00bfdfc4 	movi	r2,-129
    6b24:	90a4703a 	and	r18,r18,r2
    6b28:	003a9106 	br	5570 <__alt_data_end+0xff805570>
    6b2c:	01000074 	movhi	r4,1
    6b30:	210474c4 	addi	r4,r4,4563
    6b34:	d9002b15 	stw	r4,172(sp)
    6b38:	003c0c06 	br	5b6c <__alt_data_end+0xff805b6c>
    6b3c:	d9002c17 	ldw	r4,176(sp)
    6b40:	d9801e04 	addi	r6,sp,120
    6b44:	b80b883a 	mov	r5,r23
    6b48:	000c6340 	call	c634 <__sprint_r>
    6b4c:	103aab1e 	bne	r2,zero,55fc <__alt_data_end+0xff8055fc>
    6b50:	d8c02017 	ldw	r3,128(sp)
    6b54:	da000404 	addi	r8,sp,16
    6b58:	003d4106 	br	6060 <__alt_data_end+0xff806060>
    6b5c:	d8801f17 	ldw	r2,124(sp)
    6b60:	01400074 	movhi	r5,1
    6b64:	01000044 	movi	r4,1
    6b68:	18c00044 	addi	r3,r3,1
    6b6c:	10800044 	addi	r2,r2,1
    6b70:	2943f404 	addi	r5,r5,4048
    6b74:	41000115 	stw	r4,4(r8)
    6b78:	41400015 	stw	r5,0(r8)
    6b7c:	d8c02015 	stw	r3,128(sp)
    6b80:	d8801f15 	stw	r2,124(sp)
    6b84:	010001c4 	movi	r4,7
    6b88:	20805c16 	blt	r4,r2,6cfc <___vfprintf_internal_r+0x1b08>
    6b8c:	42000204 	addi	r8,r8,8
    6b90:	8800041e 	bne	r17,zero,6ba4 <___vfprintf_internal_r+0x19b0>
    6b94:	d8803317 	ldw	r2,204(sp)
    6b98:	1000021e 	bne	r2,zero,6ba4 <___vfprintf_internal_r+0x19b0>
    6b9c:	9080004c 	andi	r2,r18,1
    6ba0:	103c0926 	beq	r2,zero,5bc8 <__alt_data_end+0xff805bc8>
    6ba4:	d9003717 	ldw	r4,220(sp)
    6ba8:	d8801f17 	ldw	r2,124(sp)
    6bac:	d9403417 	ldw	r5,208(sp)
    6bb0:	20c7883a 	add	r3,r4,r3
    6bb4:	10800044 	addi	r2,r2,1
    6bb8:	41000115 	stw	r4,4(r8)
    6bbc:	41400015 	stw	r5,0(r8)
    6bc0:	d8c02015 	stw	r3,128(sp)
    6bc4:	d8801f15 	stw	r2,124(sp)
    6bc8:	010001c4 	movi	r4,7
    6bcc:	20812116 	blt	r4,r2,7054 <___vfprintf_internal_r+0x1e60>
    6bd0:	42000204 	addi	r8,r8,8
    6bd4:	0463c83a 	sub	r17,zero,r17
    6bd8:	0440730e 	bge	zero,r17,6da8 <___vfprintf_internal_r+0x1bb4>
    6bdc:	05800404 	movi	r22,16
    6be0:	b440860e 	bge	r22,r17,6dfc <___vfprintf_internal_r+0x1c08>
    6be4:	01400074 	movhi	r5,1
    6be8:	294474c4 	addi	r5,r5,4563
    6bec:	d9402b15 	stw	r5,172(sp)
    6bf0:	070001c4 	movi	fp,7
    6bf4:	dcc02c17 	ldw	r19,176(sp)
    6bf8:	00000306 	br	6c08 <___vfprintf_internal_r+0x1a14>
    6bfc:	42000204 	addi	r8,r8,8
    6c00:	8c7ffc04 	addi	r17,r17,-16
    6c04:	b440800e 	bge	r22,r17,6e08 <___vfprintf_internal_r+0x1c14>
    6c08:	18c00404 	addi	r3,r3,16
    6c0c:	10800044 	addi	r2,r2,1
    6c10:	45000015 	stw	r20,0(r8)
    6c14:	45800115 	stw	r22,4(r8)
    6c18:	d8c02015 	stw	r3,128(sp)
    6c1c:	d8801f15 	stw	r2,124(sp)
    6c20:	e0bff60e 	bge	fp,r2,6bfc <__alt_data_end+0xff806bfc>
    6c24:	d9801e04 	addi	r6,sp,120
    6c28:	b80b883a 	mov	r5,r23
    6c2c:	9809883a 	mov	r4,r19
    6c30:	000c6340 	call	c634 <__sprint_r>
    6c34:	103a711e 	bne	r2,zero,55fc <__alt_data_end+0xff8055fc>
    6c38:	d8c02017 	ldw	r3,128(sp)
    6c3c:	d8801f17 	ldw	r2,124(sp)
    6c40:	da000404 	addi	r8,sp,16
    6c44:	003fee06 	br	6c00 <__alt_data_end+0xff806c00>
    6c48:	00bfffc4 	movi	r2,-1
    6c4c:	003a6f06 	br	560c <__alt_data_end+0xff80560c>
    6c50:	008011c4 	movi	r2,71
    6c54:	1440b816 	blt	r2,r17,6f38 <___vfprintf_internal_r+0x1d44>
    6c58:	04000074 	movhi	r16,1
    6c5c:	84046704 	addi	r16,r16,4508
    6c60:	00c000c4 	movi	r3,3
    6c64:	00bfdfc4 	movi	r2,-129
    6c68:	d8c02a15 	stw	r3,168(sp)
    6c6c:	90a4703a 	and	r18,r18,r2
    6c70:	df002783 	ldbu	fp,158(sp)
    6c74:	d8c02e15 	stw	r3,184(sp)
    6c78:	d8002915 	stw	zero,164(sp)
    6c7c:	d8003215 	stw	zero,200(sp)
    6c80:	003b2906 	br	5928 <__alt_data_end+0xff805928>
    6c84:	d9002d17 	ldw	r4,180(sp)
    6c88:	24c00017 	ldw	r19,0(r4)
    6c8c:	21000104 	addi	r4,r4,4
    6c90:	d9002d15 	stw	r4,180(sp)
    6c94:	982dd7fa 	srai	r22,r19,31
    6c98:	b005883a 	mov	r2,r22
    6c9c:	003a9f06 	br	571c <__alt_data_end+0xff80571c>
    6ca0:	d9402d17 	ldw	r5,180(sp)
    6ca4:	d8c02f17 	ldw	r3,188(sp)
    6ca8:	28800017 	ldw	r2,0(r5)
    6cac:	29400104 	addi	r5,r5,4
    6cb0:	d9402d15 	stw	r5,180(sp)
    6cb4:	10c00015 	stw	r3,0(r2)
    6cb8:	00398606 	br	52d4 <__alt_data_end+0xff8052d4>
    6cbc:	d9402d17 	ldw	r5,180(sp)
    6cc0:	002d883a 	mov	r22,zero
    6cc4:	2cc00017 	ldw	r19,0(r5)
    6cc8:	29400104 	addi	r5,r5,4
    6ccc:	d9402d15 	stw	r5,180(sp)
    6cd0:	003c2306 	br	5d60 <__alt_data_end+0xff805d60>
    6cd4:	d8c02d17 	ldw	r3,180(sp)
    6cd8:	d9002917 	ldw	r4,164(sp)
    6cdc:	002d883a 	mov	r22,zero
    6ce0:	18800104 	addi	r2,r3,4
    6ce4:	1cc0000b 	ldhu	r19,0(r3)
    6ce8:	203dc10e 	bge	r4,zero,63f0 <__alt_data_end+0xff8063f0>
    6cec:	003f7506 	br	6ac4 <__alt_data_end+0xff806ac4>
    6cf0:	04000074 	movhi	r16,1
    6cf4:	84046504 	addi	r16,r16,4500
    6cf8:	003acc06 	br	582c <__alt_data_end+0xff80582c>
    6cfc:	d9002c17 	ldw	r4,176(sp)
    6d00:	d9801e04 	addi	r6,sp,120
    6d04:	b80b883a 	mov	r5,r23
    6d08:	000c6340 	call	c634 <__sprint_r>
    6d0c:	103a3b1e 	bne	r2,zero,55fc <__alt_data_end+0xff8055fc>
    6d10:	dc402617 	ldw	r17,152(sp)
    6d14:	d8c02017 	ldw	r3,128(sp)
    6d18:	da000404 	addi	r8,sp,16
    6d1c:	003f9c06 	br	6b90 <__alt_data_end+0xff806b90>
    6d20:	ac400043 	ldbu	r17,1(r21)
    6d24:	94800814 	ori	r18,r18,32
    6d28:	ad400044 	addi	r21,r21,1
    6d2c:	8c403fcc 	andi	r17,r17,255
    6d30:	8c40201c 	xori	r17,r17,128
    6d34:	8c7fe004 	addi	r17,r17,-128
    6d38:	00398f06 	br	5378 <__alt_data_end+0xff805378>
    6d3c:	d8c02d15 	stw	r3,180(sp)
    6d40:	0039883a 	mov	fp,zero
    6d44:	003e3506 	br	661c <__alt_data_end+0xff80661c>
    6d48:	d9002c17 	ldw	r4,176(sp)
    6d4c:	d9801e04 	addi	r6,sp,120
    6d50:	b80b883a 	mov	r5,r23
    6d54:	000c6340 	call	c634 <__sprint_r>
    6d58:	103a281e 	bne	r2,zero,55fc <__alt_data_end+0xff8055fc>
    6d5c:	d8c02017 	ldw	r3,128(sp)
    6d60:	da000404 	addi	r8,sp,16
    6d64:	003cd006 	br	60a8 <__alt_data_end+0xff8060a8>
    6d68:	8009883a 	mov	r4,r16
    6d6c:	da003d15 	stw	r8,244(sp)
    6d70:	000515c0 	call	515c <strlen>
    6d74:	d8802e15 	stw	r2,184(sp)
    6d78:	da003d17 	ldw	r8,244(sp)
    6d7c:	103c340e 	bge	r2,zero,5e50 <__alt_data_end+0xff805e50>
    6d80:	0005883a 	mov	r2,zero
    6d84:	003c3206 	br	5e50 <__alt_data_end+0xff805e50>
    6d88:	d9002c17 	ldw	r4,176(sp)
    6d8c:	d9801e04 	addi	r6,sp,120
    6d90:	b80b883a 	mov	r5,r23
    6d94:	000c6340 	call	c634 <__sprint_r>
    6d98:	103a181e 	bne	r2,zero,55fc <__alt_data_end+0xff8055fc>
    6d9c:	d8c02017 	ldw	r3,128(sp)
    6da0:	d8801f17 	ldw	r2,124(sp)
    6da4:	da000404 	addi	r8,sp,16
    6da8:	d9403317 	ldw	r5,204(sp)
    6dac:	10800044 	addi	r2,r2,1
    6db0:	44000015 	stw	r16,0(r8)
    6db4:	28c7883a 	add	r3,r5,r3
    6db8:	003b7d06 	br	5bb0 <__alt_data_end+0xff805bb0>
    6dbc:	01000074 	movhi	r4,1
    6dc0:	210478c4 	addi	r4,r4,4579
    6dc4:	d9003515 	stw	r4,212(sp)
    6dc8:	003b1406 	br	5a1c <__alt_data_end+0xff805a1c>
    6dcc:	013fffc4 	movi	r4,-1
    6dd0:	003a3506 	br	56a8 <__alt_data_end+0xff8056a8>
    6dd4:	0023883a 	mov	r17,zero
    6dd8:	003d9d06 	br	6450 <__alt_data_end+0xff806450>
    6ddc:	d9002c17 	ldw	r4,176(sp)
    6de0:	d9801e04 	addi	r6,sp,120
    6de4:	b80b883a 	mov	r5,r23
    6de8:	000c6340 	call	c634 <__sprint_r>
    6dec:	103a031e 	bne	r2,zero,55fc <__alt_data_end+0xff8055fc>
    6df0:	d8c02017 	ldw	r3,128(sp)
    6df4:	da000404 	addi	r8,sp,16
    6df8:	003d9406 	br	644c <__alt_data_end+0xff80644c>
    6dfc:	01000074 	movhi	r4,1
    6e00:	210474c4 	addi	r4,r4,4563
    6e04:	d9002b15 	stw	r4,172(sp)
    6e08:	d9002b17 	ldw	r4,172(sp)
    6e0c:	1c47883a 	add	r3,r3,r17
    6e10:	10800044 	addi	r2,r2,1
    6e14:	41000015 	stw	r4,0(r8)
    6e18:	44400115 	stw	r17,4(r8)
    6e1c:	d8c02015 	stw	r3,128(sp)
    6e20:	d8801f15 	stw	r2,124(sp)
    6e24:	010001c4 	movi	r4,7
    6e28:	20bfd716 	blt	r4,r2,6d88 <__alt_data_end+0xff806d88>
    6e2c:	42000204 	addi	r8,r8,8
    6e30:	003fdd06 	br	6da8 <__alt_data_end+0xff806da8>
    6e34:	d9002c17 	ldw	r4,176(sp)
    6e38:	d9801e04 	addi	r6,sp,120
    6e3c:	b80b883a 	mov	r5,r23
    6e40:	000c6340 	call	c634 <__sprint_r>
    6e44:	1039ed1e 	bne	r2,zero,55fc <__alt_data_end+0xff8055fc>
    6e48:	d8802617 	ldw	r2,152(sp)
    6e4c:	d8c02017 	ldw	r3,128(sp)
    6e50:	da000404 	addi	r8,sp,16
    6e54:	003e1006 	br	6698 <__alt_data_end+0xff806698>
    6e58:	00800044 	movi	r2,1
    6e5c:	10803fcc 	andi	r2,r2,255
    6e60:	00c00044 	movi	r3,1
    6e64:	10fa3526 	beq	r2,r3,573c <__alt_data_end+0xff80573c>
    6e68:	00c00084 	movi	r3,2
    6e6c:	10fbcb26 	beq	r2,r3,5d9c <__alt_data_end+0xff805d9c>
    6e70:	003a8f06 	br	58b0 <__alt_data_end+0xff8058b0>
    6e74:	01000074 	movhi	r4,1
    6e78:	210478c4 	addi	r4,r4,4579
    6e7c:	d9003515 	stw	r4,212(sp)
    6e80:	003b7606 	br	5c5c <__alt_data_end+0xff805c5c>
    6e84:	d8802917 	ldw	r2,164(sp)
    6e88:	00c00184 	movi	r3,6
    6e8c:	1880012e 	bgeu	r3,r2,6e94 <___vfprintf_internal_r+0x1ca0>
    6e90:	1805883a 	mov	r2,r3
    6e94:	d8802e15 	stw	r2,184(sp)
    6e98:	1000ef16 	blt	r2,zero,7258 <___vfprintf_internal_r+0x2064>
    6e9c:	04000074 	movhi	r16,1
    6ea0:	d8802a15 	stw	r2,168(sp)
    6ea4:	dcc02d15 	stw	r19,180(sp)
    6ea8:	d8002915 	stw	zero,164(sp)
    6eac:	d8003215 	stw	zero,200(sp)
    6eb0:	84047304 	addi	r16,r16,4556
    6eb4:	0039883a 	mov	fp,zero
    6eb8:	003aa206 	br	5944 <__alt_data_end+0xff805944>
    6ebc:	0021883a 	mov	r16,zero
    6ec0:	003e0706 	br	66e0 <__alt_data_end+0xff8066e0>
    6ec4:	d9002c17 	ldw	r4,176(sp)
    6ec8:	d9801e04 	addi	r6,sp,120
    6ecc:	b80b883a 	mov	r5,r23
    6ed0:	000c6340 	call	c634 <__sprint_r>
    6ed4:	1039c91e 	bne	r2,zero,55fc <__alt_data_end+0xff8055fc>
    6ed8:	d8802617 	ldw	r2,152(sp)
    6edc:	d9403317 	ldw	r5,204(sp)
    6ee0:	d8c02017 	ldw	r3,128(sp)
    6ee4:	da000404 	addi	r8,sp,16
    6ee8:	2885c83a 	sub	r2,r5,r2
    6eec:	003dfb06 	br	66dc <__alt_data_end+0xff8066dc>
    6ef0:	9080004c 	andi	r2,r18,1
    6ef4:	103e8f1e 	bne	r2,zero,6934 <__alt_data_end+0xff806934>
    6ef8:	d8802117 	ldw	r2,132(sp)
    6efc:	003e9e06 	br	6978 <__alt_data_end+0xff806978>
    6f00:	1025883a 	mov	r18,r2
    6f04:	0039883a 	mov	fp,zero
    6f08:	00800084 	movi	r2,2
    6f0c:	003fd306 	br	6e5c <__alt_data_end+0xff806e5c>
    6f10:	07000b44 	movi	fp,45
    6f14:	df002785 	stb	fp,158(sp)
    6f18:	003a4006 	br	581c <__alt_data_end+0xff80581c>
    6f1c:	00c00b44 	movi	r3,45
    6f20:	d8c02785 	stb	r3,158(sp)
    6f24:	d8802a15 	stw	r2,168(sp)
    6f28:	dc802b17 	ldw	r18,172(sp)
    6f2c:	d8002915 	stw	zero,164(sp)
    6f30:	07000b44 	movi	fp,45
    6f34:	003a8006 	br	5938 <__alt_data_end+0xff805938>
    6f38:	04000074 	movhi	r16,1
    6f3c:	84046804 	addi	r16,r16,4512
    6f40:	003f4706 	br	6c60 <__alt_data_end+0xff806c60>
    6f44:	d8c02d17 	ldw	r3,180(sp)
    6f48:	d9002f17 	ldw	r4,188(sp)
    6f4c:	18800017 	ldw	r2,0(r3)
    6f50:	18c00104 	addi	r3,r3,4
    6f54:	d8c02d15 	stw	r3,180(sp)
    6f58:	11000015 	stw	r4,0(r2)
    6f5c:	0038dd06 	br	52d4 <__alt_data_end+0xff8052d4>
    6f60:	dd802617 	ldw	r22,152(sp)
    6f64:	00bfff44 	movi	r2,-3
    6f68:	b0801c16 	blt	r22,r2,6fdc <___vfprintf_internal_r+0x1de8>
    6f6c:	d9402917 	ldw	r5,164(sp)
    6f70:	2d801a16 	blt	r5,r22,6fdc <___vfprintf_internal_r+0x1de8>
    6f74:	dd803215 	stw	r22,200(sp)
    6f78:	003e8906 	br	69a0 <__alt_data_end+0xff8069a0>
    6f7c:	01000074 	movhi	r4,1
    6f80:	210474c4 	addi	r4,r4,4563
    6f84:	d9002b15 	stw	r4,172(sp)
    6f88:	003c9106 	br	61d0 <__alt_data_end+0xff8061d0>
    6f8c:	e005883a 	mov	r2,fp
    6f90:	003e7906 	br	6978 <__alt_data_end+0xff806978>
    6f94:	d9402917 	ldw	r5,164(sp)
    6f98:	df002783 	ldbu	fp,158(sp)
    6f9c:	dcc02d15 	stw	r19,180(sp)
    6fa0:	d9402a15 	stw	r5,168(sp)
    6fa4:	d9402e15 	stw	r5,184(sp)
    6fa8:	d8002915 	stw	zero,164(sp)
    6fac:	d8003215 	stw	zero,200(sp)
    6fb0:	003a5d06 	br	5928 <__alt_data_end+0xff805928>
    6fb4:	9080004c 	andi	r2,r18,1
    6fb8:	0039883a 	mov	fp,zero
    6fbc:	10000426 	beq	r2,zero,6fd0 <___vfprintf_internal_r+0x1ddc>
    6fc0:	00800c04 	movi	r2,48
    6fc4:	dc001dc4 	addi	r16,sp,119
    6fc8:	d8801dc5 	stb	r2,119(sp)
    6fcc:	003b8006 	br	5dd0 <__alt_data_end+0xff805dd0>
    6fd0:	d8002e15 	stw	zero,184(sp)
    6fd4:	dc001e04 	addi	r16,sp,120
    6fd8:	003a4d06 	br	5910 <__alt_data_end+0xff805910>
    6fdc:	8c7fff84 	addi	r17,r17,-2
    6fe0:	b5bfffc4 	addi	r22,r22,-1
    6fe4:	dd802615 	stw	r22,152(sp)
    6fe8:	dc4022c5 	stb	r17,139(sp)
    6fec:	b000bf16 	blt	r22,zero,72ec <___vfprintf_internal_r+0x20f8>
    6ff0:	00800ac4 	movi	r2,43
    6ff4:	d8802305 	stb	r2,140(sp)
    6ff8:	00800244 	movi	r2,9
    6ffc:	15807016 	blt	r2,r22,71c0 <___vfprintf_internal_r+0x1fcc>
    7000:	00800c04 	movi	r2,48
    7004:	b5800c04 	addi	r22,r22,48
    7008:	d8802345 	stb	r2,141(sp)
    700c:	dd802385 	stb	r22,142(sp)
    7010:	d88023c4 	addi	r2,sp,143
    7014:	df0022c4 	addi	fp,sp,139
    7018:	d8c03317 	ldw	r3,204(sp)
    701c:	1739c83a 	sub	fp,r2,fp
    7020:	d9003317 	ldw	r4,204(sp)
    7024:	e0c7883a 	add	r3,fp,r3
    7028:	df003a15 	stw	fp,232(sp)
    702c:	d8c02e15 	stw	r3,184(sp)
    7030:	00800044 	movi	r2,1
    7034:	1100b30e 	bge	r2,r4,7304 <___vfprintf_internal_r+0x2110>
    7038:	d8c02e17 	ldw	r3,184(sp)
    703c:	18c00044 	addi	r3,r3,1
    7040:	d8c02e15 	stw	r3,184(sp)
    7044:	1805883a 	mov	r2,r3
    7048:	1800ac16 	blt	r3,zero,72fc <___vfprintf_internal_r+0x2108>
    704c:	d8003215 	stw	zero,200(sp)
    7050:	003e5d06 	br	69c8 <__alt_data_end+0xff8069c8>
    7054:	d9002c17 	ldw	r4,176(sp)
    7058:	d9801e04 	addi	r6,sp,120
    705c:	b80b883a 	mov	r5,r23
    7060:	000c6340 	call	c634 <__sprint_r>
    7064:	1039651e 	bne	r2,zero,55fc <__alt_data_end+0xff8055fc>
    7068:	dc402617 	ldw	r17,152(sp)
    706c:	d8c02017 	ldw	r3,128(sp)
    7070:	d8801f17 	ldw	r2,124(sp)
    7074:	da000404 	addi	r8,sp,16
    7078:	003ed606 	br	6bd4 <__alt_data_end+0xff806bd4>
    707c:	582b883a 	mov	r21,r11
    7080:	d8002915 	stw	zero,164(sp)
    7084:	0038bd06 	br	537c <__alt_data_end+0xff80537c>
    7088:	d8802917 	ldw	r2,164(sp)
    708c:	103e071e 	bne	r2,zero,68ac <__alt_data_end+0xff8068ac>
    7090:	dc002915 	stw	r16,164(sp)
    7094:	003e0506 	br	68ac <__alt_data_end+0xff8068ac>
    7098:	d9002917 	ldw	r4,164(sp)
    709c:	20c00044 	addi	r3,r4,1
    70a0:	003e0f06 	br	68e0 <__alt_data_end+0xff8068e0>
    70a4:	01400184 	movi	r5,6
    70a8:	d9402915 	stw	r5,164(sp)
    70ac:	003dff06 	br	68ac <__alt_data_end+0xff8068ac>
    70b0:	d8802104 	addi	r2,sp,132
    70b4:	d8800315 	stw	r2,12(sp)
    70b8:	d8802504 	addi	r2,sp,148
    70bc:	d8800215 	stw	r2,8(sp)
    70c0:	d8802604 	addi	r2,sp,152
    70c4:	d8800115 	stw	r2,4(sp)
    70c8:	d8802917 	ldw	r2,164(sp)
    70cc:	d9403617 	ldw	r5,216(sp)
    70d0:	d9002c17 	ldw	r4,176(sp)
    70d4:	d8800015 	stw	r2,0(sp)
    70d8:	01c000c4 	movi	r7,3
    70dc:	980d883a 	mov	r6,r19
    70e0:	da003d15 	stw	r8,244(sp)
    70e4:	00078180 	call	7818 <_dtoa_r>
    70e8:	d8c02917 	ldw	r3,164(sp)
    70ec:	da003d17 	ldw	r8,244(sp)
    70f0:	1021883a 	mov	r16,r2
    70f4:	10f9883a 	add	fp,r2,r3
    70f8:	81000007 	ldb	r4,0(r16)
    70fc:	00800c04 	movi	r2,48
    7100:	20805e26 	beq	r4,r2,727c <___vfprintf_internal_r+0x2088>
    7104:	d8c02617 	ldw	r3,152(sp)
    7108:	e0f9883a 	add	fp,fp,r3
    710c:	003e0a06 	br	6938 <__alt_data_end+0xff806938>
    7110:	00c00b44 	movi	r3,45
    7114:	24e0003c 	xorhi	r19,r4,32768
    7118:	d8c02a05 	stb	r3,168(sp)
    711c:	003de906 	br	68c4 <__alt_data_end+0xff8068c4>
    7120:	d8c03217 	ldw	r3,200(sp)
    7124:	00c07a0e 	bge	zero,r3,7310 <___vfprintf_internal_r+0x211c>
    7128:	00800044 	movi	r2,1
    712c:	d9003317 	ldw	r4,204(sp)
    7130:	1105883a 	add	r2,r2,r4
    7134:	d8802e15 	stw	r2,184(sp)
    7138:	10004e16 	blt	r2,zero,7274 <___vfprintf_internal_r+0x2080>
    713c:	044019c4 	movi	r17,103
    7140:	003e2106 	br	69c8 <__alt_data_end+0xff8069c8>
    7144:	d9002917 	ldw	r4,164(sp)
    7148:	d8802104 	addi	r2,sp,132
    714c:	d8800315 	stw	r2,12(sp)
    7150:	d9000015 	stw	r4,0(sp)
    7154:	d8802504 	addi	r2,sp,148
    7158:	d9403617 	ldw	r5,216(sp)
    715c:	d9002c17 	ldw	r4,176(sp)
    7160:	d8800215 	stw	r2,8(sp)
    7164:	d8802604 	addi	r2,sp,152
    7168:	d8800115 	stw	r2,4(sp)
    716c:	01c000c4 	movi	r7,3
    7170:	980d883a 	mov	r6,r19
    7174:	da003d15 	stw	r8,244(sp)
    7178:	00078180 	call	7818 <_dtoa_r>
    717c:	d8c02917 	ldw	r3,164(sp)
    7180:	da003d17 	ldw	r8,244(sp)
    7184:	1021883a 	mov	r16,r2
    7188:	00801184 	movi	r2,70
    718c:	80f9883a 	add	fp,r16,r3
    7190:	88bfd926 	beq	r17,r2,70f8 <__alt_data_end+0xff8070f8>
    7194:	003de806 	br	6938 <__alt_data_end+0xff806938>
    7198:	d9002917 	ldw	r4,164(sp)
    719c:	00c04d0e 	bge	zero,r3,72d4 <___vfprintf_internal_r+0x20e0>
    71a0:	2000441e 	bne	r4,zero,72b4 <___vfprintf_internal_r+0x20c0>
    71a4:	9480004c 	andi	r18,r18,1
    71a8:	9000421e 	bne	r18,zero,72b4 <___vfprintf_internal_r+0x20c0>
    71ac:	1805883a 	mov	r2,r3
    71b0:	18007016 	blt	r3,zero,7374 <___vfprintf_internal_r+0x2180>
    71b4:	d8c03217 	ldw	r3,200(sp)
    71b8:	d8c02e15 	stw	r3,184(sp)
    71bc:	003e0206 	br	69c8 <__alt_data_end+0xff8069c8>
    71c0:	df0022c4 	addi	fp,sp,139
    71c4:	dc002915 	stw	r16,164(sp)
    71c8:	4027883a 	mov	r19,r8
    71cc:	e021883a 	mov	r16,fp
    71d0:	b009883a 	mov	r4,r22
    71d4:	01400284 	movi	r5,10
    71d8:	0004d940 	call	4d94 <__modsi3>
    71dc:	10800c04 	addi	r2,r2,48
    71e0:	843fffc4 	addi	r16,r16,-1
    71e4:	b009883a 	mov	r4,r22
    71e8:	01400284 	movi	r5,10
    71ec:	80800005 	stb	r2,0(r16)
    71f0:	0004d100 	call	4d10 <__divsi3>
    71f4:	102d883a 	mov	r22,r2
    71f8:	00800244 	movi	r2,9
    71fc:	15bff416 	blt	r2,r22,71d0 <__alt_data_end+0xff8071d0>
    7200:	9811883a 	mov	r8,r19
    7204:	b0800c04 	addi	r2,r22,48
    7208:	8027883a 	mov	r19,r16
    720c:	997fffc4 	addi	r5,r19,-1
    7210:	98bfffc5 	stb	r2,-1(r19)
    7214:	dc002917 	ldw	r16,164(sp)
    7218:	2f006a2e 	bgeu	r5,fp,73c4 <___vfprintf_internal_r+0x21d0>
    721c:	d9c02384 	addi	r7,sp,142
    7220:	3ccfc83a 	sub	r7,r7,r19
    7224:	d9002344 	addi	r4,sp,141
    7228:	e1cf883a 	add	r7,fp,r7
    722c:	00000106 	br	7234 <___vfprintf_internal_r+0x2040>
    7230:	28800003 	ldbu	r2,0(r5)
    7234:	20800005 	stb	r2,0(r4)
    7238:	21000044 	addi	r4,r4,1
    723c:	29400044 	addi	r5,r5,1
    7240:	393ffb1e 	bne	r7,r4,7230 <__alt_data_end+0xff807230>
    7244:	d8802304 	addi	r2,sp,140
    7248:	14c5c83a 	sub	r2,r2,r19
    724c:	d8c02344 	addi	r3,sp,141
    7250:	1885883a 	add	r2,r3,r2
    7254:	003f7006 	br	7018 <__alt_data_end+0xff807018>
    7258:	0005883a 	mov	r2,zero
    725c:	003f0f06 	br	6e9c <__alt_data_end+0xff806e9c>
    7260:	d8c03217 	ldw	r3,200(sp)
    7264:	18c00044 	addi	r3,r3,1
    7268:	d8c02e15 	stw	r3,184(sp)
    726c:	1805883a 	mov	r2,r3
    7270:	183fb20e 	bge	r3,zero,713c <__alt_data_end+0xff80713c>
    7274:	0005883a 	mov	r2,zero
    7278:	003fb006 	br	713c <__alt_data_end+0xff80713c>
    727c:	d9003617 	ldw	r4,216(sp)
    7280:	000d883a 	mov	r6,zero
    7284:	000f883a 	mov	r7,zero
    7288:	980b883a 	mov	r5,r19
    728c:	d8c03c15 	stw	r3,240(sp)
    7290:	da003d15 	stw	r8,244(sp)
    7294:	000ef640 	call	ef64 <__eqdf2>
    7298:	d8c03c17 	ldw	r3,240(sp)
    729c:	da003d17 	ldw	r8,244(sp)
    72a0:	103f9826 	beq	r2,zero,7104 <__alt_data_end+0xff807104>
    72a4:	00800044 	movi	r2,1
    72a8:	10c7c83a 	sub	r3,r2,r3
    72ac:	d8c02615 	stw	r3,152(sp)
    72b0:	003f9506 	br	7108 <__alt_data_end+0xff807108>
    72b4:	d9002917 	ldw	r4,164(sp)
    72b8:	d8c03217 	ldw	r3,200(sp)
    72bc:	20800044 	addi	r2,r4,1
    72c0:	1885883a 	add	r2,r3,r2
    72c4:	d8802e15 	stw	r2,184(sp)
    72c8:	103dbf0e 	bge	r2,zero,69c8 <__alt_data_end+0xff8069c8>
    72cc:	0005883a 	mov	r2,zero
    72d0:	003dbd06 	br	69c8 <__alt_data_end+0xff8069c8>
    72d4:	2000211e 	bne	r4,zero,735c <___vfprintf_internal_r+0x2168>
    72d8:	9480004c 	andi	r18,r18,1
    72dc:	90001f1e 	bne	r18,zero,735c <___vfprintf_internal_r+0x2168>
    72e0:	00800044 	movi	r2,1
    72e4:	d8802e15 	stw	r2,184(sp)
    72e8:	003db706 	br	69c8 <__alt_data_end+0xff8069c8>
    72ec:	00800b44 	movi	r2,45
    72f0:	05adc83a 	sub	r22,zero,r22
    72f4:	d8802305 	stb	r2,140(sp)
    72f8:	003f3f06 	br	6ff8 <__alt_data_end+0xff806ff8>
    72fc:	0005883a 	mov	r2,zero
    7300:	003f5206 	br	704c <__alt_data_end+0xff80704c>
    7304:	90a4703a 	and	r18,r18,r2
    7308:	903f4e26 	beq	r18,zero,7044 <__alt_data_end+0xff807044>
    730c:	003f4a06 	br	7038 <__alt_data_end+0xff807038>
    7310:	00800084 	movi	r2,2
    7314:	10c5c83a 	sub	r2,r2,r3
    7318:	003f8406 	br	712c <__alt_data_end+0xff80712c>
    731c:	d8802d17 	ldw	r2,180(sp)
    7320:	d9002d17 	ldw	r4,180(sp)
    7324:	ac400043 	ldbu	r17,1(r21)
    7328:	10800017 	ldw	r2,0(r2)
    732c:	582b883a 	mov	r21,r11
    7330:	d8802915 	stw	r2,164(sp)
    7334:	20800104 	addi	r2,r4,4
    7338:	d9002917 	ldw	r4,164(sp)
    733c:	d8802d15 	stw	r2,180(sp)
    7340:	203e7a0e 	bge	r4,zero,6d2c <__alt_data_end+0xff806d2c>
    7344:	8c403fcc 	andi	r17,r17,255
    7348:	00bfffc4 	movi	r2,-1
    734c:	8c40201c 	xori	r17,r17,128
    7350:	d8802915 	stw	r2,164(sp)
    7354:	8c7fe004 	addi	r17,r17,-128
    7358:	00380706 	br	5378 <__alt_data_end+0xff805378>
    735c:	d8c02917 	ldw	r3,164(sp)
    7360:	18c00084 	addi	r3,r3,2
    7364:	d8c02e15 	stw	r3,184(sp)
    7368:	1805883a 	mov	r2,r3
    736c:	183d960e 	bge	r3,zero,69c8 <__alt_data_end+0xff8069c8>
    7370:	003fd606 	br	72cc <__alt_data_end+0xff8072cc>
    7374:	0005883a 	mov	r2,zero
    7378:	003f8e06 	br	71b4 <__alt_data_end+0xff8071b4>
    737c:	9080004c 	andi	r2,r18,1
    7380:	103f811e 	bne	r2,zero,7188 <__alt_data_end+0xff807188>
    7384:	d8802117 	ldw	r2,132(sp)
    7388:	1405c83a 	sub	r2,r2,r16
    738c:	d8803315 	stw	r2,204(sp)
    7390:	b47ef326 	beq	r22,r17,6f60 <__alt_data_end+0xff806f60>
    7394:	dd802617 	ldw	r22,152(sp)
    7398:	003f1106 	br	6fe0 <__alt_data_end+0xff806fe0>
    739c:	d9c02785 	stb	r7,158(sp)
    73a0:	00390406 	br	57b4 <__alt_data_end+0xff8057b4>
    73a4:	d9c02785 	stb	r7,158(sp)
    73a8:	0038d306 	br	56f8 <__alt_data_end+0xff8056f8>
    73ac:	d9c02785 	stb	r7,158(sp)
    73b0:	003a6106 	br	5d38 <__alt_data_end+0xff805d38>
    73b4:	d9c02785 	stb	r7,158(sp)
    73b8:	003af806 	br	5f9c <__alt_data_end+0xff805f9c>
    73bc:	0005883a 	mov	r2,zero
    73c0:	003d7e06 	br	69bc <__alt_data_end+0xff8069bc>
    73c4:	d8802344 	addi	r2,sp,141
    73c8:	003f1306 	br	7018 <__alt_data_end+0xff807018>
    73cc:	d9c02785 	stb	r7,158(sp)
    73d0:	00392306 	br	5860 <__alt_data_end+0xff805860>
    73d4:	d9c02785 	stb	r7,158(sp)
    73d8:	003aa906 	br	5e80 <__alt_data_end+0xff805e80>
    73dc:	d9c02785 	stb	r7,158(sp)
    73e0:	003a3d06 	br	5cd8 <__alt_data_end+0xff805cd8>
    73e4:	d9c02785 	stb	r7,158(sp)
    73e8:	003aca06 	br	5f14 <__alt_data_end+0xff805f14>

000073ec <__vfprintf_internal>:
    73ec:	00800074 	movhi	r2,1
    73f0:	108b4b04 	addi	r2,r2,11564
    73f4:	300f883a 	mov	r7,r6
    73f8:	280d883a 	mov	r6,r5
    73fc:	200b883a 	mov	r5,r4
    7400:	11000017 	ldw	r4,0(r2)
    7404:	00051f41 	jmpi	51f4 <___vfprintf_internal_r>

00007408 <__sbprintf>:
    7408:	2880030b 	ldhu	r2,12(r5)
    740c:	2ac01917 	ldw	r11,100(r5)
    7410:	2a80038b 	ldhu	r10,14(r5)
    7414:	2a400717 	ldw	r9,28(r5)
    7418:	2a000917 	ldw	r8,36(r5)
    741c:	defee204 	addi	sp,sp,-1144
    7420:	00c10004 	movi	r3,1024
    7424:	dc011a15 	stw	r16,1128(sp)
    7428:	10bfff4c 	andi	r2,r2,65533
    742c:	2821883a 	mov	r16,r5
    7430:	d8cb883a 	add	r5,sp,r3
    7434:	dc811c15 	stw	r18,1136(sp)
    7438:	dc411b15 	stw	r17,1132(sp)
    743c:	dfc11d15 	stw	ra,1140(sp)
    7440:	2025883a 	mov	r18,r4
    7444:	d881030d 	sth	r2,1036(sp)
    7448:	dac11915 	stw	r11,1124(sp)
    744c:	da81038d 	sth	r10,1038(sp)
    7450:	da410715 	stw	r9,1052(sp)
    7454:	da010915 	stw	r8,1060(sp)
    7458:	dec10015 	stw	sp,1024(sp)
    745c:	dec10415 	stw	sp,1040(sp)
    7460:	d8c10215 	stw	r3,1032(sp)
    7464:	d8c10515 	stw	r3,1044(sp)
    7468:	d8010615 	stw	zero,1048(sp)
    746c:	00051f40 	call	51f4 <___vfprintf_internal_r>
    7470:	1023883a 	mov	r17,r2
    7474:	10000416 	blt	r2,zero,7488 <__sbprintf+0x80>
    7478:	d9410004 	addi	r5,sp,1024
    747c:	9009883a 	mov	r4,r18
    7480:	00090bc0 	call	90bc <_fflush_r>
    7484:	10000d1e 	bne	r2,zero,74bc <__sbprintf+0xb4>
    7488:	d881030b 	ldhu	r2,1036(sp)
    748c:	1080100c 	andi	r2,r2,64
    7490:	10000326 	beq	r2,zero,74a0 <__sbprintf+0x98>
    7494:	8080030b 	ldhu	r2,12(r16)
    7498:	10801014 	ori	r2,r2,64
    749c:	8080030d 	sth	r2,12(r16)
    74a0:	8805883a 	mov	r2,r17
    74a4:	dfc11d17 	ldw	ra,1140(sp)
    74a8:	dc811c17 	ldw	r18,1136(sp)
    74ac:	dc411b17 	ldw	r17,1132(sp)
    74b0:	dc011a17 	ldw	r16,1128(sp)
    74b4:	dec11e04 	addi	sp,sp,1144
    74b8:	f800283a 	ret
    74bc:	047fffc4 	movi	r17,-1
    74c0:	003ff106 	br	7488 <__alt_data_end+0xff807488>

000074c4 <__swsetup_r>:
    74c4:	00800074 	movhi	r2,1
    74c8:	defffd04 	addi	sp,sp,-12
    74cc:	108b4b04 	addi	r2,r2,11564
    74d0:	dc400115 	stw	r17,4(sp)
    74d4:	2023883a 	mov	r17,r4
    74d8:	11000017 	ldw	r4,0(r2)
    74dc:	dc000015 	stw	r16,0(sp)
    74e0:	dfc00215 	stw	ra,8(sp)
    74e4:	2821883a 	mov	r16,r5
    74e8:	20000226 	beq	r4,zero,74f4 <__swsetup_r+0x30>
    74ec:	20800e17 	ldw	r2,56(r4)
    74f0:	10003126 	beq	r2,zero,75b8 <__swsetup_r+0xf4>
    74f4:	8080030b 	ldhu	r2,12(r16)
    74f8:	10c0020c 	andi	r3,r2,8
    74fc:	1009883a 	mov	r4,r2
    7500:	18000f26 	beq	r3,zero,7540 <__swsetup_r+0x7c>
    7504:	80c00417 	ldw	r3,16(r16)
    7508:	18001526 	beq	r3,zero,7560 <__swsetup_r+0x9c>
    750c:	1100004c 	andi	r4,r2,1
    7510:	20001c1e 	bne	r4,zero,7584 <__swsetup_r+0xc0>
    7514:	1080008c 	andi	r2,r2,2
    7518:	1000291e 	bne	r2,zero,75c0 <__swsetup_r+0xfc>
    751c:	80800517 	ldw	r2,20(r16)
    7520:	80800215 	stw	r2,8(r16)
    7524:	18001c26 	beq	r3,zero,7598 <__swsetup_r+0xd4>
    7528:	0005883a 	mov	r2,zero
    752c:	dfc00217 	ldw	ra,8(sp)
    7530:	dc400117 	ldw	r17,4(sp)
    7534:	dc000017 	ldw	r16,0(sp)
    7538:	dec00304 	addi	sp,sp,12
    753c:	f800283a 	ret
    7540:	2080040c 	andi	r2,r4,16
    7544:	10002e26 	beq	r2,zero,7600 <__swsetup_r+0x13c>
    7548:	2080010c 	andi	r2,r4,4
    754c:	10001e1e 	bne	r2,zero,75c8 <__swsetup_r+0x104>
    7550:	80c00417 	ldw	r3,16(r16)
    7554:	20800214 	ori	r2,r4,8
    7558:	8080030d 	sth	r2,12(r16)
    755c:	183feb1e 	bne	r3,zero,750c <__alt_data_end+0xff80750c>
    7560:	1100a00c 	andi	r4,r2,640
    7564:	01408004 	movi	r5,512
    7568:	217fe826 	beq	r4,r5,750c <__alt_data_end+0xff80750c>
    756c:	800b883a 	mov	r5,r16
    7570:	8809883a 	mov	r4,r17
    7574:	000a03c0 	call	a03c <__smakebuf_r>
    7578:	8080030b 	ldhu	r2,12(r16)
    757c:	80c00417 	ldw	r3,16(r16)
    7580:	003fe206 	br	750c <__alt_data_end+0xff80750c>
    7584:	80800517 	ldw	r2,20(r16)
    7588:	80000215 	stw	zero,8(r16)
    758c:	0085c83a 	sub	r2,zero,r2
    7590:	80800615 	stw	r2,24(r16)
    7594:	183fe41e 	bne	r3,zero,7528 <__alt_data_end+0xff807528>
    7598:	80c0030b 	ldhu	r3,12(r16)
    759c:	0005883a 	mov	r2,zero
    75a0:	1900200c 	andi	r4,r3,128
    75a4:	203fe126 	beq	r4,zero,752c <__alt_data_end+0xff80752c>
    75a8:	18c01014 	ori	r3,r3,64
    75ac:	80c0030d 	sth	r3,12(r16)
    75b0:	00bfffc4 	movi	r2,-1
    75b4:	003fdd06 	br	752c <__alt_data_end+0xff80752c>
    75b8:	00094980 	call	9498 <__sinit>
    75bc:	003fcd06 	br	74f4 <__alt_data_end+0xff8074f4>
    75c0:	0005883a 	mov	r2,zero
    75c4:	003fd606 	br	7520 <__alt_data_end+0xff807520>
    75c8:	81400c17 	ldw	r5,48(r16)
    75cc:	28000626 	beq	r5,zero,75e8 <__swsetup_r+0x124>
    75d0:	80801004 	addi	r2,r16,64
    75d4:	28800326 	beq	r5,r2,75e4 <__swsetup_r+0x120>
    75d8:	8809883a 	mov	r4,r17
    75dc:	000960c0 	call	960c <_free_r>
    75e0:	8100030b 	ldhu	r4,12(r16)
    75e4:	80000c15 	stw	zero,48(r16)
    75e8:	80c00417 	ldw	r3,16(r16)
    75ec:	00bff6c4 	movi	r2,-37
    75f0:	1108703a 	and	r4,r2,r4
    75f4:	80000115 	stw	zero,4(r16)
    75f8:	80c00015 	stw	r3,0(r16)
    75fc:	003fd506 	br	7554 <__alt_data_end+0xff807554>
    7600:	00800244 	movi	r2,9
    7604:	88800015 	stw	r2,0(r17)
    7608:	20801014 	ori	r2,r4,64
    760c:	8080030d 	sth	r2,12(r16)
    7610:	00bfffc4 	movi	r2,-1
    7614:	003fc506 	br	752c <__alt_data_end+0xff80752c>

00007618 <quorem>:
    7618:	defff704 	addi	sp,sp,-36
    761c:	dc800215 	stw	r18,8(sp)
    7620:	20800417 	ldw	r2,16(r4)
    7624:	2c800417 	ldw	r18,16(r5)
    7628:	dfc00815 	stw	ra,32(sp)
    762c:	ddc00715 	stw	r23,28(sp)
    7630:	dd800615 	stw	r22,24(sp)
    7634:	dd400515 	stw	r21,20(sp)
    7638:	dd000415 	stw	r20,16(sp)
    763c:	dcc00315 	stw	r19,12(sp)
    7640:	dc400115 	stw	r17,4(sp)
    7644:	dc000015 	stw	r16,0(sp)
    7648:	14807116 	blt	r2,r18,7810 <quorem+0x1f8>
    764c:	94bfffc4 	addi	r18,r18,-1
    7650:	94ad883a 	add	r22,r18,r18
    7654:	b5ad883a 	add	r22,r22,r22
    7658:	2c400504 	addi	r17,r5,20
    765c:	8da9883a 	add	r20,r17,r22
    7660:	25400504 	addi	r21,r4,20
    7664:	282f883a 	mov	r23,r5
    7668:	adad883a 	add	r22,r21,r22
    766c:	a1400017 	ldw	r5,0(r20)
    7670:	2021883a 	mov	r16,r4
    7674:	b1000017 	ldw	r4,0(r22)
    7678:	29400044 	addi	r5,r5,1
    767c:	0004e080 	call	4e08 <__udivsi3>
    7680:	1027883a 	mov	r19,r2
    7684:	10002c26 	beq	r2,zero,7738 <quorem+0x120>
    7688:	a813883a 	mov	r9,r21
    768c:	880b883a 	mov	r5,r17
    7690:	0009883a 	mov	r4,zero
    7694:	000d883a 	mov	r6,zero
    7698:	2a000017 	ldw	r8,0(r5)
    769c:	49c00017 	ldw	r7,0(r9)
    76a0:	29400104 	addi	r5,r5,4
    76a4:	40bfffcc 	andi	r2,r8,65535
    76a8:	14c5383a 	mul	r2,r2,r19
    76ac:	4010d43a 	srli	r8,r8,16
    76b0:	38ffffcc 	andi	r3,r7,65535
    76b4:	1105883a 	add	r2,r2,r4
    76b8:	1008d43a 	srli	r4,r2,16
    76bc:	44d1383a 	mul	r8,r8,r19
    76c0:	198d883a 	add	r6,r3,r6
    76c4:	10ffffcc 	andi	r3,r2,65535
    76c8:	30c7c83a 	sub	r3,r6,r3
    76cc:	380ed43a 	srli	r7,r7,16
    76d0:	4105883a 	add	r2,r8,r4
    76d4:	180dd43a 	srai	r6,r3,16
    76d8:	113fffcc 	andi	r4,r2,65535
    76dc:	390fc83a 	sub	r7,r7,r4
    76e0:	398d883a 	add	r6,r7,r6
    76e4:	300e943a 	slli	r7,r6,16
    76e8:	18ffffcc 	andi	r3,r3,65535
    76ec:	1008d43a 	srli	r4,r2,16
    76f0:	38ceb03a 	or	r7,r7,r3
    76f4:	49c00015 	stw	r7,0(r9)
    76f8:	300dd43a 	srai	r6,r6,16
    76fc:	4a400104 	addi	r9,r9,4
    7700:	a17fe52e 	bgeu	r20,r5,7698 <__alt_data_end+0xff807698>
    7704:	b0800017 	ldw	r2,0(r22)
    7708:	10000b1e 	bne	r2,zero,7738 <quorem+0x120>
    770c:	b0bfff04 	addi	r2,r22,-4
    7710:	a880082e 	bgeu	r21,r2,7734 <quorem+0x11c>
    7714:	b0ffff17 	ldw	r3,-4(r22)
    7718:	18000326 	beq	r3,zero,7728 <quorem+0x110>
    771c:	00000506 	br	7734 <quorem+0x11c>
    7720:	10c00017 	ldw	r3,0(r2)
    7724:	1800031e 	bne	r3,zero,7734 <quorem+0x11c>
    7728:	10bfff04 	addi	r2,r2,-4
    772c:	94bfffc4 	addi	r18,r18,-1
    7730:	a8bffb36 	bltu	r21,r2,7720 <__alt_data_end+0xff807720>
    7734:	84800415 	stw	r18,16(r16)
    7738:	b80b883a 	mov	r5,r23
    773c:	8009883a 	mov	r4,r16
    7740:	000b6340 	call	b634 <__mcmp>
    7744:	10002616 	blt	r2,zero,77e0 <quorem+0x1c8>
    7748:	9cc00044 	addi	r19,r19,1
    774c:	a805883a 	mov	r2,r21
    7750:	000b883a 	mov	r5,zero
    7754:	11000017 	ldw	r4,0(r2)
    7758:	89800017 	ldw	r6,0(r17)
    775c:	10800104 	addi	r2,r2,4
    7760:	20ffffcc 	andi	r3,r4,65535
    7764:	194b883a 	add	r5,r3,r5
    7768:	30ffffcc 	andi	r3,r6,65535
    776c:	28c7c83a 	sub	r3,r5,r3
    7770:	300cd43a 	srli	r6,r6,16
    7774:	2008d43a 	srli	r4,r4,16
    7778:	180bd43a 	srai	r5,r3,16
    777c:	18ffffcc 	andi	r3,r3,65535
    7780:	2189c83a 	sub	r4,r4,r6
    7784:	2149883a 	add	r4,r4,r5
    7788:	200c943a 	slli	r6,r4,16
    778c:	8c400104 	addi	r17,r17,4
    7790:	200bd43a 	srai	r5,r4,16
    7794:	30c6b03a 	or	r3,r6,r3
    7798:	10ffff15 	stw	r3,-4(r2)
    779c:	a47fed2e 	bgeu	r20,r17,7754 <__alt_data_end+0xff807754>
    77a0:	9485883a 	add	r2,r18,r18
    77a4:	1085883a 	add	r2,r2,r2
    77a8:	a887883a 	add	r3,r21,r2
    77ac:	18800017 	ldw	r2,0(r3)
    77b0:	10000b1e 	bne	r2,zero,77e0 <quorem+0x1c8>
    77b4:	18bfff04 	addi	r2,r3,-4
    77b8:	a880082e 	bgeu	r21,r2,77dc <quorem+0x1c4>
    77bc:	18ffff17 	ldw	r3,-4(r3)
    77c0:	18000326 	beq	r3,zero,77d0 <quorem+0x1b8>
    77c4:	00000506 	br	77dc <quorem+0x1c4>
    77c8:	10c00017 	ldw	r3,0(r2)
    77cc:	1800031e 	bne	r3,zero,77dc <quorem+0x1c4>
    77d0:	10bfff04 	addi	r2,r2,-4
    77d4:	94bfffc4 	addi	r18,r18,-1
    77d8:	a8bffb36 	bltu	r21,r2,77c8 <__alt_data_end+0xff8077c8>
    77dc:	84800415 	stw	r18,16(r16)
    77e0:	9805883a 	mov	r2,r19
    77e4:	dfc00817 	ldw	ra,32(sp)
    77e8:	ddc00717 	ldw	r23,28(sp)
    77ec:	dd800617 	ldw	r22,24(sp)
    77f0:	dd400517 	ldw	r21,20(sp)
    77f4:	dd000417 	ldw	r20,16(sp)
    77f8:	dcc00317 	ldw	r19,12(sp)
    77fc:	dc800217 	ldw	r18,8(sp)
    7800:	dc400117 	ldw	r17,4(sp)
    7804:	dc000017 	ldw	r16,0(sp)
    7808:	dec00904 	addi	sp,sp,36
    780c:	f800283a 	ret
    7810:	0005883a 	mov	r2,zero
    7814:	003ff306 	br	77e4 <__alt_data_end+0xff8077e4>

00007818 <_dtoa_r>:
    7818:	20801017 	ldw	r2,64(r4)
    781c:	deffde04 	addi	sp,sp,-136
    7820:	df002015 	stw	fp,128(sp)
    7824:	dcc01b15 	stw	r19,108(sp)
    7828:	dc801a15 	stw	r18,104(sp)
    782c:	dc401915 	stw	r17,100(sp)
    7830:	dc001815 	stw	r16,96(sp)
    7834:	dfc02115 	stw	ra,132(sp)
    7838:	ddc01f15 	stw	r23,124(sp)
    783c:	dd801e15 	stw	r22,120(sp)
    7840:	dd401d15 	stw	r21,116(sp)
    7844:	dd001c15 	stw	r20,112(sp)
    7848:	d9c00315 	stw	r7,12(sp)
    784c:	2039883a 	mov	fp,r4
    7850:	3023883a 	mov	r17,r6
    7854:	2825883a 	mov	r18,r5
    7858:	dc002417 	ldw	r16,144(sp)
    785c:	3027883a 	mov	r19,r6
    7860:	10000826 	beq	r2,zero,7884 <_dtoa_r+0x6c>
    7864:	21801117 	ldw	r6,68(r4)
    7868:	00c00044 	movi	r3,1
    786c:	100b883a 	mov	r5,r2
    7870:	1986983a 	sll	r3,r3,r6
    7874:	11800115 	stw	r6,4(r2)
    7878:	10c00215 	stw	r3,8(r2)
    787c:	000ae140 	call	ae14 <_Bfree>
    7880:	e0001015 	stw	zero,64(fp)
    7884:	88002e16 	blt	r17,zero,7940 <_dtoa_r+0x128>
    7888:	80000015 	stw	zero,0(r16)
    788c:	889ffc2c 	andhi	r2,r17,32752
    7890:	00dffc34 	movhi	r3,32752
    7894:	10c01c26 	beq	r2,r3,7908 <_dtoa_r+0xf0>
    7898:	000d883a 	mov	r6,zero
    789c:	000f883a 	mov	r7,zero
    78a0:	9009883a 	mov	r4,r18
    78a4:	980b883a 	mov	r5,r19
    78a8:	000ef640 	call	ef64 <__eqdf2>
    78ac:	10002b1e 	bne	r2,zero,795c <_dtoa_r+0x144>
    78b0:	d9c02317 	ldw	r7,140(sp)
    78b4:	00800044 	movi	r2,1
    78b8:	38800015 	stw	r2,0(r7)
    78bc:	d8802517 	ldw	r2,148(sp)
    78c0:	10019e26 	beq	r2,zero,7f3c <_dtoa_r+0x724>
    78c4:	d8c02517 	ldw	r3,148(sp)
    78c8:	00800074 	movhi	r2,1
    78cc:	1083f444 	addi	r2,r2,4049
    78d0:	18800015 	stw	r2,0(r3)
    78d4:	10bfffc4 	addi	r2,r2,-1
    78d8:	dfc02117 	ldw	ra,132(sp)
    78dc:	df002017 	ldw	fp,128(sp)
    78e0:	ddc01f17 	ldw	r23,124(sp)
    78e4:	dd801e17 	ldw	r22,120(sp)
    78e8:	dd401d17 	ldw	r21,116(sp)
    78ec:	dd001c17 	ldw	r20,112(sp)
    78f0:	dcc01b17 	ldw	r19,108(sp)
    78f4:	dc801a17 	ldw	r18,104(sp)
    78f8:	dc401917 	ldw	r17,100(sp)
    78fc:	dc001817 	ldw	r16,96(sp)
    7900:	dec02204 	addi	sp,sp,136
    7904:	f800283a 	ret
    7908:	d8c02317 	ldw	r3,140(sp)
    790c:	0089c3c4 	movi	r2,9999
    7910:	18800015 	stw	r2,0(r3)
    7914:	90017726 	beq	r18,zero,7ef4 <_dtoa_r+0x6dc>
    7918:	00800074 	movhi	r2,1
    791c:	10848004 	addi	r2,r2,4608
    7920:	d9002517 	ldw	r4,148(sp)
    7924:	203fec26 	beq	r4,zero,78d8 <__alt_data_end+0xff8078d8>
    7928:	10c000c7 	ldb	r3,3(r2)
    792c:	1801781e 	bne	r3,zero,7f10 <_dtoa_r+0x6f8>
    7930:	10c000c4 	addi	r3,r2,3
    7934:	d9802517 	ldw	r6,148(sp)
    7938:	30c00015 	stw	r3,0(r6)
    793c:	003fe606 	br	78d8 <__alt_data_end+0xff8078d8>
    7940:	04e00034 	movhi	r19,32768
    7944:	9cffffc4 	addi	r19,r19,-1
    7948:	00800044 	movi	r2,1
    794c:	8ce6703a 	and	r19,r17,r19
    7950:	80800015 	stw	r2,0(r16)
    7954:	9823883a 	mov	r17,r19
    7958:	003fcc06 	br	788c <__alt_data_end+0xff80788c>
    795c:	d8800204 	addi	r2,sp,8
    7960:	d8800015 	stw	r2,0(sp)
    7964:	d9c00104 	addi	r7,sp,4
    7968:	900b883a 	mov	r5,r18
    796c:	980d883a 	mov	r6,r19
    7970:	e009883a 	mov	r4,fp
    7974:	8820d53a 	srli	r16,r17,20
    7978:	000ba000 	call	ba00 <__d2b>
    797c:	d8800915 	stw	r2,36(sp)
    7980:	8001651e 	bne	r16,zero,7f18 <_dtoa_r+0x700>
    7984:	dd800217 	ldw	r22,8(sp)
    7988:	dc000117 	ldw	r16,4(sp)
    798c:	00800804 	movi	r2,32
    7990:	b421883a 	add	r16,r22,r16
    7994:	80c10c84 	addi	r3,r16,1074
    7998:	10c2d10e 	bge	r2,r3,84e0 <_dtoa_r+0xcc8>
    799c:	00801004 	movi	r2,64
    79a0:	81010484 	addi	r4,r16,1042
    79a4:	10c7c83a 	sub	r3,r2,r3
    79a8:	9108d83a 	srl	r4,r18,r4
    79ac:	88e2983a 	sll	r17,r17,r3
    79b0:	2448b03a 	or	r4,r4,r17
    79b4:	000f06c0 	call	f06c <__floatunsidf>
    79b8:	017f8434 	movhi	r5,65040
    79bc:	01800044 	movi	r6,1
    79c0:	1009883a 	mov	r4,r2
    79c4:	194b883a 	add	r5,r3,r5
    79c8:	843fffc4 	addi	r16,r16,-1
    79cc:	d9801115 	stw	r6,68(sp)
    79d0:	000d883a 	mov	r6,zero
    79d4:	01cffe34 	movhi	r7,16376
    79d8:	000401c0 	call	401c <__subdf3>
    79dc:	0198dbf4 	movhi	r6,25455
    79e0:	01cff4f4 	movhi	r7,16339
    79e4:	3190d844 	addi	r6,r6,17249
    79e8:	39e1e9c4 	addi	r7,r7,-30809
    79ec:	1009883a 	mov	r4,r2
    79f0:	180b883a 	mov	r5,r3
    79f4:	00039040 	call	3904 <__muldf3>
    79f8:	01a2d874 	movhi	r6,35681
    79fc:	01cff1f4 	movhi	r7,16327
    7a00:	31b22cc4 	addi	r6,r6,-14157
    7a04:	39e28a04 	addi	r7,r7,-30168
    7a08:	180b883a 	mov	r5,r3
    7a0c:	1009883a 	mov	r4,r2
    7a10:	00025a00 	call	25a0 <__adddf3>
    7a14:	8009883a 	mov	r4,r16
    7a18:	1029883a 	mov	r20,r2
    7a1c:	1823883a 	mov	r17,r3
    7a20:	00049180 	call	4918 <__floatsidf>
    7a24:	019427f4 	movhi	r6,20639
    7a28:	01cff4f4 	movhi	r7,16339
    7a2c:	319e7ec4 	addi	r6,r6,31227
    7a30:	39d104c4 	addi	r7,r7,17427
    7a34:	1009883a 	mov	r4,r2
    7a38:	180b883a 	mov	r5,r3
    7a3c:	00039040 	call	3904 <__muldf3>
    7a40:	100d883a 	mov	r6,r2
    7a44:	180f883a 	mov	r7,r3
    7a48:	a009883a 	mov	r4,r20
    7a4c:	880b883a 	mov	r5,r17
    7a50:	00025a00 	call	25a0 <__adddf3>
    7a54:	1009883a 	mov	r4,r2
    7a58:	180b883a 	mov	r5,r3
    7a5c:	1029883a 	mov	r20,r2
    7a60:	1823883a 	mov	r17,r3
    7a64:	000efec0 	call	efec <__fixdfsi>
    7a68:	000d883a 	mov	r6,zero
    7a6c:	000f883a 	mov	r7,zero
    7a70:	a009883a 	mov	r4,r20
    7a74:	880b883a 	mov	r5,r17
    7a78:	d8800515 	stw	r2,20(sp)
    7a7c:	00038100 	call	3810 <__ledf2>
    7a80:	10028716 	blt	r2,zero,84a0 <_dtoa_r+0xc88>
    7a84:	d8c00517 	ldw	r3,20(sp)
    7a88:	00800584 	movi	r2,22
    7a8c:	10c27536 	bltu	r2,r3,8464 <_dtoa_r+0xc4c>
    7a90:	180490fa 	slli	r2,r3,3
    7a94:	00c00074 	movhi	r3,1
    7a98:	18c49b04 	addi	r3,r3,4716
    7a9c:	1885883a 	add	r2,r3,r2
    7aa0:	11000017 	ldw	r4,0(r2)
    7aa4:	11400117 	ldw	r5,4(r2)
    7aa8:	900d883a 	mov	r6,r18
    7aac:	980f883a 	mov	r7,r19
    7ab0:	00037340 	call	3734 <__gedf2>
    7ab4:	00828d0e 	bge	zero,r2,84ec <_dtoa_r+0xcd4>
    7ab8:	d9000517 	ldw	r4,20(sp)
    7abc:	d8000e15 	stw	zero,56(sp)
    7ac0:	213fffc4 	addi	r4,r4,-1
    7ac4:	d9000515 	stw	r4,20(sp)
    7ac8:	b42dc83a 	sub	r22,r22,r16
    7acc:	b5bfffc4 	addi	r22,r22,-1
    7ad0:	b0026f16 	blt	r22,zero,8490 <_dtoa_r+0xc78>
    7ad4:	d8000815 	stw	zero,32(sp)
    7ad8:	d9c00517 	ldw	r7,20(sp)
    7adc:	38026416 	blt	r7,zero,8470 <_dtoa_r+0xc58>
    7ae0:	b1ed883a 	add	r22,r22,r7
    7ae4:	d9c00d15 	stw	r7,52(sp)
    7ae8:	d8000a15 	stw	zero,40(sp)
    7aec:	d9800317 	ldw	r6,12(sp)
    7af0:	00800244 	movi	r2,9
    7af4:	11811436 	bltu	r2,r6,7f48 <_dtoa_r+0x730>
    7af8:	00800144 	movi	r2,5
    7afc:	1184e10e 	bge	r2,r6,8e84 <_dtoa_r+0x166c>
    7b00:	31bfff04 	addi	r6,r6,-4
    7b04:	d9800315 	stw	r6,12(sp)
    7b08:	0023883a 	mov	r17,zero
    7b0c:	d9800317 	ldw	r6,12(sp)
    7b10:	008000c4 	movi	r2,3
    7b14:	30836726 	beq	r6,r2,88b4 <_dtoa_r+0x109c>
    7b18:	1183410e 	bge	r2,r6,8820 <_dtoa_r+0x1008>
    7b1c:	d9c00317 	ldw	r7,12(sp)
    7b20:	00800104 	movi	r2,4
    7b24:	38827c26 	beq	r7,r2,8518 <_dtoa_r+0xd00>
    7b28:	00800144 	movi	r2,5
    7b2c:	3884c41e 	bne	r7,r2,8e40 <_dtoa_r+0x1628>
    7b30:	00800044 	movi	r2,1
    7b34:	d8800b15 	stw	r2,44(sp)
    7b38:	d8c00517 	ldw	r3,20(sp)
    7b3c:	d9002217 	ldw	r4,136(sp)
    7b40:	1907883a 	add	r3,r3,r4
    7b44:	19800044 	addi	r6,r3,1
    7b48:	d8c00c15 	stw	r3,48(sp)
    7b4c:	d9800615 	stw	r6,24(sp)
    7b50:	0183a40e 	bge	zero,r6,89e4 <_dtoa_r+0x11cc>
    7b54:	d9800617 	ldw	r6,24(sp)
    7b58:	3021883a 	mov	r16,r6
    7b5c:	e0001115 	stw	zero,68(fp)
    7b60:	008005c4 	movi	r2,23
    7b64:	1184c92e 	bgeu	r2,r6,8e8c <_dtoa_r+0x1674>
    7b68:	00c00044 	movi	r3,1
    7b6c:	00800104 	movi	r2,4
    7b70:	1085883a 	add	r2,r2,r2
    7b74:	11000504 	addi	r4,r2,20
    7b78:	180b883a 	mov	r5,r3
    7b7c:	18c00044 	addi	r3,r3,1
    7b80:	313ffb2e 	bgeu	r6,r4,7b70 <__alt_data_end+0xff807b70>
    7b84:	e1401115 	stw	r5,68(fp)
    7b88:	e009883a 	mov	r4,fp
    7b8c:	000ad6c0 	call	ad6c <_Balloc>
    7b90:	d8800715 	stw	r2,28(sp)
    7b94:	e0801015 	stw	r2,64(fp)
    7b98:	00800384 	movi	r2,14
    7b9c:	1400f736 	bltu	r2,r16,7f7c <_dtoa_r+0x764>
    7ba0:	8800f626 	beq	r17,zero,7f7c <_dtoa_r+0x764>
    7ba4:	d9c00517 	ldw	r7,20(sp)
    7ba8:	01c39a0e 	bge	zero,r7,8a14 <_dtoa_r+0x11fc>
    7bac:	388003cc 	andi	r2,r7,15
    7bb0:	100490fa 	slli	r2,r2,3
    7bb4:	382bd13a 	srai	r21,r7,4
    7bb8:	00c00074 	movhi	r3,1
    7bbc:	18c49b04 	addi	r3,r3,4716
    7bc0:	1885883a 	add	r2,r3,r2
    7bc4:	a8c0040c 	andi	r3,r21,16
    7bc8:	12400017 	ldw	r9,0(r2)
    7bcc:	12000117 	ldw	r8,4(r2)
    7bd0:	18037926 	beq	r3,zero,89b8 <_dtoa_r+0x11a0>
    7bd4:	00800074 	movhi	r2,1
    7bd8:	10849104 	addi	r2,r2,4676
    7bdc:	11800817 	ldw	r6,32(r2)
    7be0:	11c00917 	ldw	r7,36(r2)
    7be4:	9009883a 	mov	r4,r18
    7be8:	980b883a 	mov	r5,r19
    7bec:	da001715 	stw	r8,92(sp)
    7bf0:	da401615 	stw	r9,88(sp)
    7bf4:	0002e4c0 	call	2e4c <__divdf3>
    7bf8:	da001717 	ldw	r8,92(sp)
    7bfc:	da401617 	ldw	r9,88(sp)
    7c00:	ad4003cc 	andi	r21,r21,15
    7c04:	040000c4 	movi	r16,3
    7c08:	1023883a 	mov	r17,r2
    7c0c:	1829883a 	mov	r20,r3
    7c10:	a8001126 	beq	r21,zero,7c58 <_dtoa_r+0x440>
    7c14:	05c00074 	movhi	r23,1
    7c18:	bdc49104 	addi	r23,r23,4676
    7c1c:	4805883a 	mov	r2,r9
    7c20:	4007883a 	mov	r3,r8
    7c24:	a980004c 	andi	r6,r21,1
    7c28:	1009883a 	mov	r4,r2
    7c2c:	a82bd07a 	srai	r21,r21,1
    7c30:	180b883a 	mov	r5,r3
    7c34:	30000426 	beq	r6,zero,7c48 <_dtoa_r+0x430>
    7c38:	b9800017 	ldw	r6,0(r23)
    7c3c:	b9c00117 	ldw	r7,4(r23)
    7c40:	84000044 	addi	r16,r16,1
    7c44:	00039040 	call	3904 <__muldf3>
    7c48:	bdc00204 	addi	r23,r23,8
    7c4c:	a83ff51e 	bne	r21,zero,7c24 <__alt_data_end+0xff807c24>
    7c50:	1013883a 	mov	r9,r2
    7c54:	1811883a 	mov	r8,r3
    7c58:	480d883a 	mov	r6,r9
    7c5c:	400f883a 	mov	r7,r8
    7c60:	8809883a 	mov	r4,r17
    7c64:	a00b883a 	mov	r5,r20
    7c68:	0002e4c0 	call	2e4c <__divdf3>
    7c6c:	d8800f15 	stw	r2,60(sp)
    7c70:	d8c01015 	stw	r3,64(sp)
    7c74:	d8c00e17 	ldw	r3,56(sp)
    7c78:	18000626 	beq	r3,zero,7c94 <_dtoa_r+0x47c>
    7c7c:	d9000f17 	ldw	r4,60(sp)
    7c80:	d9401017 	ldw	r5,64(sp)
    7c84:	000d883a 	mov	r6,zero
    7c88:	01cffc34 	movhi	r7,16368
    7c8c:	00038100 	call	3810 <__ledf2>
    7c90:	10040b16 	blt	r2,zero,8cc0 <_dtoa_r+0x14a8>
    7c94:	8009883a 	mov	r4,r16
    7c98:	00049180 	call	4918 <__floatsidf>
    7c9c:	d9800f17 	ldw	r6,60(sp)
    7ca0:	d9c01017 	ldw	r7,64(sp)
    7ca4:	1009883a 	mov	r4,r2
    7ca8:	180b883a 	mov	r5,r3
    7cac:	00039040 	call	3904 <__muldf3>
    7cb0:	000d883a 	mov	r6,zero
    7cb4:	01d00734 	movhi	r7,16412
    7cb8:	1009883a 	mov	r4,r2
    7cbc:	180b883a 	mov	r5,r3
    7cc0:	00025a00 	call	25a0 <__adddf3>
    7cc4:	1021883a 	mov	r16,r2
    7cc8:	d8800617 	ldw	r2,24(sp)
    7ccc:	047f3034 	movhi	r17,64704
    7cd0:	1c63883a 	add	r17,r3,r17
    7cd4:	10031826 	beq	r2,zero,8938 <_dtoa_r+0x1120>
    7cd8:	d8c00517 	ldw	r3,20(sp)
    7cdc:	db000617 	ldw	r12,24(sp)
    7ce0:	d8c01315 	stw	r3,76(sp)
    7ce4:	d9000b17 	ldw	r4,44(sp)
    7ce8:	20038f26 	beq	r4,zero,8b28 <_dtoa_r+0x1310>
    7cec:	60bfffc4 	addi	r2,r12,-1
    7cf0:	100490fa 	slli	r2,r2,3
    7cf4:	00c00074 	movhi	r3,1
    7cf8:	18c49b04 	addi	r3,r3,4716
    7cfc:	1885883a 	add	r2,r3,r2
    7d00:	11800017 	ldw	r6,0(r2)
    7d04:	11c00117 	ldw	r7,4(r2)
    7d08:	d8800717 	ldw	r2,28(sp)
    7d0c:	0009883a 	mov	r4,zero
    7d10:	014ff834 	movhi	r5,16352
    7d14:	db001615 	stw	r12,88(sp)
    7d18:	15c00044 	addi	r23,r2,1
    7d1c:	0002e4c0 	call	2e4c <__divdf3>
    7d20:	800d883a 	mov	r6,r16
    7d24:	880f883a 	mov	r7,r17
    7d28:	1009883a 	mov	r4,r2
    7d2c:	180b883a 	mov	r5,r3
    7d30:	000401c0 	call	401c <__subdf3>
    7d34:	d9401017 	ldw	r5,64(sp)
    7d38:	d9000f17 	ldw	r4,60(sp)
    7d3c:	102b883a 	mov	r21,r2
    7d40:	d8c01215 	stw	r3,72(sp)
    7d44:	000efec0 	call	efec <__fixdfsi>
    7d48:	1009883a 	mov	r4,r2
    7d4c:	1029883a 	mov	r20,r2
    7d50:	00049180 	call	4918 <__floatsidf>
    7d54:	d9000f17 	ldw	r4,60(sp)
    7d58:	d9401017 	ldw	r5,64(sp)
    7d5c:	100d883a 	mov	r6,r2
    7d60:	180f883a 	mov	r7,r3
    7d64:	000401c0 	call	401c <__subdf3>
    7d68:	1823883a 	mov	r17,r3
    7d6c:	d8c00717 	ldw	r3,28(sp)
    7d70:	d9401217 	ldw	r5,72(sp)
    7d74:	a2000c04 	addi	r8,r20,48
    7d78:	1021883a 	mov	r16,r2
    7d7c:	1a000005 	stb	r8,0(r3)
    7d80:	800d883a 	mov	r6,r16
    7d84:	880f883a 	mov	r7,r17
    7d88:	a809883a 	mov	r4,r21
    7d8c:	4029883a 	mov	r20,r8
    7d90:	00037340 	call	3734 <__gedf2>
    7d94:	00841d16 	blt	zero,r2,8e0c <_dtoa_r+0x15f4>
    7d98:	800d883a 	mov	r6,r16
    7d9c:	880f883a 	mov	r7,r17
    7da0:	0009883a 	mov	r4,zero
    7da4:	014ffc34 	movhi	r5,16368
    7da8:	000401c0 	call	401c <__subdf3>
    7dac:	d9401217 	ldw	r5,72(sp)
    7db0:	100d883a 	mov	r6,r2
    7db4:	180f883a 	mov	r7,r3
    7db8:	a809883a 	mov	r4,r21
    7dbc:	00037340 	call	3734 <__gedf2>
    7dc0:	db001617 	ldw	r12,88(sp)
    7dc4:	00840e16 	blt	zero,r2,8e00 <_dtoa_r+0x15e8>
    7dc8:	00800044 	movi	r2,1
    7dcc:	13006b0e 	bge	r2,r12,7f7c <_dtoa_r+0x764>
    7dd0:	d9000717 	ldw	r4,28(sp)
    7dd4:	dd800f15 	stw	r22,60(sp)
    7dd8:	dcc01015 	stw	r19,64(sp)
    7ddc:	2319883a 	add	r12,r4,r12
    7de0:	dcc01217 	ldw	r19,72(sp)
    7de4:	602d883a 	mov	r22,r12
    7de8:	dc801215 	stw	r18,72(sp)
    7dec:	b825883a 	mov	r18,r23
    7df0:	00000906 	br	7e18 <_dtoa_r+0x600>
    7df4:	000401c0 	call	401c <__subdf3>
    7df8:	a80d883a 	mov	r6,r21
    7dfc:	980f883a 	mov	r7,r19
    7e00:	1009883a 	mov	r4,r2
    7e04:	180b883a 	mov	r5,r3
    7e08:	00038100 	call	3810 <__ledf2>
    7e0c:	1003e816 	blt	r2,zero,8db0 <_dtoa_r+0x1598>
    7e10:	b825883a 	mov	r18,r23
    7e14:	bd83e926 	beq	r23,r22,8dbc <_dtoa_r+0x15a4>
    7e18:	a809883a 	mov	r4,r21
    7e1c:	980b883a 	mov	r5,r19
    7e20:	000d883a 	mov	r6,zero
    7e24:	01d00934 	movhi	r7,16420
    7e28:	00039040 	call	3904 <__muldf3>
    7e2c:	000d883a 	mov	r6,zero
    7e30:	01d00934 	movhi	r7,16420
    7e34:	8009883a 	mov	r4,r16
    7e38:	880b883a 	mov	r5,r17
    7e3c:	102b883a 	mov	r21,r2
    7e40:	1827883a 	mov	r19,r3
    7e44:	00039040 	call	3904 <__muldf3>
    7e48:	180b883a 	mov	r5,r3
    7e4c:	1009883a 	mov	r4,r2
    7e50:	1821883a 	mov	r16,r3
    7e54:	1023883a 	mov	r17,r2
    7e58:	000efec0 	call	efec <__fixdfsi>
    7e5c:	1009883a 	mov	r4,r2
    7e60:	1029883a 	mov	r20,r2
    7e64:	00049180 	call	4918 <__floatsidf>
    7e68:	8809883a 	mov	r4,r17
    7e6c:	800b883a 	mov	r5,r16
    7e70:	100d883a 	mov	r6,r2
    7e74:	180f883a 	mov	r7,r3
    7e78:	000401c0 	call	401c <__subdf3>
    7e7c:	a5000c04 	addi	r20,r20,48
    7e80:	a80d883a 	mov	r6,r21
    7e84:	980f883a 	mov	r7,r19
    7e88:	1009883a 	mov	r4,r2
    7e8c:	180b883a 	mov	r5,r3
    7e90:	95000005 	stb	r20,0(r18)
    7e94:	1021883a 	mov	r16,r2
    7e98:	1823883a 	mov	r17,r3
    7e9c:	00038100 	call	3810 <__ledf2>
    7ea0:	bdc00044 	addi	r23,r23,1
    7ea4:	800d883a 	mov	r6,r16
    7ea8:	880f883a 	mov	r7,r17
    7eac:	0009883a 	mov	r4,zero
    7eb0:	014ffc34 	movhi	r5,16368
    7eb4:	103fcf0e 	bge	r2,zero,7df4 <__alt_data_end+0xff807df4>
    7eb8:	d8c01317 	ldw	r3,76(sp)
    7ebc:	d8c00515 	stw	r3,20(sp)
    7ec0:	d9400917 	ldw	r5,36(sp)
    7ec4:	e009883a 	mov	r4,fp
    7ec8:	000ae140 	call	ae14 <_Bfree>
    7ecc:	d9000517 	ldw	r4,20(sp)
    7ed0:	d9802317 	ldw	r6,140(sp)
    7ed4:	d9c02517 	ldw	r7,148(sp)
    7ed8:	b8000005 	stb	zero,0(r23)
    7edc:	20800044 	addi	r2,r4,1
    7ee0:	30800015 	stw	r2,0(r6)
    7ee4:	3802aa26 	beq	r7,zero,8990 <_dtoa_r+0x1178>
    7ee8:	3dc00015 	stw	r23,0(r7)
    7eec:	d8800717 	ldw	r2,28(sp)
    7ef0:	003e7906 	br	78d8 <__alt_data_end+0xff8078d8>
    7ef4:	00800434 	movhi	r2,16
    7ef8:	10bfffc4 	addi	r2,r2,-1
    7efc:	88a2703a 	and	r17,r17,r2
    7f00:	883e851e 	bne	r17,zero,7918 <__alt_data_end+0xff807918>
    7f04:	00800074 	movhi	r2,1
    7f08:	10847d04 	addi	r2,r2,4596
    7f0c:	003e8406 	br	7920 <__alt_data_end+0xff807920>
    7f10:	10c00204 	addi	r3,r2,8
    7f14:	003e8706 	br	7934 <__alt_data_end+0xff807934>
    7f18:	01400434 	movhi	r5,16
    7f1c:	297fffc4 	addi	r5,r5,-1
    7f20:	994a703a 	and	r5,r19,r5
    7f24:	9009883a 	mov	r4,r18
    7f28:	843f0044 	addi	r16,r16,-1023
    7f2c:	294ffc34 	orhi	r5,r5,16368
    7f30:	dd800217 	ldw	r22,8(sp)
    7f34:	d8001115 	stw	zero,68(sp)
    7f38:	003ea506 	br	79d0 <__alt_data_end+0xff8079d0>
    7f3c:	00800074 	movhi	r2,1
    7f40:	1083f404 	addi	r2,r2,4048
    7f44:	003e6406 	br	78d8 <__alt_data_end+0xff8078d8>
    7f48:	e0001115 	stw	zero,68(fp)
    7f4c:	000b883a 	mov	r5,zero
    7f50:	e009883a 	mov	r4,fp
    7f54:	000ad6c0 	call	ad6c <_Balloc>
    7f58:	01bfffc4 	movi	r6,-1
    7f5c:	01c00044 	movi	r7,1
    7f60:	d8800715 	stw	r2,28(sp)
    7f64:	d9800c15 	stw	r6,48(sp)
    7f68:	e0801015 	stw	r2,64(fp)
    7f6c:	d8000315 	stw	zero,12(sp)
    7f70:	d9c00b15 	stw	r7,44(sp)
    7f74:	d9800615 	stw	r6,24(sp)
    7f78:	d8002215 	stw	zero,136(sp)
    7f7c:	d8800117 	ldw	r2,4(sp)
    7f80:	10008916 	blt	r2,zero,81a8 <_dtoa_r+0x990>
    7f84:	d9000517 	ldw	r4,20(sp)
    7f88:	00c00384 	movi	r3,14
    7f8c:	19008616 	blt	r3,r4,81a8 <_dtoa_r+0x990>
    7f90:	200490fa 	slli	r2,r4,3
    7f94:	00c00074 	movhi	r3,1
    7f98:	d9802217 	ldw	r6,136(sp)
    7f9c:	18c49b04 	addi	r3,r3,4716
    7fa0:	1885883a 	add	r2,r3,r2
    7fa4:	14000017 	ldw	r16,0(r2)
    7fa8:	14400117 	ldw	r17,4(r2)
    7fac:	30016316 	blt	r6,zero,853c <_dtoa_r+0xd24>
    7fb0:	800d883a 	mov	r6,r16
    7fb4:	880f883a 	mov	r7,r17
    7fb8:	9009883a 	mov	r4,r18
    7fbc:	980b883a 	mov	r5,r19
    7fc0:	0002e4c0 	call	2e4c <__divdf3>
    7fc4:	180b883a 	mov	r5,r3
    7fc8:	1009883a 	mov	r4,r2
    7fcc:	000efec0 	call	efec <__fixdfsi>
    7fd0:	1009883a 	mov	r4,r2
    7fd4:	102b883a 	mov	r21,r2
    7fd8:	00049180 	call	4918 <__floatsidf>
    7fdc:	800d883a 	mov	r6,r16
    7fe0:	880f883a 	mov	r7,r17
    7fe4:	1009883a 	mov	r4,r2
    7fe8:	180b883a 	mov	r5,r3
    7fec:	00039040 	call	3904 <__muldf3>
    7ff0:	100d883a 	mov	r6,r2
    7ff4:	180f883a 	mov	r7,r3
    7ff8:	9009883a 	mov	r4,r18
    7ffc:	980b883a 	mov	r5,r19
    8000:	000401c0 	call	401c <__subdf3>
    8004:	d9c00717 	ldw	r7,28(sp)
    8008:	1009883a 	mov	r4,r2
    800c:	a8800c04 	addi	r2,r21,48
    8010:	38800005 	stb	r2,0(r7)
    8014:	3dc00044 	addi	r23,r7,1
    8018:	d9c00617 	ldw	r7,24(sp)
    801c:	01800044 	movi	r6,1
    8020:	180b883a 	mov	r5,r3
    8024:	2005883a 	mov	r2,r4
    8028:	39803826 	beq	r7,r6,810c <_dtoa_r+0x8f4>
    802c:	000d883a 	mov	r6,zero
    8030:	01d00934 	movhi	r7,16420
    8034:	00039040 	call	3904 <__muldf3>
    8038:	000d883a 	mov	r6,zero
    803c:	000f883a 	mov	r7,zero
    8040:	1009883a 	mov	r4,r2
    8044:	180b883a 	mov	r5,r3
    8048:	1025883a 	mov	r18,r2
    804c:	1827883a 	mov	r19,r3
    8050:	000ef640 	call	ef64 <__eqdf2>
    8054:	103f9a26 	beq	r2,zero,7ec0 <__alt_data_end+0xff807ec0>
    8058:	d9c00617 	ldw	r7,24(sp)
    805c:	d8c00717 	ldw	r3,28(sp)
    8060:	b829883a 	mov	r20,r23
    8064:	38bfffc4 	addi	r2,r7,-1
    8068:	18ad883a 	add	r22,r3,r2
    806c:	00000a06 	br	8098 <_dtoa_r+0x880>
    8070:	00039040 	call	3904 <__muldf3>
    8074:	000d883a 	mov	r6,zero
    8078:	000f883a 	mov	r7,zero
    807c:	1009883a 	mov	r4,r2
    8080:	180b883a 	mov	r5,r3
    8084:	1025883a 	mov	r18,r2
    8088:	1827883a 	mov	r19,r3
    808c:	b829883a 	mov	r20,r23
    8090:	000ef640 	call	ef64 <__eqdf2>
    8094:	103f8a26 	beq	r2,zero,7ec0 <__alt_data_end+0xff807ec0>
    8098:	800d883a 	mov	r6,r16
    809c:	880f883a 	mov	r7,r17
    80a0:	9009883a 	mov	r4,r18
    80a4:	980b883a 	mov	r5,r19
    80a8:	0002e4c0 	call	2e4c <__divdf3>
    80ac:	180b883a 	mov	r5,r3
    80b0:	1009883a 	mov	r4,r2
    80b4:	000efec0 	call	efec <__fixdfsi>
    80b8:	1009883a 	mov	r4,r2
    80bc:	102b883a 	mov	r21,r2
    80c0:	00049180 	call	4918 <__floatsidf>
    80c4:	800d883a 	mov	r6,r16
    80c8:	880f883a 	mov	r7,r17
    80cc:	1009883a 	mov	r4,r2
    80d0:	180b883a 	mov	r5,r3
    80d4:	00039040 	call	3904 <__muldf3>
    80d8:	100d883a 	mov	r6,r2
    80dc:	180f883a 	mov	r7,r3
    80e0:	9009883a 	mov	r4,r18
    80e4:	980b883a 	mov	r5,r19
    80e8:	000401c0 	call	401c <__subdf3>
    80ec:	aa000c04 	addi	r8,r21,48
    80f0:	a2000005 	stb	r8,0(r20)
    80f4:	000d883a 	mov	r6,zero
    80f8:	01d00934 	movhi	r7,16420
    80fc:	1009883a 	mov	r4,r2
    8100:	180b883a 	mov	r5,r3
    8104:	a5c00044 	addi	r23,r20,1
    8108:	b53fd91e 	bne	r22,r20,8070 <__alt_data_end+0xff808070>
    810c:	100d883a 	mov	r6,r2
    8110:	180f883a 	mov	r7,r3
    8114:	1009883a 	mov	r4,r2
    8118:	180b883a 	mov	r5,r3
    811c:	00025a00 	call	25a0 <__adddf3>
    8120:	100d883a 	mov	r6,r2
    8124:	180f883a 	mov	r7,r3
    8128:	8009883a 	mov	r4,r16
    812c:	880b883a 	mov	r5,r17
    8130:	1027883a 	mov	r19,r2
    8134:	1825883a 	mov	r18,r3
    8138:	00038100 	call	3810 <__ledf2>
    813c:	10000816 	blt	r2,zero,8160 <_dtoa_r+0x948>
    8140:	980d883a 	mov	r6,r19
    8144:	900f883a 	mov	r7,r18
    8148:	8009883a 	mov	r4,r16
    814c:	880b883a 	mov	r5,r17
    8150:	000ef640 	call	ef64 <__eqdf2>
    8154:	103f5a1e 	bne	r2,zero,7ec0 <__alt_data_end+0xff807ec0>
    8158:	ad40004c 	andi	r21,r21,1
    815c:	a83f5826 	beq	r21,zero,7ec0 <__alt_data_end+0xff807ec0>
    8160:	bd3fffc3 	ldbu	r20,-1(r23)
    8164:	b8bfffc4 	addi	r2,r23,-1
    8168:	1007883a 	mov	r3,r2
    816c:	01400e44 	movi	r5,57
    8170:	d9800717 	ldw	r6,28(sp)
    8174:	00000506 	br	818c <_dtoa_r+0x974>
    8178:	18ffffc4 	addi	r3,r3,-1
    817c:	11824726 	beq	r2,r6,8a9c <_dtoa_r+0x1284>
    8180:	1d000003 	ldbu	r20,0(r3)
    8184:	102f883a 	mov	r23,r2
    8188:	10bfffc4 	addi	r2,r2,-1
    818c:	a1003fcc 	andi	r4,r20,255
    8190:	2100201c 	xori	r4,r4,128
    8194:	213fe004 	addi	r4,r4,-128
    8198:	217ff726 	beq	r4,r5,8178 <__alt_data_end+0xff808178>
    819c:	a2000044 	addi	r8,r20,1
    81a0:	12000005 	stb	r8,0(r2)
    81a4:	003f4606 	br	7ec0 <__alt_data_end+0xff807ec0>
    81a8:	d9000b17 	ldw	r4,44(sp)
    81ac:	2000c826 	beq	r4,zero,84d0 <_dtoa_r+0xcb8>
    81b0:	d9800317 	ldw	r6,12(sp)
    81b4:	00c00044 	movi	r3,1
    81b8:	1980f90e 	bge	r3,r6,85a0 <_dtoa_r+0xd88>
    81bc:	d8800617 	ldw	r2,24(sp)
    81c0:	d8c00a17 	ldw	r3,40(sp)
    81c4:	157fffc4 	addi	r21,r2,-1
    81c8:	1d41f316 	blt	r3,r21,8998 <_dtoa_r+0x1180>
    81cc:	1d6bc83a 	sub	r21,r3,r21
    81d0:	d9c00617 	ldw	r7,24(sp)
    81d4:	3802aa16 	blt	r7,zero,8c80 <_dtoa_r+0x1468>
    81d8:	dd000817 	ldw	r20,32(sp)
    81dc:	d8800617 	ldw	r2,24(sp)
    81e0:	d8c00817 	ldw	r3,32(sp)
    81e4:	01400044 	movi	r5,1
    81e8:	e009883a 	mov	r4,fp
    81ec:	1887883a 	add	r3,r3,r2
    81f0:	d8c00815 	stw	r3,32(sp)
    81f4:	b0ad883a 	add	r22,r22,r2
    81f8:	000b1780 	call	b178 <__i2b>
    81fc:	1023883a 	mov	r17,r2
    8200:	a0000826 	beq	r20,zero,8224 <_dtoa_r+0xa0c>
    8204:	0580070e 	bge	zero,r22,8224 <_dtoa_r+0xa0c>
    8208:	a005883a 	mov	r2,r20
    820c:	b500b916 	blt	r22,r20,84f4 <_dtoa_r+0xcdc>
    8210:	d9000817 	ldw	r4,32(sp)
    8214:	a0a9c83a 	sub	r20,r20,r2
    8218:	b0adc83a 	sub	r22,r22,r2
    821c:	2089c83a 	sub	r4,r4,r2
    8220:	d9000815 	stw	r4,32(sp)
    8224:	d9800a17 	ldw	r6,40(sp)
    8228:	0181810e 	bge	zero,r6,8830 <_dtoa_r+0x1018>
    822c:	d9c00b17 	ldw	r7,44(sp)
    8230:	3800b326 	beq	r7,zero,8500 <_dtoa_r+0xce8>
    8234:	a800b226 	beq	r21,zero,8500 <_dtoa_r+0xce8>
    8238:	880b883a 	mov	r5,r17
    823c:	a80d883a 	mov	r6,r21
    8240:	e009883a 	mov	r4,fp
    8244:	000b3ac0 	call	b3ac <__pow5mult>
    8248:	d9800917 	ldw	r6,36(sp)
    824c:	100b883a 	mov	r5,r2
    8250:	e009883a 	mov	r4,fp
    8254:	1023883a 	mov	r17,r2
    8258:	000b1b40 	call	b1b4 <__multiply>
    825c:	1021883a 	mov	r16,r2
    8260:	d8800a17 	ldw	r2,40(sp)
    8264:	d9400917 	ldw	r5,36(sp)
    8268:	e009883a 	mov	r4,fp
    826c:	1545c83a 	sub	r2,r2,r21
    8270:	d8800a15 	stw	r2,40(sp)
    8274:	000ae140 	call	ae14 <_Bfree>
    8278:	d8c00a17 	ldw	r3,40(sp)
    827c:	18009f1e 	bne	r3,zero,84fc <_dtoa_r+0xce4>
    8280:	05c00044 	movi	r23,1
    8284:	e009883a 	mov	r4,fp
    8288:	b80b883a 	mov	r5,r23
    828c:	000b1780 	call	b178 <__i2b>
    8290:	d9000d17 	ldw	r4,52(sp)
    8294:	102b883a 	mov	r21,r2
    8298:	2000ce26 	beq	r4,zero,85d4 <_dtoa_r+0xdbc>
    829c:	200d883a 	mov	r6,r4
    82a0:	100b883a 	mov	r5,r2
    82a4:	e009883a 	mov	r4,fp
    82a8:	000b3ac0 	call	b3ac <__pow5mult>
    82ac:	d9800317 	ldw	r6,12(sp)
    82b0:	102b883a 	mov	r21,r2
    82b4:	b981810e 	bge	r23,r6,88bc <_dtoa_r+0x10a4>
    82b8:	0027883a 	mov	r19,zero
    82bc:	a8800417 	ldw	r2,16(r21)
    82c0:	05c00804 	movi	r23,32
    82c4:	10800104 	addi	r2,r2,4
    82c8:	1085883a 	add	r2,r2,r2
    82cc:	1085883a 	add	r2,r2,r2
    82d0:	a885883a 	add	r2,r21,r2
    82d4:	11000017 	ldw	r4,0(r2)
    82d8:	000b0600 	call	b060 <__hi0bits>
    82dc:	b885c83a 	sub	r2,r23,r2
    82e0:	1585883a 	add	r2,r2,r22
    82e4:	108007cc 	andi	r2,r2,31
    82e8:	1000b326 	beq	r2,zero,85b8 <_dtoa_r+0xda0>
    82ec:	00c00804 	movi	r3,32
    82f0:	1887c83a 	sub	r3,r3,r2
    82f4:	01000104 	movi	r4,4
    82f8:	20c2cd0e 	bge	r4,r3,8e30 <_dtoa_r+0x1618>
    82fc:	00c00704 	movi	r3,28
    8300:	1885c83a 	sub	r2,r3,r2
    8304:	d8c00817 	ldw	r3,32(sp)
    8308:	a0a9883a 	add	r20,r20,r2
    830c:	b0ad883a 	add	r22,r22,r2
    8310:	1887883a 	add	r3,r3,r2
    8314:	d8c00815 	stw	r3,32(sp)
    8318:	d9800817 	ldw	r6,32(sp)
    831c:	0180040e 	bge	zero,r6,8330 <_dtoa_r+0xb18>
    8320:	800b883a 	mov	r5,r16
    8324:	e009883a 	mov	r4,fp
    8328:	000b4ec0 	call	b4ec <__lshift>
    832c:	1021883a 	mov	r16,r2
    8330:	0580050e 	bge	zero,r22,8348 <_dtoa_r+0xb30>
    8334:	a80b883a 	mov	r5,r21
    8338:	b00d883a 	mov	r6,r22
    833c:	e009883a 	mov	r4,fp
    8340:	000b4ec0 	call	b4ec <__lshift>
    8344:	102b883a 	mov	r21,r2
    8348:	d9c00e17 	ldw	r7,56(sp)
    834c:	3801211e 	bne	r7,zero,87d4 <_dtoa_r+0xfbc>
    8350:	d9800617 	ldw	r6,24(sp)
    8354:	0181380e 	bge	zero,r6,8838 <_dtoa_r+0x1020>
    8358:	d8c00b17 	ldw	r3,44(sp)
    835c:	1800ab1e 	bne	r3,zero,860c <_dtoa_r+0xdf4>
    8360:	dc800717 	ldw	r18,28(sp)
    8364:	dcc00617 	ldw	r19,24(sp)
    8368:	9029883a 	mov	r20,r18
    836c:	00000206 	br	8378 <_dtoa_r+0xb60>
    8370:	000ae3c0 	call	ae3c <__multadd>
    8374:	1021883a 	mov	r16,r2
    8378:	a80b883a 	mov	r5,r21
    837c:	8009883a 	mov	r4,r16
    8380:	00076180 	call	7618 <quorem>
    8384:	10800c04 	addi	r2,r2,48
    8388:	90800005 	stb	r2,0(r18)
    838c:	94800044 	addi	r18,r18,1
    8390:	9507c83a 	sub	r3,r18,r20
    8394:	000f883a 	mov	r7,zero
    8398:	01800284 	movi	r6,10
    839c:	800b883a 	mov	r5,r16
    83a0:	e009883a 	mov	r4,fp
    83a4:	1cfff216 	blt	r3,r19,8370 <__alt_data_end+0xff808370>
    83a8:	1011883a 	mov	r8,r2
    83ac:	d8800617 	ldw	r2,24(sp)
    83b0:	0082370e 	bge	zero,r2,8c90 <_dtoa_r+0x1478>
    83b4:	d9000717 	ldw	r4,28(sp)
    83b8:	0025883a 	mov	r18,zero
    83bc:	20af883a 	add	r23,r4,r2
    83c0:	01800044 	movi	r6,1
    83c4:	800b883a 	mov	r5,r16
    83c8:	e009883a 	mov	r4,fp
    83cc:	da001715 	stw	r8,92(sp)
    83d0:	000b4ec0 	call	b4ec <__lshift>
    83d4:	a80b883a 	mov	r5,r21
    83d8:	1009883a 	mov	r4,r2
    83dc:	d8800915 	stw	r2,36(sp)
    83e0:	000b6340 	call	b634 <__mcmp>
    83e4:	da001717 	ldw	r8,92(sp)
    83e8:	0081800e 	bge	zero,r2,89ec <_dtoa_r+0x11d4>
    83ec:	b93fffc3 	ldbu	r4,-1(r23)
    83f0:	b8bfffc4 	addi	r2,r23,-1
    83f4:	1007883a 	mov	r3,r2
    83f8:	01800e44 	movi	r6,57
    83fc:	d9c00717 	ldw	r7,28(sp)
    8400:	00000506 	br	8418 <_dtoa_r+0xc00>
    8404:	18ffffc4 	addi	r3,r3,-1
    8408:	11c12326 	beq	r2,r7,8898 <_dtoa_r+0x1080>
    840c:	19000003 	ldbu	r4,0(r3)
    8410:	102f883a 	mov	r23,r2
    8414:	10bfffc4 	addi	r2,r2,-1
    8418:	21403fcc 	andi	r5,r4,255
    841c:	2940201c 	xori	r5,r5,128
    8420:	297fe004 	addi	r5,r5,-128
    8424:	29bff726 	beq	r5,r6,8404 <__alt_data_end+0xff808404>
    8428:	21000044 	addi	r4,r4,1
    842c:	11000005 	stb	r4,0(r2)
    8430:	a80b883a 	mov	r5,r21
    8434:	e009883a 	mov	r4,fp
    8438:	000ae140 	call	ae14 <_Bfree>
    843c:	883ea026 	beq	r17,zero,7ec0 <__alt_data_end+0xff807ec0>
    8440:	90000426 	beq	r18,zero,8454 <_dtoa_r+0xc3c>
    8444:	94400326 	beq	r18,r17,8454 <_dtoa_r+0xc3c>
    8448:	900b883a 	mov	r5,r18
    844c:	e009883a 	mov	r4,fp
    8450:	000ae140 	call	ae14 <_Bfree>
    8454:	880b883a 	mov	r5,r17
    8458:	e009883a 	mov	r4,fp
    845c:	000ae140 	call	ae14 <_Bfree>
    8460:	003e9706 	br	7ec0 <__alt_data_end+0xff807ec0>
    8464:	01800044 	movi	r6,1
    8468:	d9800e15 	stw	r6,56(sp)
    846c:	003d9606 	br	7ac8 <__alt_data_end+0xff807ac8>
    8470:	d8800817 	ldw	r2,32(sp)
    8474:	d8c00517 	ldw	r3,20(sp)
    8478:	d8000d15 	stw	zero,52(sp)
    847c:	10c5c83a 	sub	r2,r2,r3
    8480:	00c9c83a 	sub	r4,zero,r3
    8484:	d8800815 	stw	r2,32(sp)
    8488:	d9000a15 	stw	r4,40(sp)
    848c:	003d9706 	br	7aec <__alt_data_end+0xff807aec>
    8490:	05adc83a 	sub	r22,zero,r22
    8494:	dd800815 	stw	r22,32(sp)
    8498:	002d883a 	mov	r22,zero
    849c:	003d8e06 	br	7ad8 <__alt_data_end+0xff807ad8>
    84a0:	d9000517 	ldw	r4,20(sp)
    84a4:	00049180 	call	4918 <__floatsidf>
    84a8:	100d883a 	mov	r6,r2
    84ac:	180f883a 	mov	r7,r3
    84b0:	a009883a 	mov	r4,r20
    84b4:	880b883a 	mov	r5,r17
    84b8:	000ef640 	call	ef64 <__eqdf2>
    84bc:	103d7126 	beq	r2,zero,7a84 <__alt_data_end+0xff807a84>
    84c0:	d9c00517 	ldw	r7,20(sp)
    84c4:	39ffffc4 	addi	r7,r7,-1
    84c8:	d9c00515 	stw	r7,20(sp)
    84cc:	003d6d06 	br	7a84 <__alt_data_end+0xff807a84>
    84d0:	dd400a17 	ldw	r21,40(sp)
    84d4:	dd000817 	ldw	r20,32(sp)
    84d8:	0023883a 	mov	r17,zero
    84dc:	003f4806 	br	8200 <__alt_data_end+0xff808200>
    84e0:	10e3c83a 	sub	r17,r2,r3
    84e4:	9448983a 	sll	r4,r18,r17
    84e8:	003d3206 	br	79b4 <__alt_data_end+0xff8079b4>
    84ec:	d8000e15 	stw	zero,56(sp)
    84f0:	003d7506 	br	7ac8 <__alt_data_end+0xff807ac8>
    84f4:	b005883a 	mov	r2,r22
    84f8:	003f4506 	br	8210 <__alt_data_end+0xff808210>
    84fc:	dc000915 	stw	r16,36(sp)
    8500:	d9800a17 	ldw	r6,40(sp)
    8504:	d9400917 	ldw	r5,36(sp)
    8508:	e009883a 	mov	r4,fp
    850c:	000b3ac0 	call	b3ac <__pow5mult>
    8510:	1021883a 	mov	r16,r2
    8514:	003f5a06 	br	8280 <__alt_data_end+0xff808280>
    8518:	01c00044 	movi	r7,1
    851c:	d9c00b15 	stw	r7,44(sp)
    8520:	d8802217 	ldw	r2,136(sp)
    8524:	0081280e 	bge	zero,r2,89c8 <_dtoa_r+0x11b0>
    8528:	100d883a 	mov	r6,r2
    852c:	1021883a 	mov	r16,r2
    8530:	d8800c15 	stw	r2,48(sp)
    8534:	d8800615 	stw	r2,24(sp)
    8538:	003d8806 	br	7b5c <__alt_data_end+0xff807b5c>
    853c:	d8800617 	ldw	r2,24(sp)
    8540:	00be9b16 	blt	zero,r2,7fb0 <__alt_data_end+0xff807fb0>
    8544:	10010f1e 	bne	r2,zero,8984 <_dtoa_r+0x116c>
    8548:	880b883a 	mov	r5,r17
    854c:	000d883a 	mov	r6,zero
    8550:	01d00534 	movhi	r7,16404
    8554:	8009883a 	mov	r4,r16
    8558:	00039040 	call	3904 <__muldf3>
    855c:	900d883a 	mov	r6,r18
    8560:	980f883a 	mov	r7,r19
    8564:	1009883a 	mov	r4,r2
    8568:	180b883a 	mov	r5,r3
    856c:	00037340 	call	3734 <__gedf2>
    8570:	002b883a 	mov	r21,zero
    8574:	0023883a 	mov	r17,zero
    8578:	1000bf16 	blt	r2,zero,8878 <_dtoa_r+0x1060>
    857c:	d9802217 	ldw	r6,136(sp)
    8580:	ddc00717 	ldw	r23,28(sp)
    8584:	018c303a 	nor	r6,zero,r6
    8588:	d9800515 	stw	r6,20(sp)
    858c:	a80b883a 	mov	r5,r21
    8590:	e009883a 	mov	r4,fp
    8594:	000ae140 	call	ae14 <_Bfree>
    8598:	883e4926 	beq	r17,zero,7ec0 <__alt_data_end+0xff807ec0>
    859c:	003fad06 	br	8454 <__alt_data_end+0xff808454>
    85a0:	d9c01117 	ldw	r7,68(sp)
    85a4:	3801bc26 	beq	r7,zero,8c98 <_dtoa_r+0x1480>
    85a8:	10810cc4 	addi	r2,r2,1075
    85ac:	dd400a17 	ldw	r21,40(sp)
    85b0:	dd000817 	ldw	r20,32(sp)
    85b4:	003f0a06 	br	81e0 <__alt_data_end+0xff8081e0>
    85b8:	00800704 	movi	r2,28
    85bc:	d9000817 	ldw	r4,32(sp)
    85c0:	a0a9883a 	add	r20,r20,r2
    85c4:	b0ad883a 	add	r22,r22,r2
    85c8:	2089883a 	add	r4,r4,r2
    85cc:	d9000815 	stw	r4,32(sp)
    85d0:	003f5106 	br	8318 <__alt_data_end+0xff808318>
    85d4:	d8c00317 	ldw	r3,12(sp)
    85d8:	b8c1fc0e 	bge	r23,r3,8dcc <_dtoa_r+0x15b4>
    85dc:	0027883a 	mov	r19,zero
    85e0:	b805883a 	mov	r2,r23
    85e4:	003f3e06 	br	82e0 <__alt_data_end+0xff8082e0>
    85e8:	880b883a 	mov	r5,r17
    85ec:	e009883a 	mov	r4,fp
    85f0:	000f883a 	mov	r7,zero
    85f4:	01800284 	movi	r6,10
    85f8:	000ae3c0 	call	ae3c <__multadd>
    85fc:	d9000c17 	ldw	r4,48(sp)
    8600:	1023883a 	mov	r17,r2
    8604:	0102040e 	bge	zero,r4,8e18 <_dtoa_r+0x1600>
    8608:	d9000615 	stw	r4,24(sp)
    860c:	0500050e 	bge	zero,r20,8624 <_dtoa_r+0xe0c>
    8610:	880b883a 	mov	r5,r17
    8614:	a00d883a 	mov	r6,r20
    8618:	e009883a 	mov	r4,fp
    861c:	000b4ec0 	call	b4ec <__lshift>
    8620:	1023883a 	mov	r17,r2
    8624:	9801241e 	bne	r19,zero,8ab8 <_dtoa_r+0x12a0>
    8628:	8829883a 	mov	r20,r17
    862c:	d9000617 	ldw	r4,24(sp)
    8630:	dcc00717 	ldw	r19,28(sp)
    8634:	9480004c 	andi	r18,r18,1
    8638:	20bfffc4 	addi	r2,r4,-1
    863c:	9885883a 	add	r2,r19,r2
    8640:	d8800415 	stw	r2,16(sp)
    8644:	dc800615 	stw	r18,24(sp)
    8648:	a80b883a 	mov	r5,r21
    864c:	8009883a 	mov	r4,r16
    8650:	00076180 	call	7618 <quorem>
    8654:	880b883a 	mov	r5,r17
    8658:	8009883a 	mov	r4,r16
    865c:	102f883a 	mov	r23,r2
    8660:	000b6340 	call	b634 <__mcmp>
    8664:	a80b883a 	mov	r5,r21
    8668:	a00d883a 	mov	r6,r20
    866c:	e009883a 	mov	r4,fp
    8670:	102d883a 	mov	r22,r2
    8674:	000b6940 	call	b694 <__mdiff>
    8678:	1007883a 	mov	r3,r2
    867c:	10800317 	ldw	r2,12(r2)
    8680:	bc800c04 	addi	r18,r23,48
    8684:	180b883a 	mov	r5,r3
    8688:	10004e1e 	bne	r2,zero,87c4 <_dtoa_r+0xfac>
    868c:	8009883a 	mov	r4,r16
    8690:	d8c01615 	stw	r3,88(sp)
    8694:	000b6340 	call	b634 <__mcmp>
    8698:	d8c01617 	ldw	r3,88(sp)
    869c:	e009883a 	mov	r4,fp
    86a0:	d8801615 	stw	r2,88(sp)
    86a4:	180b883a 	mov	r5,r3
    86a8:	000ae140 	call	ae14 <_Bfree>
    86ac:	d8801617 	ldw	r2,88(sp)
    86b0:	1000041e 	bne	r2,zero,86c4 <_dtoa_r+0xeac>
    86b4:	d9800317 	ldw	r6,12(sp)
    86b8:	3000021e 	bne	r6,zero,86c4 <_dtoa_r+0xeac>
    86bc:	d8c00617 	ldw	r3,24(sp)
    86c0:	18003726 	beq	r3,zero,87a0 <_dtoa_r+0xf88>
    86c4:	b0002016 	blt	r22,zero,8748 <_dtoa_r+0xf30>
    86c8:	b000041e 	bne	r22,zero,86dc <_dtoa_r+0xec4>
    86cc:	d9000317 	ldw	r4,12(sp)
    86d0:	2000021e 	bne	r4,zero,86dc <_dtoa_r+0xec4>
    86d4:	d8c00617 	ldw	r3,24(sp)
    86d8:	18001b26 	beq	r3,zero,8748 <_dtoa_r+0xf30>
    86dc:	00810716 	blt	zero,r2,8afc <_dtoa_r+0x12e4>
    86e0:	d8c00417 	ldw	r3,16(sp)
    86e4:	9d800044 	addi	r22,r19,1
    86e8:	9c800005 	stb	r18,0(r19)
    86ec:	b02f883a 	mov	r23,r22
    86f0:	98c10626 	beq	r19,r3,8b0c <_dtoa_r+0x12f4>
    86f4:	800b883a 	mov	r5,r16
    86f8:	000f883a 	mov	r7,zero
    86fc:	01800284 	movi	r6,10
    8700:	e009883a 	mov	r4,fp
    8704:	000ae3c0 	call	ae3c <__multadd>
    8708:	1021883a 	mov	r16,r2
    870c:	000f883a 	mov	r7,zero
    8710:	01800284 	movi	r6,10
    8714:	880b883a 	mov	r5,r17
    8718:	e009883a 	mov	r4,fp
    871c:	8d002526 	beq	r17,r20,87b4 <_dtoa_r+0xf9c>
    8720:	000ae3c0 	call	ae3c <__multadd>
    8724:	a00b883a 	mov	r5,r20
    8728:	000f883a 	mov	r7,zero
    872c:	01800284 	movi	r6,10
    8730:	e009883a 	mov	r4,fp
    8734:	1023883a 	mov	r17,r2
    8738:	000ae3c0 	call	ae3c <__multadd>
    873c:	1029883a 	mov	r20,r2
    8740:	b027883a 	mov	r19,r22
    8744:	003fc006 	br	8648 <__alt_data_end+0xff808648>
    8748:	9011883a 	mov	r8,r18
    874c:	00800e0e 	bge	zero,r2,8788 <_dtoa_r+0xf70>
    8750:	800b883a 	mov	r5,r16
    8754:	01800044 	movi	r6,1
    8758:	e009883a 	mov	r4,fp
    875c:	da001715 	stw	r8,92(sp)
    8760:	000b4ec0 	call	b4ec <__lshift>
    8764:	a80b883a 	mov	r5,r21
    8768:	1009883a 	mov	r4,r2
    876c:	1021883a 	mov	r16,r2
    8770:	000b6340 	call	b634 <__mcmp>
    8774:	da001717 	ldw	r8,92(sp)
    8778:	0081960e 	bge	zero,r2,8dd4 <_dtoa_r+0x15bc>
    877c:	00800e44 	movi	r2,57
    8780:	40817026 	beq	r8,r2,8d44 <_dtoa_r+0x152c>
    8784:	ba000c44 	addi	r8,r23,49
    8788:	8825883a 	mov	r18,r17
    878c:	9dc00044 	addi	r23,r19,1
    8790:	9a000005 	stb	r8,0(r19)
    8794:	a023883a 	mov	r17,r20
    8798:	dc000915 	stw	r16,36(sp)
    879c:	003f2406 	br	8430 <__alt_data_end+0xff808430>
    87a0:	00800e44 	movi	r2,57
    87a4:	9011883a 	mov	r8,r18
    87a8:	90816626 	beq	r18,r2,8d44 <_dtoa_r+0x152c>
    87ac:	05bff516 	blt	zero,r22,8784 <__alt_data_end+0xff808784>
    87b0:	003ff506 	br	8788 <__alt_data_end+0xff808788>
    87b4:	000ae3c0 	call	ae3c <__multadd>
    87b8:	1023883a 	mov	r17,r2
    87bc:	1029883a 	mov	r20,r2
    87c0:	003fdf06 	br	8740 <__alt_data_end+0xff808740>
    87c4:	e009883a 	mov	r4,fp
    87c8:	000ae140 	call	ae14 <_Bfree>
    87cc:	00800044 	movi	r2,1
    87d0:	003fbc06 	br	86c4 <__alt_data_end+0xff8086c4>
    87d4:	a80b883a 	mov	r5,r21
    87d8:	8009883a 	mov	r4,r16
    87dc:	000b6340 	call	b634 <__mcmp>
    87e0:	103edb0e 	bge	r2,zero,8350 <__alt_data_end+0xff808350>
    87e4:	800b883a 	mov	r5,r16
    87e8:	000f883a 	mov	r7,zero
    87ec:	01800284 	movi	r6,10
    87f0:	e009883a 	mov	r4,fp
    87f4:	000ae3c0 	call	ae3c <__multadd>
    87f8:	1021883a 	mov	r16,r2
    87fc:	d8800517 	ldw	r2,20(sp)
    8800:	d8c00b17 	ldw	r3,44(sp)
    8804:	10bfffc4 	addi	r2,r2,-1
    8808:	d8800515 	stw	r2,20(sp)
    880c:	183f761e 	bne	r3,zero,85e8 <__alt_data_end+0xff8085e8>
    8810:	d9000c17 	ldw	r4,48(sp)
    8814:	0101730e 	bge	zero,r4,8de4 <_dtoa_r+0x15cc>
    8818:	d9000615 	stw	r4,24(sp)
    881c:	003ed006 	br	8360 <__alt_data_end+0xff808360>
    8820:	00800084 	movi	r2,2
    8824:	3081861e 	bne	r6,r2,8e40 <_dtoa_r+0x1628>
    8828:	d8000b15 	stw	zero,44(sp)
    882c:	003f3c06 	br	8520 <__alt_data_end+0xff808520>
    8830:	dc000917 	ldw	r16,36(sp)
    8834:	003e9206 	br	8280 <__alt_data_end+0xff808280>
    8838:	d9c00317 	ldw	r7,12(sp)
    883c:	00800084 	movi	r2,2
    8840:	11fec50e 	bge	r2,r7,8358 <__alt_data_end+0xff808358>
    8844:	d9000617 	ldw	r4,24(sp)
    8848:	20013c1e 	bne	r4,zero,8d3c <_dtoa_r+0x1524>
    884c:	a80b883a 	mov	r5,r21
    8850:	000f883a 	mov	r7,zero
    8854:	01800144 	movi	r6,5
    8858:	e009883a 	mov	r4,fp
    885c:	000ae3c0 	call	ae3c <__multadd>
    8860:	100b883a 	mov	r5,r2
    8864:	8009883a 	mov	r4,r16
    8868:	102b883a 	mov	r21,r2
    886c:	000b6340 	call	b634 <__mcmp>
    8870:	dc000915 	stw	r16,36(sp)
    8874:	00bf410e 	bge	zero,r2,857c <__alt_data_end+0xff80857c>
    8878:	d9c00717 	ldw	r7,28(sp)
    887c:	00800c44 	movi	r2,49
    8880:	38800005 	stb	r2,0(r7)
    8884:	d8800517 	ldw	r2,20(sp)
    8888:	3dc00044 	addi	r23,r7,1
    888c:	10800044 	addi	r2,r2,1
    8890:	d8800515 	stw	r2,20(sp)
    8894:	003f3d06 	br	858c <__alt_data_end+0xff80858c>
    8898:	d9800517 	ldw	r6,20(sp)
    889c:	d9c00717 	ldw	r7,28(sp)
    88a0:	00800c44 	movi	r2,49
    88a4:	31800044 	addi	r6,r6,1
    88a8:	d9800515 	stw	r6,20(sp)
    88ac:	38800005 	stb	r2,0(r7)
    88b0:	003edf06 	br	8430 <__alt_data_end+0xff808430>
    88b4:	d8000b15 	stw	zero,44(sp)
    88b8:	003c9f06 	br	7b38 <__alt_data_end+0xff807b38>
    88bc:	903e7e1e 	bne	r18,zero,82b8 <__alt_data_end+0xff8082b8>
    88c0:	00800434 	movhi	r2,16
    88c4:	10bfffc4 	addi	r2,r2,-1
    88c8:	9884703a 	and	r2,r19,r2
    88cc:	1000ea1e 	bne	r2,zero,8c78 <_dtoa_r+0x1460>
    88d0:	9cdffc2c 	andhi	r19,r19,32752
    88d4:	9800e826 	beq	r19,zero,8c78 <_dtoa_r+0x1460>
    88d8:	d9c00817 	ldw	r7,32(sp)
    88dc:	b5800044 	addi	r22,r22,1
    88e0:	04c00044 	movi	r19,1
    88e4:	39c00044 	addi	r7,r7,1
    88e8:	d9c00815 	stw	r7,32(sp)
    88ec:	d8800d17 	ldw	r2,52(sp)
    88f0:	103e721e 	bne	r2,zero,82bc <__alt_data_end+0xff8082bc>
    88f4:	00800044 	movi	r2,1
    88f8:	003e7906 	br	82e0 <__alt_data_end+0xff8082e0>
    88fc:	8009883a 	mov	r4,r16
    8900:	00049180 	call	4918 <__floatsidf>
    8904:	d9800f17 	ldw	r6,60(sp)
    8908:	d9c01017 	ldw	r7,64(sp)
    890c:	1009883a 	mov	r4,r2
    8910:	180b883a 	mov	r5,r3
    8914:	00039040 	call	3904 <__muldf3>
    8918:	000d883a 	mov	r6,zero
    891c:	01d00734 	movhi	r7,16412
    8920:	1009883a 	mov	r4,r2
    8924:	180b883a 	mov	r5,r3
    8928:	00025a00 	call	25a0 <__adddf3>
    892c:	047f3034 	movhi	r17,64704
    8930:	1021883a 	mov	r16,r2
    8934:	1c63883a 	add	r17,r3,r17
    8938:	d9000f17 	ldw	r4,60(sp)
    893c:	d9401017 	ldw	r5,64(sp)
    8940:	000d883a 	mov	r6,zero
    8944:	01d00534 	movhi	r7,16404
    8948:	000401c0 	call	401c <__subdf3>
    894c:	800d883a 	mov	r6,r16
    8950:	880f883a 	mov	r7,r17
    8954:	1009883a 	mov	r4,r2
    8958:	180b883a 	mov	r5,r3
    895c:	102b883a 	mov	r21,r2
    8960:	1829883a 	mov	r20,r3
    8964:	00037340 	call	3734 <__gedf2>
    8968:	00806c16 	blt	zero,r2,8b1c <_dtoa_r+0x1304>
    896c:	89e0003c 	xorhi	r7,r17,32768
    8970:	800d883a 	mov	r6,r16
    8974:	a809883a 	mov	r4,r21
    8978:	a00b883a 	mov	r5,r20
    897c:	00038100 	call	3810 <__ledf2>
    8980:	103d7e0e 	bge	r2,zero,7f7c <__alt_data_end+0xff807f7c>
    8984:	002b883a 	mov	r21,zero
    8988:	0023883a 	mov	r17,zero
    898c:	003efb06 	br	857c <__alt_data_end+0xff80857c>
    8990:	d8800717 	ldw	r2,28(sp)
    8994:	003bd006 	br	78d8 <__alt_data_end+0xff8078d8>
    8998:	d9000a17 	ldw	r4,40(sp)
    899c:	d9800d17 	ldw	r6,52(sp)
    89a0:	dd400a15 	stw	r21,40(sp)
    89a4:	a905c83a 	sub	r2,r21,r4
    89a8:	308d883a 	add	r6,r6,r2
    89ac:	d9800d15 	stw	r6,52(sp)
    89b0:	002b883a 	mov	r21,zero
    89b4:	003e0606 	br	81d0 <__alt_data_end+0xff8081d0>
    89b8:	9023883a 	mov	r17,r18
    89bc:	9829883a 	mov	r20,r19
    89c0:	04000084 	movi	r16,2
    89c4:	003c9206 	br	7c10 <__alt_data_end+0xff807c10>
    89c8:	04000044 	movi	r16,1
    89cc:	dc000c15 	stw	r16,48(sp)
    89d0:	dc000615 	stw	r16,24(sp)
    89d4:	dc002215 	stw	r16,136(sp)
    89d8:	e0001115 	stw	zero,68(fp)
    89dc:	000b883a 	mov	r5,zero
    89e0:	003c6906 	br	7b88 <__alt_data_end+0xff807b88>
    89e4:	3021883a 	mov	r16,r6
    89e8:	003ffb06 	br	89d8 <__alt_data_end+0xff8089d8>
    89ec:	1000021e 	bne	r2,zero,89f8 <_dtoa_r+0x11e0>
    89f0:	4200004c 	andi	r8,r8,1
    89f4:	403e7d1e 	bne	r8,zero,83ec <__alt_data_end+0xff8083ec>
    89f8:	01000c04 	movi	r4,48
    89fc:	00000106 	br	8a04 <_dtoa_r+0x11ec>
    8a00:	102f883a 	mov	r23,r2
    8a04:	b8bfffc4 	addi	r2,r23,-1
    8a08:	10c00007 	ldb	r3,0(r2)
    8a0c:	193ffc26 	beq	r3,r4,8a00 <__alt_data_end+0xff808a00>
    8a10:	003e8706 	br	8430 <__alt_data_end+0xff808430>
    8a14:	d8800517 	ldw	r2,20(sp)
    8a18:	00a3c83a 	sub	r17,zero,r2
    8a1c:	8800a426 	beq	r17,zero,8cb0 <_dtoa_r+0x1498>
    8a20:	888003cc 	andi	r2,r17,15
    8a24:	100490fa 	slli	r2,r2,3
    8a28:	00c00074 	movhi	r3,1
    8a2c:	18c49b04 	addi	r3,r3,4716
    8a30:	1885883a 	add	r2,r3,r2
    8a34:	11800017 	ldw	r6,0(r2)
    8a38:	11c00117 	ldw	r7,4(r2)
    8a3c:	9009883a 	mov	r4,r18
    8a40:	980b883a 	mov	r5,r19
    8a44:	8823d13a 	srai	r17,r17,4
    8a48:	00039040 	call	3904 <__muldf3>
    8a4c:	d8800f15 	stw	r2,60(sp)
    8a50:	d8c01015 	stw	r3,64(sp)
    8a54:	8800e826 	beq	r17,zero,8df8 <_dtoa_r+0x15e0>
    8a58:	05000074 	movhi	r20,1
    8a5c:	a5049104 	addi	r20,r20,4676
    8a60:	04000084 	movi	r16,2
    8a64:	8980004c 	andi	r6,r17,1
    8a68:	1009883a 	mov	r4,r2
    8a6c:	8823d07a 	srai	r17,r17,1
    8a70:	180b883a 	mov	r5,r3
    8a74:	30000426 	beq	r6,zero,8a88 <_dtoa_r+0x1270>
    8a78:	a1800017 	ldw	r6,0(r20)
    8a7c:	a1c00117 	ldw	r7,4(r20)
    8a80:	84000044 	addi	r16,r16,1
    8a84:	00039040 	call	3904 <__muldf3>
    8a88:	a5000204 	addi	r20,r20,8
    8a8c:	883ff51e 	bne	r17,zero,8a64 <__alt_data_end+0xff808a64>
    8a90:	d8800f15 	stw	r2,60(sp)
    8a94:	d8c01015 	stw	r3,64(sp)
    8a98:	003c7606 	br	7c74 <__alt_data_end+0xff807c74>
    8a9c:	00c00c04 	movi	r3,48
    8aa0:	10c00005 	stb	r3,0(r2)
    8aa4:	d8c00517 	ldw	r3,20(sp)
    8aa8:	bd3fffc3 	ldbu	r20,-1(r23)
    8aac:	18c00044 	addi	r3,r3,1
    8ab0:	d8c00515 	stw	r3,20(sp)
    8ab4:	003db906 	br	819c <__alt_data_end+0xff80819c>
    8ab8:	89400117 	ldw	r5,4(r17)
    8abc:	e009883a 	mov	r4,fp
    8ac0:	000ad6c0 	call	ad6c <_Balloc>
    8ac4:	89800417 	ldw	r6,16(r17)
    8ac8:	89400304 	addi	r5,r17,12
    8acc:	11000304 	addi	r4,r2,12
    8ad0:	31800084 	addi	r6,r6,2
    8ad4:	318d883a 	add	r6,r6,r6
    8ad8:	318d883a 	add	r6,r6,r6
    8adc:	1027883a 	mov	r19,r2
    8ae0:	0004ed40 	call	4ed4 <memcpy>
    8ae4:	01800044 	movi	r6,1
    8ae8:	980b883a 	mov	r5,r19
    8aec:	e009883a 	mov	r4,fp
    8af0:	000b4ec0 	call	b4ec <__lshift>
    8af4:	1029883a 	mov	r20,r2
    8af8:	003ecc06 	br	862c <__alt_data_end+0xff80862c>
    8afc:	00800e44 	movi	r2,57
    8b00:	90809026 	beq	r18,r2,8d44 <_dtoa_r+0x152c>
    8b04:	92000044 	addi	r8,r18,1
    8b08:	003f1f06 	br	8788 <__alt_data_end+0xff808788>
    8b0c:	9011883a 	mov	r8,r18
    8b10:	8825883a 	mov	r18,r17
    8b14:	a023883a 	mov	r17,r20
    8b18:	003e2906 	br	83c0 <__alt_data_end+0xff8083c0>
    8b1c:	002b883a 	mov	r21,zero
    8b20:	0023883a 	mov	r17,zero
    8b24:	003f5406 	br	8878 <__alt_data_end+0xff808878>
    8b28:	61bfffc4 	addi	r6,r12,-1
    8b2c:	300490fa 	slli	r2,r6,3
    8b30:	00c00074 	movhi	r3,1
    8b34:	18c49b04 	addi	r3,r3,4716
    8b38:	1885883a 	add	r2,r3,r2
    8b3c:	11000017 	ldw	r4,0(r2)
    8b40:	11400117 	ldw	r5,4(r2)
    8b44:	d8800717 	ldw	r2,28(sp)
    8b48:	880f883a 	mov	r7,r17
    8b4c:	d9801215 	stw	r6,72(sp)
    8b50:	800d883a 	mov	r6,r16
    8b54:	db001615 	stw	r12,88(sp)
    8b58:	15c00044 	addi	r23,r2,1
    8b5c:	00039040 	call	3904 <__muldf3>
    8b60:	d9401017 	ldw	r5,64(sp)
    8b64:	d9000f17 	ldw	r4,60(sp)
    8b68:	d8c01515 	stw	r3,84(sp)
    8b6c:	d8801415 	stw	r2,80(sp)
    8b70:	000efec0 	call	efec <__fixdfsi>
    8b74:	1009883a 	mov	r4,r2
    8b78:	1021883a 	mov	r16,r2
    8b7c:	00049180 	call	4918 <__floatsidf>
    8b80:	d9000f17 	ldw	r4,60(sp)
    8b84:	d9401017 	ldw	r5,64(sp)
    8b88:	100d883a 	mov	r6,r2
    8b8c:	180f883a 	mov	r7,r3
    8b90:	000401c0 	call	401c <__subdf3>
    8b94:	1829883a 	mov	r20,r3
    8b98:	d8c00717 	ldw	r3,28(sp)
    8b9c:	84000c04 	addi	r16,r16,48
    8ba0:	1023883a 	mov	r17,r2
    8ba4:	1c000005 	stb	r16,0(r3)
    8ba8:	db001617 	ldw	r12,88(sp)
    8bac:	00800044 	movi	r2,1
    8bb0:	60802226 	beq	r12,r2,8c3c <_dtoa_r+0x1424>
    8bb4:	d9c00717 	ldw	r7,28(sp)
    8bb8:	8805883a 	mov	r2,r17
    8bbc:	b82b883a 	mov	r21,r23
    8bc0:	3b19883a 	add	r12,r7,r12
    8bc4:	6023883a 	mov	r17,r12
    8bc8:	a007883a 	mov	r3,r20
    8bcc:	dc800f15 	stw	r18,60(sp)
    8bd0:	000d883a 	mov	r6,zero
    8bd4:	01d00934 	movhi	r7,16420
    8bd8:	1009883a 	mov	r4,r2
    8bdc:	180b883a 	mov	r5,r3
    8be0:	00039040 	call	3904 <__muldf3>
    8be4:	180b883a 	mov	r5,r3
    8be8:	1009883a 	mov	r4,r2
    8bec:	1829883a 	mov	r20,r3
    8bf0:	1025883a 	mov	r18,r2
    8bf4:	000efec0 	call	efec <__fixdfsi>
    8bf8:	1009883a 	mov	r4,r2
    8bfc:	1021883a 	mov	r16,r2
    8c00:	00049180 	call	4918 <__floatsidf>
    8c04:	100d883a 	mov	r6,r2
    8c08:	180f883a 	mov	r7,r3
    8c0c:	9009883a 	mov	r4,r18
    8c10:	a00b883a 	mov	r5,r20
    8c14:	84000c04 	addi	r16,r16,48
    8c18:	000401c0 	call	401c <__subdf3>
    8c1c:	ad400044 	addi	r21,r21,1
    8c20:	ac3fffc5 	stb	r16,-1(r21)
    8c24:	ac7fea1e 	bne	r21,r17,8bd0 <__alt_data_end+0xff808bd0>
    8c28:	1023883a 	mov	r17,r2
    8c2c:	d8801217 	ldw	r2,72(sp)
    8c30:	dc800f17 	ldw	r18,60(sp)
    8c34:	1829883a 	mov	r20,r3
    8c38:	b8af883a 	add	r23,r23,r2
    8c3c:	d9001417 	ldw	r4,80(sp)
    8c40:	d9401517 	ldw	r5,84(sp)
    8c44:	000d883a 	mov	r6,zero
    8c48:	01cff834 	movhi	r7,16352
    8c4c:	00025a00 	call	25a0 <__adddf3>
    8c50:	880d883a 	mov	r6,r17
    8c54:	a00f883a 	mov	r7,r20
    8c58:	1009883a 	mov	r4,r2
    8c5c:	180b883a 	mov	r5,r3
    8c60:	00038100 	call	3810 <__ledf2>
    8c64:	10003e0e 	bge	r2,zero,8d60 <_dtoa_r+0x1548>
    8c68:	d9001317 	ldw	r4,76(sp)
    8c6c:	bd3fffc3 	ldbu	r20,-1(r23)
    8c70:	d9000515 	stw	r4,20(sp)
    8c74:	003d3b06 	br	8164 <__alt_data_end+0xff808164>
    8c78:	0027883a 	mov	r19,zero
    8c7c:	003f1b06 	br	88ec <__alt_data_end+0xff8088ec>
    8c80:	d8800817 	ldw	r2,32(sp)
    8c84:	11e9c83a 	sub	r20,r2,r7
    8c88:	0005883a 	mov	r2,zero
    8c8c:	003d5406 	br	81e0 <__alt_data_end+0xff8081e0>
    8c90:	00800044 	movi	r2,1
    8c94:	003dc706 	br	83b4 <__alt_data_end+0xff8083b4>
    8c98:	d8c00217 	ldw	r3,8(sp)
    8c9c:	00800d84 	movi	r2,54
    8ca0:	dd400a17 	ldw	r21,40(sp)
    8ca4:	10c5c83a 	sub	r2,r2,r3
    8ca8:	dd000817 	ldw	r20,32(sp)
    8cac:	003d4c06 	br	81e0 <__alt_data_end+0xff8081e0>
    8cb0:	dc800f15 	stw	r18,60(sp)
    8cb4:	dcc01015 	stw	r19,64(sp)
    8cb8:	04000084 	movi	r16,2
    8cbc:	003bed06 	br	7c74 <__alt_data_end+0xff807c74>
    8cc0:	d9000617 	ldw	r4,24(sp)
    8cc4:	203f0d26 	beq	r4,zero,88fc <__alt_data_end+0xff8088fc>
    8cc8:	d9800c17 	ldw	r6,48(sp)
    8ccc:	01bcab0e 	bge	zero,r6,7f7c <__alt_data_end+0xff807f7c>
    8cd0:	d9401017 	ldw	r5,64(sp)
    8cd4:	d9000f17 	ldw	r4,60(sp)
    8cd8:	000d883a 	mov	r6,zero
    8cdc:	01d00934 	movhi	r7,16420
    8ce0:	00039040 	call	3904 <__muldf3>
    8ce4:	81000044 	addi	r4,r16,1
    8ce8:	d8800f15 	stw	r2,60(sp)
    8cec:	d8c01015 	stw	r3,64(sp)
    8cf0:	00049180 	call	4918 <__floatsidf>
    8cf4:	d9800f17 	ldw	r6,60(sp)
    8cf8:	d9c01017 	ldw	r7,64(sp)
    8cfc:	1009883a 	mov	r4,r2
    8d00:	180b883a 	mov	r5,r3
    8d04:	00039040 	call	3904 <__muldf3>
    8d08:	01d00734 	movhi	r7,16412
    8d0c:	000d883a 	mov	r6,zero
    8d10:	1009883a 	mov	r4,r2
    8d14:	180b883a 	mov	r5,r3
    8d18:	00025a00 	call	25a0 <__adddf3>
    8d1c:	d9c00517 	ldw	r7,20(sp)
    8d20:	047f3034 	movhi	r17,64704
    8d24:	1021883a 	mov	r16,r2
    8d28:	39ffffc4 	addi	r7,r7,-1
    8d2c:	d9c01315 	stw	r7,76(sp)
    8d30:	1c63883a 	add	r17,r3,r17
    8d34:	db000c17 	ldw	r12,48(sp)
    8d38:	003bea06 	br	7ce4 <__alt_data_end+0xff807ce4>
    8d3c:	dc000915 	stw	r16,36(sp)
    8d40:	003e0e06 	br	857c <__alt_data_end+0xff80857c>
    8d44:	01000e44 	movi	r4,57
    8d48:	8825883a 	mov	r18,r17
    8d4c:	9dc00044 	addi	r23,r19,1
    8d50:	99000005 	stb	r4,0(r19)
    8d54:	a023883a 	mov	r17,r20
    8d58:	dc000915 	stw	r16,36(sp)
    8d5c:	003da406 	br	83f0 <__alt_data_end+0xff8083f0>
    8d60:	d9801417 	ldw	r6,80(sp)
    8d64:	d9c01517 	ldw	r7,84(sp)
    8d68:	0009883a 	mov	r4,zero
    8d6c:	014ff834 	movhi	r5,16352
    8d70:	000401c0 	call	401c <__subdf3>
    8d74:	880d883a 	mov	r6,r17
    8d78:	a00f883a 	mov	r7,r20
    8d7c:	1009883a 	mov	r4,r2
    8d80:	180b883a 	mov	r5,r3
    8d84:	00037340 	call	3734 <__gedf2>
    8d88:	00bc7c0e 	bge	zero,r2,7f7c <__alt_data_end+0xff807f7c>
    8d8c:	01000c04 	movi	r4,48
    8d90:	00000106 	br	8d98 <_dtoa_r+0x1580>
    8d94:	102f883a 	mov	r23,r2
    8d98:	b8bfffc4 	addi	r2,r23,-1
    8d9c:	10c00007 	ldb	r3,0(r2)
    8da0:	193ffc26 	beq	r3,r4,8d94 <__alt_data_end+0xff808d94>
    8da4:	d9801317 	ldw	r6,76(sp)
    8da8:	d9800515 	stw	r6,20(sp)
    8dac:	003c4406 	br	7ec0 <__alt_data_end+0xff807ec0>
    8db0:	d9801317 	ldw	r6,76(sp)
    8db4:	d9800515 	stw	r6,20(sp)
    8db8:	003cea06 	br	8164 <__alt_data_end+0xff808164>
    8dbc:	dd800f17 	ldw	r22,60(sp)
    8dc0:	dcc01017 	ldw	r19,64(sp)
    8dc4:	dc801217 	ldw	r18,72(sp)
    8dc8:	003c6c06 	br	7f7c <__alt_data_end+0xff807f7c>
    8dcc:	903e031e 	bne	r18,zero,85dc <__alt_data_end+0xff8085dc>
    8dd0:	003ebb06 	br	88c0 <__alt_data_end+0xff8088c0>
    8dd4:	103e6c1e 	bne	r2,zero,8788 <__alt_data_end+0xff808788>
    8dd8:	4080004c 	andi	r2,r8,1
    8ddc:	103e6a26 	beq	r2,zero,8788 <__alt_data_end+0xff808788>
    8de0:	003e6606 	br	877c <__alt_data_end+0xff80877c>
    8de4:	d8c00317 	ldw	r3,12(sp)
    8de8:	00800084 	movi	r2,2
    8dec:	10c02916 	blt	r2,r3,8e94 <_dtoa_r+0x167c>
    8df0:	d9000c17 	ldw	r4,48(sp)
    8df4:	003e8806 	br	8818 <__alt_data_end+0xff808818>
    8df8:	04000084 	movi	r16,2
    8dfc:	003b9d06 	br	7c74 <__alt_data_end+0xff807c74>
    8e00:	d9001317 	ldw	r4,76(sp)
    8e04:	d9000515 	stw	r4,20(sp)
    8e08:	003cd606 	br	8164 <__alt_data_end+0xff808164>
    8e0c:	d8801317 	ldw	r2,76(sp)
    8e10:	d8800515 	stw	r2,20(sp)
    8e14:	003c2a06 	br	7ec0 <__alt_data_end+0xff807ec0>
    8e18:	d9800317 	ldw	r6,12(sp)
    8e1c:	00800084 	movi	r2,2
    8e20:	11801516 	blt	r2,r6,8e78 <_dtoa_r+0x1660>
    8e24:	d9c00c17 	ldw	r7,48(sp)
    8e28:	d9c00615 	stw	r7,24(sp)
    8e2c:	003df706 	br	860c <__alt_data_end+0xff80860c>
    8e30:	193d3926 	beq	r3,r4,8318 <__alt_data_end+0xff808318>
    8e34:	00c00f04 	movi	r3,60
    8e38:	1885c83a 	sub	r2,r3,r2
    8e3c:	003ddf06 	br	85bc <__alt_data_end+0xff8085bc>
    8e40:	e009883a 	mov	r4,fp
    8e44:	e0001115 	stw	zero,68(fp)
    8e48:	000b883a 	mov	r5,zero
    8e4c:	000ad6c0 	call	ad6c <_Balloc>
    8e50:	d8800715 	stw	r2,28(sp)
    8e54:	d8c00717 	ldw	r3,28(sp)
    8e58:	00bfffc4 	movi	r2,-1
    8e5c:	01000044 	movi	r4,1
    8e60:	d8800c15 	stw	r2,48(sp)
    8e64:	e0c01015 	stw	r3,64(fp)
    8e68:	d9000b15 	stw	r4,44(sp)
    8e6c:	d8800615 	stw	r2,24(sp)
    8e70:	d8002215 	stw	zero,136(sp)
    8e74:	003c4106 	br	7f7c <__alt_data_end+0xff807f7c>
    8e78:	d8c00c17 	ldw	r3,48(sp)
    8e7c:	d8c00615 	stw	r3,24(sp)
    8e80:	003e7006 	br	8844 <__alt_data_end+0xff808844>
    8e84:	04400044 	movi	r17,1
    8e88:	003b2006 	br	7b0c <__alt_data_end+0xff807b0c>
    8e8c:	000b883a 	mov	r5,zero
    8e90:	003b3d06 	br	7b88 <__alt_data_end+0xff807b88>
    8e94:	d8800c17 	ldw	r2,48(sp)
    8e98:	d8800615 	stw	r2,24(sp)
    8e9c:	003e6906 	br	8844 <__alt_data_end+0xff808844>

00008ea0 <__sflush_r>:
    8ea0:	2880030b 	ldhu	r2,12(r5)
    8ea4:	defffb04 	addi	sp,sp,-20
    8ea8:	dcc00315 	stw	r19,12(sp)
    8eac:	dc400115 	stw	r17,4(sp)
    8eb0:	dfc00415 	stw	ra,16(sp)
    8eb4:	dc800215 	stw	r18,8(sp)
    8eb8:	dc000015 	stw	r16,0(sp)
    8ebc:	10c0020c 	andi	r3,r2,8
    8ec0:	2823883a 	mov	r17,r5
    8ec4:	2027883a 	mov	r19,r4
    8ec8:	1800311e 	bne	r3,zero,8f90 <__sflush_r+0xf0>
    8ecc:	28c00117 	ldw	r3,4(r5)
    8ed0:	10820014 	ori	r2,r2,2048
    8ed4:	2880030d 	sth	r2,12(r5)
    8ed8:	00c04b0e 	bge	zero,r3,9008 <__sflush_r+0x168>
    8edc:	8a000a17 	ldw	r8,40(r17)
    8ee0:	40002326 	beq	r8,zero,8f70 <__sflush_r+0xd0>
    8ee4:	9c000017 	ldw	r16,0(r19)
    8ee8:	10c4000c 	andi	r3,r2,4096
    8eec:	98000015 	stw	zero,0(r19)
    8ef0:	18004826 	beq	r3,zero,9014 <__sflush_r+0x174>
    8ef4:	89801417 	ldw	r6,80(r17)
    8ef8:	10c0010c 	andi	r3,r2,4
    8efc:	18000626 	beq	r3,zero,8f18 <__sflush_r+0x78>
    8f00:	88c00117 	ldw	r3,4(r17)
    8f04:	88800c17 	ldw	r2,48(r17)
    8f08:	30cdc83a 	sub	r6,r6,r3
    8f0c:	10000226 	beq	r2,zero,8f18 <__sflush_r+0x78>
    8f10:	88800f17 	ldw	r2,60(r17)
    8f14:	308dc83a 	sub	r6,r6,r2
    8f18:	89400717 	ldw	r5,28(r17)
    8f1c:	000f883a 	mov	r7,zero
    8f20:	9809883a 	mov	r4,r19
    8f24:	403ee83a 	callr	r8
    8f28:	00ffffc4 	movi	r3,-1
    8f2c:	10c04426 	beq	r2,r3,9040 <__sflush_r+0x1a0>
    8f30:	88c0030b 	ldhu	r3,12(r17)
    8f34:	89000417 	ldw	r4,16(r17)
    8f38:	88000115 	stw	zero,4(r17)
    8f3c:	197dffcc 	andi	r5,r3,63487
    8f40:	8940030d 	sth	r5,12(r17)
    8f44:	89000015 	stw	r4,0(r17)
    8f48:	18c4000c 	andi	r3,r3,4096
    8f4c:	18002c1e 	bne	r3,zero,9000 <__sflush_r+0x160>
    8f50:	89400c17 	ldw	r5,48(r17)
    8f54:	9c000015 	stw	r16,0(r19)
    8f58:	28000526 	beq	r5,zero,8f70 <__sflush_r+0xd0>
    8f5c:	88801004 	addi	r2,r17,64
    8f60:	28800226 	beq	r5,r2,8f6c <__sflush_r+0xcc>
    8f64:	9809883a 	mov	r4,r19
    8f68:	000960c0 	call	960c <_free_r>
    8f6c:	88000c15 	stw	zero,48(r17)
    8f70:	0005883a 	mov	r2,zero
    8f74:	dfc00417 	ldw	ra,16(sp)
    8f78:	dcc00317 	ldw	r19,12(sp)
    8f7c:	dc800217 	ldw	r18,8(sp)
    8f80:	dc400117 	ldw	r17,4(sp)
    8f84:	dc000017 	ldw	r16,0(sp)
    8f88:	dec00504 	addi	sp,sp,20
    8f8c:	f800283a 	ret
    8f90:	2c800417 	ldw	r18,16(r5)
    8f94:	903ff626 	beq	r18,zero,8f70 <__alt_data_end+0xff808f70>
    8f98:	2c000017 	ldw	r16,0(r5)
    8f9c:	108000cc 	andi	r2,r2,3
    8fa0:	2c800015 	stw	r18,0(r5)
    8fa4:	84a1c83a 	sub	r16,r16,r18
    8fa8:	1000131e 	bne	r2,zero,8ff8 <__sflush_r+0x158>
    8fac:	28800517 	ldw	r2,20(r5)
    8fb0:	88800215 	stw	r2,8(r17)
    8fb4:	04000316 	blt	zero,r16,8fc4 <__sflush_r+0x124>
    8fb8:	003fed06 	br	8f70 <__alt_data_end+0xff808f70>
    8fbc:	90a5883a 	add	r18,r18,r2
    8fc0:	043feb0e 	bge	zero,r16,8f70 <__alt_data_end+0xff808f70>
    8fc4:	88800917 	ldw	r2,36(r17)
    8fc8:	89400717 	ldw	r5,28(r17)
    8fcc:	800f883a 	mov	r7,r16
    8fd0:	900d883a 	mov	r6,r18
    8fd4:	9809883a 	mov	r4,r19
    8fd8:	103ee83a 	callr	r2
    8fdc:	80a1c83a 	sub	r16,r16,r2
    8fe0:	00bff616 	blt	zero,r2,8fbc <__alt_data_end+0xff808fbc>
    8fe4:	88c0030b 	ldhu	r3,12(r17)
    8fe8:	00bfffc4 	movi	r2,-1
    8fec:	18c01014 	ori	r3,r3,64
    8ff0:	88c0030d 	sth	r3,12(r17)
    8ff4:	003fdf06 	br	8f74 <__alt_data_end+0xff808f74>
    8ff8:	0005883a 	mov	r2,zero
    8ffc:	003fec06 	br	8fb0 <__alt_data_end+0xff808fb0>
    9000:	88801415 	stw	r2,80(r17)
    9004:	003fd206 	br	8f50 <__alt_data_end+0xff808f50>
    9008:	28c00f17 	ldw	r3,60(r5)
    900c:	00ffb316 	blt	zero,r3,8edc <__alt_data_end+0xff808edc>
    9010:	003fd706 	br	8f70 <__alt_data_end+0xff808f70>
    9014:	89400717 	ldw	r5,28(r17)
    9018:	000d883a 	mov	r6,zero
    901c:	01c00044 	movi	r7,1
    9020:	9809883a 	mov	r4,r19
    9024:	403ee83a 	callr	r8
    9028:	100d883a 	mov	r6,r2
    902c:	00bfffc4 	movi	r2,-1
    9030:	30801426 	beq	r6,r2,9084 <__sflush_r+0x1e4>
    9034:	8880030b 	ldhu	r2,12(r17)
    9038:	8a000a17 	ldw	r8,40(r17)
    903c:	003fae06 	br	8ef8 <__alt_data_end+0xff808ef8>
    9040:	98c00017 	ldw	r3,0(r19)
    9044:	183fba26 	beq	r3,zero,8f30 <__alt_data_end+0xff808f30>
    9048:	01000744 	movi	r4,29
    904c:	19000626 	beq	r3,r4,9068 <__sflush_r+0x1c8>
    9050:	01000584 	movi	r4,22
    9054:	19000426 	beq	r3,r4,9068 <__sflush_r+0x1c8>
    9058:	88c0030b 	ldhu	r3,12(r17)
    905c:	18c01014 	ori	r3,r3,64
    9060:	88c0030d 	sth	r3,12(r17)
    9064:	003fc306 	br	8f74 <__alt_data_end+0xff808f74>
    9068:	8880030b 	ldhu	r2,12(r17)
    906c:	88c00417 	ldw	r3,16(r17)
    9070:	88000115 	stw	zero,4(r17)
    9074:	10bdffcc 	andi	r2,r2,63487
    9078:	8880030d 	sth	r2,12(r17)
    907c:	88c00015 	stw	r3,0(r17)
    9080:	003fb306 	br	8f50 <__alt_data_end+0xff808f50>
    9084:	98800017 	ldw	r2,0(r19)
    9088:	103fea26 	beq	r2,zero,9034 <__alt_data_end+0xff809034>
    908c:	00c00744 	movi	r3,29
    9090:	10c00226 	beq	r2,r3,909c <__sflush_r+0x1fc>
    9094:	00c00584 	movi	r3,22
    9098:	10c0031e 	bne	r2,r3,90a8 <__sflush_r+0x208>
    909c:	9c000015 	stw	r16,0(r19)
    90a0:	0005883a 	mov	r2,zero
    90a4:	003fb306 	br	8f74 <__alt_data_end+0xff808f74>
    90a8:	88c0030b 	ldhu	r3,12(r17)
    90ac:	3005883a 	mov	r2,r6
    90b0:	18c01014 	ori	r3,r3,64
    90b4:	88c0030d 	sth	r3,12(r17)
    90b8:	003fae06 	br	8f74 <__alt_data_end+0xff808f74>

000090bc <_fflush_r>:
    90bc:	defffd04 	addi	sp,sp,-12
    90c0:	dc000115 	stw	r16,4(sp)
    90c4:	dfc00215 	stw	ra,8(sp)
    90c8:	2021883a 	mov	r16,r4
    90cc:	20000226 	beq	r4,zero,90d8 <_fflush_r+0x1c>
    90d0:	20800e17 	ldw	r2,56(r4)
    90d4:	10000c26 	beq	r2,zero,9108 <_fflush_r+0x4c>
    90d8:	2880030f 	ldh	r2,12(r5)
    90dc:	1000051e 	bne	r2,zero,90f4 <_fflush_r+0x38>
    90e0:	0005883a 	mov	r2,zero
    90e4:	dfc00217 	ldw	ra,8(sp)
    90e8:	dc000117 	ldw	r16,4(sp)
    90ec:	dec00304 	addi	sp,sp,12
    90f0:	f800283a 	ret
    90f4:	8009883a 	mov	r4,r16
    90f8:	dfc00217 	ldw	ra,8(sp)
    90fc:	dc000117 	ldw	r16,4(sp)
    9100:	dec00304 	addi	sp,sp,12
    9104:	0008ea01 	jmpi	8ea0 <__sflush_r>
    9108:	d9400015 	stw	r5,0(sp)
    910c:	00094980 	call	9498 <__sinit>
    9110:	d9400017 	ldw	r5,0(sp)
    9114:	003ff006 	br	90d8 <__alt_data_end+0xff8090d8>

00009118 <fflush>:
    9118:	20000526 	beq	r4,zero,9130 <fflush+0x18>
    911c:	00800074 	movhi	r2,1
    9120:	108b4b04 	addi	r2,r2,11564
    9124:	200b883a 	mov	r5,r4
    9128:	11000017 	ldw	r4,0(r2)
    912c:	00090bc1 	jmpi	90bc <_fflush_r>
    9130:	00800074 	movhi	r2,1
    9134:	108b4a04 	addi	r2,r2,11560
    9138:	11000017 	ldw	r4,0(r2)
    913c:	01400074 	movhi	r5,1
    9140:	29642f04 	addi	r5,r5,-28484
    9144:	0009e9c1 	jmpi	9e9c <_fwalk_reent>

00009148 <__fp_unlock>:
    9148:	0005883a 	mov	r2,zero
    914c:	f800283a 	ret

00009150 <_cleanup_r>:
    9150:	01400074 	movhi	r5,1
    9154:	29773e04 	addi	r5,r5,-8968
    9158:	0009e9c1 	jmpi	9e9c <_fwalk_reent>

0000915c <__sinit.part.1>:
    915c:	defff704 	addi	sp,sp,-36
    9160:	00c00074 	movhi	r3,1
    9164:	dfc00815 	stw	ra,32(sp)
    9168:	ddc00715 	stw	r23,28(sp)
    916c:	dd800615 	stw	r22,24(sp)
    9170:	dd400515 	stw	r21,20(sp)
    9174:	dd000415 	stw	r20,16(sp)
    9178:	dcc00315 	stw	r19,12(sp)
    917c:	dc800215 	stw	r18,8(sp)
    9180:	dc400115 	stw	r17,4(sp)
    9184:	dc000015 	stw	r16,0(sp)
    9188:	18e45404 	addi	r3,r3,-28336
    918c:	24000117 	ldw	r16,4(r4)
    9190:	20c00f15 	stw	r3,60(r4)
    9194:	2080bb04 	addi	r2,r4,748
    9198:	00c000c4 	movi	r3,3
    919c:	20c0b915 	stw	r3,740(r4)
    91a0:	2080ba15 	stw	r2,744(r4)
    91a4:	2000b815 	stw	zero,736(r4)
    91a8:	05c00204 	movi	r23,8
    91ac:	00800104 	movi	r2,4
    91b0:	2025883a 	mov	r18,r4
    91b4:	b80d883a 	mov	r6,r23
    91b8:	81001704 	addi	r4,r16,92
    91bc:	000b883a 	mov	r5,zero
    91c0:	80000015 	stw	zero,0(r16)
    91c4:	80000115 	stw	zero,4(r16)
    91c8:	80000215 	stw	zero,8(r16)
    91cc:	8080030d 	sth	r2,12(r16)
    91d0:	80001915 	stw	zero,100(r16)
    91d4:	8000038d 	sth	zero,14(r16)
    91d8:	80000415 	stw	zero,16(r16)
    91dc:	80000515 	stw	zero,20(r16)
    91e0:	80000615 	stw	zero,24(r16)
    91e4:	000ac440 	call	ac44 <memset>
    91e8:	05800074 	movhi	r22,1
    91ec:	94400217 	ldw	r17,8(r18)
    91f0:	05400074 	movhi	r21,1
    91f4:	05000074 	movhi	r20,1
    91f8:	04c00074 	movhi	r19,1
    91fc:	b5b0c804 	addi	r22,r22,-15584
    9200:	ad70df04 	addi	r21,r21,-15492
    9204:	a530fe04 	addi	r20,r20,-15368
    9208:	9cf11504 	addi	r19,r19,-15276
    920c:	85800815 	stw	r22,32(r16)
    9210:	85400915 	stw	r21,36(r16)
    9214:	85000a15 	stw	r20,40(r16)
    9218:	84c00b15 	stw	r19,44(r16)
    921c:	84000715 	stw	r16,28(r16)
    9220:	00800284 	movi	r2,10
    9224:	8880030d 	sth	r2,12(r17)
    9228:	00800044 	movi	r2,1
    922c:	b80d883a 	mov	r6,r23
    9230:	89001704 	addi	r4,r17,92
    9234:	000b883a 	mov	r5,zero
    9238:	88000015 	stw	zero,0(r17)
    923c:	88000115 	stw	zero,4(r17)
    9240:	88000215 	stw	zero,8(r17)
    9244:	88001915 	stw	zero,100(r17)
    9248:	8880038d 	sth	r2,14(r17)
    924c:	88000415 	stw	zero,16(r17)
    9250:	88000515 	stw	zero,20(r17)
    9254:	88000615 	stw	zero,24(r17)
    9258:	000ac440 	call	ac44 <memset>
    925c:	94000317 	ldw	r16,12(r18)
    9260:	00800484 	movi	r2,18
    9264:	8c400715 	stw	r17,28(r17)
    9268:	8d800815 	stw	r22,32(r17)
    926c:	8d400915 	stw	r21,36(r17)
    9270:	8d000a15 	stw	r20,40(r17)
    9274:	8cc00b15 	stw	r19,44(r17)
    9278:	8080030d 	sth	r2,12(r16)
    927c:	00800084 	movi	r2,2
    9280:	80000015 	stw	zero,0(r16)
    9284:	80000115 	stw	zero,4(r16)
    9288:	80000215 	stw	zero,8(r16)
    928c:	80001915 	stw	zero,100(r16)
    9290:	8080038d 	sth	r2,14(r16)
    9294:	80000415 	stw	zero,16(r16)
    9298:	80000515 	stw	zero,20(r16)
    929c:	80000615 	stw	zero,24(r16)
    92a0:	b80d883a 	mov	r6,r23
    92a4:	000b883a 	mov	r5,zero
    92a8:	81001704 	addi	r4,r16,92
    92ac:	000ac440 	call	ac44 <memset>
    92b0:	00800044 	movi	r2,1
    92b4:	84000715 	stw	r16,28(r16)
    92b8:	85800815 	stw	r22,32(r16)
    92bc:	85400915 	stw	r21,36(r16)
    92c0:	85000a15 	stw	r20,40(r16)
    92c4:	84c00b15 	stw	r19,44(r16)
    92c8:	90800e15 	stw	r2,56(r18)
    92cc:	dfc00817 	ldw	ra,32(sp)
    92d0:	ddc00717 	ldw	r23,28(sp)
    92d4:	dd800617 	ldw	r22,24(sp)
    92d8:	dd400517 	ldw	r21,20(sp)
    92dc:	dd000417 	ldw	r20,16(sp)
    92e0:	dcc00317 	ldw	r19,12(sp)
    92e4:	dc800217 	ldw	r18,8(sp)
    92e8:	dc400117 	ldw	r17,4(sp)
    92ec:	dc000017 	ldw	r16,0(sp)
    92f0:	dec00904 	addi	sp,sp,36
    92f4:	f800283a 	ret

000092f8 <__fp_lock>:
    92f8:	0005883a 	mov	r2,zero
    92fc:	f800283a 	ret

00009300 <__sfmoreglue>:
    9300:	defffc04 	addi	sp,sp,-16
    9304:	dc400115 	stw	r17,4(sp)
    9308:	2c7fffc4 	addi	r17,r5,-1
    930c:	8c401a24 	muli	r17,r17,104
    9310:	dc800215 	stw	r18,8(sp)
    9314:	2825883a 	mov	r18,r5
    9318:	89401d04 	addi	r5,r17,116
    931c:	dc000015 	stw	r16,0(sp)
    9320:	dfc00315 	stw	ra,12(sp)
    9324:	000a1f80 	call	a1f8 <_malloc_r>
    9328:	1021883a 	mov	r16,r2
    932c:	10000726 	beq	r2,zero,934c <__sfmoreglue+0x4c>
    9330:	11000304 	addi	r4,r2,12
    9334:	10000015 	stw	zero,0(r2)
    9338:	14800115 	stw	r18,4(r2)
    933c:	11000215 	stw	r4,8(r2)
    9340:	89801a04 	addi	r6,r17,104
    9344:	000b883a 	mov	r5,zero
    9348:	000ac440 	call	ac44 <memset>
    934c:	8005883a 	mov	r2,r16
    9350:	dfc00317 	ldw	ra,12(sp)
    9354:	dc800217 	ldw	r18,8(sp)
    9358:	dc400117 	ldw	r17,4(sp)
    935c:	dc000017 	ldw	r16,0(sp)
    9360:	dec00404 	addi	sp,sp,16
    9364:	f800283a 	ret

00009368 <__sfp>:
    9368:	defffb04 	addi	sp,sp,-20
    936c:	dc000015 	stw	r16,0(sp)
    9370:	04000074 	movhi	r16,1
    9374:	840b4a04 	addi	r16,r16,11560
    9378:	dcc00315 	stw	r19,12(sp)
    937c:	2027883a 	mov	r19,r4
    9380:	81000017 	ldw	r4,0(r16)
    9384:	dfc00415 	stw	ra,16(sp)
    9388:	dc800215 	stw	r18,8(sp)
    938c:	20800e17 	ldw	r2,56(r4)
    9390:	dc400115 	stw	r17,4(sp)
    9394:	1000021e 	bne	r2,zero,93a0 <__sfp+0x38>
    9398:	000915c0 	call	915c <__sinit.part.1>
    939c:	81000017 	ldw	r4,0(r16)
    93a0:	2480b804 	addi	r18,r4,736
    93a4:	047fffc4 	movi	r17,-1
    93a8:	91000117 	ldw	r4,4(r18)
    93ac:	94000217 	ldw	r16,8(r18)
    93b0:	213fffc4 	addi	r4,r4,-1
    93b4:	20000a16 	blt	r4,zero,93e0 <__sfp+0x78>
    93b8:	8080030f 	ldh	r2,12(r16)
    93bc:	10000c26 	beq	r2,zero,93f0 <__sfp+0x88>
    93c0:	80c01d04 	addi	r3,r16,116
    93c4:	00000206 	br	93d0 <__sfp+0x68>
    93c8:	18bfe60f 	ldh	r2,-104(r3)
    93cc:	10000826 	beq	r2,zero,93f0 <__sfp+0x88>
    93d0:	213fffc4 	addi	r4,r4,-1
    93d4:	1c3ffd04 	addi	r16,r3,-12
    93d8:	18c01a04 	addi	r3,r3,104
    93dc:	247ffa1e 	bne	r4,r17,93c8 <__alt_data_end+0xff8093c8>
    93e0:	90800017 	ldw	r2,0(r18)
    93e4:	10001d26 	beq	r2,zero,945c <__sfp+0xf4>
    93e8:	1025883a 	mov	r18,r2
    93ec:	003fee06 	br	93a8 <__alt_data_end+0xff8093a8>
    93f0:	00bfffc4 	movi	r2,-1
    93f4:	8080038d 	sth	r2,14(r16)
    93f8:	00800044 	movi	r2,1
    93fc:	8080030d 	sth	r2,12(r16)
    9400:	80001915 	stw	zero,100(r16)
    9404:	80000015 	stw	zero,0(r16)
    9408:	80000215 	stw	zero,8(r16)
    940c:	80000115 	stw	zero,4(r16)
    9410:	80000415 	stw	zero,16(r16)
    9414:	80000515 	stw	zero,20(r16)
    9418:	80000615 	stw	zero,24(r16)
    941c:	01800204 	movi	r6,8
    9420:	000b883a 	mov	r5,zero
    9424:	81001704 	addi	r4,r16,92
    9428:	000ac440 	call	ac44 <memset>
    942c:	8005883a 	mov	r2,r16
    9430:	80000c15 	stw	zero,48(r16)
    9434:	80000d15 	stw	zero,52(r16)
    9438:	80001115 	stw	zero,68(r16)
    943c:	80001215 	stw	zero,72(r16)
    9440:	dfc00417 	ldw	ra,16(sp)
    9444:	dcc00317 	ldw	r19,12(sp)
    9448:	dc800217 	ldw	r18,8(sp)
    944c:	dc400117 	ldw	r17,4(sp)
    9450:	dc000017 	ldw	r16,0(sp)
    9454:	dec00504 	addi	sp,sp,20
    9458:	f800283a 	ret
    945c:	01400104 	movi	r5,4
    9460:	9809883a 	mov	r4,r19
    9464:	00093000 	call	9300 <__sfmoreglue>
    9468:	90800015 	stw	r2,0(r18)
    946c:	103fde1e 	bne	r2,zero,93e8 <__alt_data_end+0xff8093e8>
    9470:	00800304 	movi	r2,12
    9474:	98800015 	stw	r2,0(r19)
    9478:	0005883a 	mov	r2,zero
    947c:	003ff006 	br	9440 <__alt_data_end+0xff809440>

00009480 <_cleanup>:
    9480:	00800074 	movhi	r2,1
    9484:	108b4a04 	addi	r2,r2,11560
    9488:	11000017 	ldw	r4,0(r2)
    948c:	01400074 	movhi	r5,1
    9490:	29773e04 	addi	r5,r5,-8968
    9494:	0009e9c1 	jmpi	9e9c <_fwalk_reent>

00009498 <__sinit>:
    9498:	20800e17 	ldw	r2,56(r4)
    949c:	10000126 	beq	r2,zero,94a4 <__sinit+0xc>
    94a0:	f800283a 	ret
    94a4:	000915c1 	jmpi	915c <__sinit.part.1>

000094a8 <__sfp_lock_acquire>:
    94a8:	f800283a 	ret

000094ac <__sfp_lock_release>:
    94ac:	f800283a 	ret

000094b0 <__sinit_lock_acquire>:
    94b0:	f800283a 	ret

000094b4 <__sinit_lock_release>:
    94b4:	f800283a 	ret

000094b8 <__fp_lock_all>:
    94b8:	00800074 	movhi	r2,1
    94bc:	108b4b04 	addi	r2,r2,11564
    94c0:	11000017 	ldw	r4,0(r2)
    94c4:	01400074 	movhi	r5,1
    94c8:	2964be04 	addi	r5,r5,-27912
    94cc:	0009dd81 	jmpi	9dd8 <_fwalk>

000094d0 <__fp_unlock_all>:
    94d0:	00800074 	movhi	r2,1
    94d4:	108b4b04 	addi	r2,r2,11564
    94d8:	11000017 	ldw	r4,0(r2)
    94dc:	01400074 	movhi	r5,1
    94e0:	29645204 	addi	r5,r5,-28344
    94e4:	0009dd81 	jmpi	9dd8 <_fwalk>

000094e8 <_malloc_trim_r>:
    94e8:	defffb04 	addi	sp,sp,-20
    94ec:	dcc00315 	stw	r19,12(sp)
    94f0:	04c00074 	movhi	r19,1
    94f4:	dc800215 	stw	r18,8(sp)
    94f8:	dc400115 	stw	r17,4(sp)
    94fc:	dc000015 	stw	r16,0(sp)
    9500:	dfc00415 	stw	ra,16(sp)
    9504:	2821883a 	mov	r16,r5
    9508:	9cc60404 	addi	r19,r19,6160
    950c:	2025883a 	mov	r18,r4
    9510:	000f2cc0 	call	f2cc <__malloc_lock>
    9514:	98800217 	ldw	r2,8(r19)
    9518:	14400117 	ldw	r17,4(r2)
    951c:	00bfff04 	movi	r2,-4
    9520:	88a2703a 	and	r17,r17,r2
    9524:	8c21c83a 	sub	r16,r17,r16
    9528:	8403fbc4 	addi	r16,r16,4079
    952c:	8020d33a 	srli	r16,r16,12
    9530:	0083ffc4 	movi	r2,4095
    9534:	843fffc4 	addi	r16,r16,-1
    9538:	8020933a 	slli	r16,r16,12
    953c:	1400060e 	bge	r2,r16,9558 <_malloc_trim_r+0x70>
    9540:	000b883a 	mov	r5,zero
    9544:	9009883a 	mov	r4,r18
    9548:	000c2cc0 	call	c2cc <_sbrk_r>
    954c:	98c00217 	ldw	r3,8(r19)
    9550:	1c47883a 	add	r3,r3,r17
    9554:	10c00a26 	beq	r2,r3,9580 <_malloc_trim_r+0x98>
    9558:	9009883a 	mov	r4,r18
    955c:	000f2d00 	call	f2d0 <__malloc_unlock>
    9560:	0005883a 	mov	r2,zero
    9564:	dfc00417 	ldw	ra,16(sp)
    9568:	dcc00317 	ldw	r19,12(sp)
    956c:	dc800217 	ldw	r18,8(sp)
    9570:	dc400117 	ldw	r17,4(sp)
    9574:	dc000017 	ldw	r16,0(sp)
    9578:	dec00504 	addi	sp,sp,20
    957c:	f800283a 	ret
    9580:	040bc83a 	sub	r5,zero,r16
    9584:	9009883a 	mov	r4,r18
    9588:	000c2cc0 	call	c2cc <_sbrk_r>
    958c:	00ffffc4 	movi	r3,-1
    9590:	10c00d26 	beq	r2,r3,95c8 <_malloc_trim_r+0xe0>
    9594:	00c00074 	movhi	r3,1
    9598:	18d1eb04 	addi	r3,r3,18348
    959c:	18800017 	ldw	r2,0(r3)
    95a0:	99000217 	ldw	r4,8(r19)
    95a4:	8c23c83a 	sub	r17,r17,r16
    95a8:	8c400054 	ori	r17,r17,1
    95ac:	1421c83a 	sub	r16,r2,r16
    95b0:	24400115 	stw	r17,4(r4)
    95b4:	9009883a 	mov	r4,r18
    95b8:	1c000015 	stw	r16,0(r3)
    95bc:	000f2d00 	call	f2d0 <__malloc_unlock>
    95c0:	00800044 	movi	r2,1
    95c4:	003fe706 	br	9564 <__alt_data_end+0xff809564>
    95c8:	000b883a 	mov	r5,zero
    95cc:	9009883a 	mov	r4,r18
    95d0:	000c2cc0 	call	c2cc <_sbrk_r>
    95d4:	99000217 	ldw	r4,8(r19)
    95d8:	014003c4 	movi	r5,15
    95dc:	1107c83a 	sub	r3,r2,r4
    95e0:	28ffdd0e 	bge	r5,r3,9558 <__alt_data_end+0xff809558>
    95e4:	01400074 	movhi	r5,1
    95e8:	294b4d04 	addi	r5,r5,11572
    95ec:	29400017 	ldw	r5,0(r5)
    95f0:	18c00054 	ori	r3,r3,1
    95f4:	20c00115 	stw	r3,4(r4)
    95f8:	00c00074 	movhi	r3,1
    95fc:	1145c83a 	sub	r2,r2,r5
    9600:	18d1eb04 	addi	r3,r3,18348
    9604:	18800015 	stw	r2,0(r3)
    9608:	003fd306 	br	9558 <__alt_data_end+0xff809558>

0000960c <_free_r>:
    960c:	28004126 	beq	r5,zero,9714 <_free_r+0x108>
    9610:	defffd04 	addi	sp,sp,-12
    9614:	dc400115 	stw	r17,4(sp)
    9618:	dc000015 	stw	r16,0(sp)
    961c:	2023883a 	mov	r17,r4
    9620:	2821883a 	mov	r16,r5
    9624:	dfc00215 	stw	ra,8(sp)
    9628:	000f2cc0 	call	f2cc <__malloc_lock>
    962c:	81ffff17 	ldw	r7,-4(r16)
    9630:	00bfff84 	movi	r2,-2
    9634:	01000074 	movhi	r4,1
    9638:	81bffe04 	addi	r6,r16,-8
    963c:	3884703a 	and	r2,r7,r2
    9640:	21060404 	addi	r4,r4,6160
    9644:	308b883a 	add	r5,r6,r2
    9648:	2a400117 	ldw	r9,4(r5)
    964c:	22000217 	ldw	r8,8(r4)
    9650:	00ffff04 	movi	r3,-4
    9654:	48c6703a 	and	r3,r9,r3
    9658:	2a005726 	beq	r5,r8,97b8 <_free_r+0x1ac>
    965c:	28c00115 	stw	r3,4(r5)
    9660:	39c0004c 	andi	r7,r7,1
    9664:	3800091e 	bne	r7,zero,968c <_free_r+0x80>
    9668:	823ffe17 	ldw	r8,-8(r16)
    966c:	22400204 	addi	r9,r4,8
    9670:	320dc83a 	sub	r6,r6,r8
    9674:	31c00217 	ldw	r7,8(r6)
    9678:	1205883a 	add	r2,r2,r8
    967c:	3a406526 	beq	r7,r9,9814 <_free_r+0x208>
    9680:	32000317 	ldw	r8,12(r6)
    9684:	3a000315 	stw	r8,12(r7)
    9688:	41c00215 	stw	r7,8(r8)
    968c:	28cf883a 	add	r7,r5,r3
    9690:	39c00117 	ldw	r7,4(r7)
    9694:	39c0004c 	andi	r7,r7,1
    9698:	38003a26 	beq	r7,zero,9784 <_free_r+0x178>
    969c:	10c00054 	ori	r3,r2,1
    96a0:	30c00115 	stw	r3,4(r6)
    96a4:	3087883a 	add	r3,r6,r2
    96a8:	18800015 	stw	r2,0(r3)
    96ac:	00c07fc4 	movi	r3,511
    96b0:	18801936 	bltu	r3,r2,9718 <_free_r+0x10c>
    96b4:	1004d0fa 	srli	r2,r2,3
    96b8:	01c00044 	movi	r7,1
    96bc:	21400117 	ldw	r5,4(r4)
    96c0:	10c00044 	addi	r3,r2,1
    96c4:	18c7883a 	add	r3,r3,r3
    96c8:	1005d0ba 	srai	r2,r2,2
    96cc:	18c7883a 	add	r3,r3,r3
    96d0:	18c7883a 	add	r3,r3,r3
    96d4:	1907883a 	add	r3,r3,r4
    96d8:	3884983a 	sll	r2,r7,r2
    96dc:	19c00017 	ldw	r7,0(r3)
    96e0:	1a3ffe04 	addi	r8,r3,-8
    96e4:	1144b03a 	or	r2,r2,r5
    96e8:	32000315 	stw	r8,12(r6)
    96ec:	31c00215 	stw	r7,8(r6)
    96f0:	20800115 	stw	r2,4(r4)
    96f4:	19800015 	stw	r6,0(r3)
    96f8:	39800315 	stw	r6,12(r7)
    96fc:	8809883a 	mov	r4,r17
    9700:	dfc00217 	ldw	ra,8(sp)
    9704:	dc400117 	ldw	r17,4(sp)
    9708:	dc000017 	ldw	r16,0(sp)
    970c:	dec00304 	addi	sp,sp,12
    9710:	000f2d01 	jmpi	f2d0 <__malloc_unlock>
    9714:	f800283a 	ret
    9718:	100ad27a 	srli	r5,r2,9
    971c:	00c00104 	movi	r3,4
    9720:	19404a36 	bltu	r3,r5,984c <_free_r+0x240>
    9724:	100ad1ba 	srli	r5,r2,6
    9728:	28c00e44 	addi	r3,r5,57
    972c:	18c7883a 	add	r3,r3,r3
    9730:	29400e04 	addi	r5,r5,56
    9734:	18c7883a 	add	r3,r3,r3
    9738:	18c7883a 	add	r3,r3,r3
    973c:	1909883a 	add	r4,r3,r4
    9740:	20c00017 	ldw	r3,0(r4)
    9744:	01c00074 	movhi	r7,1
    9748:	213ffe04 	addi	r4,r4,-8
    974c:	39c60404 	addi	r7,r7,6160
    9750:	20c04426 	beq	r4,r3,9864 <_free_r+0x258>
    9754:	01ffff04 	movi	r7,-4
    9758:	19400117 	ldw	r5,4(r3)
    975c:	29ca703a 	and	r5,r5,r7
    9760:	1140022e 	bgeu	r2,r5,976c <_free_r+0x160>
    9764:	18c00217 	ldw	r3,8(r3)
    9768:	20fffb1e 	bne	r4,r3,9758 <__alt_data_end+0xff809758>
    976c:	19000317 	ldw	r4,12(r3)
    9770:	31000315 	stw	r4,12(r6)
    9774:	30c00215 	stw	r3,8(r6)
    9778:	21800215 	stw	r6,8(r4)
    977c:	19800315 	stw	r6,12(r3)
    9780:	003fde06 	br	96fc <__alt_data_end+0xff8096fc>
    9784:	29c00217 	ldw	r7,8(r5)
    9788:	10c5883a 	add	r2,r2,r3
    978c:	00c00074 	movhi	r3,1
    9790:	18c60604 	addi	r3,r3,6168
    9794:	38c03b26 	beq	r7,r3,9884 <_free_r+0x278>
    9798:	2a000317 	ldw	r8,12(r5)
    979c:	11400054 	ori	r5,r2,1
    97a0:	3087883a 	add	r3,r6,r2
    97a4:	3a000315 	stw	r8,12(r7)
    97a8:	41c00215 	stw	r7,8(r8)
    97ac:	31400115 	stw	r5,4(r6)
    97b0:	18800015 	stw	r2,0(r3)
    97b4:	003fbd06 	br	96ac <__alt_data_end+0xff8096ac>
    97b8:	39c0004c 	andi	r7,r7,1
    97bc:	10c5883a 	add	r2,r2,r3
    97c0:	3800071e 	bne	r7,zero,97e0 <_free_r+0x1d4>
    97c4:	81fffe17 	ldw	r7,-8(r16)
    97c8:	31cdc83a 	sub	r6,r6,r7
    97cc:	30c00317 	ldw	r3,12(r6)
    97d0:	31400217 	ldw	r5,8(r6)
    97d4:	11c5883a 	add	r2,r2,r7
    97d8:	28c00315 	stw	r3,12(r5)
    97dc:	19400215 	stw	r5,8(r3)
    97e0:	10c00054 	ori	r3,r2,1
    97e4:	30c00115 	stw	r3,4(r6)
    97e8:	00c00074 	movhi	r3,1
    97ec:	18cb4e04 	addi	r3,r3,11576
    97f0:	18c00017 	ldw	r3,0(r3)
    97f4:	21800215 	stw	r6,8(r4)
    97f8:	10ffc036 	bltu	r2,r3,96fc <__alt_data_end+0xff8096fc>
    97fc:	00800074 	movhi	r2,1
    9800:	1091e304 	addi	r2,r2,18316
    9804:	11400017 	ldw	r5,0(r2)
    9808:	8809883a 	mov	r4,r17
    980c:	00094e80 	call	94e8 <_malloc_trim_r>
    9810:	003fba06 	br	96fc <__alt_data_end+0xff8096fc>
    9814:	28c9883a 	add	r4,r5,r3
    9818:	21000117 	ldw	r4,4(r4)
    981c:	2100004c 	andi	r4,r4,1
    9820:	2000391e 	bne	r4,zero,9908 <_free_r+0x2fc>
    9824:	29c00217 	ldw	r7,8(r5)
    9828:	29000317 	ldw	r4,12(r5)
    982c:	1885883a 	add	r2,r3,r2
    9830:	10c00054 	ori	r3,r2,1
    9834:	39000315 	stw	r4,12(r7)
    9838:	21c00215 	stw	r7,8(r4)
    983c:	30c00115 	stw	r3,4(r6)
    9840:	308d883a 	add	r6,r6,r2
    9844:	30800015 	stw	r2,0(r6)
    9848:	003fac06 	br	96fc <__alt_data_end+0xff8096fc>
    984c:	00c00504 	movi	r3,20
    9850:	19401536 	bltu	r3,r5,98a8 <_free_r+0x29c>
    9854:	28c01704 	addi	r3,r5,92
    9858:	18c7883a 	add	r3,r3,r3
    985c:	294016c4 	addi	r5,r5,91
    9860:	003fb406 	br	9734 <__alt_data_end+0xff809734>
    9864:	280bd0ba 	srai	r5,r5,2
    9868:	00c00044 	movi	r3,1
    986c:	38800117 	ldw	r2,4(r7)
    9870:	194a983a 	sll	r5,r3,r5
    9874:	2007883a 	mov	r3,r4
    9878:	2884b03a 	or	r2,r5,r2
    987c:	38800115 	stw	r2,4(r7)
    9880:	003fbb06 	br	9770 <__alt_data_end+0xff809770>
    9884:	21800515 	stw	r6,20(r4)
    9888:	21800415 	stw	r6,16(r4)
    988c:	10c00054 	ori	r3,r2,1
    9890:	31c00315 	stw	r7,12(r6)
    9894:	31c00215 	stw	r7,8(r6)
    9898:	30c00115 	stw	r3,4(r6)
    989c:	308d883a 	add	r6,r6,r2
    98a0:	30800015 	stw	r2,0(r6)
    98a4:	003f9506 	br	96fc <__alt_data_end+0xff8096fc>
    98a8:	00c01504 	movi	r3,84
    98ac:	19400536 	bltu	r3,r5,98c4 <_free_r+0x2b8>
    98b0:	100ad33a 	srli	r5,r2,12
    98b4:	28c01bc4 	addi	r3,r5,111
    98b8:	18c7883a 	add	r3,r3,r3
    98bc:	29401b84 	addi	r5,r5,110
    98c0:	003f9c06 	br	9734 <__alt_data_end+0xff809734>
    98c4:	00c05504 	movi	r3,340
    98c8:	19400536 	bltu	r3,r5,98e0 <_free_r+0x2d4>
    98cc:	100ad3fa 	srli	r5,r2,15
    98d0:	28c01e04 	addi	r3,r5,120
    98d4:	18c7883a 	add	r3,r3,r3
    98d8:	29401dc4 	addi	r5,r5,119
    98dc:	003f9506 	br	9734 <__alt_data_end+0xff809734>
    98e0:	00c15504 	movi	r3,1364
    98e4:	19400536 	bltu	r3,r5,98fc <_free_r+0x2f0>
    98e8:	100ad4ba 	srli	r5,r2,18
    98ec:	28c01f44 	addi	r3,r5,125
    98f0:	18c7883a 	add	r3,r3,r3
    98f4:	29401f04 	addi	r5,r5,124
    98f8:	003f8e06 	br	9734 <__alt_data_end+0xff809734>
    98fc:	00c03f84 	movi	r3,254
    9900:	01401f84 	movi	r5,126
    9904:	003f8b06 	br	9734 <__alt_data_end+0xff809734>
    9908:	10c00054 	ori	r3,r2,1
    990c:	30c00115 	stw	r3,4(r6)
    9910:	308d883a 	add	r6,r6,r2
    9914:	30800015 	stw	r2,0(r6)
    9918:	003f7806 	br	96fc <__alt_data_end+0xff8096fc>

0000991c <__sfvwrite_r>:
    991c:	30800217 	ldw	r2,8(r6)
    9920:	10006726 	beq	r2,zero,9ac0 <__sfvwrite_r+0x1a4>
    9924:	28c0030b 	ldhu	r3,12(r5)
    9928:	defff404 	addi	sp,sp,-48
    992c:	dd400715 	stw	r21,28(sp)
    9930:	dd000615 	stw	r20,24(sp)
    9934:	dc000215 	stw	r16,8(sp)
    9938:	dfc00b15 	stw	ra,44(sp)
    993c:	df000a15 	stw	fp,40(sp)
    9940:	ddc00915 	stw	r23,36(sp)
    9944:	dd800815 	stw	r22,32(sp)
    9948:	dcc00515 	stw	r19,20(sp)
    994c:	dc800415 	stw	r18,16(sp)
    9950:	dc400315 	stw	r17,12(sp)
    9954:	1880020c 	andi	r2,r3,8
    9958:	2821883a 	mov	r16,r5
    995c:	202b883a 	mov	r21,r4
    9960:	3029883a 	mov	r20,r6
    9964:	10002726 	beq	r2,zero,9a04 <__sfvwrite_r+0xe8>
    9968:	28800417 	ldw	r2,16(r5)
    996c:	10002526 	beq	r2,zero,9a04 <__sfvwrite_r+0xe8>
    9970:	1880008c 	andi	r2,r3,2
    9974:	a4400017 	ldw	r17,0(r20)
    9978:	10002a26 	beq	r2,zero,9a24 <__sfvwrite_r+0x108>
    997c:	05a00034 	movhi	r22,32768
    9980:	0027883a 	mov	r19,zero
    9984:	0025883a 	mov	r18,zero
    9988:	b5bf0004 	addi	r22,r22,-1024
    998c:	980d883a 	mov	r6,r19
    9990:	a809883a 	mov	r4,r21
    9994:	90004626 	beq	r18,zero,9ab0 <__sfvwrite_r+0x194>
    9998:	900f883a 	mov	r7,r18
    999c:	b480022e 	bgeu	r22,r18,99a8 <__sfvwrite_r+0x8c>
    99a0:	01e00034 	movhi	r7,32768
    99a4:	39ff0004 	addi	r7,r7,-1024
    99a8:	80800917 	ldw	r2,36(r16)
    99ac:	81400717 	ldw	r5,28(r16)
    99b0:	103ee83a 	callr	r2
    99b4:	0080570e 	bge	zero,r2,9b14 <__sfvwrite_r+0x1f8>
    99b8:	a0c00217 	ldw	r3,8(r20)
    99bc:	98a7883a 	add	r19,r19,r2
    99c0:	90a5c83a 	sub	r18,r18,r2
    99c4:	1885c83a 	sub	r2,r3,r2
    99c8:	a0800215 	stw	r2,8(r20)
    99cc:	103fef1e 	bne	r2,zero,998c <__alt_data_end+0xff80998c>
    99d0:	0005883a 	mov	r2,zero
    99d4:	dfc00b17 	ldw	ra,44(sp)
    99d8:	df000a17 	ldw	fp,40(sp)
    99dc:	ddc00917 	ldw	r23,36(sp)
    99e0:	dd800817 	ldw	r22,32(sp)
    99e4:	dd400717 	ldw	r21,28(sp)
    99e8:	dd000617 	ldw	r20,24(sp)
    99ec:	dcc00517 	ldw	r19,20(sp)
    99f0:	dc800417 	ldw	r18,16(sp)
    99f4:	dc400317 	ldw	r17,12(sp)
    99f8:	dc000217 	ldw	r16,8(sp)
    99fc:	dec00c04 	addi	sp,sp,48
    9a00:	f800283a 	ret
    9a04:	800b883a 	mov	r5,r16
    9a08:	a809883a 	mov	r4,r21
    9a0c:	00074c40 	call	74c4 <__swsetup_r>
    9a10:	1000eb1e 	bne	r2,zero,9dc0 <__sfvwrite_r+0x4a4>
    9a14:	80c0030b 	ldhu	r3,12(r16)
    9a18:	a4400017 	ldw	r17,0(r20)
    9a1c:	1880008c 	andi	r2,r3,2
    9a20:	103fd61e 	bne	r2,zero,997c <__alt_data_end+0xff80997c>
    9a24:	1880004c 	andi	r2,r3,1
    9a28:	10003f1e 	bne	r2,zero,9b28 <__sfvwrite_r+0x20c>
    9a2c:	0039883a 	mov	fp,zero
    9a30:	0025883a 	mov	r18,zero
    9a34:	90001a26 	beq	r18,zero,9aa0 <__sfvwrite_r+0x184>
    9a38:	1880800c 	andi	r2,r3,512
    9a3c:	84c00217 	ldw	r19,8(r16)
    9a40:	10002126 	beq	r2,zero,9ac8 <__sfvwrite_r+0x1ac>
    9a44:	982f883a 	mov	r23,r19
    9a48:	94c09336 	bltu	r18,r19,9c98 <__sfvwrite_r+0x37c>
    9a4c:	1881200c 	andi	r2,r3,1152
    9a50:	10009e1e 	bne	r2,zero,9ccc <__sfvwrite_r+0x3b0>
    9a54:	81000017 	ldw	r4,0(r16)
    9a58:	b80d883a 	mov	r6,r23
    9a5c:	e00b883a 	mov	r5,fp
    9a60:	000aae80 	call	aae8 <memmove>
    9a64:	80c00217 	ldw	r3,8(r16)
    9a68:	81000017 	ldw	r4,0(r16)
    9a6c:	9005883a 	mov	r2,r18
    9a70:	1ce7c83a 	sub	r19,r3,r19
    9a74:	25cf883a 	add	r7,r4,r23
    9a78:	84c00215 	stw	r19,8(r16)
    9a7c:	81c00015 	stw	r7,0(r16)
    9a80:	a0c00217 	ldw	r3,8(r20)
    9a84:	e0b9883a 	add	fp,fp,r2
    9a88:	90a5c83a 	sub	r18,r18,r2
    9a8c:	18a7c83a 	sub	r19,r3,r2
    9a90:	a4c00215 	stw	r19,8(r20)
    9a94:	983fce26 	beq	r19,zero,99d0 <__alt_data_end+0xff8099d0>
    9a98:	80c0030b 	ldhu	r3,12(r16)
    9a9c:	903fe61e 	bne	r18,zero,9a38 <__alt_data_end+0xff809a38>
    9aa0:	8f000017 	ldw	fp,0(r17)
    9aa4:	8c800117 	ldw	r18,4(r17)
    9aa8:	8c400204 	addi	r17,r17,8
    9aac:	003fe106 	br	9a34 <__alt_data_end+0xff809a34>
    9ab0:	8cc00017 	ldw	r19,0(r17)
    9ab4:	8c800117 	ldw	r18,4(r17)
    9ab8:	8c400204 	addi	r17,r17,8
    9abc:	003fb306 	br	998c <__alt_data_end+0xff80998c>
    9ac0:	0005883a 	mov	r2,zero
    9ac4:	f800283a 	ret
    9ac8:	81000017 	ldw	r4,0(r16)
    9acc:	80800417 	ldw	r2,16(r16)
    9ad0:	11005736 	bltu	r2,r4,9c30 <__sfvwrite_r+0x314>
    9ad4:	85c00517 	ldw	r23,20(r16)
    9ad8:	95c05536 	bltu	r18,r23,9c30 <__sfvwrite_r+0x314>
    9adc:	00a00034 	movhi	r2,32768
    9ae0:	10bfffc4 	addi	r2,r2,-1
    9ae4:	9009883a 	mov	r4,r18
    9ae8:	1480012e 	bgeu	r2,r18,9af0 <__sfvwrite_r+0x1d4>
    9aec:	1009883a 	mov	r4,r2
    9af0:	b80b883a 	mov	r5,r23
    9af4:	0004d100 	call	4d10 <__divsi3>
    9af8:	15cf383a 	mul	r7,r2,r23
    9afc:	81400717 	ldw	r5,28(r16)
    9b00:	80800917 	ldw	r2,36(r16)
    9b04:	e00d883a 	mov	r6,fp
    9b08:	a809883a 	mov	r4,r21
    9b0c:	103ee83a 	callr	r2
    9b10:	00bfdb16 	blt	zero,r2,9a80 <__alt_data_end+0xff809a80>
    9b14:	8080030b 	ldhu	r2,12(r16)
    9b18:	10801014 	ori	r2,r2,64
    9b1c:	8080030d 	sth	r2,12(r16)
    9b20:	00bfffc4 	movi	r2,-1
    9b24:	003fab06 	br	99d4 <__alt_data_end+0xff8099d4>
    9b28:	0027883a 	mov	r19,zero
    9b2c:	0011883a 	mov	r8,zero
    9b30:	0039883a 	mov	fp,zero
    9b34:	0025883a 	mov	r18,zero
    9b38:	90001f26 	beq	r18,zero,9bb8 <__sfvwrite_r+0x29c>
    9b3c:	40005a26 	beq	r8,zero,9ca8 <__sfvwrite_r+0x38c>
    9b40:	982d883a 	mov	r22,r19
    9b44:	94c0012e 	bgeu	r18,r19,9b4c <__sfvwrite_r+0x230>
    9b48:	902d883a 	mov	r22,r18
    9b4c:	81000017 	ldw	r4,0(r16)
    9b50:	80800417 	ldw	r2,16(r16)
    9b54:	b02f883a 	mov	r23,r22
    9b58:	81c00517 	ldw	r7,20(r16)
    9b5c:	1100032e 	bgeu	r2,r4,9b6c <__sfvwrite_r+0x250>
    9b60:	80c00217 	ldw	r3,8(r16)
    9b64:	38c7883a 	add	r3,r7,r3
    9b68:	1d801816 	blt	r3,r22,9bcc <__sfvwrite_r+0x2b0>
    9b6c:	b1c03e16 	blt	r22,r7,9c68 <__sfvwrite_r+0x34c>
    9b70:	80800917 	ldw	r2,36(r16)
    9b74:	81400717 	ldw	r5,28(r16)
    9b78:	e00d883a 	mov	r6,fp
    9b7c:	da000115 	stw	r8,4(sp)
    9b80:	a809883a 	mov	r4,r21
    9b84:	103ee83a 	callr	r2
    9b88:	102f883a 	mov	r23,r2
    9b8c:	da000117 	ldw	r8,4(sp)
    9b90:	00bfe00e 	bge	zero,r2,9b14 <__alt_data_end+0xff809b14>
    9b94:	9de7c83a 	sub	r19,r19,r23
    9b98:	98001f26 	beq	r19,zero,9c18 <__sfvwrite_r+0x2fc>
    9b9c:	a0800217 	ldw	r2,8(r20)
    9ba0:	e5f9883a 	add	fp,fp,r23
    9ba4:	95e5c83a 	sub	r18,r18,r23
    9ba8:	15efc83a 	sub	r23,r2,r23
    9bac:	a5c00215 	stw	r23,8(r20)
    9bb0:	b83f8726 	beq	r23,zero,99d0 <__alt_data_end+0xff8099d0>
    9bb4:	903fe11e 	bne	r18,zero,9b3c <__alt_data_end+0xff809b3c>
    9bb8:	8f000017 	ldw	fp,0(r17)
    9bbc:	8c800117 	ldw	r18,4(r17)
    9bc0:	0011883a 	mov	r8,zero
    9bc4:	8c400204 	addi	r17,r17,8
    9bc8:	003fdb06 	br	9b38 <__alt_data_end+0xff809b38>
    9bcc:	180d883a 	mov	r6,r3
    9bd0:	e00b883a 	mov	r5,fp
    9bd4:	da000115 	stw	r8,4(sp)
    9bd8:	d8c00015 	stw	r3,0(sp)
    9bdc:	000aae80 	call	aae8 <memmove>
    9be0:	d8c00017 	ldw	r3,0(sp)
    9be4:	80800017 	ldw	r2,0(r16)
    9be8:	800b883a 	mov	r5,r16
    9bec:	a809883a 	mov	r4,r21
    9bf0:	10c5883a 	add	r2,r2,r3
    9bf4:	80800015 	stw	r2,0(r16)
    9bf8:	d8c00015 	stw	r3,0(sp)
    9bfc:	00090bc0 	call	90bc <_fflush_r>
    9c00:	d8c00017 	ldw	r3,0(sp)
    9c04:	da000117 	ldw	r8,4(sp)
    9c08:	103fc21e 	bne	r2,zero,9b14 <__alt_data_end+0xff809b14>
    9c0c:	182f883a 	mov	r23,r3
    9c10:	9de7c83a 	sub	r19,r19,r23
    9c14:	983fe11e 	bne	r19,zero,9b9c <__alt_data_end+0xff809b9c>
    9c18:	800b883a 	mov	r5,r16
    9c1c:	a809883a 	mov	r4,r21
    9c20:	00090bc0 	call	90bc <_fflush_r>
    9c24:	103fbb1e 	bne	r2,zero,9b14 <__alt_data_end+0xff809b14>
    9c28:	0011883a 	mov	r8,zero
    9c2c:	003fdb06 	br	9b9c <__alt_data_end+0xff809b9c>
    9c30:	94c0012e 	bgeu	r18,r19,9c38 <__sfvwrite_r+0x31c>
    9c34:	9027883a 	mov	r19,r18
    9c38:	980d883a 	mov	r6,r19
    9c3c:	e00b883a 	mov	r5,fp
    9c40:	000aae80 	call	aae8 <memmove>
    9c44:	80800217 	ldw	r2,8(r16)
    9c48:	80c00017 	ldw	r3,0(r16)
    9c4c:	14c5c83a 	sub	r2,r2,r19
    9c50:	1cc7883a 	add	r3,r3,r19
    9c54:	80800215 	stw	r2,8(r16)
    9c58:	80c00015 	stw	r3,0(r16)
    9c5c:	10004326 	beq	r2,zero,9d6c <__sfvwrite_r+0x450>
    9c60:	9805883a 	mov	r2,r19
    9c64:	003f8606 	br	9a80 <__alt_data_end+0xff809a80>
    9c68:	b00d883a 	mov	r6,r22
    9c6c:	e00b883a 	mov	r5,fp
    9c70:	da000115 	stw	r8,4(sp)
    9c74:	000aae80 	call	aae8 <memmove>
    9c78:	80800217 	ldw	r2,8(r16)
    9c7c:	80c00017 	ldw	r3,0(r16)
    9c80:	da000117 	ldw	r8,4(sp)
    9c84:	1585c83a 	sub	r2,r2,r22
    9c88:	1dad883a 	add	r22,r3,r22
    9c8c:	80800215 	stw	r2,8(r16)
    9c90:	85800015 	stw	r22,0(r16)
    9c94:	003fbf06 	br	9b94 <__alt_data_end+0xff809b94>
    9c98:	81000017 	ldw	r4,0(r16)
    9c9c:	9027883a 	mov	r19,r18
    9ca0:	902f883a 	mov	r23,r18
    9ca4:	003f6c06 	br	9a58 <__alt_data_end+0xff809a58>
    9ca8:	900d883a 	mov	r6,r18
    9cac:	01400284 	movi	r5,10
    9cb0:	e009883a 	mov	r4,fp
    9cb4:	000aa040 	call	aa04 <memchr>
    9cb8:	10003e26 	beq	r2,zero,9db4 <__sfvwrite_r+0x498>
    9cbc:	10800044 	addi	r2,r2,1
    9cc0:	1727c83a 	sub	r19,r2,fp
    9cc4:	02000044 	movi	r8,1
    9cc8:	003f9d06 	br	9b40 <__alt_data_end+0xff809b40>
    9ccc:	80800517 	ldw	r2,20(r16)
    9cd0:	81400417 	ldw	r5,16(r16)
    9cd4:	81c00017 	ldw	r7,0(r16)
    9cd8:	10a7883a 	add	r19,r2,r2
    9cdc:	9885883a 	add	r2,r19,r2
    9ce0:	1026d7fa 	srli	r19,r2,31
    9ce4:	396dc83a 	sub	r22,r7,r5
    9ce8:	b1000044 	addi	r4,r22,1
    9cec:	9885883a 	add	r2,r19,r2
    9cf0:	1027d07a 	srai	r19,r2,1
    9cf4:	2485883a 	add	r2,r4,r18
    9cf8:	980d883a 	mov	r6,r19
    9cfc:	9880022e 	bgeu	r19,r2,9d08 <__sfvwrite_r+0x3ec>
    9d00:	1027883a 	mov	r19,r2
    9d04:	100d883a 	mov	r6,r2
    9d08:	18c1000c 	andi	r3,r3,1024
    9d0c:	18001c26 	beq	r3,zero,9d80 <__sfvwrite_r+0x464>
    9d10:	300b883a 	mov	r5,r6
    9d14:	a809883a 	mov	r4,r21
    9d18:	000a1f80 	call	a1f8 <_malloc_r>
    9d1c:	102f883a 	mov	r23,r2
    9d20:	10002926 	beq	r2,zero,9dc8 <__sfvwrite_r+0x4ac>
    9d24:	81400417 	ldw	r5,16(r16)
    9d28:	b00d883a 	mov	r6,r22
    9d2c:	1009883a 	mov	r4,r2
    9d30:	0004ed40 	call	4ed4 <memcpy>
    9d34:	8080030b 	ldhu	r2,12(r16)
    9d38:	00fedfc4 	movi	r3,-1153
    9d3c:	10c4703a 	and	r2,r2,r3
    9d40:	10802014 	ori	r2,r2,128
    9d44:	8080030d 	sth	r2,12(r16)
    9d48:	bd89883a 	add	r4,r23,r22
    9d4c:	9d8fc83a 	sub	r7,r19,r22
    9d50:	85c00415 	stw	r23,16(r16)
    9d54:	84c00515 	stw	r19,20(r16)
    9d58:	81000015 	stw	r4,0(r16)
    9d5c:	9027883a 	mov	r19,r18
    9d60:	81c00215 	stw	r7,8(r16)
    9d64:	902f883a 	mov	r23,r18
    9d68:	003f3b06 	br	9a58 <__alt_data_end+0xff809a58>
    9d6c:	800b883a 	mov	r5,r16
    9d70:	a809883a 	mov	r4,r21
    9d74:	00090bc0 	call	90bc <_fflush_r>
    9d78:	103fb926 	beq	r2,zero,9c60 <__alt_data_end+0xff809c60>
    9d7c:	003f6506 	br	9b14 <__alt_data_end+0xff809b14>
    9d80:	a809883a 	mov	r4,r21
    9d84:	000bd680 	call	bd68 <_realloc_r>
    9d88:	102f883a 	mov	r23,r2
    9d8c:	103fee1e 	bne	r2,zero,9d48 <__alt_data_end+0xff809d48>
    9d90:	81400417 	ldw	r5,16(r16)
    9d94:	a809883a 	mov	r4,r21
    9d98:	000960c0 	call	960c <_free_r>
    9d9c:	8080030b 	ldhu	r2,12(r16)
    9da0:	00ffdfc4 	movi	r3,-129
    9da4:	1884703a 	and	r2,r3,r2
    9da8:	00c00304 	movi	r3,12
    9dac:	a8c00015 	stw	r3,0(r21)
    9db0:	003f5906 	br	9b18 <__alt_data_end+0xff809b18>
    9db4:	94c00044 	addi	r19,r18,1
    9db8:	02000044 	movi	r8,1
    9dbc:	003f6006 	br	9b40 <__alt_data_end+0xff809b40>
    9dc0:	00bfffc4 	movi	r2,-1
    9dc4:	003f0306 	br	99d4 <__alt_data_end+0xff8099d4>
    9dc8:	00800304 	movi	r2,12
    9dcc:	a8800015 	stw	r2,0(r21)
    9dd0:	8080030b 	ldhu	r2,12(r16)
    9dd4:	003f5006 	br	9b18 <__alt_data_end+0xff809b18>

00009dd8 <_fwalk>:
    9dd8:	defff704 	addi	sp,sp,-36
    9ddc:	dd000415 	stw	r20,16(sp)
    9de0:	dfc00815 	stw	ra,32(sp)
    9de4:	ddc00715 	stw	r23,28(sp)
    9de8:	dd800615 	stw	r22,24(sp)
    9dec:	dd400515 	stw	r21,20(sp)
    9df0:	dcc00315 	stw	r19,12(sp)
    9df4:	dc800215 	stw	r18,8(sp)
    9df8:	dc400115 	stw	r17,4(sp)
    9dfc:	dc000015 	stw	r16,0(sp)
    9e00:	2500b804 	addi	r20,r4,736
    9e04:	a0002326 	beq	r20,zero,9e94 <_fwalk+0xbc>
    9e08:	282b883a 	mov	r21,r5
    9e0c:	002f883a 	mov	r23,zero
    9e10:	05800044 	movi	r22,1
    9e14:	04ffffc4 	movi	r19,-1
    9e18:	a4400117 	ldw	r17,4(r20)
    9e1c:	a4800217 	ldw	r18,8(r20)
    9e20:	8c7fffc4 	addi	r17,r17,-1
    9e24:	88000d16 	blt	r17,zero,9e5c <_fwalk+0x84>
    9e28:	94000304 	addi	r16,r18,12
    9e2c:	94800384 	addi	r18,r18,14
    9e30:	8080000b 	ldhu	r2,0(r16)
    9e34:	8c7fffc4 	addi	r17,r17,-1
    9e38:	813ffd04 	addi	r4,r16,-12
    9e3c:	b080042e 	bgeu	r22,r2,9e50 <_fwalk+0x78>
    9e40:	9080000f 	ldh	r2,0(r18)
    9e44:	14c00226 	beq	r2,r19,9e50 <_fwalk+0x78>
    9e48:	a83ee83a 	callr	r21
    9e4c:	b8aeb03a 	or	r23,r23,r2
    9e50:	84001a04 	addi	r16,r16,104
    9e54:	94801a04 	addi	r18,r18,104
    9e58:	8cfff51e 	bne	r17,r19,9e30 <__alt_data_end+0xff809e30>
    9e5c:	a5000017 	ldw	r20,0(r20)
    9e60:	a03fed1e 	bne	r20,zero,9e18 <__alt_data_end+0xff809e18>
    9e64:	b805883a 	mov	r2,r23
    9e68:	dfc00817 	ldw	ra,32(sp)
    9e6c:	ddc00717 	ldw	r23,28(sp)
    9e70:	dd800617 	ldw	r22,24(sp)
    9e74:	dd400517 	ldw	r21,20(sp)
    9e78:	dd000417 	ldw	r20,16(sp)
    9e7c:	dcc00317 	ldw	r19,12(sp)
    9e80:	dc800217 	ldw	r18,8(sp)
    9e84:	dc400117 	ldw	r17,4(sp)
    9e88:	dc000017 	ldw	r16,0(sp)
    9e8c:	dec00904 	addi	sp,sp,36
    9e90:	f800283a 	ret
    9e94:	002f883a 	mov	r23,zero
    9e98:	003ff206 	br	9e64 <__alt_data_end+0xff809e64>

00009e9c <_fwalk_reent>:
    9e9c:	defff704 	addi	sp,sp,-36
    9ea0:	dd000415 	stw	r20,16(sp)
    9ea4:	dfc00815 	stw	ra,32(sp)
    9ea8:	ddc00715 	stw	r23,28(sp)
    9eac:	dd800615 	stw	r22,24(sp)
    9eb0:	dd400515 	stw	r21,20(sp)
    9eb4:	dcc00315 	stw	r19,12(sp)
    9eb8:	dc800215 	stw	r18,8(sp)
    9ebc:	dc400115 	stw	r17,4(sp)
    9ec0:	dc000015 	stw	r16,0(sp)
    9ec4:	2500b804 	addi	r20,r4,736
    9ec8:	a0002326 	beq	r20,zero,9f58 <_fwalk_reent+0xbc>
    9ecc:	282b883a 	mov	r21,r5
    9ed0:	2027883a 	mov	r19,r4
    9ed4:	002f883a 	mov	r23,zero
    9ed8:	05800044 	movi	r22,1
    9edc:	04bfffc4 	movi	r18,-1
    9ee0:	a4400117 	ldw	r17,4(r20)
    9ee4:	a4000217 	ldw	r16,8(r20)
    9ee8:	8c7fffc4 	addi	r17,r17,-1
    9eec:	88000c16 	blt	r17,zero,9f20 <_fwalk_reent+0x84>
    9ef0:	84000304 	addi	r16,r16,12
    9ef4:	8080000b 	ldhu	r2,0(r16)
    9ef8:	8c7fffc4 	addi	r17,r17,-1
    9efc:	817ffd04 	addi	r5,r16,-12
    9f00:	b080052e 	bgeu	r22,r2,9f18 <_fwalk_reent+0x7c>
    9f04:	8080008f 	ldh	r2,2(r16)
    9f08:	9809883a 	mov	r4,r19
    9f0c:	14800226 	beq	r2,r18,9f18 <_fwalk_reent+0x7c>
    9f10:	a83ee83a 	callr	r21
    9f14:	b8aeb03a 	or	r23,r23,r2
    9f18:	84001a04 	addi	r16,r16,104
    9f1c:	8cbff51e 	bne	r17,r18,9ef4 <__alt_data_end+0xff809ef4>
    9f20:	a5000017 	ldw	r20,0(r20)
    9f24:	a03fee1e 	bne	r20,zero,9ee0 <__alt_data_end+0xff809ee0>
    9f28:	b805883a 	mov	r2,r23
    9f2c:	dfc00817 	ldw	ra,32(sp)
    9f30:	ddc00717 	ldw	r23,28(sp)
    9f34:	dd800617 	ldw	r22,24(sp)
    9f38:	dd400517 	ldw	r21,20(sp)
    9f3c:	dd000417 	ldw	r20,16(sp)
    9f40:	dcc00317 	ldw	r19,12(sp)
    9f44:	dc800217 	ldw	r18,8(sp)
    9f48:	dc400117 	ldw	r17,4(sp)
    9f4c:	dc000017 	ldw	r16,0(sp)
    9f50:	dec00904 	addi	sp,sp,36
    9f54:	f800283a 	ret
    9f58:	002f883a 	mov	r23,zero
    9f5c:	003ff206 	br	9f28 <__alt_data_end+0xff809f28>

00009f60 <_setlocale_r>:
    9f60:	30001b26 	beq	r6,zero,9fd0 <_setlocale_r+0x70>
    9f64:	01400074 	movhi	r5,1
    9f68:	defffe04 	addi	sp,sp,-8
    9f6c:	29448104 	addi	r5,r5,4612
    9f70:	3009883a 	mov	r4,r6
    9f74:	dc000015 	stw	r16,0(sp)
    9f78:	dfc00115 	stw	ra,4(sp)
    9f7c:	3021883a 	mov	r16,r6
    9f80:	000c45c0 	call	c45c <strcmp>
    9f84:	1000061e 	bne	r2,zero,9fa0 <_setlocale_r+0x40>
    9f88:	00800074 	movhi	r2,1
    9f8c:	10846404 	addi	r2,r2,4496
    9f90:	dfc00117 	ldw	ra,4(sp)
    9f94:	dc000017 	ldw	r16,0(sp)
    9f98:	dec00204 	addi	sp,sp,8
    9f9c:	f800283a 	ret
    9fa0:	01400074 	movhi	r5,1
    9fa4:	29446404 	addi	r5,r5,4496
    9fa8:	8009883a 	mov	r4,r16
    9fac:	000c45c0 	call	c45c <strcmp>
    9fb0:	103ff526 	beq	r2,zero,9f88 <__alt_data_end+0xff809f88>
    9fb4:	01400074 	movhi	r5,1
    9fb8:	29441004 	addi	r5,r5,4160
    9fbc:	8009883a 	mov	r4,r16
    9fc0:	000c45c0 	call	c45c <strcmp>
    9fc4:	103ff026 	beq	r2,zero,9f88 <__alt_data_end+0xff809f88>
    9fc8:	0005883a 	mov	r2,zero
    9fcc:	003ff006 	br	9f90 <__alt_data_end+0xff809f90>
    9fd0:	00800074 	movhi	r2,1
    9fd4:	10846404 	addi	r2,r2,4496
    9fd8:	f800283a 	ret

00009fdc <__locale_charset>:
    9fdc:	00800074 	movhi	r2,1
    9fe0:	1085ee04 	addi	r2,r2,6072
    9fe4:	f800283a 	ret

00009fe8 <__locale_mb_cur_max>:
    9fe8:	00800074 	movhi	r2,1
    9fec:	108b4c04 	addi	r2,r2,11568
    9ff0:	10800017 	ldw	r2,0(r2)
    9ff4:	f800283a 	ret

00009ff8 <__locale_msgcharset>:
    9ff8:	00800074 	movhi	r2,1
    9ffc:	1085e604 	addi	r2,r2,6040
    a000:	f800283a 	ret

0000a004 <__locale_cjk_lang>:
    a004:	0005883a 	mov	r2,zero
    a008:	f800283a 	ret

0000a00c <_localeconv_r>:
    a00c:	00800074 	movhi	r2,1
    a010:	1085f604 	addi	r2,r2,6104
    a014:	f800283a 	ret

0000a018 <setlocale>:
    a018:	00800074 	movhi	r2,1
    a01c:	108b4b04 	addi	r2,r2,11564
    a020:	280d883a 	mov	r6,r5
    a024:	200b883a 	mov	r5,r4
    a028:	11000017 	ldw	r4,0(r2)
    a02c:	0009f601 	jmpi	9f60 <_setlocale_r>

0000a030 <localeconv>:
    a030:	00800074 	movhi	r2,1
    a034:	1085f604 	addi	r2,r2,6104
    a038:	f800283a 	ret

0000a03c <__smakebuf_r>:
    a03c:	2880030b 	ldhu	r2,12(r5)
    a040:	10c0008c 	andi	r3,r2,2
    a044:	1800411e 	bne	r3,zero,a14c <__smakebuf_r+0x110>
    a048:	deffec04 	addi	sp,sp,-80
    a04c:	dc000f15 	stw	r16,60(sp)
    a050:	2821883a 	mov	r16,r5
    a054:	2940038f 	ldh	r5,14(r5)
    a058:	dc401015 	stw	r17,64(sp)
    a05c:	dfc01315 	stw	ra,76(sp)
    a060:	dcc01215 	stw	r19,72(sp)
    a064:	dc801115 	stw	r18,68(sp)
    a068:	2023883a 	mov	r17,r4
    a06c:	28001c16 	blt	r5,zero,a0e0 <__smakebuf_r+0xa4>
    a070:	d80d883a 	mov	r6,sp
    a074:	000e0040 	call	e004 <_fstat_r>
    a078:	10001816 	blt	r2,zero,a0dc <__smakebuf_r+0xa0>
    a07c:	d8800117 	ldw	r2,4(sp)
    a080:	00e00014 	movui	r3,32768
    a084:	10bc000c 	andi	r2,r2,61440
    a088:	14c80020 	cmpeqi	r19,r2,8192
    a08c:	10c03726 	beq	r2,r3,a16c <__smakebuf_r+0x130>
    a090:	80c0030b 	ldhu	r3,12(r16)
    a094:	18c20014 	ori	r3,r3,2048
    a098:	80c0030d 	sth	r3,12(r16)
    a09c:	00c80004 	movi	r3,8192
    a0a0:	10c0521e 	bne	r2,r3,a1ec <__smakebuf_r+0x1b0>
    a0a4:	8140038f 	ldh	r5,14(r16)
    a0a8:	8809883a 	mov	r4,r17
    a0ac:	000e0600 	call	e060 <_isatty_r>
    a0b0:	10004c26 	beq	r2,zero,a1e4 <__smakebuf_r+0x1a8>
    a0b4:	8080030b 	ldhu	r2,12(r16)
    a0b8:	80c010c4 	addi	r3,r16,67
    a0bc:	80c00015 	stw	r3,0(r16)
    a0c0:	10800054 	ori	r2,r2,1
    a0c4:	8080030d 	sth	r2,12(r16)
    a0c8:	00800044 	movi	r2,1
    a0cc:	80c00415 	stw	r3,16(r16)
    a0d0:	80800515 	stw	r2,20(r16)
    a0d4:	04810004 	movi	r18,1024
    a0d8:	00000706 	br	a0f8 <__smakebuf_r+0xbc>
    a0dc:	8080030b 	ldhu	r2,12(r16)
    a0e0:	10c0200c 	andi	r3,r2,128
    a0e4:	18001f1e 	bne	r3,zero,a164 <__smakebuf_r+0x128>
    a0e8:	04810004 	movi	r18,1024
    a0ec:	10820014 	ori	r2,r2,2048
    a0f0:	8080030d 	sth	r2,12(r16)
    a0f4:	0027883a 	mov	r19,zero
    a0f8:	900b883a 	mov	r5,r18
    a0fc:	8809883a 	mov	r4,r17
    a100:	000a1f80 	call	a1f8 <_malloc_r>
    a104:	10002c26 	beq	r2,zero,a1b8 <__smakebuf_r+0x17c>
    a108:	80c0030b 	ldhu	r3,12(r16)
    a10c:	01000074 	movhi	r4,1
    a110:	21245404 	addi	r4,r4,-28336
    a114:	89000f15 	stw	r4,60(r17)
    a118:	18c02014 	ori	r3,r3,128
    a11c:	80c0030d 	sth	r3,12(r16)
    a120:	80800015 	stw	r2,0(r16)
    a124:	80800415 	stw	r2,16(r16)
    a128:	84800515 	stw	r18,20(r16)
    a12c:	98001a1e 	bne	r19,zero,a198 <__smakebuf_r+0x15c>
    a130:	dfc01317 	ldw	ra,76(sp)
    a134:	dcc01217 	ldw	r19,72(sp)
    a138:	dc801117 	ldw	r18,68(sp)
    a13c:	dc401017 	ldw	r17,64(sp)
    a140:	dc000f17 	ldw	r16,60(sp)
    a144:	dec01404 	addi	sp,sp,80
    a148:	f800283a 	ret
    a14c:	288010c4 	addi	r2,r5,67
    a150:	28800015 	stw	r2,0(r5)
    a154:	28800415 	stw	r2,16(r5)
    a158:	00800044 	movi	r2,1
    a15c:	28800515 	stw	r2,20(r5)
    a160:	f800283a 	ret
    a164:	04801004 	movi	r18,64
    a168:	003fe006 	br	a0ec <__alt_data_end+0xff80a0ec>
    a16c:	81000a17 	ldw	r4,40(r16)
    a170:	00c00074 	movhi	r3,1
    a174:	18f0fe04 	addi	r3,r3,-15368
    a178:	20ffc51e 	bne	r4,r3,a090 <__alt_data_end+0xff80a090>
    a17c:	8080030b 	ldhu	r2,12(r16)
    a180:	04810004 	movi	r18,1024
    a184:	84801315 	stw	r18,76(r16)
    a188:	1484b03a 	or	r2,r2,r18
    a18c:	8080030d 	sth	r2,12(r16)
    a190:	0027883a 	mov	r19,zero
    a194:	003fd806 	br	a0f8 <__alt_data_end+0xff80a0f8>
    a198:	8140038f 	ldh	r5,14(r16)
    a19c:	8809883a 	mov	r4,r17
    a1a0:	000e0600 	call	e060 <_isatty_r>
    a1a4:	103fe226 	beq	r2,zero,a130 <__alt_data_end+0xff80a130>
    a1a8:	8080030b 	ldhu	r2,12(r16)
    a1ac:	10800054 	ori	r2,r2,1
    a1b0:	8080030d 	sth	r2,12(r16)
    a1b4:	003fde06 	br	a130 <__alt_data_end+0xff80a130>
    a1b8:	8080030b 	ldhu	r2,12(r16)
    a1bc:	10c0800c 	andi	r3,r2,512
    a1c0:	183fdb1e 	bne	r3,zero,a130 <__alt_data_end+0xff80a130>
    a1c4:	10800094 	ori	r2,r2,2
    a1c8:	80c010c4 	addi	r3,r16,67
    a1cc:	8080030d 	sth	r2,12(r16)
    a1d0:	00800044 	movi	r2,1
    a1d4:	80c00015 	stw	r3,0(r16)
    a1d8:	80c00415 	stw	r3,16(r16)
    a1dc:	80800515 	stw	r2,20(r16)
    a1e0:	003fd306 	br	a130 <__alt_data_end+0xff80a130>
    a1e4:	04810004 	movi	r18,1024
    a1e8:	003fc306 	br	a0f8 <__alt_data_end+0xff80a0f8>
    a1ec:	0027883a 	mov	r19,zero
    a1f0:	04810004 	movi	r18,1024
    a1f4:	003fc006 	br	a0f8 <__alt_data_end+0xff80a0f8>

0000a1f8 <_malloc_r>:
    a1f8:	defff504 	addi	sp,sp,-44
    a1fc:	dc800315 	stw	r18,12(sp)
    a200:	dfc00a15 	stw	ra,40(sp)
    a204:	df000915 	stw	fp,36(sp)
    a208:	ddc00815 	stw	r23,32(sp)
    a20c:	dd800715 	stw	r22,28(sp)
    a210:	dd400615 	stw	r21,24(sp)
    a214:	dd000515 	stw	r20,20(sp)
    a218:	dcc00415 	stw	r19,16(sp)
    a21c:	dc400215 	stw	r17,8(sp)
    a220:	dc000115 	stw	r16,4(sp)
    a224:	288002c4 	addi	r2,r5,11
    a228:	00c00584 	movi	r3,22
    a22c:	2025883a 	mov	r18,r4
    a230:	18807f2e 	bgeu	r3,r2,a430 <_malloc_r+0x238>
    a234:	047ffe04 	movi	r17,-8
    a238:	1462703a 	and	r17,r2,r17
    a23c:	8800a316 	blt	r17,zero,a4cc <_malloc_r+0x2d4>
    a240:	8940a236 	bltu	r17,r5,a4cc <_malloc_r+0x2d4>
    a244:	000f2cc0 	call	f2cc <__malloc_lock>
    a248:	00807dc4 	movi	r2,503
    a24c:	1441e92e 	bgeu	r2,r17,a9f4 <_malloc_r+0x7fc>
    a250:	8804d27a 	srli	r2,r17,9
    a254:	1000a126 	beq	r2,zero,a4dc <_malloc_r+0x2e4>
    a258:	00c00104 	movi	r3,4
    a25c:	18811e36 	bltu	r3,r2,a6d8 <_malloc_r+0x4e0>
    a260:	8804d1ba 	srli	r2,r17,6
    a264:	12000e44 	addi	r8,r2,57
    a268:	11c00e04 	addi	r7,r2,56
    a26c:	4209883a 	add	r4,r8,r8
    a270:	04c00074 	movhi	r19,1
    a274:	2109883a 	add	r4,r4,r4
    a278:	9cc60404 	addi	r19,r19,6160
    a27c:	2109883a 	add	r4,r4,r4
    a280:	9909883a 	add	r4,r19,r4
    a284:	24000117 	ldw	r16,4(r4)
    a288:	213ffe04 	addi	r4,r4,-8
    a28c:	24009726 	beq	r4,r16,a4ec <_malloc_r+0x2f4>
    a290:	80800117 	ldw	r2,4(r16)
    a294:	01bfff04 	movi	r6,-4
    a298:	014003c4 	movi	r5,15
    a29c:	1184703a 	and	r2,r2,r6
    a2a0:	1447c83a 	sub	r3,r2,r17
    a2a4:	28c00716 	blt	r5,r3,a2c4 <_malloc_r+0xcc>
    a2a8:	1800920e 	bge	r3,zero,a4f4 <_malloc_r+0x2fc>
    a2ac:	84000317 	ldw	r16,12(r16)
    a2b0:	24008e26 	beq	r4,r16,a4ec <_malloc_r+0x2f4>
    a2b4:	80800117 	ldw	r2,4(r16)
    a2b8:	1184703a 	and	r2,r2,r6
    a2bc:	1447c83a 	sub	r3,r2,r17
    a2c0:	28fff90e 	bge	r5,r3,a2a8 <__alt_data_end+0xff80a2a8>
    a2c4:	3809883a 	mov	r4,r7
    a2c8:	01800074 	movhi	r6,1
    a2cc:	9c000417 	ldw	r16,16(r19)
    a2d0:	31860404 	addi	r6,r6,6160
    a2d4:	32000204 	addi	r8,r6,8
    a2d8:	82013426 	beq	r16,r8,a7ac <_malloc_r+0x5b4>
    a2dc:	80c00117 	ldw	r3,4(r16)
    a2e0:	00bfff04 	movi	r2,-4
    a2e4:	188e703a 	and	r7,r3,r2
    a2e8:	3c45c83a 	sub	r2,r7,r17
    a2ec:	00c003c4 	movi	r3,15
    a2f0:	18811f16 	blt	r3,r2,a770 <_malloc_r+0x578>
    a2f4:	32000515 	stw	r8,20(r6)
    a2f8:	32000415 	stw	r8,16(r6)
    a2fc:	10007f0e 	bge	r2,zero,a4fc <_malloc_r+0x304>
    a300:	00807fc4 	movi	r2,511
    a304:	11c0fd36 	bltu	r2,r7,a6fc <_malloc_r+0x504>
    a308:	3806d0fa 	srli	r3,r7,3
    a30c:	01c00044 	movi	r7,1
    a310:	30800117 	ldw	r2,4(r6)
    a314:	19400044 	addi	r5,r3,1
    a318:	294b883a 	add	r5,r5,r5
    a31c:	1807d0ba 	srai	r3,r3,2
    a320:	294b883a 	add	r5,r5,r5
    a324:	294b883a 	add	r5,r5,r5
    a328:	298b883a 	add	r5,r5,r6
    a32c:	38c6983a 	sll	r3,r7,r3
    a330:	29c00017 	ldw	r7,0(r5)
    a334:	2a7ffe04 	addi	r9,r5,-8
    a338:	1886b03a 	or	r3,r3,r2
    a33c:	82400315 	stw	r9,12(r16)
    a340:	81c00215 	stw	r7,8(r16)
    a344:	30c00115 	stw	r3,4(r6)
    a348:	2c000015 	stw	r16,0(r5)
    a34c:	3c000315 	stw	r16,12(r7)
    a350:	2005d0ba 	srai	r2,r4,2
    a354:	01400044 	movi	r5,1
    a358:	288a983a 	sll	r5,r5,r2
    a35c:	19406f36 	bltu	r3,r5,a51c <_malloc_r+0x324>
    a360:	28c4703a 	and	r2,r5,r3
    a364:	10000a1e 	bne	r2,zero,a390 <_malloc_r+0x198>
    a368:	00bfff04 	movi	r2,-4
    a36c:	294b883a 	add	r5,r5,r5
    a370:	2088703a 	and	r4,r4,r2
    a374:	28c4703a 	and	r2,r5,r3
    a378:	21000104 	addi	r4,r4,4
    a37c:	1000041e 	bne	r2,zero,a390 <_malloc_r+0x198>
    a380:	294b883a 	add	r5,r5,r5
    a384:	28c4703a 	and	r2,r5,r3
    a388:	21000104 	addi	r4,r4,4
    a38c:	103ffc26 	beq	r2,zero,a380 <__alt_data_end+0xff80a380>
    a390:	02bfff04 	movi	r10,-4
    a394:	024003c4 	movi	r9,15
    a398:	21800044 	addi	r6,r4,1
    a39c:	318d883a 	add	r6,r6,r6
    a3a0:	318d883a 	add	r6,r6,r6
    a3a4:	318d883a 	add	r6,r6,r6
    a3a8:	998d883a 	add	r6,r19,r6
    a3ac:	333ffe04 	addi	r12,r6,-8
    a3b0:	2017883a 	mov	r11,r4
    a3b4:	31800104 	addi	r6,r6,4
    a3b8:	34000017 	ldw	r16,0(r6)
    a3bc:	31fffd04 	addi	r7,r6,-12
    a3c0:	81c0041e 	bne	r16,r7,a3d4 <_malloc_r+0x1dc>
    a3c4:	0000fb06 	br	a7b4 <_malloc_r+0x5bc>
    a3c8:	1801030e 	bge	r3,zero,a7d8 <_malloc_r+0x5e0>
    a3cc:	84000317 	ldw	r16,12(r16)
    a3d0:	81c0f826 	beq	r16,r7,a7b4 <_malloc_r+0x5bc>
    a3d4:	80800117 	ldw	r2,4(r16)
    a3d8:	1284703a 	and	r2,r2,r10
    a3dc:	1447c83a 	sub	r3,r2,r17
    a3e0:	48fff90e 	bge	r9,r3,a3c8 <__alt_data_end+0xff80a3c8>
    a3e4:	80800317 	ldw	r2,12(r16)
    a3e8:	81000217 	ldw	r4,8(r16)
    a3ec:	89400054 	ori	r5,r17,1
    a3f0:	81400115 	stw	r5,4(r16)
    a3f4:	20800315 	stw	r2,12(r4)
    a3f8:	11000215 	stw	r4,8(r2)
    a3fc:	8463883a 	add	r17,r16,r17
    a400:	9c400515 	stw	r17,20(r19)
    a404:	9c400415 	stw	r17,16(r19)
    a408:	18800054 	ori	r2,r3,1
    a40c:	88800115 	stw	r2,4(r17)
    a410:	8a000315 	stw	r8,12(r17)
    a414:	8a000215 	stw	r8,8(r17)
    a418:	88e3883a 	add	r17,r17,r3
    a41c:	88c00015 	stw	r3,0(r17)
    a420:	9009883a 	mov	r4,r18
    a424:	000f2d00 	call	f2d0 <__malloc_unlock>
    a428:	80800204 	addi	r2,r16,8
    a42c:	00001b06 	br	a49c <_malloc_r+0x2a4>
    a430:	04400404 	movi	r17,16
    a434:	89402536 	bltu	r17,r5,a4cc <_malloc_r+0x2d4>
    a438:	000f2cc0 	call	f2cc <__malloc_lock>
    a43c:	00800184 	movi	r2,6
    a440:	01000084 	movi	r4,2
    a444:	04c00074 	movhi	r19,1
    a448:	1085883a 	add	r2,r2,r2
    a44c:	9cc60404 	addi	r19,r19,6160
    a450:	1085883a 	add	r2,r2,r2
    a454:	9885883a 	add	r2,r19,r2
    a458:	14000117 	ldw	r16,4(r2)
    a45c:	10fffe04 	addi	r3,r2,-8
    a460:	80c0d926 	beq	r16,r3,a7c8 <_malloc_r+0x5d0>
    a464:	80c00117 	ldw	r3,4(r16)
    a468:	81000317 	ldw	r4,12(r16)
    a46c:	00bfff04 	movi	r2,-4
    a470:	1884703a 	and	r2,r3,r2
    a474:	81400217 	ldw	r5,8(r16)
    a478:	8085883a 	add	r2,r16,r2
    a47c:	10c00117 	ldw	r3,4(r2)
    a480:	29000315 	stw	r4,12(r5)
    a484:	21400215 	stw	r5,8(r4)
    a488:	18c00054 	ori	r3,r3,1
    a48c:	10c00115 	stw	r3,4(r2)
    a490:	9009883a 	mov	r4,r18
    a494:	000f2d00 	call	f2d0 <__malloc_unlock>
    a498:	80800204 	addi	r2,r16,8
    a49c:	dfc00a17 	ldw	ra,40(sp)
    a4a0:	df000917 	ldw	fp,36(sp)
    a4a4:	ddc00817 	ldw	r23,32(sp)
    a4a8:	dd800717 	ldw	r22,28(sp)
    a4ac:	dd400617 	ldw	r21,24(sp)
    a4b0:	dd000517 	ldw	r20,20(sp)
    a4b4:	dcc00417 	ldw	r19,16(sp)
    a4b8:	dc800317 	ldw	r18,12(sp)
    a4bc:	dc400217 	ldw	r17,8(sp)
    a4c0:	dc000117 	ldw	r16,4(sp)
    a4c4:	dec00b04 	addi	sp,sp,44
    a4c8:	f800283a 	ret
    a4cc:	00800304 	movi	r2,12
    a4d0:	90800015 	stw	r2,0(r18)
    a4d4:	0005883a 	mov	r2,zero
    a4d8:	003ff006 	br	a49c <__alt_data_end+0xff80a49c>
    a4dc:	01002004 	movi	r4,128
    a4e0:	02001004 	movi	r8,64
    a4e4:	01c00fc4 	movi	r7,63
    a4e8:	003f6106 	br	a270 <__alt_data_end+0xff80a270>
    a4ec:	4009883a 	mov	r4,r8
    a4f0:	003f7506 	br	a2c8 <__alt_data_end+0xff80a2c8>
    a4f4:	81000317 	ldw	r4,12(r16)
    a4f8:	003fde06 	br	a474 <__alt_data_end+0xff80a474>
    a4fc:	81c5883a 	add	r2,r16,r7
    a500:	11400117 	ldw	r5,4(r2)
    a504:	9009883a 	mov	r4,r18
    a508:	29400054 	ori	r5,r5,1
    a50c:	11400115 	stw	r5,4(r2)
    a510:	000f2d00 	call	f2d0 <__malloc_unlock>
    a514:	80800204 	addi	r2,r16,8
    a518:	003fe006 	br	a49c <__alt_data_end+0xff80a49c>
    a51c:	9c000217 	ldw	r16,8(r19)
    a520:	00bfff04 	movi	r2,-4
    a524:	85800117 	ldw	r22,4(r16)
    a528:	b0ac703a 	and	r22,r22,r2
    a52c:	b4400336 	bltu	r22,r17,a53c <_malloc_r+0x344>
    a530:	b445c83a 	sub	r2,r22,r17
    a534:	00c003c4 	movi	r3,15
    a538:	18805d16 	blt	r3,r2,a6b0 <_malloc_r+0x4b8>
    a53c:	05c00074 	movhi	r23,1
    a540:	00800074 	movhi	r2,1
    a544:	1091e304 	addi	r2,r2,18316
    a548:	bdcb4d04 	addi	r23,r23,11572
    a54c:	15400017 	ldw	r21,0(r2)
    a550:	b8c00017 	ldw	r3,0(r23)
    a554:	00bfffc4 	movi	r2,-1
    a558:	858d883a 	add	r6,r16,r22
    a55c:	8d6b883a 	add	r21,r17,r21
    a560:	1880ea26 	beq	r3,r2,a90c <_malloc_r+0x714>
    a564:	ad4403c4 	addi	r21,r21,4111
    a568:	00bc0004 	movi	r2,-4096
    a56c:	a8aa703a 	and	r21,r21,r2
    a570:	a80b883a 	mov	r5,r21
    a574:	9009883a 	mov	r4,r18
    a578:	d9800015 	stw	r6,0(sp)
    a57c:	000c2cc0 	call	c2cc <_sbrk_r>
    a580:	1029883a 	mov	r20,r2
    a584:	00bfffc4 	movi	r2,-1
    a588:	d9800017 	ldw	r6,0(sp)
    a58c:	a080e826 	beq	r20,r2,a930 <_malloc_r+0x738>
    a590:	a180a636 	bltu	r20,r6,a82c <_malloc_r+0x634>
    a594:	07000074 	movhi	fp,1
    a598:	e711eb04 	addi	fp,fp,18348
    a59c:	e0800017 	ldw	r2,0(fp)
    a5a0:	a887883a 	add	r3,r21,r2
    a5a4:	e0c00015 	stw	r3,0(fp)
    a5a8:	3500e626 	beq	r6,r20,a944 <_malloc_r+0x74c>
    a5ac:	b9000017 	ldw	r4,0(r23)
    a5b0:	00bfffc4 	movi	r2,-1
    a5b4:	2080ee26 	beq	r4,r2,a970 <_malloc_r+0x778>
    a5b8:	a185c83a 	sub	r2,r20,r6
    a5bc:	10c5883a 	add	r2,r2,r3
    a5c0:	e0800015 	stw	r2,0(fp)
    a5c4:	a0c001cc 	andi	r3,r20,7
    a5c8:	1800bc26 	beq	r3,zero,a8bc <_malloc_r+0x6c4>
    a5cc:	a0e9c83a 	sub	r20,r20,r3
    a5d0:	00840204 	movi	r2,4104
    a5d4:	a5000204 	addi	r20,r20,8
    a5d8:	10c7c83a 	sub	r3,r2,r3
    a5dc:	a545883a 	add	r2,r20,r21
    a5e0:	1083ffcc 	andi	r2,r2,4095
    a5e4:	18abc83a 	sub	r21,r3,r2
    a5e8:	a80b883a 	mov	r5,r21
    a5ec:	9009883a 	mov	r4,r18
    a5f0:	000c2cc0 	call	c2cc <_sbrk_r>
    a5f4:	00ffffc4 	movi	r3,-1
    a5f8:	10c0e126 	beq	r2,r3,a980 <_malloc_r+0x788>
    a5fc:	1505c83a 	sub	r2,r2,r20
    a600:	1545883a 	add	r2,r2,r21
    a604:	10800054 	ori	r2,r2,1
    a608:	e0c00017 	ldw	r3,0(fp)
    a60c:	9d000215 	stw	r20,8(r19)
    a610:	a0800115 	stw	r2,4(r20)
    a614:	a8c7883a 	add	r3,r21,r3
    a618:	e0c00015 	stw	r3,0(fp)
    a61c:	84c00e26 	beq	r16,r19,a658 <_malloc_r+0x460>
    a620:	018003c4 	movi	r6,15
    a624:	3580a72e 	bgeu	r6,r22,a8c4 <_malloc_r+0x6cc>
    a628:	81400117 	ldw	r5,4(r16)
    a62c:	013ffe04 	movi	r4,-8
    a630:	b0bffd04 	addi	r2,r22,-12
    a634:	1104703a 	and	r2,r2,r4
    a638:	2900004c 	andi	r4,r5,1
    a63c:	2088b03a 	or	r4,r4,r2
    a640:	81000115 	stw	r4,4(r16)
    a644:	01400144 	movi	r5,5
    a648:	8089883a 	add	r4,r16,r2
    a64c:	21400115 	stw	r5,4(r4)
    a650:	21400215 	stw	r5,8(r4)
    a654:	3080cd36 	bltu	r6,r2,a98c <_malloc_r+0x794>
    a658:	00800074 	movhi	r2,1
    a65c:	1091e204 	addi	r2,r2,18312
    a660:	11000017 	ldw	r4,0(r2)
    a664:	20c0012e 	bgeu	r4,r3,a66c <_malloc_r+0x474>
    a668:	10c00015 	stw	r3,0(r2)
    a66c:	00800074 	movhi	r2,1
    a670:	1091e104 	addi	r2,r2,18308
    a674:	11000017 	ldw	r4,0(r2)
    a678:	9c000217 	ldw	r16,8(r19)
    a67c:	20c0012e 	bgeu	r4,r3,a684 <_malloc_r+0x48c>
    a680:	10c00015 	stw	r3,0(r2)
    a684:	80c00117 	ldw	r3,4(r16)
    a688:	00bfff04 	movi	r2,-4
    a68c:	1886703a 	and	r3,r3,r2
    a690:	1c45c83a 	sub	r2,r3,r17
    a694:	1c400236 	bltu	r3,r17,a6a0 <_malloc_r+0x4a8>
    a698:	00c003c4 	movi	r3,15
    a69c:	18800416 	blt	r3,r2,a6b0 <_malloc_r+0x4b8>
    a6a0:	9009883a 	mov	r4,r18
    a6a4:	000f2d00 	call	f2d0 <__malloc_unlock>
    a6a8:	0005883a 	mov	r2,zero
    a6ac:	003f7b06 	br	a49c <__alt_data_end+0xff80a49c>
    a6b0:	88c00054 	ori	r3,r17,1
    a6b4:	80c00115 	stw	r3,4(r16)
    a6b8:	8463883a 	add	r17,r16,r17
    a6bc:	10800054 	ori	r2,r2,1
    a6c0:	9c400215 	stw	r17,8(r19)
    a6c4:	88800115 	stw	r2,4(r17)
    a6c8:	9009883a 	mov	r4,r18
    a6cc:	000f2d00 	call	f2d0 <__malloc_unlock>
    a6d0:	80800204 	addi	r2,r16,8
    a6d4:	003f7106 	br	a49c <__alt_data_end+0xff80a49c>
    a6d8:	00c00504 	movi	r3,20
    a6dc:	18804a2e 	bgeu	r3,r2,a808 <_malloc_r+0x610>
    a6e0:	00c01504 	movi	r3,84
    a6e4:	18806e36 	bltu	r3,r2,a8a0 <_malloc_r+0x6a8>
    a6e8:	8804d33a 	srli	r2,r17,12
    a6ec:	12001bc4 	addi	r8,r2,111
    a6f0:	11c01b84 	addi	r7,r2,110
    a6f4:	4209883a 	add	r4,r8,r8
    a6f8:	003edd06 	br	a270 <__alt_data_end+0xff80a270>
    a6fc:	3804d27a 	srli	r2,r7,9
    a700:	00c00104 	movi	r3,4
    a704:	1880442e 	bgeu	r3,r2,a818 <_malloc_r+0x620>
    a708:	00c00504 	movi	r3,20
    a70c:	18808136 	bltu	r3,r2,a914 <_malloc_r+0x71c>
    a710:	11401704 	addi	r5,r2,92
    a714:	10c016c4 	addi	r3,r2,91
    a718:	294b883a 	add	r5,r5,r5
    a71c:	294b883a 	add	r5,r5,r5
    a720:	294b883a 	add	r5,r5,r5
    a724:	994b883a 	add	r5,r19,r5
    a728:	28800017 	ldw	r2,0(r5)
    a72c:	01800074 	movhi	r6,1
    a730:	297ffe04 	addi	r5,r5,-8
    a734:	31860404 	addi	r6,r6,6160
    a738:	28806526 	beq	r5,r2,a8d0 <_malloc_r+0x6d8>
    a73c:	01bfff04 	movi	r6,-4
    a740:	10c00117 	ldw	r3,4(r2)
    a744:	1986703a 	and	r3,r3,r6
    a748:	38c0022e 	bgeu	r7,r3,a754 <_malloc_r+0x55c>
    a74c:	10800217 	ldw	r2,8(r2)
    a750:	28bffb1e 	bne	r5,r2,a740 <__alt_data_end+0xff80a740>
    a754:	11400317 	ldw	r5,12(r2)
    a758:	98c00117 	ldw	r3,4(r19)
    a75c:	81400315 	stw	r5,12(r16)
    a760:	80800215 	stw	r2,8(r16)
    a764:	2c000215 	stw	r16,8(r5)
    a768:	14000315 	stw	r16,12(r2)
    a76c:	003ef806 	br	a350 <__alt_data_end+0xff80a350>
    a770:	88c00054 	ori	r3,r17,1
    a774:	80c00115 	stw	r3,4(r16)
    a778:	8463883a 	add	r17,r16,r17
    a77c:	34400515 	stw	r17,20(r6)
    a780:	34400415 	stw	r17,16(r6)
    a784:	10c00054 	ori	r3,r2,1
    a788:	8a000315 	stw	r8,12(r17)
    a78c:	8a000215 	stw	r8,8(r17)
    a790:	88c00115 	stw	r3,4(r17)
    a794:	88a3883a 	add	r17,r17,r2
    a798:	88800015 	stw	r2,0(r17)
    a79c:	9009883a 	mov	r4,r18
    a7a0:	000f2d00 	call	f2d0 <__malloc_unlock>
    a7a4:	80800204 	addi	r2,r16,8
    a7a8:	003f3c06 	br	a49c <__alt_data_end+0xff80a49c>
    a7ac:	30c00117 	ldw	r3,4(r6)
    a7b0:	003ee706 	br	a350 <__alt_data_end+0xff80a350>
    a7b4:	5ac00044 	addi	r11,r11,1
    a7b8:	588000cc 	andi	r2,r11,3
    a7bc:	31800204 	addi	r6,r6,8
    a7c0:	103efd1e 	bne	r2,zero,a3b8 <__alt_data_end+0xff80a3b8>
    a7c4:	00002406 	br	a858 <_malloc_r+0x660>
    a7c8:	14000317 	ldw	r16,12(r2)
    a7cc:	143f251e 	bne	r2,r16,a464 <__alt_data_end+0xff80a464>
    a7d0:	21000084 	addi	r4,r4,2
    a7d4:	003ebc06 	br	a2c8 <__alt_data_end+0xff80a2c8>
    a7d8:	8085883a 	add	r2,r16,r2
    a7dc:	10c00117 	ldw	r3,4(r2)
    a7e0:	81000317 	ldw	r4,12(r16)
    a7e4:	81400217 	ldw	r5,8(r16)
    a7e8:	18c00054 	ori	r3,r3,1
    a7ec:	10c00115 	stw	r3,4(r2)
    a7f0:	29000315 	stw	r4,12(r5)
    a7f4:	21400215 	stw	r5,8(r4)
    a7f8:	9009883a 	mov	r4,r18
    a7fc:	000f2d00 	call	f2d0 <__malloc_unlock>
    a800:	80800204 	addi	r2,r16,8
    a804:	003f2506 	br	a49c <__alt_data_end+0xff80a49c>
    a808:	12001704 	addi	r8,r2,92
    a80c:	11c016c4 	addi	r7,r2,91
    a810:	4209883a 	add	r4,r8,r8
    a814:	003e9606 	br	a270 <__alt_data_end+0xff80a270>
    a818:	3804d1ba 	srli	r2,r7,6
    a81c:	11400e44 	addi	r5,r2,57
    a820:	10c00e04 	addi	r3,r2,56
    a824:	294b883a 	add	r5,r5,r5
    a828:	003fbc06 	br	a71c <__alt_data_end+0xff80a71c>
    a82c:	84ff5926 	beq	r16,r19,a594 <__alt_data_end+0xff80a594>
    a830:	00800074 	movhi	r2,1
    a834:	10860404 	addi	r2,r2,6160
    a838:	14000217 	ldw	r16,8(r2)
    a83c:	00bfff04 	movi	r2,-4
    a840:	80c00117 	ldw	r3,4(r16)
    a844:	1886703a 	and	r3,r3,r2
    a848:	003f9106 	br	a690 <__alt_data_end+0xff80a690>
    a84c:	60800217 	ldw	r2,8(r12)
    a850:	213fffc4 	addi	r4,r4,-1
    a854:	1300651e 	bne	r2,r12,a9ec <_malloc_r+0x7f4>
    a858:	208000cc 	andi	r2,r4,3
    a85c:	633ffe04 	addi	r12,r12,-8
    a860:	103ffa1e 	bne	r2,zero,a84c <__alt_data_end+0xff80a84c>
    a864:	98800117 	ldw	r2,4(r19)
    a868:	0146303a 	nor	r3,zero,r5
    a86c:	1884703a 	and	r2,r3,r2
    a870:	98800115 	stw	r2,4(r19)
    a874:	294b883a 	add	r5,r5,r5
    a878:	117f2836 	bltu	r2,r5,a51c <__alt_data_end+0xff80a51c>
    a87c:	283f2726 	beq	r5,zero,a51c <__alt_data_end+0xff80a51c>
    a880:	2886703a 	and	r3,r5,r2
    a884:	5809883a 	mov	r4,r11
    a888:	183ec31e 	bne	r3,zero,a398 <__alt_data_end+0xff80a398>
    a88c:	294b883a 	add	r5,r5,r5
    a890:	2886703a 	and	r3,r5,r2
    a894:	21000104 	addi	r4,r4,4
    a898:	183ffc26 	beq	r3,zero,a88c <__alt_data_end+0xff80a88c>
    a89c:	003ebe06 	br	a398 <__alt_data_end+0xff80a398>
    a8a0:	00c05504 	movi	r3,340
    a8a4:	18801236 	bltu	r3,r2,a8f0 <_malloc_r+0x6f8>
    a8a8:	8804d3fa 	srli	r2,r17,15
    a8ac:	12001e04 	addi	r8,r2,120
    a8b0:	11c01dc4 	addi	r7,r2,119
    a8b4:	4209883a 	add	r4,r8,r8
    a8b8:	003e6d06 	br	a270 <__alt_data_end+0xff80a270>
    a8bc:	00c40004 	movi	r3,4096
    a8c0:	003f4606 	br	a5dc <__alt_data_end+0xff80a5dc>
    a8c4:	00800044 	movi	r2,1
    a8c8:	a0800115 	stw	r2,4(r20)
    a8cc:	003f7406 	br	a6a0 <__alt_data_end+0xff80a6a0>
    a8d0:	1805d0ba 	srai	r2,r3,2
    a8d4:	01c00044 	movi	r7,1
    a8d8:	30c00117 	ldw	r3,4(r6)
    a8dc:	388e983a 	sll	r7,r7,r2
    a8e0:	2805883a 	mov	r2,r5
    a8e4:	38c6b03a 	or	r3,r7,r3
    a8e8:	30c00115 	stw	r3,4(r6)
    a8ec:	003f9b06 	br	a75c <__alt_data_end+0xff80a75c>
    a8f0:	00c15504 	movi	r3,1364
    a8f4:	18801a36 	bltu	r3,r2,a960 <_malloc_r+0x768>
    a8f8:	8804d4ba 	srli	r2,r17,18
    a8fc:	12001f44 	addi	r8,r2,125
    a900:	11c01f04 	addi	r7,r2,124
    a904:	4209883a 	add	r4,r8,r8
    a908:	003e5906 	br	a270 <__alt_data_end+0xff80a270>
    a90c:	ad400404 	addi	r21,r21,16
    a910:	003f1706 	br	a570 <__alt_data_end+0xff80a570>
    a914:	00c01504 	movi	r3,84
    a918:	18802336 	bltu	r3,r2,a9a8 <_malloc_r+0x7b0>
    a91c:	3804d33a 	srli	r2,r7,12
    a920:	11401bc4 	addi	r5,r2,111
    a924:	10c01b84 	addi	r3,r2,110
    a928:	294b883a 	add	r5,r5,r5
    a92c:	003f7b06 	br	a71c <__alt_data_end+0xff80a71c>
    a930:	9c000217 	ldw	r16,8(r19)
    a934:	00bfff04 	movi	r2,-4
    a938:	80c00117 	ldw	r3,4(r16)
    a93c:	1886703a 	and	r3,r3,r2
    a940:	003f5306 	br	a690 <__alt_data_end+0xff80a690>
    a944:	3083ffcc 	andi	r2,r6,4095
    a948:	103f181e 	bne	r2,zero,a5ac <__alt_data_end+0xff80a5ac>
    a94c:	99000217 	ldw	r4,8(r19)
    a950:	b545883a 	add	r2,r22,r21
    a954:	10800054 	ori	r2,r2,1
    a958:	20800115 	stw	r2,4(r4)
    a95c:	003f3e06 	br	a658 <__alt_data_end+0xff80a658>
    a960:	01003f84 	movi	r4,254
    a964:	02001fc4 	movi	r8,127
    a968:	01c01f84 	movi	r7,126
    a96c:	003e4006 	br	a270 <__alt_data_end+0xff80a270>
    a970:	00800074 	movhi	r2,1
    a974:	108b4d04 	addi	r2,r2,11572
    a978:	15000015 	stw	r20,0(r2)
    a97c:	003f1106 	br	a5c4 <__alt_data_end+0xff80a5c4>
    a980:	00800044 	movi	r2,1
    a984:	002b883a 	mov	r21,zero
    a988:	003f1f06 	br	a608 <__alt_data_end+0xff80a608>
    a98c:	81400204 	addi	r5,r16,8
    a990:	9009883a 	mov	r4,r18
    a994:	000960c0 	call	960c <_free_r>
    a998:	00800074 	movhi	r2,1
    a99c:	1091eb04 	addi	r2,r2,18348
    a9a0:	10c00017 	ldw	r3,0(r2)
    a9a4:	003f2c06 	br	a658 <__alt_data_end+0xff80a658>
    a9a8:	00c05504 	movi	r3,340
    a9ac:	18800536 	bltu	r3,r2,a9c4 <_malloc_r+0x7cc>
    a9b0:	3804d3fa 	srli	r2,r7,15
    a9b4:	11401e04 	addi	r5,r2,120
    a9b8:	10c01dc4 	addi	r3,r2,119
    a9bc:	294b883a 	add	r5,r5,r5
    a9c0:	003f5606 	br	a71c <__alt_data_end+0xff80a71c>
    a9c4:	00c15504 	movi	r3,1364
    a9c8:	18800536 	bltu	r3,r2,a9e0 <_malloc_r+0x7e8>
    a9cc:	3804d4ba 	srli	r2,r7,18
    a9d0:	11401f44 	addi	r5,r2,125
    a9d4:	10c01f04 	addi	r3,r2,124
    a9d8:	294b883a 	add	r5,r5,r5
    a9dc:	003f4f06 	br	a71c <__alt_data_end+0xff80a71c>
    a9e0:	01403f84 	movi	r5,254
    a9e4:	00c01f84 	movi	r3,126
    a9e8:	003f4c06 	br	a71c <__alt_data_end+0xff80a71c>
    a9ec:	98800117 	ldw	r2,4(r19)
    a9f0:	003fa006 	br	a874 <__alt_data_end+0xff80a874>
    a9f4:	8808d0fa 	srli	r4,r17,3
    a9f8:	20800044 	addi	r2,r4,1
    a9fc:	1085883a 	add	r2,r2,r2
    aa00:	003e9006 	br	a444 <__alt_data_end+0xff80a444>

0000aa04 <memchr>:
    aa04:	208000cc 	andi	r2,r4,3
    aa08:	280f883a 	mov	r7,r5
    aa0c:	10003426 	beq	r2,zero,aae0 <memchr+0xdc>
    aa10:	30bfffc4 	addi	r2,r6,-1
    aa14:	30001a26 	beq	r6,zero,aa80 <memchr+0x7c>
    aa18:	20c00003 	ldbu	r3,0(r4)
    aa1c:	29803fcc 	andi	r6,r5,255
    aa20:	30c0051e 	bne	r6,r3,aa38 <memchr+0x34>
    aa24:	00001806 	br	aa88 <memchr+0x84>
    aa28:	10001526 	beq	r2,zero,aa80 <memchr+0x7c>
    aa2c:	20c00003 	ldbu	r3,0(r4)
    aa30:	10bfffc4 	addi	r2,r2,-1
    aa34:	30c01426 	beq	r6,r3,aa88 <memchr+0x84>
    aa38:	21000044 	addi	r4,r4,1
    aa3c:	20c000cc 	andi	r3,r4,3
    aa40:	183ff91e 	bne	r3,zero,aa28 <__alt_data_end+0xff80aa28>
    aa44:	020000c4 	movi	r8,3
    aa48:	40801136 	bltu	r8,r2,aa90 <memchr+0x8c>
    aa4c:	10000c26 	beq	r2,zero,aa80 <memchr+0x7c>
    aa50:	20c00003 	ldbu	r3,0(r4)
    aa54:	29403fcc 	andi	r5,r5,255
    aa58:	28c00b26 	beq	r5,r3,aa88 <memchr+0x84>
    aa5c:	20c00044 	addi	r3,r4,1
    aa60:	39803fcc 	andi	r6,r7,255
    aa64:	2089883a 	add	r4,r4,r2
    aa68:	00000306 	br	aa78 <memchr+0x74>
    aa6c:	18c00044 	addi	r3,r3,1
    aa70:	197fffc3 	ldbu	r5,-1(r3)
    aa74:	31400526 	beq	r6,r5,aa8c <memchr+0x88>
    aa78:	1805883a 	mov	r2,r3
    aa7c:	20fffb1e 	bne	r4,r3,aa6c <__alt_data_end+0xff80aa6c>
    aa80:	0005883a 	mov	r2,zero
    aa84:	f800283a 	ret
    aa88:	2005883a 	mov	r2,r4
    aa8c:	f800283a 	ret
    aa90:	28c03fcc 	andi	r3,r5,255
    aa94:	1812923a 	slli	r9,r3,8
    aa98:	02ffbff4 	movhi	r11,65279
    aa9c:	02a02074 	movhi	r10,32897
    aaa0:	48d2b03a 	or	r9,r9,r3
    aaa4:	4806943a 	slli	r3,r9,16
    aaa8:	5affbfc4 	addi	r11,r11,-257
    aaac:	52a02004 	addi	r10,r10,-32640
    aab0:	48d2b03a 	or	r9,r9,r3
    aab4:	20c00017 	ldw	r3,0(r4)
    aab8:	48c6f03a 	xor	r3,r9,r3
    aabc:	1acd883a 	add	r6,r3,r11
    aac0:	00c6303a 	nor	r3,zero,r3
    aac4:	30c6703a 	and	r3,r6,r3
    aac8:	1a86703a 	and	r3,r3,r10
    aacc:	183fe01e 	bne	r3,zero,aa50 <__alt_data_end+0xff80aa50>
    aad0:	10bfff04 	addi	r2,r2,-4
    aad4:	21000104 	addi	r4,r4,4
    aad8:	40bff636 	bltu	r8,r2,aab4 <__alt_data_end+0xff80aab4>
    aadc:	003fdb06 	br	aa4c <__alt_data_end+0xff80aa4c>
    aae0:	3005883a 	mov	r2,r6
    aae4:	003fd706 	br	aa44 <__alt_data_end+0xff80aa44>

0000aae8 <memmove>:
    aae8:	2005883a 	mov	r2,r4
    aaec:	29000b2e 	bgeu	r5,r4,ab1c <memmove+0x34>
    aaf0:	298f883a 	add	r7,r5,r6
    aaf4:	21c0092e 	bgeu	r4,r7,ab1c <memmove+0x34>
    aaf8:	2187883a 	add	r3,r4,r6
    aafc:	198bc83a 	sub	r5,r3,r6
    ab00:	30004826 	beq	r6,zero,ac24 <memmove+0x13c>
    ab04:	39ffffc4 	addi	r7,r7,-1
    ab08:	39000003 	ldbu	r4,0(r7)
    ab0c:	18ffffc4 	addi	r3,r3,-1
    ab10:	19000005 	stb	r4,0(r3)
    ab14:	28fffb1e 	bne	r5,r3,ab04 <__alt_data_end+0xff80ab04>
    ab18:	f800283a 	ret
    ab1c:	00c003c4 	movi	r3,15
    ab20:	1980412e 	bgeu	r3,r6,ac28 <memmove+0x140>
    ab24:	2886b03a 	or	r3,r5,r2
    ab28:	18c000cc 	andi	r3,r3,3
    ab2c:	1800401e 	bne	r3,zero,ac30 <memmove+0x148>
    ab30:	33fffc04 	addi	r15,r6,-16
    ab34:	781ed13a 	srli	r15,r15,4
    ab38:	28c00104 	addi	r3,r5,4
    ab3c:	13400104 	addi	r13,r2,4
    ab40:	781c913a 	slli	r14,r15,4
    ab44:	2b000204 	addi	r12,r5,8
    ab48:	12c00204 	addi	r11,r2,8
    ab4c:	73800504 	addi	r14,r14,20
    ab50:	2a800304 	addi	r10,r5,12
    ab54:	12400304 	addi	r9,r2,12
    ab58:	2b9d883a 	add	r14,r5,r14
    ab5c:	2811883a 	mov	r8,r5
    ab60:	100f883a 	mov	r7,r2
    ab64:	41000017 	ldw	r4,0(r8)
    ab68:	39c00404 	addi	r7,r7,16
    ab6c:	18c00404 	addi	r3,r3,16
    ab70:	393ffc15 	stw	r4,-16(r7)
    ab74:	193ffc17 	ldw	r4,-16(r3)
    ab78:	6b400404 	addi	r13,r13,16
    ab7c:	5ac00404 	addi	r11,r11,16
    ab80:	693ffc15 	stw	r4,-16(r13)
    ab84:	61000017 	ldw	r4,0(r12)
    ab88:	4a400404 	addi	r9,r9,16
    ab8c:	42000404 	addi	r8,r8,16
    ab90:	593ffc15 	stw	r4,-16(r11)
    ab94:	51000017 	ldw	r4,0(r10)
    ab98:	63000404 	addi	r12,r12,16
    ab9c:	52800404 	addi	r10,r10,16
    aba0:	493ffc15 	stw	r4,-16(r9)
    aba4:	1bbfef1e 	bne	r3,r14,ab64 <__alt_data_end+0xff80ab64>
    aba8:	79000044 	addi	r4,r15,1
    abac:	2008913a 	slli	r4,r4,4
    abb0:	328003cc 	andi	r10,r6,15
    abb4:	02c000c4 	movi	r11,3
    abb8:	1107883a 	add	r3,r2,r4
    abbc:	290b883a 	add	r5,r5,r4
    abc0:	5a801e2e 	bgeu	r11,r10,ac3c <memmove+0x154>
    abc4:	1813883a 	mov	r9,r3
    abc8:	2811883a 	mov	r8,r5
    abcc:	500f883a 	mov	r7,r10
    abd0:	41000017 	ldw	r4,0(r8)
    abd4:	4a400104 	addi	r9,r9,4
    abd8:	39ffff04 	addi	r7,r7,-4
    abdc:	493fff15 	stw	r4,-4(r9)
    abe0:	42000104 	addi	r8,r8,4
    abe4:	59fffa36 	bltu	r11,r7,abd0 <__alt_data_end+0xff80abd0>
    abe8:	513fff04 	addi	r4,r10,-4
    abec:	2008d0ba 	srli	r4,r4,2
    abf0:	318000cc 	andi	r6,r6,3
    abf4:	21000044 	addi	r4,r4,1
    abf8:	2109883a 	add	r4,r4,r4
    abfc:	2109883a 	add	r4,r4,r4
    ac00:	1907883a 	add	r3,r3,r4
    ac04:	290b883a 	add	r5,r5,r4
    ac08:	30000b26 	beq	r6,zero,ac38 <memmove+0x150>
    ac0c:	198d883a 	add	r6,r3,r6
    ac10:	29c00003 	ldbu	r7,0(r5)
    ac14:	18c00044 	addi	r3,r3,1
    ac18:	29400044 	addi	r5,r5,1
    ac1c:	19ffffc5 	stb	r7,-1(r3)
    ac20:	19bffb1e 	bne	r3,r6,ac10 <__alt_data_end+0xff80ac10>
    ac24:	f800283a 	ret
    ac28:	1007883a 	mov	r3,r2
    ac2c:	003ff606 	br	ac08 <__alt_data_end+0xff80ac08>
    ac30:	1007883a 	mov	r3,r2
    ac34:	003ff506 	br	ac0c <__alt_data_end+0xff80ac0c>
    ac38:	f800283a 	ret
    ac3c:	500d883a 	mov	r6,r10
    ac40:	003ff106 	br	ac08 <__alt_data_end+0xff80ac08>

0000ac44 <memset>:
    ac44:	20c000cc 	andi	r3,r4,3
    ac48:	2005883a 	mov	r2,r4
    ac4c:	18004426 	beq	r3,zero,ad60 <memset+0x11c>
    ac50:	31ffffc4 	addi	r7,r6,-1
    ac54:	30004026 	beq	r6,zero,ad58 <memset+0x114>
    ac58:	2813883a 	mov	r9,r5
    ac5c:	200d883a 	mov	r6,r4
    ac60:	2007883a 	mov	r3,r4
    ac64:	00000406 	br	ac78 <memset+0x34>
    ac68:	3a3fffc4 	addi	r8,r7,-1
    ac6c:	31800044 	addi	r6,r6,1
    ac70:	38003926 	beq	r7,zero,ad58 <memset+0x114>
    ac74:	400f883a 	mov	r7,r8
    ac78:	18c00044 	addi	r3,r3,1
    ac7c:	32400005 	stb	r9,0(r6)
    ac80:	1a0000cc 	andi	r8,r3,3
    ac84:	403ff81e 	bne	r8,zero,ac68 <__alt_data_end+0xff80ac68>
    ac88:	010000c4 	movi	r4,3
    ac8c:	21c02d2e 	bgeu	r4,r7,ad44 <memset+0x100>
    ac90:	29003fcc 	andi	r4,r5,255
    ac94:	200c923a 	slli	r6,r4,8
    ac98:	3108b03a 	or	r4,r6,r4
    ac9c:	200c943a 	slli	r6,r4,16
    aca0:	218cb03a 	or	r6,r4,r6
    aca4:	010003c4 	movi	r4,15
    aca8:	21c0182e 	bgeu	r4,r7,ad0c <memset+0xc8>
    acac:	3b3ffc04 	addi	r12,r7,-16
    acb0:	6018d13a 	srli	r12,r12,4
    acb4:	1a000104 	addi	r8,r3,4
    acb8:	1ac00204 	addi	r11,r3,8
    acbc:	6008913a 	slli	r4,r12,4
    acc0:	1a800304 	addi	r10,r3,12
    acc4:	1813883a 	mov	r9,r3
    acc8:	21000504 	addi	r4,r4,20
    accc:	1909883a 	add	r4,r3,r4
    acd0:	49800015 	stw	r6,0(r9)
    acd4:	41800015 	stw	r6,0(r8)
    acd8:	59800015 	stw	r6,0(r11)
    acdc:	51800015 	stw	r6,0(r10)
    ace0:	42000404 	addi	r8,r8,16
    ace4:	4a400404 	addi	r9,r9,16
    ace8:	5ac00404 	addi	r11,r11,16
    acec:	52800404 	addi	r10,r10,16
    acf0:	413ff71e 	bne	r8,r4,acd0 <__alt_data_end+0xff80acd0>
    acf4:	63000044 	addi	r12,r12,1
    acf8:	6018913a 	slli	r12,r12,4
    acfc:	39c003cc 	andi	r7,r7,15
    ad00:	010000c4 	movi	r4,3
    ad04:	1b07883a 	add	r3,r3,r12
    ad08:	21c00e2e 	bgeu	r4,r7,ad44 <memset+0x100>
    ad0c:	1813883a 	mov	r9,r3
    ad10:	3811883a 	mov	r8,r7
    ad14:	010000c4 	movi	r4,3
    ad18:	49800015 	stw	r6,0(r9)
    ad1c:	423fff04 	addi	r8,r8,-4
    ad20:	4a400104 	addi	r9,r9,4
    ad24:	223ffc36 	bltu	r4,r8,ad18 <__alt_data_end+0xff80ad18>
    ad28:	393fff04 	addi	r4,r7,-4
    ad2c:	2008d0ba 	srli	r4,r4,2
    ad30:	39c000cc 	andi	r7,r7,3
    ad34:	21000044 	addi	r4,r4,1
    ad38:	2109883a 	add	r4,r4,r4
    ad3c:	2109883a 	add	r4,r4,r4
    ad40:	1907883a 	add	r3,r3,r4
    ad44:	38000526 	beq	r7,zero,ad5c <memset+0x118>
    ad48:	19cf883a 	add	r7,r3,r7
    ad4c:	19400005 	stb	r5,0(r3)
    ad50:	18c00044 	addi	r3,r3,1
    ad54:	38fffd1e 	bne	r7,r3,ad4c <__alt_data_end+0xff80ad4c>
    ad58:	f800283a 	ret
    ad5c:	f800283a 	ret
    ad60:	2007883a 	mov	r3,r4
    ad64:	300f883a 	mov	r7,r6
    ad68:	003fc706 	br	ac88 <__alt_data_end+0xff80ac88>

0000ad6c <_Balloc>:
    ad6c:	20801317 	ldw	r2,76(r4)
    ad70:	defffc04 	addi	sp,sp,-16
    ad74:	dc400115 	stw	r17,4(sp)
    ad78:	dc000015 	stw	r16,0(sp)
    ad7c:	dfc00315 	stw	ra,12(sp)
    ad80:	dc800215 	stw	r18,8(sp)
    ad84:	2023883a 	mov	r17,r4
    ad88:	2821883a 	mov	r16,r5
    ad8c:	10000f26 	beq	r2,zero,adcc <_Balloc+0x60>
    ad90:	8407883a 	add	r3,r16,r16
    ad94:	18c7883a 	add	r3,r3,r3
    ad98:	10c7883a 	add	r3,r2,r3
    ad9c:	18800017 	ldw	r2,0(r3)
    ada0:	10001126 	beq	r2,zero,ade8 <_Balloc+0x7c>
    ada4:	11000017 	ldw	r4,0(r2)
    ada8:	19000015 	stw	r4,0(r3)
    adac:	10000415 	stw	zero,16(r2)
    adb0:	10000315 	stw	zero,12(r2)
    adb4:	dfc00317 	ldw	ra,12(sp)
    adb8:	dc800217 	ldw	r18,8(sp)
    adbc:	dc400117 	ldw	r17,4(sp)
    adc0:	dc000017 	ldw	r16,0(sp)
    adc4:	dec00404 	addi	sp,sp,16
    adc8:	f800283a 	ret
    adcc:	01800844 	movi	r6,33
    add0:	01400104 	movi	r5,4
    add4:	000dc340 	call	dc34 <_calloc_r>
    add8:	88801315 	stw	r2,76(r17)
    addc:	103fec1e 	bne	r2,zero,ad90 <__alt_data_end+0xff80ad90>
    ade0:	0005883a 	mov	r2,zero
    ade4:	003ff306 	br	adb4 <__alt_data_end+0xff80adb4>
    ade8:	01400044 	movi	r5,1
    adec:	2c24983a 	sll	r18,r5,r16
    adf0:	8809883a 	mov	r4,r17
    adf4:	91800144 	addi	r6,r18,5
    adf8:	318d883a 	add	r6,r6,r6
    adfc:	318d883a 	add	r6,r6,r6
    ae00:	000dc340 	call	dc34 <_calloc_r>
    ae04:	103ff626 	beq	r2,zero,ade0 <__alt_data_end+0xff80ade0>
    ae08:	14000115 	stw	r16,4(r2)
    ae0c:	14800215 	stw	r18,8(r2)
    ae10:	003fe606 	br	adac <__alt_data_end+0xff80adac>

0000ae14 <_Bfree>:
    ae14:	28000826 	beq	r5,zero,ae38 <_Bfree+0x24>
    ae18:	28c00117 	ldw	r3,4(r5)
    ae1c:	20801317 	ldw	r2,76(r4)
    ae20:	18c7883a 	add	r3,r3,r3
    ae24:	18c7883a 	add	r3,r3,r3
    ae28:	10c5883a 	add	r2,r2,r3
    ae2c:	10c00017 	ldw	r3,0(r2)
    ae30:	28c00015 	stw	r3,0(r5)
    ae34:	11400015 	stw	r5,0(r2)
    ae38:	f800283a 	ret

0000ae3c <__multadd>:
    ae3c:	defffa04 	addi	sp,sp,-24
    ae40:	dc800315 	stw	r18,12(sp)
    ae44:	dc400215 	stw	r17,8(sp)
    ae48:	dc000115 	stw	r16,4(sp)
    ae4c:	2823883a 	mov	r17,r5
    ae50:	2c000417 	ldw	r16,16(r5)
    ae54:	dfc00515 	stw	ra,20(sp)
    ae58:	dcc00415 	stw	r19,16(sp)
    ae5c:	2025883a 	mov	r18,r4
    ae60:	29400504 	addi	r5,r5,20
    ae64:	0011883a 	mov	r8,zero
    ae68:	28c00017 	ldw	r3,0(r5)
    ae6c:	29400104 	addi	r5,r5,4
    ae70:	42000044 	addi	r8,r8,1
    ae74:	18bfffcc 	andi	r2,r3,65535
    ae78:	1185383a 	mul	r2,r2,r6
    ae7c:	1806d43a 	srli	r3,r3,16
    ae80:	11cf883a 	add	r7,r2,r7
    ae84:	3808d43a 	srli	r4,r7,16
    ae88:	1987383a 	mul	r3,r3,r6
    ae8c:	38bfffcc 	andi	r2,r7,65535
    ae90:	1907883a 	add	r3,r3,r4
    ae94:	1808943a 	slli	r4,r3,16
    ae98:	180ed43a 	srli	r7,r3,16
    ae9c:	2085883a 	add	r2,r4,r2
    aea0:	28bfff15 	stw	r2,-4(r5)
    aea4:	443ff016 	blt	r8,r16,ae68 <__alt_data_end+0xff80ae68>
    aea8:	38000926 	beq	r7,zero,aed0 <__multadd+0x94>
    aeac:	88800217 	ldw	r2,8(r17)
    aeb0:	80800f0e 	bge	r16,r2,aef0 <__multadd+0xb4>
    aeb4:	80800144 	addi	r2,r16,5
    aeb8:	1085883a 	add	r2,r2,r2
    aebc:	1085883a 	add	r2,r2,r2
    aec0:	8885883a 	add	r2,r17,r2
    aec4:	11c00015 	stw	r7,0(r2)
    aec8:	84000044 	addi	r16,r16,1
    aecc:	8c000415 	stw	r16,16(r17)
    aed0:	8805883a 	mov	r2,r17
    aed4:	dfc00517 	ldw	ra,20(sp)
    aed8:	dcc00417 	ldw	r19,16(sp)
    aedc:	dc800317 	ldw	r18,12(sp)
    aee0:	dc400217 	ldw	r17,8(sp)
    aee4:	dc000117 	ldw	r16,4(sp)
    aee8:	dec00604 	addi	sp,sp,24
    aeec:	f800283a 	ret
    aef0:	89400117 	ldw	r5,4(r17)
    aef4:	9009883a 	mov	r4,r18
    aef8:	d9c00015 	stw	r7,0(sp)
    aefc:	29400044 	addi	r5,r5,1
    af00:	000ad6c0 	call	ad6c <_Balloc>
    af04:	89800417 	ldw	r6,16(r17)
    af08:	89400304 	addi	r5,r17,12
    af0c:	11000304 	addi	r4,r2,12
    af10:	31800084 	addi	r6,r6,2
    af14:	318d883a 	add	r6,r6,r6
    af18:	318d883a 	add	r6,r6,r6
    af1c:	1027883a 	mov	r19,r2
    af20:	0004ed40 	call	4ed4 <memcpy>
    af24:	d9c00017 	ldw	r7,0(sp)
    af28:	88000a26 	beq	r17,zero,af54 <__multadd+0x118>
    af2c:	88c00117 	ldw	r3,4(r17)
    af30:	90801317 	ldw	r2,76(r18)
    af34:	18c7883a 	add	r3,r3,r3
    af38:	18c7883a 	add	r3,r3,r3
    af3c:	10c5883a 	add	r2,r2,r3
    af40:	10c00017 	ldw	r3,0(r2)
    af44:	88c00015 	stw	r3,0(r17)
    af48:	14400015 	stw	r17,0(r2)
    af4c:	9823883a 	mov	r17,r19
    af50:	003fd806 	br	aeb4 <__alt_data_end+0xff80aeb4>
    af54:	9823883a 	mov	r17,r19
    af58:	003fd606 	br	aeb4 <__alt_data_end+0xff80aeb4>

0000af5c <__s2b>:
    af5c:	defff904 	addi	sp,sp,-28
    af60:	dc400115 	stw	r17,4(sp)
    af64:	dc000015 	stw	r16,0(sp)
    af68:	2023883a 	mov	r17,r4
    af6c:	2821883a 	mov	r16,r5
    af70:	39000204 	addi	r4,r7,8
    af74:	01400244 	movi	r5,9
    af78:	dcc00315 	stw	r19,12(sp)
    af7c:	dc800215 	stw	r18,8(sp)
    af80:	dfc00615 	stw	ra,24(sp)
    af84:	dd400515 	stw	r21,20(sp)
    af88:	dd000415 	stw	r20,16(sp)
    af8c:	3825883a 	mov	r18,r7
    af90:	3027883a 	mov	r19,r6
    af94:	0004d100 	call	4d10 <__divsi3>
    af98:	00c00044 	movi	r3,1
    af9c:	000b883a 	mov	r5,zero
    afa0:	1880030e 	bge	r3,r2,afb0 <__s2b+0x54>
    afa4:	18c7883a 	add	r3,r3,r3
    afa8:	29400044 	addi	r5,r5,1
    afac:	18bffd16 	blt	r3,r2,afa4 <__alt_data_end+0xff80afa4>
    afb0:	8809883a 	mov	r4,r17
    afb4:	000ad6c0 	call	ad6c <_Balloc>
    afb8:	d8c00717 	ldw	r3,28(sp)
    afbc:	10c00515 	stw	r3,20(r2)
    afc0:	00c00044 	movi	r3,1
    afc4:	10c00415 	stw	r3,16(r2)
    afc8:	00c00244 	movi	r3,9
    afcc:	1cc0210e 	bge	r3,r19,b054 <__s2b+0xf8>
    afd0:	80eb883a 	add	r21,r16,r3
    afd4:	a829883a 	mov	r20,r21
    afd8:	84e1883a 	add	r16,r16,r19
    afdc:	a1c00007 	ldb	r7,0(r20)
    afe0:	01800284 	movi	r6,10
    afe4:	a5000044 	addi	r20,r20,1
    afe8:	100b883a 	mov	r5,r2
    afec:	39fff404 	addi	r7,r7,-48
    aff0:	8809883a 	mov	r4,r17
    aff4:	000ae3c0 	call	ae3c <__multadd>
    aff8:	a43ff81e 	bne	r20,r16,afdc <__alt_data_end+0xff80afdc>
    affc:	ace1883a 	add	r16,r21,r19
    b000:	843ffe04 	addi	r16,r16,-8
    b004:	9c800a0e 	bge	r19,r18,b030 <__s2b+0xd4>
    b008:	94e5c83a 	sub	r18,r18,r19
    b00c:	84a5883a 	add	r18,r16,r18
    b010:	81c00007 	ldb	r7,0(r16)
    b014:	01800284 	movi	r6,10
    b018:	84000044 	addi	r16,r16,1
    b01c:	100b883a 	mov	r5,r2
    b020:	39fff404 	addi	r7,r7,-48
    b024:	8809883a 	mov	r4,r17
    b028:	000ae3c0 	call	ae3c <__multadd>
    b02c:	84bff81e 	bne	r16,r18,b010 <__alt_data_end+0xff80b010>
    b030:	dfc00617 	ldw	ra,24(sp)
    b034:	dd400517 	ldw	r21,20(sp)
    b038:	dd000417 	ldw	r20,16(sp)
    b03c:	dcc00317 	ldw	r19,12(sp)
    b040:	dc800217 	ldw	r18,8(sp)
    b044:	dc400117 	ldw	r17,4(sp)
    b048:	dc000017 	ldw	r16,0(sp)
    b04c:	dec00704 	addi	sp,sp,28
    b050:	f800283a 	ret
    b054:	84000284 	addi	r16,r16,10
    b058:	1827883a 	mov	r19,r3
    b05c:	003fe906 	br	b004 <__alt_data_end+0xff80b004>

0000b060 <__hi0bits>:
    b060:	20bfffec 	andhi	r2,r4,65535
    b064:	1000141e 	bne	r2,zero,b0b8 <__hi0bits+0x58>
    b068:	2008943a 	slli	r4,r4,16
    b06c:	00800404 	movi	r2,16
    b070:	20ffc02c 	andhi	r3,r4,65280
    b074:	1800021e 	bne	r3,zero,b080 <__hi0bits+0x20>
    b078:	2008923a 	slli	r4,r4,8
    b07c:	10800204 	addi	r2,r2,8
    b080:	20fc002c 	andhi	r3,r4,61440
    b084:	1800021e 	bne	r3,zero,b090 <__hi0bits+0x30>
    b088:	2008913a 	slli	r4,r4,4
    b08c:	10800104 	addi	r2,r2,4
    b090:	20f0002c 	andhi	r3,r4,49152
    b094:	1800031e 	bne	r3,zero,b0a4 <__hi0bits+0x44>
    b098:	2109883a 	add	r4,r4,r4
    b09c:	10800084 	addi	r2,r2,2
    b0a0:	2109883a 	add	r4,r4,r4
    b0a4:	20000316 	blt	r4,zero,b0b4 <__hi0bits+0x54>
    b0a8:	2110002c 	andhi	r4,r4,16384
    b0ac:	2000041e 	bne	r4,zero,b0c0 <__hi0bits+0x60>
    b0b0:	00800804 	movi	r2,32
    b0b4:	f800283a 	ret
    b0b8:	0005883a 	mov	r2,zero
    b0bc:	003fec06 	br	b070 <__alt_data_end+0xff80b070>
    b0c0:	10800044 	addi	r2,r2,1
    b0c4:	f800283a 	ret

0000b0c8 <__lo0bits>:
    b0c8:	20c00017 	ldw	r3,0(r4)
    b0cc:	188001cc 	andi	r2,r3,7
    b0d0:	10000826 	beq	r2,zero,b0f4 <__lo0bits+0x2c>
    b0d4:	1880004c 	andi	r2,r3,1
    b0d8:	1000211e 	bne	r2,zero,b160 <__lo0bits+0x98>
    b0dc:	1880008c 	andi	r2,r3,2
    b0e0:	1000211e 	bne	r2,zero,b168 <__lo0bits+0xa0>
    b0e4:	1806d0ba 	srli	r3,r3,2
    b0e8:	00800084 	movi	r2,2
    b0ec:	20c00015 	stw	r3,0(r4)
    b0f0:	f800283a 	ret
    b0f4:	18bfffcc 	andi	r2,r3,65535
    b0f8:	10001326 	beq	r2,zero,b148 <__lo0bits+0x80>
    b0fc:	0005883a 	mov	r2,zero
    b100:	19403fcc 	andi	r5,r3,255
    b104:	2800021e 	bne	r5,zero,b110 <__lo0bits+0x48>
    b108:	1806d23a 	srli	r3,r3,8
    b10c:	10800204 	addi	r2,r2,8
    b110:	194003cc 	andi	r5,r3,15
    b114:	2800021e 	bne	r5,zero,b120 <__lo0bits+0x58>
    b118:	1806d13a 	srli	r3,r3,4
    b11c:	10800104 	addi	r2,r2,4
    b120:	194000cc 	andi	r5,r3,3
    b124:	2800021e 	bne	r5,zero,b130 <__lo0bits+0x68>
    b128:	1806d0ba 	srli	r3,r3,2
    b12c:	10800084 	addi	r2,r2,2
    b130:	1940004c 	andi	r5,r3,1
    b134:	2800081e 	bne	r5,zero,b158 <__lo0bits+0x90>
    b138:	1806d07a 	srli	r3,r3,1
    b13c:	1800051e 	bne	r3,zero,b154 <__lo0bits+0x8c>
    b140:	00800804 	movi	r2,32
    b144:	f800283a 	ret
    b148:	1806d43a 	srli	r3,r3,16
    b14c:	00800404 	movi	r2,16
    b150:	003feb06 	br	b100 <__alt_data_end+0xff80b100>
    b154:	10800044 	addi	r2,r2,1
    b158:	20c00015 	stw	r3,0(r4)
    b15c:	f800283a 	ret
    b160:	0005883a 	mov	r2,zero
    b164:	f800283a 	ret
    b168:	1806d07a 	srli	r3,r3,1
    b16c:	00800044 	movi	r2,1
    b170:	20c00015 	stw	r3,0(r4)
    b174:	f800283a 	ret

0000b178 <__i2b>:
    b178:	defffd04 	addi	sp,sp,-12
    b17c:	dc000015 	stw	r16,0(sp)
    b180:	04000044 	movi	r16,1
    b184:	dc400115 	stw	r17,4(sp)
    b188:	2823883a 	mov	r17,r5
    b18c:	800b883a 	mov	r5,r16
    b190:	dfc00215 	stw	ra,8(sp)
    b194:	000ad6c0 	call	ad6c <_Balloc>
    b198:	14400515 	stw	r17,20(r2)
    b19c:	14000415 	stw	r16,16(r2)
    b1a0:	dfc00217 	ldw	ra,8(sp)
    b1a4:	dc400117 	ldw	r17,4(sp)
    b1a8:	dc000017 	ldw	r16,0(sp)
    b1ac:	dec00304 	addi	sp,sp,12
    b1b0:	f800283a 	ret

0000b1b4 <__multiply>:
    b1b4:	defffa04 	addi	sp,sp,-24
    b1b8:	dcc00315 	stw	r19,12(sp)
    b1bc:	dc800215 	stw	r18,8(sp)
    b1c0:	34c00417 	ldw	r19,16(r6)
    b1c4:	2c800417 	ldw	r18,16(r5)
    b1c8:	dd000415 	stw	r20,16(sp)
    b1cc:	dc400115 	stw	r17,4(sp)
    b1d0:	dfc00515 	stw	ra,20(sp)
    b1d4:	dc000015 	stw	r16,0(sp)
    b1d8:	2829883a 	mov	r20,r5
    b1dc:	3023883a 	mov	r17,r6
    b1e0:	94c0050e 	bge	r18,r19,b1f8 <__multiply+0x44>
    b1e4:	9007883a 	mov	r3,r18
    b1e8:	3029883a 	mov	r20,r6
    b1ec:	9825883a 	mov	r18,r19
    b1f0:	2823883a 	mov	r17,r5
    b1f4:	1827883a 	mov	r19,r3
    b1f8:	a0800217 	ldw	r2,8(r20)
    b1fc:	94e1883a 	add	r16,r18,r19
    b200:	a1400117 	ldw	r5,4(r20)
    b204:	1400010e 	bge	r2,r16,b20c <__multiply+0x58>
    b208:	29400044 	addi	r5,r5,1
    b20c:	000ad6c0 	call	ad6c <_Balloc>
    b210:	8415883a 	add	r10,r16,r16
    b214:	12c00504 	addi	r11,r2,20
    b218:	5295883a 	add	r10,r10,r10
    b21c:	5a95883a 	add	r10,r11,r10
    b220:	5807883a 	mov	r3,r11
    b224:	5a80032e 	bgeu	r11,r10,b234 <__multiply+0x80>
    b228:	18000015 	stw	zero,0(r3)
    b22c:	18c00104 	addi	r3,r3,4
    b230:	1abffd36 	bltu	r3,r10,b228 <__alt_data_end+0xff80b228>
    b234:	9ce7883a 	add	r19,r19,r19
    b238:	94a5883a 	add	r18,r18,r18
    b23c:	89800504 	addi	r6,r17,20
    b240:	9ce7883a 	add	r19,r19,r19
    b244:	a3400504 	addi	r13,r20,20
    b248:	94a5883a 	add	r18,r18,r18
    b24c:	34d9883a 	add	r12,r6,r19
    b250:	6c93883a 	add	r9,r13,r18
    b254:	3300422e 	bgeu	r6,r12,b360 <__multiply+0x1ac>
    b258:	37c00017 	ldw	ra,0(r6)
    b25c:	fbffffcc 	andi	r15,ra,65535
    b260:	78001b26 	beq	r15,zero,b2d0 <__multiply+0x11c>
    b264:	5811883a 	mov	r8,r11
    b268:	681d883a 	mov	r14,r13
    b26c:	000f883a 	mov	r7,zero
    b270:	71000017 	ldw	r4,0(r14)
    b274:	40c00017 	ldw	r3,0(r8)
    b278:	73800104 	addi	r14,r14,4
    b27c:	217fffcc 	andi	r5,r4,65535
    b280:	2bcb383a 	mul	r5,r5,r15
    b284:	2008d43a 	srli	r4,r4,16
    b288:	1c7fffcc 	andi	r17,r3,65535
    b28c:	2c4b883a 	add	r5,r5,r17
    b290:	29cb883a 	add	r5,r5,r7
    b294:	23c9383a 	mul	r4,r4,r15
    b298:	1806d43a 	srli	r3,r3,16
    b29c:	280ed43a 	srli	r7,r5,16
    b2a0:	297fffcc 	andi	r5,r5,65535
    b2a4:	20c7883a 	add	r3,r4,r3
    b2a8:	19c7883a 	add	r3,r3,r7
    b2ac:	1808943a 	slli	r4,r3,16
    b2b0:	4023883a 	mov	r17,r8
    b2b4:	180ed43a 	srli	r7,r3,16
    b2b8:	214ab03a 	or	r5,r4,r5
    b2bc:	41400015 	stw	r5,0(r8)
    b2c0:	42000104 	addi	r8,r8,4
    b2c4:	727fea36 	bltu	r14,r9,b270 <__alt_data_end+0xff80b270>
    b2c8:	89c00115 	stw	r7,4(r17)
    b2cc:	37c00017 	ldw	ra,0(r6)
    b2d0:	f83ed43a 	srli	ra,ra,16
    b2d4:	f8001f26 	beq	ra,zero,b354 <__multiply+0x1a0>
    b2d8:	58c00017 	ldw	r3,0(r11)
    b2dc:	681d883a 	mov	r14,r13
    b2e0:	581f883a 	mov	r15,r11
    b2e4:	1811883a 	mov	r8,r3
    b2e8:	5825883a 	mov	r18,r11
    b2ec:	000f883a 	mov	r7,zero
    b2f0:	00000106 	br	b2f8 <__multiply+0x144>
    b2f4:	8825883a 	mov	r18,r17
    b2f8:	7140000b 	ldhu	r5,0(r14)
    b2fc:	4010d43a 	srli	r8,r8,16
    b300:	193fffcc 	andi	r4,r3,65535
    b304:	2fcb383a 	mul	r5,r5,ra
    b308:	7bc00104 	addi	r15,r15,4
    b30c:	73800104 	addi	r14,r14,4
    b310:	2a0b883a 	add	r5,r5,r8
    b314:	29cb883a 	add	r5,r5,r7
    b318:	2806943a 	slli	r3,r5,16
    b31c:	94400104 	addi	r17,r18,4
    b320:	280ad43a 	srli	r5,r5,16
    b324:	1908b03a 	or	r4,r3,r4
    b328:	793fff15 	stw	r4,-4(r15)
    b32c:	70ffff17 	ldw	r3,-4(r14)
    b330:	8a000017 	ldw	r8,0(r17)
    b334:	1806d43a 	srli	r3,r3,16
    b338:	413fffcc 	andi	r4,r8,65535
    b33c:	1fc7383a 	mul	r3,r3,ra
    b340:	1907883a 	add	r3,r3,r4
    b344:	1947883a 	add	r3,r3,r5
    b348:	180ed43a 	srli	r7,r3,16
    b34c:	727fe936 	bltu	r14,r9,b2f4 <__alt_data_end+0xff80b2f4>
    b350:	90c00115 	stw	r3,4(r18)
    b354:	31800104 	addi	r6,r6,4
    b358:	5ac00104 	addi	r11,r11,4
    b35c:	333fbe36 	bltu	r6,r12,b258 <__alt_data_end+0xff80b258>
    b360:	0400090e 	bge	zero,r16,b388 <__multiply+0x1d4>
    b364:	50ffff17 	ldw	r3,-4(r10)
    b368:	52bfff04 	addi	r10,r10,-4
    b36c:	18000326 	beq	r3,zero,b37c <__multiply+0x1c8>
    b370:	00000506 	br	b388 <__multiply+0x1d4>
    b374:	50c00017 	ldw	r3,0(r10)
    b378:	1800031e 	bne	r3,zero,b388 <__multiply+0x1d4>
    b37c:	843fffc4 	addi	r16,r16,-1
    b380:	52bfff04 	addi	r10,r10,-4
    b384:	803ffb1e 	bne	r16,zero,b374 <__alt_data_end+0xff80b374>
    b388:	14000415 	stw	r16,16(r2)
    b38c:	dfc00517 	ldw	ra,20(sp)
    b390:	dd000417 	ldw	r20,16(sp)
    b394:	dcc00317 	ldw	r19,12(sp)
    b398:	dc800217 	ldw	r18,8(sp)
    b39c:	dc400117 	ldw	r17,4(sp)
    b3a0:	dc000017 	ldw	r16,0(sp)
    b3a4:	dec00604 	addi	sp,sp,24
    b3a8:	f800283a 	ret

0000b3ac <__pow5mult>:
    b3ac:	defffa04 	addi	sp,sp,-24
    b3b0:	dcc00315 	stw	r19,12(sp)
    b3b4:	dc000015 	stw	r16,0(sp)
    b3b8:	dfc00515 	stw	ra,20(sp)
    b3bc:	dd000415 	stw	r20,16(sp)
    b3c0:	dc800215 	stw	r18,8(sp)
    b3c4:	dc400115 	stw	r17,4(sp)
    b3c8:	308000cc 	andi	r2,r6,3
    b3cc:	3021883a 	mov	r16,r6
    b3d0:	2027883a 	mov	r19,r4
    b3d4:	10002f1e 	bne	r2,zero,b494 <__pow5mult+0xe8>
    b3d8:	2825883a 	mov	r18,r5
    b3dc:	8021d0ba 	srai	r16,r16,2
    b3e0:	80001a26 	beq	r16,zero,b44c <__pow5mult+0xa0>
    b3e4:	9c401217 	ldw	r17,72(r19)
    b3e8:	8800061e 	bne	r17,zero,b404 <__pow5mult+0x58>
    b3ec:	00003406 	br	b4c0 <__pow5mult+0x114>
    b3f0:	8021d07a 	srai	r16,r16,1
    b3f4:	80001526 	beq	r16,zero,b44c <__pow5mult+0xa0>
    b3f8:	88800017 	ldw	r2,0(r17)
    b3fc:	10001c26 	beq	r2,zero,b470 <__pow5mult+0xc4>
    b400:	1023883a 	mov	r17,r2
    b404:	8080004c 	andi	r2,r16,1
    b408:	103ff926 	beq	r2,zero,b3f0 <__alt_data_end+0xff80b3f0>
    b40c:	880d883a 	mov	r6,r17
    b410:	900b883a 	mov	r5,r18
    b414:	9809883a 	mov	r4,r19
    b418:	000b1b40 	call	b1b4 <__multiply>
    b41c:	90001b26 	beq	r18,zero,b48c <__pow5mult+0xe0>
    b420:	91000117 	ldw	r4,4(r18)
    b424:	98c01317 	ldw	r3,76(r19)
    b428:	8021d07a 	srai	r16,r16,1
    b42c:	2109883a 	add	r4,r4,r4
    b430:	2109883a 	add	r4,r4,r4
    b434:	1907883a 	add	r3,r3,r4
    b438:	19000017 	ldw	r4,0(r3)
    b43c:	91000015 	stw	r4,0(r18)
    b440:	1c800015 	stw	r18,0(r3)
    b444:	1025883a 	mov	r18,r2
    b448:	803feb1e 	bne	r16,zero,b3f8 <__alt_data_end+0xff80b3f8>
    b44c:	9005883a 	mov	r2,r18
    b450:	dfc00517 	ldw	ra,20(sp)
    b454:	dd000417 	ldw	r20,16(sp)
    b458:	dcc00317 	ldw	r19,12(sp)
    b45c:	dc800217 	ldw	r18,8(sp)
    b460:	dc400117 	ldw	r17,4(sp)
    b464:	dc000017 	ldw	r16,0(sp)
    b468:	dec00604 	addi	sp,sp,24
    b46c:	f800283a 	ret
    b470:	880d883a 	mov	r6,r17
    b474:	880b883a 	mov	r5,r17
    b478:	9809883a 	mov	r4,r19
    b47c:	000b1b40 	call	b1b4 <__multiply>
    b480:	88800015 	stw	r2,0(r17)
    b484:	10000015 	stw	zero,0(r2)
    b488:	003fdd06 	br	b400 <__alt_data_end+0xff80b400>
    b48c:	1025883a 	mov	r18,r2
    b490:	003fd706 	br	b3f0 <__alt_data_end+0xff80b3f0>
    b494:	10bfffc4 	addi	r2,r2,-1
    b498:	1085883a 	add	r2,r2,r2
    b49c:	00c00074 	movhi	r3,1
    b4a0:	18c48404 	addi	r3,r3,4624
    b4a4:	1085883a 	add	r2,r2,r2
    b4a8:	1885883a 	add	r2,r3,r2
    b4ac:	11800017 	ldw	r6,0(r2)
    b4b0:	000f883a 	mov	r7,zero
    b4b4:	000ae3c0 	call	ae3c <__multadd>
    b4b8:	1025883a 	mov	r18,r2
    b4bc:	003fc706 	br	b3dc <__alt_data_end+0xff80b3dc>
    b4c0:	05000044 	movi	r20,1
    b4c4:	a00b883a 	mov	r5,r20
    b4c8:	9809883a 	mov	r4,r19
    b4cc:	000ad6c0 	call	ad6c <_Balloc>
    b4d0:	1023883a 	mov	r17,r2
    b4d4:	00809c44 	movi	r2,625
    b4d8:	88800515 	stw	r2,20(r17)
    b4dc:	8d000415 	stw	r20,16(r17)
    b4e0:	9c401215 	stw	r17,72(r19)
    b4e4:	88000015 	stw	zero,0(r17)
    b4e8:	003fc606 	br	b404 <__alt_data_end+0xff80b404>

0000b4ec <__lshift>:
    b4ec:	defff904 	addi	sp,sp,-28
    b4f0:	dd400515 	stw	r21,20(sp)
    b4f4:	dcc00315 	stw	r19,12(sp)
    b4f8:	302bd17a 	srai	r21,r6,5
    b4fc:	2cc00417 	ldw	r19,16(r5)
    b500:	28800217 	ldw	r2,8(r5)
    b504:	dd000415 	stw	r20,16(sp)
    b508:	ace7883a 	add	r19,r21,r19
    b50c:	dc800215 	stw	r18,8(sp)
    b510:	dc400115 	stw	r17,4(sp)
    b514:	dc000015 	stw	r16,0(sp)
    b518:	dfc00615 	stw	ra,24(sp)
    b51c:	9c000044 	addi	r16,r19,1
    b520:	2823883a 	mov	r17,r5
    b524:	3029883a 	mov	r20,r6
    b528:	2025883a 	mov	r18,r4
    b52c:	29400117 	ldw	r5,4(r5)
    b530:	1400030e 	bge	r2,r16,b540 <__lshift+0x54>
    b534:	1085883a 	add	r2,r2,r2
    b538:	29400044 	addi	r5,r5,1
    b53c:	143ffd16 	blt	r2,r16,b534 <__alt_data_end+0xff80b534>
    b540:	9009883a 	mov	r4,r18
    b544:	000ad6c0 	call	ad6c <_Balloc>
    b548:	10c00504 	addi	r3,r2,20
    b54c:	0540070e 	bge	zero,r21,b56c <__lshift+0x80>
    b550:	ad6b883a 	add	r21,r21,r21
    b554:	ad6b883a 	add	r21,r21,r21
    b558:	1809883a 	mov	r4,r3
    b55c:	1d47883a 	add	r3,r3,r21
    b560:	20000015 	stw	zero,0(r4)
    b564:	21000104 	addi	r4,r4,4
    b568:	193ffd1e 	bne	r3,r4,b560 <__alt_data_end+0xff80b560>
    b56c:	8a000417 	ldw	r8,16(r17)
    b570:	89000504 	addi	r4,r17,20
    b574:	a18007cc 	andi	r6,r20,31
    b578:	4211883a 	add	r8,r8,r8
    b57c:	4211883a 	add	r8,r8,r8
    b580:	2211883a 	add	r8,r4,r8
    b584:	30002326 	beq	r6,zero,b614 <__lshift+0x128>
    b588:	02400804 	movi	r9,32
    b58c:	4993c83a 	sub	r9,r9,r6
    b590:	000b883a 	mov	r5,zero
    b594:	21c00017 	ldw	r7,0(r4)
    b598:	1815883a 	mov	r10,r3
    b59c:	18c00104 	addi	r3,r3,4
    b5a0:	398e983a 	sll	r7,r7,r6
    b5a4:	21000104 	addi	r4,r4,4
    b5a8:	394ab03a 	or	r5,r7,r5
    b5ac:	197fff15 	stw	r5,-4(r3)
    b5b0:	217fff17 	ldw	r5,-4(r4)
    b5b4:	2a4ad83a 	srl	r5,r5,r9
    b5b8:	223ff636 	bltu	r4,r8,b594 <__alt_data_end+0xff80b594>
    b5bc:	51400115 	stw	r5,4(r10)
    b5c0:	28001a1e 	bne	r5,zero,b62c <__lshift+0x140>
    b5c4:	843fffc4 	addi	r16,r16,-1
    b5c8:	14000415 	stw	r16,16(r2)
    b5cc:	88000826 	beq	r17,zero,b5f0 <__lshift+0x104>
    b5d0:	89000117 	ldw	r4,4(r17)
    b5d4:	90c01317 	ldw	r3,76(r18)
    b5d8:	2109883a 	add	r4,r4,r4
    b5dc:	2109883a 	add	r4,r4,r4
    b5e0:	1907883a 	add	r3,r3,r4
    b5e4:	19000017 	ldw	r4,0(r3)
    b5e8:	89000015 	stw	r4,0(r17)
    b5ec:	1c400015 	stw	r17,0(r3)
    b5f0:	dfc00617 	ldw	ra,24(sp)
    b5f4:	dd400517 	ldw	r21,20(sp)
    b5f8:	dd000417 	ldw	r20,16(sp)
    b5fc:	dcc00317 	ldw	r19,12(sp)
    b600:	dc800217 	ldw	r18,8(sp)
    b604:	dc400117 	ldw	r17,4(sp)
    b608:	dc000017 	ldw	r16,0(sp)
    b60c:	dec00704 	addi	sp,sp,28
    b610:	f800283a 	ret
    b614:	21400017 	ldw	r5,0(r4)
    b618:	18c00104 	addi	r3,r3,4
    b61c:	21000104 	addi	r4,r4,4
    b620:	197fff15 	stw	r5,-4(r3)
    b624:	223ffb36 	bltu	r4,r8,b614 <__alt_data_end+0xff80b614>
    b628:	003fe606 	br	b5c4 <__alt_data_end+0xff80b5c4>
    b62c:	9c000084 	addi	r16,r19,2
    b630:	003fe406 	br	b5c4 <__alt_data_end+0xff80b5c4>

0000b634 <__mcmp>:
    b634:	20800417 	ldw	r2,16(r4)
    b638:	28c00417 	ldw	r3,16(r5)
    b63c:	10c5c83a 	sub	r2,r2,r3
    b640:	1000111e 	bne	r2,zero,b688 <__mcmp+0x54>
    b644:	18c7883a 	add	r3,r3,r3
    b648:	18c7883a 	add	r3,r3,r3
    b64c:	21000504 	addi	r4,r4,20
    b650:	29400504 	addi	r5,r5,20
    b654:	20c5883a 	add	r2,r4,r3
    b658:	28cb883a 	add	r5,r5,r3
    b65c:	00000106 	br	b664 <__mcmp+0x30>
    b660:	20800a2e 	bgeu	r4,r2,b68c <__mcmp+0x58>
    b664:	10bfff04 	addi	r2,r2,-4
    b668:	297fff04 	addi	r5,r5,-4
    b66c:	11800017 	ldw	r6,0(r2)
    b670:	28c00017 	ldw	r3,0(r5)
    b674:	30fffa26 	beq	r6,r3,b660 <__alt_data_end+0xff80b660>
    b678:	30c00236 	bltu	r6,r3,b684 <__mcmp+0x50>
    b67c:	00800044 	movi	r2,1
    b680:	f800283a 	ret
    b684:	00bfffc4 	movi	r2,-1
    b688:	f800283a 	ret
    b68c:	0005883a 	mov	r2,zero
    b690:	f800283a 	ret

0000b694 <__mdiff>:
    b694:	28c00417 	ldw	r3,16(r5)
    b698:	30800417 	ldw	r2,16(r6)
    b69c:	defffa04 	addi	sp,sp,-24
    b6a0:	dcc00315 	stw	r19,12(sp)
    b6a4:	dc800215 	stw	r18,8(sp)
    b6a8:	dfc00515 	stw	ra,20(sp)
    b6ac:	dd000415 	stw	r20,16(sp)
    b6b0:	dc400115 	stw	r17,4(sp)
    b6b4:	dc000015 	stw	r16,0(sp)
    b6b8:	1887c83a 	sub	r3,r3,r2
    b6bc:	2825883a 	mov	r18,r5
    b6c0:	3027883a 	mov	r19,r6
    b6c4:	1800141e 	bne	r3,zero,b718 <__mdiff+0x84>
    b6c8:	1085883a 	add	r2,r2,r2
    b6cc:	1085883a 	add	r2,r2,r2
    b6d0:	2a000504 	addi	r8,r5,20
    b6d4:	34000504 	addi	r16,r6,20
    b6d8:	4087883a 	add	r3,r8,r2
    b6dc:	8085883a 	add	r2,r16,r2
    b6e0:	00000106 	br	b6e8 <__mdiff+0x54>
    b6e4:	40c0592e 	bgeu	r8,r3,b84c <__mdiff+0x1b8>
    b6e8:	18ffff04 	addi	r3,r3,-4
    b6ec:	10bfff04 	addi	r2,r2,-4
    b6f0:	19c00017 	ldw	r7,0(r3)
    b6f4:	11400017 	ldw	r5,0(r2)
    b6f8:	397ffa26 	beq	r7,r5,b6e4 <__alt_data_end+0xff80b6e4>
    b6fc:	3940592e 	bgeu	r7,r5,b864 <__mdiff+0x1d0>
    b700:	9005883a 	mov	r2,r18
    b704:	4023883a 	mov	r17,r8
    b708:	9825883a 	mov	r18,r19
    b70c:	05000044 	movi	r20,1
    b710:	1027883a 	mov	r19,r2
    b714:	00000406 	br	b728 <__mdiff+0x94>
    b718:	18005616 	blt	r3,zero,b874 <__mdiff+0x1e0>
    b71c:	34400504 	addi	r17,r6,20
    b720:	2c000504 	addi	r16,r5,20
    b724:	0029883a 	mov	r20,zero
    b728:	91400117 	ldw	r5,4(r18)
    b72c:	000ad6c0 	call	ad6c <_Balloc>
    b730:	92400417 	ldw	r9,16(r18)
    b734:	9b000417 	ldw	r12,16(r19)
    b738:	12c00504 	addi	r11,r2,20
    b73c:	4a51883a 	add	r8,r9,r9
    b740:	6319883a 	add	r12,r12,r12
    b744:	4211883a 	add	r8,r8,r8
    b748:	6319883a 	add	r12,r12,r12
    b74c:	15000315 	stw	r20,12(r2)
    b750:	8211883a 	add	r8,r16,r8
    b754:	8b19883a 	add	r12,r17,r12
    b758:	0007883a 	mov	r3,zero
    b75c:	81400017 	ldw	r5,0(r16)
    b760:	89c00017 	ldw	r7,0(r17)
    b764:	59800104 	addi	r6,r11,4
    b768:	293fffcc 	andi	r4,r5,65535
    b76c:	20c7883a 	add	r3,r4,r3
    b770:	393fffcc 	andi	r4,r7,65535
    b774:	1909c83a 	sub	r4,r3,r4
    b778:	280ad43a 	srli	r5,r5,16
    b77c:	380ed43a 	srli	r7,r7,16
    b780:	2007d43a 	srai	r3,r4,16
    b784:	213fffcc 	andi	r4,r4,65535
    b788:	29cbc83a 	sub	r5,r5,r7
    b78c:	28c7883a 	add	r3,r5,r3
    b790:	180a943a 	slli	r5,r3,16
    b794:	8c400104 	addi	r17,r17,4
    b798:	84000104 	addi	r16,r16,4
    b79c:	2908b03a 	or	r4,r5,r4
    b7a0:	59000015 	stw	r4,0(r11)
    b7a4:	1807d43a 	srai	r3,r3,16
    b7a8:	3015883a 	mov	r10,r6
    b7ac:	3017883a 	mov	r11,r6
    b7b0:	8b3fea36 	bltu	r17,r12,b75c <__alt_data_end+0xff80b75c>
    b7b4:	8200162e 	bgeu	r16,r8,b810 <__mdiff+0x17c>
    b7b8:	8017883a 	mov	r11,r16
    b7bc:	59400017 	ldw	r5,0(r11)
    b7c0:	31800104 	addi	r6,r6,4
    b7c4:	5ac00104 	addi	r11,r11,4
    b7c8:	293fffcc 	andi	r4,r5,65535
    b7cc:	20c7883a 	add	r3,r4,r3
    b7d0:	280ed43a 	srli	r7,r5,16
    b7d4:	180bd43a 	srai	r5,r3,16
    b7d8:	193fffcc 	andi	r4,r3,65535
    b7dc:	3947883a 	add	r3,r7,r5
    b7e0:	180a943a 	slli	r5,r3,16
    b7e4:	1807d43a 	srai	r3,r3,16
    b7e8:	2908b03a 	or	r4,r5,r4
    b7ec:	313fff15 	stw	r4,-4(r6)
    b7f0:	5a3ff236 	bltu	r11,r8,b7bc <__alt_data_end+0xff80b7bc>
    b7f4:	0406303a 	nor	r3,zero,r16
    b7f8:	1a07883a 	add	r3,r3,r8
    b7fc:	1806d0ba 	srli	r3,r3,2
    b800:	18c00044 	addi	r3,r3,1
    b804:	18c7883a 	add	r3,r3,r3
    b808:	18c7883a 	add	r3,r3,r3
    b80c:	50d5883a 	add	r10,r10,r3
    b810:	50ffff04 	addi	r3,r10,-4
    b814:	2000041e 	bne	r4,zero,b828 <__mdiff+0x194>
    b818:	18ffff04 	addi	r3,r3,-4
    b81c:	19000017 	ldw	r4,0(r3)
    b820:	4a7fffc4 	addi	r9,r9,-1
    b824:	203ffc26 	beq	r4,zero,b818 <__alt_data_end+0xff80b818>
    b828:	12400415 	stw	r9,16(r2)
    b82c:	dfc00517 	ldw	ra,20(sp)
    b830:	dd000417 	ldw	r20,16(sp)
    b834:	dcc00317 	ldw	r19,12(sp)
    b838:	dc800217 	ldw	r18,8(sp)
    b83c:	dc400117 	ldw	r17,4(sp)
    b840:	dc000017 	ldw	r16,0(sp)
    b844:	dec00604 	addi	sp,sp,24
    b848:	f800283a 	ret
    b84c:	000b883a 	mov	r5,zero
    b850:	000ad6c0 	call	ad6c <_Balloc>
    b854:	00c00044 	movi	r3,1
    b858:	10c00415 	stw	r3,16(r2)
    b85c:	10000515 	stw	zero,20(r2)
    b860:	003ff206 	br	b82c <__alt_data_end+0xff80b82c>
    b864:	8023883a 	mov	r17,r16
    b868:	0029883a 	mov	r20,zero
    b86c:	4021883a 	mov	r16,r8
    b870:	003fad06 	br	b728 <__alt_data_end+0xff80b728>
    b874:	9005883a 	mov	r2,r18
    b878:	94400504 	addi	r17,r18,20
    b87c:	9c000504 	addi	r16,r19,20
    b880:	9825883a 	mov	r18,r19
    b884:	05000044 	movi	r20,1
    b888:	1027883a 	mov	r19,r2
    b88c:	003fa606 	br	b728 <__alt_data_end+0xff80b728>

0000b890 <__ulp>:
    b890:	295ffc2c 	andhi	r5,r5,32752
    b894:	00bf3034 	movhi	r2,64704
    b898:	2887883a 	add	r3,r5,r2
    b89c:	00c0020e 	bge	zero,r3,b8a8 <__ulp+0x18>
    b8a0:	0005883a 	mov	r2,zero
    b8a4:	f800283a 	ret
    b8a8:	00c7c83a 	sub	r3,zero,r3
    b8ac:	1807d53a 	srai	r3,r3,20
    b8b0:	008004c4 	movi	r2,19
    b8b4:	10c00b0e 	bge	r2,r3,b8e4 <__ulp+0x54>
    b8b8:	18bffb04 	addi	r2,r3,-20
    b8bc:	01000784 	movi	r4,30
    b8c0:	0007883a 	mov	r3,zero
    b8c4:	20800516 	blt	r4,r2,b8dc <__ulp+0x4c>
    b8c8:	010007c4 	movi	r4,31
    b8cc:	2089c83a 	sub	r4,r4,r2
    b8d0:	00800044 	movi	r2,1
    b8d4:	1104983a 	sll	r2,r2,r4
    b8d8:	f800283a 	ret
    b8dc:	00800044 	movi	r2,1
    b8e0:	f800283a 	ret
    b8e4:	01400234 	movhi	r5,8
    b8e8:	28c7d83a 	sra	r3,r5,r3
    b8ec:	0005883a 	mov	r2,zero
    b8f0:	f800283a 	ret

0000b8f4 <__b2d>:
    b8f4:	defffa04 	addi	sp,sp,-24
    b8f8:	dc000015 	stw	r16,0(sp)
    b8fc:	24000417 	ldw	r16,16(r4)
    b900:	dc400115 	stw	r17,4(sp)
    b904:	24400504 	addi	r17,r4,20
    b908:	8421883a 	add	r16,r16,r16
    b90c:	8421883a 	add	r16,r16,r16
    b910:	8c21883a 	add	r16,r17,r16
    b914:	dc800215 	stw	r18,8(sp)
    b918:	84bfff17 	ldw	r18,-4(r16)
    b91c:	dd000415 	stw	r20,16(sp)
    b920:	dcc00315 	stw	r19,12(sp)
    b924:	9009883a 	mov	r4,r18
    b928:	2829883a 	mov	r20,r5
    b92c:	dfc00515 	stw	ra,20(sp)
    b930:	000b0600 	call	b060 <__hi0bits>
    b934:	00c00804 	movi	r3,32
    b938:	1889c83a 	sub	r4,r3,r2
    b93c:	a1000015 	stw	r4,0(r20)
    b940:	01000284 	movi	r4,10
    b944:	84ffff04 	addi	r19,r16,-4
    b948:	20801216 	blt	r4,r2,b994 <__b2d+0xa0>
    b94c:	018002c4 	movi	r6,11
    b950:	308dc83a 	sub	r6,r6,r2
    b954:	9186d83a 	srl	r3,r18,r6
    b958:	18cffc34 	orhi	r3,r3,16368
    b95c:	8cc0212e 	bgeu	r17,r19,b9e4 <__b2d+0xf0>
    b960:	813ffe17 	ldw	r4,-8(r16)
    b964:	218cd83a 	srl	r6,r4,r6
    b968:	10800544 	addi	r2,r2,21
    b96c:	9084983a 	sll	r2,r18,r2
    b970:	1184b03a 	or	r2,r2,r6
    b974:	dfc00517 	ldw	ra,20(sp)
    b978:	dd000417 	ldw	r20,16(sp)
    b97c:	dcc00317 	ldw	r19,12(sp)
    b980:	dc800217 	ldw	r18,8(sp)
    b984:	dc400117 	ldw	r17,4(sp)
    b988:	dc000017 	ldw	r16,0(sp)
    b98c:	dec00604 	addi	sp,sp,24
    b990:	f800283a 	ret
    b994:	8cc00f2e 	bgeu	r17,r19,b9d4 <__b2d+0xe0>
    b998:	117ffd44 	addi	r5,r2,-11
    b99c:	80bffe17 	ldw	r2,-8(r16)
    b9a0:	28000e26 	beq	r5,zero,b9dc <__b2d+0xe8>
    b9a4:	1949c83a 	sub	r4,r3,r5
    b9a8:	9164983a 	sll	r18,r18,r5
    b9ac:	1106d83a 	srl	r3,r2,r4
    b9b0:	81bffe04 	addi	r6,r16,-8
    b9b4:	948ffc34 	orhi	r18,r18,16368
    b9b8:	90c6b03a 	or	r3,r18,r3
    b9bc:	89800e2e 	bgeu	r17,r6,b9f8 <__b2d+0x104>
    b9c0:	81bffd17 	ldw	r6,-12(r16)
    b9c4:	1144983a 	sll	r2,r2,r5
    b9c8:	310ad83a 	srl	r5,r6,r4
    b9cc:	2884b03a 	or	r2,r5,r2
    b9d0:	003fe806 	br	b974 <__alt_data_end+0xff80b974>
    b9d4:	10bffd44 	addi	r2,r2,-11
    b9d8:	1000041e 	bne	r2,zero,b9ec <__b2d+0xf8>
    b9dc:	90cffc34 	orhi	r3,r18,16368
    b9e0:	003fe406 	br	b974 <__alt_data_end+0xff80b974>
    b9e4:	000d883a 	mov	r6,zero
    b9e8:	003fdf06 	br	b968 <__alt_data_end+0xff80b968>
    b9ec:	90a4983a 	sll	r18,r18,r2
    b9f0:	0005883a 	mov	r2,zero
    b9f4:	003ff906 	br	b9dc <__alt_data_end+0xff80b9dc>
    b9f8:	1144983a 	sll	r2,r2,r5
    b9fc:	003fdd06 	br	b974 <__alt_data_end+0xff80b974>

0000ba00 <__d2b>:
    ba00:	defff804 	addi	sp,sp,-32
    ba04:	dc000215 	stw	r16,8(sp)
    ba08:	3021883a 	mov	r16,r6
    ba0c:	dc400315 	stw	r17,12(sp)
    ba10:	8022907a 	slli	r17,r16,1
    ba14:	dd000615 	stw	r20,24(sp)
    ba18:	2829883a 	mov	r20,r5
    ba1c:	01400044 	movi	r5,1
    ba20:	dcc00515 	stw	r19,20(sp)
    ba24:	dc800415 	stw	r18,16(sp)
    ba28:	dfc00715 	stw	ra,28(sp)
    ba2c:	3825883a 	mov	r18,r7
    ba30:	8822d57a 	srli	r17,r17,21
    ba34:	000ad6c0 	call	ad6c <_Balloc>
    ba38:	1027883a 	mov	r19,r2
    ba3c:	00800434 	movhi	r2,16
    ba40:	10bfffc4 	addi	r2,r2,-1
    ba44:	808c703a 	and	r6,r16,r2
    ba48:	88000126 	beq	r17,zero,ba50 <__d2b+0x50>
    ba4c:	31800434 	orhi	r6,r6,16
    ba50:	d9800015 	stw	r6,0(sp)
    ba54:	a0002426 	beq	r20,zero,bae8 <__d2b+0xe8>
    ba58:	d9000104 	addi	r4,sp,4
    ba5c:	dd000115 	stw	r20,4(sp)
    ba60:	000b0c80 	call	b0c8 <__lo0bits>
    ba64:	d8c00017 	ldw	r3,0(sp)
    ba68:	10002f1e 	bne	r2,zero,bb28 <__d2b+0x128>
    ba6c:	d9000117 	ldw	r4,4(sp)
    ba70:	99000515 	stw	r4,20(r19)
    ba74:	1821003a 	cmpeq	r16,r3,zero
    ba78:	01000084 	movi	r4,2
    ba7c:	2421c83a 	sub	r16,r4,r16
    ba80:	98c00615 	stw	r3,24(r19)
    ba84:	9c000415 	stw	r16,16(r19)
    ba88:	88001f1e 	bne	r17,zero,bb08 <__d2b+0x108>
    ba8c:	10bef384 	addi	r2,r2,-1074
    ba90:	90800015 	stw	r2,0(r18)
    ba94:	00900034 	movhi	r2,16384
    ba98:	10bfffc4 	addi	r2,r2,-1
    ba9c:	8085883a 	add	r2,r16,r2
    baa0:	1085883a 	add	r2,r2,r2
    baa4:	1085883a 	add	r2,r2,r2
    baa8:	9885883a 	add	r2,r19,r2
    baac:	11000517 	ldw	r4,20(r2)
    bab0:	8020917a 	slli	r16,r16,5
    bab4:	000b0600 	call	b060 <__hi0bits>
    bab8:	d8c00817 	ldw	r3,32(sp)
    babc:	8085c83a 	sub	r2,r16,r2
    bac0:	18800015 	stw	r2,0(r3)
    bac4:	9805883a 	mov	r2,r19
    bac8:	dfc00717 	ldw	ra,28(sp)
    bacc:	dd000617 	ldw	r20,24(sp)
    bad0:	dcc00517 	ldw	r19,20(sp)
    bad4:	dc800417 	ldw	r18,16(sp)
    bad8:	dc400317 	ldw	r17,12(sp)
    badc:	dc000217 	ldw	r16,8(sp)
    bae0:	dec00804 	addi	sp,sp,32
    bae4:	f800283a 	ret
    bae8:	d809883a 	mov	r4,sp
    baec:	000b0c80 	call	b0c8 <__lo0bits>
    baf0:	d8c00017 	ldw	r3,0(sp)
    baf4:	04000044 	movi	r16,1
    baf8:	9c000415 	stw	r16,16(r19)
    bafc:	98c00515 	stw	r3,20(r19)
    bb00:	10800804 	addi	r2,r2,32
    bb04:	883fe126 	beq	r17,zero,ba8c <__alt_data_end+0xff80ba8c>
    bb08:	00c00d44 	movi	r3,53
    bb0c:	8c7ef344 	addi	r17,r17,-1075
    bb10:	88a3883a 	add	r17,r17,r2
    bb14:	1885c83a 	sub	r2,r3,r2
    bb18:	d8c00817 	ldw	r3,32(sp)
    bb1c:	94400015 	stw	r17,0(r18)
    bb20:	18800015 	stw	r2,0(r3)
    bb24:	003fe706 	br	bac4 <__alt_data_end+0xff80bac4>
    bb28:	01000804 	movi	r4,32
    bb2c:	2089c83a 	sub	r4,r4,r2
    bb30:	1908983a 	sll	r4,r3,r4
    bb34:	d9400117 	ldw	r5,4(sp)
    bb38:	1886d83a 	srl	r3,r3,r2
    bb3c:	2148b03a 	or	r4,r4,r5
    bb40:	99000515 	stw	r4,20(r19)
    bb44:	d8c00015 	stw	r3,0(sp)
    bb48:	003fca06 	br	ba74 <__alt_data_end+0xff80ba74>

0000bb4c <__ratio>:
    bb4c:	defff904 	addi	sp,sp,-28
    bb50:	dc400315 	stw	r17,12(sp)
    bb54:	2823883a 	mov	r17,r5
    bb58:	d9400104 	addi	r5,sp,4
    bb5c:	dfc00615 	stw	ra,24(sp)
    bb60:	dcc00515 	stw	r19,20(sp)
    bb64:	dc800415 	stw	r18,16(sp)
    bb68:	2027883a 	mov	r19,r4
    bb6c:	dc000215 	stw	r16,8(sp)
    bb70:	000b8f40 	call	b8f4 <__b2d>
    bb74:	d80b883a 	mov	r5,sp
    bb78:	8809883a 	mov	r4,r17
    bb7c:	1025883a 	mov	r18,r2
    bb80:	1821883a 	mov	r16,r3
    bb84:	000b8f40 	call	b8f4 <__b2d>
    bb88:	8a000417 	ldw	r8,16(r17)
    bb8c:	99000417 	ldw	r4,16(r19)
    bb90:	d9400117 	ldw	r5,4(sp)
    bb94:	2209c83a 	sub	r4,r4,r8
    bb98:	2010917a 	slli	r8,r4,5
    bb9c:	d9000017 	ldw	r4,0(sp)
    bba0:	2909c83a 	sub	r4,r5,r4
    bba4:	4109883a 	add	r4,r8,r4
    bba8:	01000e0e 	bge	zero,r4,bbe4 <__ratio+0x98>
    bbac:	2008953a 	slli	r4,r4,20
    bbb0:	2421883a 	add	r16,r4,r16
    bbb4:	100d883a 	mov	r6,r2
    bbb8:	180f883a 	mov	r7,r3
    bbbc:	9009883a 	mov	r4,r18
    bbc0:	800b883a 	mov	r5,r16
    bbc4:	0002e4c0 	call	2e4c <__divdf3>
    bbc8:	dfc00617 	ldw	ra,24(sp)
    bbcc:	dcc00517 	ldw	r19,20(sp)
    bbd0:	dc800417 	ldw	r18,16(sp)
    bbd4:	dc400317 	ldw	r17,12(sp)
    bbd8:	dc000217 	ldw	r16,8(sp)
    bbdc:	dec00704 	addi	sp,sp,28
    bbe0:	f800283a 	ret
    bbe4:	2008953a 	slli	r4,r4,20
    bbe8:	1907c83a 	sub	r3,r3,r4
    bbec:	003ff106 	br	bbb4 <__alt_data_end+0xff80bbb4>

0000bbf0 <_mprec_log10>:
    bbf0:	defffe04 	addi	sp,sp,-8
    bbf4:	dc000015 	stw	r16,0(sp)
    bbf8:	dfc00115 	stw	ra,4(sp)
    bbfc:	008005c4 	movi	r2,23
    bc00:	2021883a 	mov	r16,r4
    bc04:	11000d0e 	bge	r2,r4,bc3c <_mprec_log10+0x4c>
    bc08:	0005883a 	mov	r2,zero
    bc0c:	00cffc34 	movhi	r3,16368
    bc10:	843fffc4 	addi	r16,r16,-1
    bc14:	000d883a 	mov	r6,zero
    bc18:	01d00934 	movhi	r7,16420
    bc1c:	1009883a 	mov	r4,r2
    bc20:	180b883a 	mov	r5,r3
    bc24:	00039040 	call	3904 <__muldf3>
    bc28:	803ff91e 	bne	r16,zero,bc10 <__alt_data_end+0xff80bc10>
    bc2c:	dfc00117 	ldw	ra,4(sp)
    bc30:	dc000017 	ldw	r16,0(sp)
    bc34:	dec00204 	addi	sp,sp,8
    bc38:	f800283a 	ret
    bc3c:	202090fa 	slli	r16,r4,3
    bc40:	00800074 	movhi	r2,1
    bc44:	10849b04 	addi	r2,r2,4716
    bc48:	1421883a 	add	r16,r2,r16
    bc4c:	80800017 	ldw	r2,0(r16)
    bc50:	80c00117 	ldw	r3,4(r16)
    bc54:	dfc00117 	ldw	ra,4(sp)
    bc58:	dc000017 	ldw	r16,0(sp)
    bc5c:	dec00204 	addi	sp,sp,8
    bc60:	f800283a 	ret

0000bc64 <__copybits>:
    bc64:	297fffc4 	addi	r5,r5,-1
    bc68:	280fd17a 	srai	r7,r5,5
    bc6c:	30c00417 	ldw	r3,16(r6)
    bc70:	30800504 	addi	r2,r6,20
    bc74:	39c00044 	addi	r7,r7,1
    bc78:	18c7883a 	add	r3,r3,r3
    bc7c:	39cf883a 	add	r7,r7,r7
    bc80:	18c7883a 	add	r3,r3,r3
    bc84:	39cf883a 	add	r7,r7,r7
    bc88:	10c7883a 	add	r3,r2,r3
    bc8c:	21cf883a 	add	r7,r4,r7
    bc90:	10c00d2e 	bgeu	r2,r3,bcc8 <__copybits+0x64>
    bc94:	200b883a 	mov	r5,r4
    bc98:	12000017 	ldw	r8,0(r2)
    bc9c:	29400104 	addi	r5,r5,4
    bca0:	10800104 	addi	r2,r2,4
    bca4:	2a3fff15 	stw	r8,-4(r5)
    bca8:	10fffb36 	bltu	r2,r3,bc98 <__alt_data_end+0xff80bc98>
    bcac:	1985c83a 	sub	r2,r3,r6
    bcb0:	10bffac4 	addi	r2,r2,-21
    bcb4:	1004d0ba 	srli	r2,r2,2
    bcb8:	10800044 	addi	r2,r2,1
    bcbc:	1085883a 	add	r2,r2,r2
    bcc0:	1085883a 	add	r2,r2,r2
    bcc4:	2089883a 	add	r4,r4,r2
    bcc8:	21c0032e 	bgeu	r4,r7,bcd8 <__copybits+0x74>
    bccc:	20000015 	stw	zero,0(r4)
    bcd0:	21000104 	addi	r4,r4,4
    bcd4:	21fffd36 	bltu	r4,r7,bccc <__alt_data_end+0xff80bccc>
    bcd8:	f800283a 	ret

0000bcdc <__any_on>:
    bcdc:	20c00417 	ldw	r3,16(r4)
    bce0:	2805d17a 	srai	r2,r5,5
    bce4:	21000504 	addi	r4,r4,20
    bce8:	18800d0e 	bge	r3,r2,bd20 <__any_on+0x44>
    bcec:	18c7883a 	add	r3,r3,r3
    bcf0:	18c7883a 	add	r3,r3,r3
    bcf4:	20c7883a 	add	r3,r4,r3
    bcf8:	20c0192e 	bgeu	r4,r3,bd60 <__any_on+0x84>
    bcfc:	18bfff17 	ldw	r2,-4(r3)
    bd00:	18ffff04 	addi	r3,r3,-4
    bd04:	1000041e 	bne	r2,zero,bd18 <__any_on+0x3c>
    bd08:	20c0142e 	bgeu	r4,r3,bd5c <__any_on+0x80>
    bd0c:	18ffff04 	addi	r3,r3,-4
    bd10:	19400017 	ldw	r5,0(r3)
    bd14:	283ffc26 	beq	r5,zero,bd08 <__alt_data_end+0xff80bd08>
    bd18:	00800044 	movi	r2,1
    bd1c:	f800283a 	ret
    bd20:	10c00a0e 	bge	r2,r3,bd4c <__any_on+0x70>
    bd24:	1085883a 	add	r2,r2,r2
    bd28:	1085883a 	add	r2,r2,r2
    bd2c:	294007cc 	andi	r5,r5,31
    bd30:	2087883a 	add	r3,r4,r2
    bd34:	283ff026 	beq	r5,zero,bcf8 <__alt_data_end+0xff80bcf8>
    bd38:	19800017 	ldw	r6,0(r3)
    bd3c:	3144d83a 	srl	r2,r6,r5
    bd40:	114a983a 	sll	r5,r2,r5
    bd44:	317ff41e 	bne	r6,r5,bd18 <__alt_data_end+0xff80bd18>
    bd48:	003feb06 	br	bcf8 <__alt_data_end+0xff80bcf8>
    bd4c:	1085883a 	add	r2,r2,r2
    bd50:	1085883a 	add	r2,r2,r2
    bd54:	2087883a 	add	r3,r4,r2
    bd58:	003fe706 	br	bcf8 <__alt_data_end+0xff80bcf8>
    bd5c:	f800283a 	ret
    bd60:	0005883a 	mov	r2,zero
    bd64:	f800283a 	ret

0000bd68 <_realloc_r>:
    bd68:	defff604 	addi	sp,sp,-40
    bd6c:	dc800215 	stw	r18,8(sp)
    bd70:	dfc00915 	stw	ra,36(sp)
    bd74:	df000815 	stw	fp,32(sp)
    bd78:	ddc00715 	stw	r23,28(sp)
    bd7c:	dd800615 	stw	r22,24(sp)
    bd80:	dd400515 	stw	r21,20(sp)
    bd84:	dd000415 	stw	r20,16(sp)
    bd88:	dcc00315 	stw	r19,12(sp)
    bd8c:	dc400115 	stw	r17,4(sp)
    bd90:	dc000015 	stw	r16,0(sp)
    bd94:	3025883a 	mov	r18,r6
    bd98:	2800b726 	beq	r5,zero,c078 <_realloc_r+0x310>
    bd9c:	282b883a 	mov	r21,r5
    bda0:	2029883a 	mov	r20,r4
    bda4:	000f2cc0 	call	f2cc <__malloc_lock>
    bda8:	a8bfff17 	ldw	r2,-4(r21)
    bdac:	043fff04 	movi	r16,-4
    bdb0:	90c002c4 	addi	r3,r18,11
    bdb4:	01000584 	movi	r4,22
    bdb8:	acfffe04 	addi	r19,r21,-8
    bdbc:	1420703a 	and	r16,r2,r16
    bdc0:	20c0332e 	bgeu	r4,r3,be90 <_realloc_r+0x128>
    bdc4:	047ffe04 	movi	r17,-8
    bdc8:	1c62703a 	and	r17,r3,r17
    bdcc:	8807883a 	mov	r3,r17
    bdd0:	88005816 	blt	r17,zero,bf34 <_realloc_r+0x1cc>
    bdd4:	8c805736 	bltu	r17,r18,bf34 <_realloc_r+0x1cc>
    bdd8:	80c0300e 	bge	r16,r3,be9c <_realloc_r+0x134>
    bddc:	07000074 	movhi	fp,1
    bde0:	e7060404 	addi	fp,fp,6160
    bde4:	e1c00217 	ldw	r7,8(fp)
    bde8:	9c09883a 	add	r4,r19,r16
    bdec:	22000117 	ldw	r8,4(r4)
    bdf0:	21c06326 	beq	r4,r7,bf80 <_realloc_r+0x218>
    bdf4:	017fff84 	movi	r5,-2
    bdf8:	414a703a 	and	r5,r8,r5
    bdfc:	214b883a 	add	r5,r4,r5
    be00:	29800117 	ldw	r6,4(r5)
    be04:	3180004c 	andi	r6,r6,1
    be08:	30003f26 	beq	r6,zero,bf08 <_realloc_r+0x1a0>
    be0c:	1080004c 	andi	r2,r2,1
    be10:	10008326 	beq	r2,zero,c020 <_realloc_r+0x2b8>
    be14:	900b883a 	mov	r5,r18
    be18:	a009883a 	mov	r4,r20
    be1c:	000a1f80 	call	a1f8 <_malloc_r>
    be20:	1025883a 	mov	r18,r2
    be24:	10011e26 	beq	r2,zero,c2a0 <_realloc_r+0x538>
    be28:	a93fff17 	ldw	r4,-4(r21)
    be2c:	10fffe04 	addi	r3,r2,-8
    be30:	00bfff84 	movi	r2,-2
    be34:	2084703a 	and	r2,r4,r2
    be38:	9885883a 	add	r2,r19,r2
    be3c:	1880ee26 	beq	r3,r2,c1f8 <_realloc_r+0x490>
    be40:	81bfff04 	addi	r6,r16,-4
    be44:	00800904 	movi	r2,36
    be48:	1180b836 	bltu	r2,r6,c12c <_realloc_r+0x3c4>
    be4c:	00c004c4 	movi	r3,19
    be50:	19809636 	bltu	r3,r6,c0ac <_realloc_r+0x344>
    be54:	9005883a 	mov	r2,r18
    be58:	a807883a 	mov	r3,r21
    be5c:	19000017 	ldw	r4,0(r3)
    be60:	11000015 	stw	r4,0(r2)
    be64:	19000117 	ldw	r4,4(r3)
    be68:	11000115 	stw	r4,4(r2)
    be6c:	18c00217 	ldw	r3,8(r3)
    be70:	10c00215 	stw	r3,8(r2)
    be74:	a80b883a 	mov	r5,r21
    be78:	a009883a 	mov	r4,r20
    be7c:	000960c0 	call	960c <_free_r>
    be80:	a009883a 	mov	r4,r20
    be84:	000f2d00 	call	f2d0 <__malloc_unlock>
    be88:	9005883a 	mov	r2,r18
    be8c:	00001206 	br	bed8 <_realloc_r+0x170>
    be90:	00c00404 	movi	r3,16
    be94:	1823883a 	mov	r17,r3
    be98:	003fce06 	br	bdd4 <__alt_data_end+0xff80bdd4>
    be9c:	a825883a 	mov	r18,r21
    bea0:	8445c83a 	sub	r2,r16,r17
    bea4:	00c003c4 	movi	r3,15
    bea8:	18802636 	bltu	r3,r2,bf44 <_realloc_r+0x1dc>
    beac:	99800117 	ldw	r6,4(r19)
    beb0:	9c07883a 	add	r3,r19,r16
    beb4:	3180004c 	andi	r6,r6,1
    beb8:	3420b03a 	or	r16,r6,r16
    bebc:	9c000115 	stw	r16,4(r19)
    bec0:	18800117 	ldw	r2,4(r3)
    bec4:	10800054 	ori	r2,r2,1
    bec8:	18800115 	stw	r2,4(r3)
    becc:	a009883a 	mov	r4,r20
    bed0:	000f2d00 	call	f2d0 <__malloc_unlock>
    bed4:	9005883a 	mov	r2,r18
    bed8:	dfc00917 	ldw	ra,36(sp)
    bedc:	df000817 	ldw	fp,32(sp)
    bee0:	ddc00717 	ldw	r23,28(sp)
    bee4:	dd800617 	ldw	r22,24(sp)
    bee8:	dd400517 	ldw	r21,20(sp)
    beec:	dd000417 	ldw	r20,16(sp)
    bef0:	dcc00317 	ldw	r19,12(sp)
    bef4:	dc800217 	ldw	r18,8(sp)
    bef8:	dc400117 	ldw	r17,4(sp)
    befc:	dc000017 	ldw	r16,0(sp)
    bf00:	dec00a04 	addi	sp,sp,40
    bf04:	f800283a 	ret
    bf08:	017fff04 	movi	r5,-4
    bf0c:	414a703a 	and	r5,r8,r5
    bf10:	814d883a 	add	r6,r16,r5
    bf14:	30c01f16 	blt	r6,r3,bf94 <_realloc_r+0x22c>
    bf18:	20800317 	ldw	r2,12(r4)
    bf1c:	20c00217 	ldw	r3,8(r4)
    bf20:	a825883a 	mov	r18,r21
    bf24:	3021883a 	mov	r16,r6
    bf28:	18800315 	stw	r2,12(r3)
    bf2c:	10c00215 	stw	r3,8(r2)
    bf30:	003fdb06 	br	bea0 <__alt_data_end+0xff80bea0>
    bf34:	00800304 	movi	r2,12
    bf38:	a0800015 	stw	r2,0(r20)
    bf3c:	0005883a 	mov	r2,zero
    bf40:	003fe506 	br	bed8 <__alt_data_end+0xff80bed8>
    bf44:	98c00117 	ldw	r3,4(r19)
    bf48:	9c4b883a 	add	r5,r19,r17
    bf4c:	11000054 	ori	r4,r2,1
    bf50:	18c0004c 	andi	r3,r3,1
    bf54:	1c62b03a 	or	r17,r3,r17
    bf58:	9c400115 	stw	r17,4(r19)
    bf5c:	29000115 	stw	r4,4(r5)
    bf60:	2885883a 	add	r2,r5,r2
    bf64:	10c00117 	ldw	r3,4(r2)
    bf68:	29400204 	addi	r5,r5,8
    bf6c:	a009883a 	mov	r4,r20
    bf70:	18c00054 	ori	r3,r3,1
    bf74:	10c00115 	stw	r3,4(r2)
    bf78:	000960c0 	call	960c <_free_r>
    bf7c:	003fd306 	br	becc <__alt_data_end+0xff80becc>
    bf80:	017fff04 	movi	r5,-4
    bf84:	414a703a 	and	r5,r8,r5
    bf88:	89800404 	addi	r6,r17,16
    bf8c:	8151883a 	add	r8,r16,r5
    bf90:	4180590e 	bge	r8,r6,c0f8 <_realloc_r+0x390>
    bf94:	1080004c 	andi	r2,r2,1
    bf98:	103f9e1e 	bne	r2,zero,be14 <__alt_data_end+0xff80be14>
    bf9c:	adbffe17 	ldw	r22,-8(r21)
    bfa0:	00bfff04 	movi	r2,-4
    bfa4:	9dadc83a 	sub	r22,r19,r22
    bfa8:	b1800117 	ldw	r6,4(r22)
    bfac:	3084703a 	and	r2,r6,r2
    bfb0:	20002026 	beq	r4,zero,c034 <_realloc_r+0x2cc>
    bfb4:	80af883a 	add	r23,r16,r2
    bfb8:	b96f883a 	add	r23,r23,r5
    bfbc:	21c05f26 	beq	r4,r7,c13c <_realloc_r+0x3d4>
    bfc0:	b8c01c16 	blt	r23,r3,c034 <_realloc_r+0x2cc>
    bfc4:	20800317 	ldw	r2,12(r4)
    bfc8:	20c00217 	ldw	r3,8(r4)
    bfcc:	81bfff04 	addi	r6,r16,-4
    bfd0:	01000904 	movi	r4,36
    bfd4:	18800315 	stw	r2,12(r3)
    bfd8:	10c00215 	stw	r3,8(r2)
    bfdc:	b0c00217 	ldw	r3,8(r22)
    bfe0:	b0800317 	ldw	r2,12(r22)
    bfe4:	b4800204 	addi	r18,r22,8
    bfe8:	18800315 	stw	r2,12(r3)
    bfec:	10c00215 	stw	r3,8(r2)
    bff0:	21801b36 	bltu	r4,r6,c060 <_realloc_r+0x2f8>
    bff4:	008004c4 	movi	r2,19
    bff8:	1180352e 	bgeu	r2,r6,c0d0 <_realloc_r+0x368>
    bffc:	a8800017 	ldw	r2,0(r21)
    c000:	b0800215 	stw	r2,8(r22)
    c004:	a8800117 	ldw	r2,4(r21)
    c008:	b0800315 	stw	r2,12(r22)
    c00c:	008006c4 	movi	r2,27
    c010:	11807f36 	bltu	r2,r6,c210 <_realloc_r+0x4a8>
    c014:	b0800404 	addi	r2,r22,16
    c018:	ad400204 	addi	r21,r21,8
    c01c:	00002d06 	br	c0d4 <_realloc_r+0x36c>
    c020:	adbffe17 	ldw	r22,-8(r21)
    c024:	00bfff04 	movi	r2,-4
    c028:	9dadc83a 	sub	r22,r19,r22
    c02c:	b1000117 	ldw	r4,4(r22)
    c030:	2084703a 	and	r2,r4,r2
    c034:	b03f7726 	beq	r22,zero,be14 <__alt_data_end+0xff80be14>
    c038:	80af883a 	add	r23,r16,r2
    c03c:	b8ff7516 	blt	r23,r3,be14 <__alt_data_end+0xff80be14>
    c040:	b0800317 	ldw	r2,12(r22)
    c044:	b0c00217 	ldw	r3,8(r22)
    c048:	81bfff04 	addi	r6,r16,-4
    c04c:	01000904 	movi	r4,36
    c050:	18800315 	stw	r2,12(r3)
    c054:	10c00215 	stw	r3,8(r2)
    c058:	b4800204 	addi	r18,r22,8
    c05c:	21bfe52e 	bgeu	r4,r6,bff4 <__alt_data_end+0xff80bff4>
    c060:	a80b883a 	mov	r5,r21
    c064:	9009883a 	mov	r4,r18
    c068:	000aae80 	call	aae8 <memmove>
    c06c:	b821883a 	mov	r16,r23
    c070:	b027883a 	mov	r19,r22
    c074:	003f8a06 	br	bea0 <__alt_data_end+0xff80bea0>
    c078:	300b883a 	mov	r5,r6
    c07c:	dfc00917 	ldw	ra,36(sp)
    c080:	df000817 	ldw	fp,32(sp)
    c084:	ddc00717 	ldw	r23,28(sp)
    c088:	dd800617 	ldw	r22,24(sp)
    c08c:	dd400517 	ldw	r21,20(sp)
    c090:	dd000417 	ldw	r20,16(sp)
    c094:	dcc00317 	ldw	r19,12(sp)
    c098:	dc800217 	ldw	r18,8(sp)
    c09c:	dc400117 	ldw	r17,4(sp)
    c0a0:	dc000017 	ldw	r16,0(sp)
    c0a4:	dec00a04 	addi	sp,sp,40
    c0a8:	000a1f81 	jmpi	a1f8 <_malloc_r>
    c0ac:	a8c00017 	ldw	r3,0(r21)
    c0b0:	90c00015 	stw	r3,0(r18)
    c0b4:	a8c00117 	ldw	r3,4(r21)
    c0b8:	90c00115 	stw	r3,4(r18)
    c0bc:	00c006c4 	movi	r3,27
    c0c0:	19804536 	bltu	r3,r6,c1d8 <_realloc_r+0x470>
    c0c4:	90800204 	addi	r2,r18,8
    c0c8:	a8c00204 	addi	r3,r21,8
    c0cc:	003f6306 	br	be5c <__alt_data_end+0xff80be5c>
    c0d0:	9005883a 	mov	r2,r18
    c0d4:	a8c00017 	ldw	r3,0(r21)
    c0d8:	b821883a 	mov	r16,r23
    c0dc:	b027883a 	mov	r19,r22
    c0e0:	10c00015 	stw	r3,0(r2)
    c0e4:	a8c00117 	ldw	r3,4(r21)
    c0e8:	10c00115 	stw	r3,4(r2)
    c0ec:	a8c00217 	ldw	r3,8(r21)
    c0f0:	10c00215 	stw	r3,8(r2)
    c0f4:	003f6a06 	br	bea0 <__alt_data_end+0xff80bea0>
    c0f8:	9c67883a 	add	r19,r19,r17
    c0fc:	4445c83a 	sub	r2,r8,r17
    c100:	e4c00215 	stw	r19,8(fp)
    c104:	10800054 	ori	r2,r2,1
    c108:	98800115 	stw	r2,4(r19)
    c10c:	a8bfff17 	ldw	r2,-4(r21)
    c110:	a009883a 	mov	r4,r20
    c114:	1080004c 	andi	r2,r2,1
    c118:	1462b03a 	or	r17,r2,r17
    c11c:	ac7fff15 	stw	r17,-4(r21)
    c120:	000f2d00 	call	f2d0 <__malloc_unlock>
    c124:	a805883a 	mov	r2,r21
    c128:	003f6b06 	br	bed8 <__alt_data_end+0xff80bed8>
    c12c:	a80b883a 	mov	r5,r21
    c130:	9009883a 	mov	r4,r18
    c134:	000aae80 	call	aae8 <memmove>
    c138:	003f4e06 	br	be74 <__alt_data_end+0xff80be74>
    c13c:	89000404 	addi	r4,r17,16
    c140:	b93fbc16 	blt	r23,r4,c034 <__alt_data_end+0xff80c034>
    c144:	b0800317 	ldw	r2,12(r22)
    c148:	b0c00217 	ldw	r3,8(r22)
    c14c:	81bfff04 	addi	r6,r16,-4
    c150:	01000904 	movi	r4,36
    c154:	18800315 	stw	r2,12(r3)
    c158:	10c00215 	stw	r3,8(r2)
    c15c:	b4800204 	addi	r18,r22,8
    c160:	21804336 	bltu	r4,r6,c270 <_realloc_r+0x508>
    c164:	008004c4 	movi	r2,19
    c168:	11803f2e 	bgeu	r2,r6,c268 <_realloc_r+0x500>
    c16c:	a8800017 	ldw	r2,0(r21)
    c170:	b0800215 	stw	r2,8(r22)
    c174:	a8800117 	ldw	r2,4(r21)
    c178:	b0800315 	stw	r2,12(r22)
    c17c:	008006c4 	movi	r2,27
    c180:	11803f36 	bltu	r2,r6,c280 <_realloc_r+0x518>
    c184:	b0800404 	addi	r2,r22,16
    c188:	ad400204 	addi	r21,r21,8
    c18c:	a8c00017 	ldw	r3,0(r21)
    c190:	10c00015 	stw	r3,0(r2)
    c194:	a8c00117 	ldw	r3,4(r21)
    c198:	10c00115 	stw	r3,4(r2)
    c19c:	a8c00217 	ldw	r3,8(r21)
    c1a0:	10c00215 	stw	r3,8(r2)
    c1a4:	b447883a 	add	r3,r22,r17
    c1a8:	bc45c83a 	sub	r2,r23,r17
    c1ac:	e0c00215 	stw	r3,8(fp)
    c1b0:	10800054 	ori	r2,r2,1
    c1b4:	18800115 	stw	r2,4(r3)
    c1b8:	b0800117 	ldw	r2,4(r22)
    c1bc:	a009883a 	mov	r4,r20
    c1c0:	1080004c 	andi	r2,r2,1
    c1c4:	1462b03a 	or	r17,r2,r17
    c1c8:	b4400115 	stw	r17,4(r22)
    c1cc:	000f2d00 	call	f2d0 <__malloc_unlock>
    c1d0:	9005883a 	mov	r2,r18
    c1d4:	003f4006 	br	bed8 <__alt_data_end+0xff80bed8>
    c1d8:	a8c00217 	ldw	r3,8(r21)
    c1dc:	90c00215 	stw	r3,8(r18)
    c1e0:	a8c00317 	ldw	r3,12(r21)
    c1e4:	90c00315 	stw	r3,12(r18)
    c1e8:	30801126 	beq	r6,r2,c230 <_realloc_r+0x4c8>
    c1ec:	90800404 	addi	r2,r18,16
    c1f0:	a8c00404 	addi	r3,r21,16
    c1f4:	003f1906 	br	be5c <__alt_data_end+0xff80be5c>
    c1f8:	90ffff17 	ldw	r3,-4(r18)
    c1fc:	00bfff04 	movi	r2,-4
    c200:	a825883a 	mov	r18,r21
    c204:	1884703a 	and	r2,r3,r2
    c208:	80a1883a 	add	r16,r16,r2
    c20c:	003f2406 	br	bea0 <__alt_data_end+0xff80bea0>
    c210:	a8800217 	ldw	r2,8(r21)
    c214:	b0800415 	stw	r2,16(r22)
    c218:	a8800317 	ldw	r2,12(r21)
    c21c:	b0800515 	stw	r2,20(r22)
    c220:	31000a26 	beq	r6,r4,c24c <_realloc_r+0x4e4>
    c224:	b0800604 	addi	r2,r22,24
    c228:	ad400404 	addi	r21,r21,16
    c22c:	003fa906 	br	c0d4 <__alt_data_end+0xff80c0d4>
    c230:	a9000417 	ldw	r4,16(r21)
    c234:	90800604 	addi	r2,r18,24
    c238:	a8c00604 	addi	r3,r21,24
    c23c:	91000415 	stw	r4,16(r18)
    c240:	a9000517 	ldw	r4,20(r21)
    c244:	91000515 	stw	r4,20(r18)
    c248:	003f0406 	br	be5c <__alt_data_end+0xff80be5c>
    c24c:	a8c00417 	ldw	r3,16(r21)
    c250:	ad400604 	addi	r21,r21,24
    c254:	b0800804 	addi	r2,r22,32
    c258:	b0c00615 	stw	r3,24(r22)
    c25c:	a8ffff17 	ldw	r3,-4(r21)
    c260:	b0c00715 	stw	r3,28(r22)
    c264:	003f9b06 	br	c0d4 <__alt_data_end+0xff80c0d4>
    c268:	9005883a 	mov	r2,r18
    c26c:	003fc706 	br	c18c <__alt_data_end+0xff80c18c>
    c270:	a80b883a 	mov	r5,r21
    c274:	9009883a 	mov	r4,r18
    c278:	000aae80 	call	aae8 <memmove>
    c27c:	003fc906 	br	c1a4 <__alt_data_end+0xff80c1a4>
    c280:	a8800217 	ldw	r2,8(r21)
    c284:	b0800415 	stw	r2,16(r22)
    c288:	a8800317 	ldw	r2,12(r21)
    c28c:	b0800515 	stw	r2,20(r22)
    c290:	31000726 	beq	r6,r4,c2b0 <_realloc_r+0x548>
    c294:	b0800604 	addi	r2,r22,24
    c298:	ad400404 	addi	r21,r21,16
    c29c:	003fbb06 	br	c18c <__alt_data_end+0xff80c18c>
    c2a0:	a009883a 	mov	r4,r20
    c2a4:	000f2d00 	call	f2d0 <__malloc_unlock>
    c2a8:	0005883a 	mov	r2,zero
    c2ac:	003f0a06 	br	bed8 <__alt_data_end+0xff80bed8>
    c2b0:	a8c00417 	ldw	r3,16(r21)
    c2b4:	ad400604 	addi	r21,r21,24
    c2b8:	b0800804 	addi	r2,r22,32
    c2bc:	b0c00615 	stw	r3,24(r22)
    c2c0:	a8ffff17 	ldw	r3,-4(r21)
    c2c4:	b0c00715 	stw	r3,28(r22)
    c2c8:	003fb006 	br	c18c <__alt_data_end+0xff80c18c>

0000c2cc <_sbrk_r>:
    c2cc:	defffd04 	addi	sp,sp,-12
    c2d0:	dc000015 	stw	r16,0(sp)
    c2d4:	04000074 	movhi	r16,1
    c2d8:	dc400115 	stw	r17,4(sp)
    c2dc:	8411e404 	addi	r16,r16,18320
    c2e0:	2023883a 	mov	r17,r4
    c2e4:	2809883a 	mov	r4,r5
    c2e8:	dfc00215 	stw	ra,8(sp)
    c2ec:	80000015 	stw	zero,0(r16)
    c2f0:	000f3600 	call	f360 <sbrk>
    c2f4:	00ffffc4 	movi	r3,-1
    c2f8:	10c00526 	beq	r2,r3,c310 <_sbrk_r+0x44>
    c2fc:	dfc00217 	ldw	ra,8(sp)
    c300:	dc400117 	ldw	r17,4(sp)
    c304:	dc000017 	ldw	r16,0(sp)
    c308:	dec00304 	addi	sp,sp,12
    c30c:	f800283a 	ret
    c310:	80c00017 	ldw	r3,0(r16)
    c314:	183ff926 	beq	r3,zero,c2fc <__alt_data_end+0xff80c2fc>
    c318:	88c00015 	stw	r3,0(r17)
    c31c:	003ff706 	br	c2fc <__alt_data_end+0xff80c2fc>

0000c320 <__sread>:
    c320:	defffe04 	addi	sp,sp,-8
    c324:	dc000015 	stw	r16,0(sp)
    c328:	2821883a 	mov	r16,r5
    c32c:	2940038f 	ldh	r5,14(r5)
    c330:	dfc00115 	stw	ra,4(sp)
    c334:	000e1140 	call	e114 <_read_r>
    c338:	10000716 	blt	r2,zero,c358 <__sread+0x38>
    c33c:	80c01417 	ldw	r3,80(r16)
    c340:	1887883a 	add	r3,r3,r2
    c344:	80c01415 	stw	r3,80(r16)
    c348:	dfc00117 	ldw	ra,4(sp)
    c34c:	dc000017 	ldw	r16,0(sp)
    c350:	dec00204 	addi	sp,sp,8
    c354:	f800283a 	ret
    c358:	80c0030b 	ldhu	r3,12(r16)
    c35c:	18fbffcc 	andi	r3,r3,61439
    c360:	80c0030d 	sth	r3,12(r16)
    c364:	dfc00117 	ldw	ra,4(sp)
    c368:	dc000017 	ldw	r16,0(sp)
    c36c:	dec00204 	addi	sp,sp,8
    c370:	f800283a 	ret

0000c374 <__seofread>:
    c374:	0005883a 	mov	r2,zero
    c378:	f800283a 	ret

0000c37c <__swrite>:
    c37c:	2880030b 	ldhu	r2,12(r5)
    c380:	defffb04 	addi	sp,sp,-20
    c384:	dcc00315 	stw	r19,12(sp)
    c388:	dc800215 	stw	r18,8(sp)
    c38c:	dc400115 	stw	r17,4(sp)
    c390:	dc000015 	stw	r16,0(sp)
    c394:	dfc00415 	stw	ra,16(sp)
    c398:	10c0400c 	andi	r3,r2,256
    c39c:	2821883a 	mov	r16,r5
    c3a0:	2023883a 	mov	r17,r4
    c3a4:	3025883a 	mov	r18,r6
    c3a8:	3827883a 	mov	r19,r7
    c3ac:	18000526 	beq	r3,zero,c3c4 <__swrite+0x48>
    c3b0:	2940038f 	ldh	r5,14(r5)
    c3b4:	01c00084 	movi	r7,2
    c3b8:	000d883a 	mov	r6,zero
    c3bc:	000e0b40 	call	e0b4 <_lseek_r>
    c3c0:	8080030b 	ldhu	r2,12(r16)
    c3c4:	8140038f 	ldh	r5,14(r16)
    c3c8:	10bbffcc 	andi	r2,r2,61439
    c3cc:	980f883a 	mov	r7,r19
    c3d0:	900d883a 	mov	r6,r18
    c3d4:	8809883a 	mov	r4,r17
    c3d8:	8080030d 	sth	r2,12(r16)
    c3dc:	dfc00417 	ldw	ra,16(sp)
    c3e0:	dcc00317 	ldw	r19,12(sp)
    c3e4:	dc800217 	ldw	r18,8(sp)
    c3e8:	dc400117 	ldw	r17,4(sp)
    c3ec:	dc000017 	ldw	r16,0(sp)
    c3f0:	dec00504 	addi	sp,sp,20
    c3f4:	000db801 	jmpi	db80 <_write_r>

0000c3f8 <__sseek>:
    c3f8:	defffe04 	addi	sp,sp,-8
    c3fc:	dc000015 	stw	r16,0(sp)
    c400:	2821883a 	mov	r16,r5
    c404:	2940038f 	ldh	r5,14(r5)
    c408:	dfc00115 	stw	ra,4(sp)
    c40c:	000e0b40 	call	e0b4 <_lseek_r>
    c410:	00ffffc4 	movi	r3,-1
    c414:	10c00826 	beq	r2,r3,c438 <__sseek+0x40>
    c418:	80c0030b 	ldhu	r3,12(r16)
    c41c:	80801415 	stw	r2,80(r16)
    c420:	18c40014 	ori	r3,r3,4096
    c424:	80c0030d 	sth	r3,12(r16)
    c428:	dfc00117 	ldw	ra,4(sp)
    c42c:	dc000017 	ldw	r16,0(sp)
    c430:	dec00204 	addi	sp,sp,8
    c434:	f800283a 	ret
    c438:	80c0030b 	ldhu	r3,12(r16)
    c43c:	18fbffcc 	andi	r3,r3,61439
    c440:	80c0030d 	sth	r3,12(r16)
    c444:	dfc00117 	ldw	ra,4(sp)
    c448:	dc000017 	ldw	r16,0(sp)
    c44c:	dec00204 	addi	sp,sp,8
    c450:	f800283a 	ret

0000c454 <__sclose>:
    c454:	2940038f 	ldh	r5,14(r5)
    c458:	000dbe01 	jmpi	dbe0 <_close_r>

0000c45c <strcmp>:
    c45c:	2144b03a 	or	r2,r4,r5
    c460:	108000cc 	andi	r2,r2,3
    c464:	1000171e 	bne	r2,zero,c4c4 <strcmp+0x68>
    c468:	20800017 	ldw	r2,0(r4)
    c46c:	28c00017 	ldw	r3,0(r5)
    c470:	10c0141e 	bne	r2,r3,c4c4 <strcmp+0x68>
    c474:	027fbff4 	movhi	r9,65279
    c478:	4a7fbfc4 	addi	r9,r9,-257
    c47c:	0086303a 	nor	r3,zero,r2
    c480:	02202074 	movhi	r8,32897
    c484:	1245883a 	add	r2,r2,r9
    c488:	42202004 	addi	r8,r8,-32640
    c48c:	10c4703a 	and	r2,r2,r3
    c490:	1204703a 	and	r2,r2,r8
    c494:	10000226 	beq	r2,zero,c4a0 <strcmp+0x44>
    c498:	00002306 	br	c528 <strcmp+0xcc>
    c49c:	1000221e 	bne	r2,zero,c528 <strcmp+0xcc>
    c4a0:	21000104 	addi	r4,r4,4
    c4a4:	20c00017 	ldw	r3,0(r4)
    c4a8:	29400104 	addi	r5,r5,4
    c4ac:	29800017 	ldw	r6,0(r5)
    c4b0:	1a4f883a 	add	r7,r3,r9
    c4b4:	00c4303a 	nor	r2,zero,r3
    c4b8:	3884703a 	and	r2,r7,r2
    c4bc:	1204703a 	and	r2,r2,r8
    c4c0:	19bff626 	beq	r3,r6,c49c <__alt_data_end+0xff80c49c>
    c4c4:	20800003 	ldbu	r2,0(r4)
    c4c8:	10c03fcc 	andi	r3,r2,255
    c4cc:	18c0201c 	xori	r3,r3,128
    c4d0:	18ffe004 	addi	r3,r3,-128
    c4d4:	18000c26 	beq	r3,zero,c508 <strcmp+0xac>
    c4d8:	29800007 	ldb	r6,0(r5)
    c4dc:	19800326 	beq	r3,r6,c4ec <strcmp+0x90>
    c4e0:	00001306 	br	c530 <strcmp+0xd4>
    c4e4:	29800007 	ldb	r6,0(r5)
    c4e8:	11800b1e 	bne	r2,r6,c518 <strcmp+0xbc>
    c4ec:	21000044 	addi	r4,r4,1
    c4f0:	20c00003 	ldbu	r3,0(r4)
    c4f4:	29400044 	addi	r5,r5,1
    c4f8:	18803fcc 	andi	r2,r3,255
    c4fc:	1080201c 	xori	r2,r2,128
    c500:	10bfe004 	addi	r2,r2,-128
    c504:	103ff71e 	bne	r2,zero,c4e4 <__alt_data_end+0xff80c4e4>
    c508:	0007883a 	mov	r3,zero
    c50c:	28800003 	ldbu	r2,0(r5)
    c510:	1885c83a 	sub	r2,r3,r2
    c514:	f800283a 	ret
    c518:	28800003 	ldbu	r2,0(r5)
    c51c:	18c03fcc 	andi	r3,r3,255
    c520:	1885c83a 	sub	r2,r3,r2
    c524:	f800283a 	ret
    c528:	0005883a 	mov	r2,zero
    c52c:	f800283a 	ret
    c530:	10c03fcc 	andi	r3,r2,255
    c534:	003ff506 	br	c50c <__alt_data_end+0xff80c50c>

0000c538 <__sprint_r.part.0>:
    c538:	28801917 	ldw	r2,100(r5)
    c53c:	defff604 	addi	sp,sp,-40
    c540:	dd400515 	stw	r21,20(sp)
    c544:	dfc00915 	stw	ra,36(sp)
    c548:	df000815 	stw	fp,32(sp)
    c54c:	ddc00715 	stw	r23,28(sp)
    c550:	dd800615 	stw	r22,24(sp)
    c554:	dd000415 	stw	r20,16(sp)
    c558:	dcc00315 	stw	r19,12(sp)
    c55c:	dc800215 	stw	r18,8(sp)
    c560:	dc400115 	stw	r17,4(sp)
    c564:	dc000015 	stw	r16,0(sp)
    c568:	1088000c 	andi	r2,r2,8192
    c56c:	302b883a 	mov	r21,r6
    c570:	10002e26 	beq	r2,zero,c62c <__sprint_r.part.0+0xf4>
    c574:	30800217 	ldw	r2,8(r6)
    c578:	35800017 	ldw	r22,0(r6)
    c57c:	10002926 	beq	r2,zero,c624 <__sprint_r.part.0+0xec>
    c580:	2827883a 	mov	r19,r5
    c584:	2029883a 	mov	r20,r4
    c588:	b5c00104 	addi	r23,r22,4
    c58c:	04bfffc4 	movi	r18,-1
    c590:	bc400017 	ldw	r17,0(r23)
    c594:	b4000017 	ldw	r16,0(r22)
    c598:	0039883a 	mov	fp,zero
    c59c:	8822d0ba 	srli	r17,r17,2
    c5a0:	8800031e 	bne	r17,zero,c5b0 <__sprint_r.part.0+0x78>
    c5a4:	00001806 	br	c608 <__sprint_r.part.0+0xd0>
    c5a8:	84000104 	addi	r16,r16,4
    c5ac:	8f001526 	beq	r17,fp,c604 <__sprint_r.part.0+0xcc>
    c5b0:	81400017 	ldw	r5,0(r16)
    c5b4:	980d883a 	mov	r6,r19
    c5b8:	a009883a 	mov	r4,r20
    c5bc:	000df600 	call	df60 <_fputwc_r>
    c5c0:	e7000044 	addi	fp,fp,1
    c5c4:	14bff81e 	bne	r2,r18,c5a8 <__alt_data_end+0xff80c5a8>
    c5c8:	9005883a 	mov	r2,r18
    c5cc:	a8000215 	stw	zero,8(r21)
    c5d0:	a8000115 	stw	zero,4(r21)
    c5d4:	dfc00917 	ldw	ra,36(sp)
    c5d8:	df000817 	ldw	fp,32(sp)
    c5dc:	ddc00717 	ldw	r23,28(sp)
    c5e0:	dd800617 	ldw	r22,24(sp)
    c5e4:	dd400517 	ldw	r21,20(sp)
    c5e8:	dd000417 	ldw	r20,16(sp)
    c5ec:	dcc00317 	ldw	r19,12(sp)
    c5f0:	dc800217 	ldw	r18,8(sp)
    c5f4:	dc400117 	ldw	r17,4(sp)
    c5f8:	dc000017 	ldw	r16,0(sp)
    c5fc:	dec00a04 	addi	sp,sp,40
    c600:	f800283a 	ret
    c604:	a8800217 	ldw	r2,8(r21)
    c608:	8c63883a 	add	r17,r17,r17
    c60c:	8c63883a 	add	r17,r17,r17
    c610:	1445c83a 	sub	r2,r2,r17
    c614:	a8800215 	stw	r2,8(r21)
    c618:	b5800204 	addi	r22,r22,8
    c61c:	bdc00204 	addi	r23,r23,8
    c620:	103fdb1e 	bne	r2,zero,c590 <__alt_data_end+0xff80c590>
    c624:	0005883a 	mov	r2,zero
    c628:	003fe806 	br	c5cc <__alt_data_end+0xff80c5cc>
    c62c:	000991c0 	call	991c <__sfvwrite_r>
    c630:	003fe606 	br	c5cc <__alt_data_end+0xff80c5cc>

0000c634 <__sprint_r>:
    c634:	30c00217 	ldw	r3,8(r6)
    c638:	18000126 	beq	r3,zero,c640 <__sprint_r+0xc>
    c63c:	000c5381 	jmpi	c538 <__sprint_r.part.0>
    c640:	30000115 	stw	zero,4(r6)
    c644:	0005883a 	mov	r2,zero
    c648:	f800283a 	ret

0000c64c <___vfiprintf_internal_r>:
    c64c:	deffc904 	addi	sp,sp,-220
    c650:	df003515 	stw	fp,212(sp)
    c654:	dd003115 	stw	r20,196(sp)
    c658:	dfc03615 	stw	ra,216(sp)
    c65c:	ddc03415 	stw	r23,208(sp)
    c660:	dd803315 	stw	r22,204(sp)
    c664:	dd403215 	stw	r21,200(sp)
    c668:	dcc03015 	stw	r19,192(sp)
    c66c:	dc802f15 	stw	r18,188(sp)
    c670:	dc402e15 	stw	r17,184(sp)
    c674:	dc002d15 	stw	r16,180(sp)
    c678:	d9002015 	stw	r4,128(sp)
    c67c:	d9c02215 	stw	r7,136(sp)
    c680:	2829883a 	mov	r20,r5
    c684:	3039883a 	mov	fp,r6
    c688:	20000226 	beq	r4,zero,c694 <___vfiprintf_internal_r+0x48>
    c68c:	20800e17 	ldw	r2,56(r4)
    c690:	1000cf26 	beq	r2,zero,c9d0 <___vfiprintf_internal_r+0x384>
    c694:	a080030b 	ldhu	r2,12(r20)
    c698:	10c8000c 	andi	r3,r2,8192
    c69c:	1800061e 	bne	r3,zero,c6b8 <___vfiprintf_internal_r+0x6c>
    c6a0:	a1001917 	ldw	r4,100(r20)
    c6a4:	00f7ffc4 	movi	r3,-8193
    c6a8:	10880014 	ori	r2,r2,8192
    c6ac:	20c6703a 	and	r3,r4,r3
    c6b0:	a080030d 	sth	r2,12(r20)
    c6b4:	a0c01915 	stw	r3,100(r20)
    c6b8:	10c0020c 	andi	r3,r2,8
    c6bc:	1800a926 	beq	r3,zero,c964 <___vfiprintf_internal_r+0x318>
    c6c0:	a0c00417 	ldw	r3,16(r20)
    c6c4:	1800a726 	beq	r3,zero,c964 <___vfiprintf_internal_r+0x318>
    c6c8:	1080068c 	andi	r2,r2,26
    c6cc:	00c00284 	movi	r3,10
    c6d0:	10c0ac26 	beq	r2,r3,c984 <___vfiprintf_internal_r+0x338>
    c6d4:	da801a04 	addi	r10,sp,104
    c6d8:	da801e15 	stw	r10,120(sp)
    c6dc:	d8801e17 	ldw	r2,120(sp)
    c6e0:	da8019c4 	addi	r10,sp,103
    c6e4:	05800074 	movhi	r22,1
    c6e8:	05c00074 	movhi	r23,1
    c6ec:	da801f15 	stw	r10,124(sp)
    c6f0:	1295c83a 	sub	r10,r2,r10
    c6f4:	b584d104 	addi	r22,r22,4932
    c6f8:	bdc4cd04 	addi	r23,r23,4916
    c6fc:	dec01a15 	stw	sp,104(sp)
    c700:	d8001c15 	stw	zero,112(sp)
    c704:	d8001b15 	stw	zero,108(sp)
    c708:	d8002615 	stw	zero,152(sp)
    c70c:	d8002315 	stw	zero,140(sp)
    c710:	da802715 	stw	r10,156(sp)
    c714:	d811883a 	mov	r8,sp
    c718:	dd002115 	stw	r20,132(sp)
    c71c:	e021883a 	mov	r16,fp
    c720:	80800007 	ldb	r2,0(r16)
    c724:	1003ea26 	beq	r2,zero,d6d0 <___vfiprintf_internal_r+0x1084>
    c728:	00c00944 	movi	r3,37
    c72c:	8025883a 	mov	r18,r16
    c730:	10c0021e 	bne	r2,r3,c73c <___vfiprintf_internal_r+0xf0>
    c734:	00001606 	br	c790 <___vfiprintf_internal_r+0x144>
    c738:	10c00326 	beq	r2,r3,c748 <___vfiprintf_internal_r+0xfc>
    c73c:	94800044 	addi	r18,r18,1
    c740:	90800007 	ldb	r2,0(r18)
    c744:	103ffc1e 	bne	r2,zero,c738 <__alt_data_end+0xff80c738>
    c748:	9423c83a 	sub	r17,r18,r16
    c74c:	88001026 	beq	r17,zero,c790 <___vfiprintf_internal_r+0x144>
    c750:	d8c01c17 	ldw	r3,112(sp)
    c754:	d8801b17 	ldw	r2,108(sp)
    c758:	44000015 	stw	r16,0(r8)
    c75c:	88c7883a 	add	r3,r17,r3
    c760:	10800044 	addi	r2,r2,1
    c764:	44400115 	stw	r17,4(r8)
    c768:	d8c01c15 	stw	r3,112(sp)
    c76c:	d8801b15 	stw	r2,108(sp)
    c770:	010001c4 	movi	r4,7
    c774:	2080760e 	bge	r4,r2,c950 <___vfiprintf_internal_r+0x304>
    c778:	1803821e 	bne	r3,zero,d584 <___vfiprintf_internal_r+0xf38>
    c77c:	da802317 	ldw	r10,140(sp)
    c780:	d8001b15 	stw	zero,108(sp)
    c784:	d811883a 	mov	r8,sp
    c788:	5455883a 	add	r10,r10,r17
    c78c:	da802315 	stw	r10,140(sp)
    c790:	90800007 	ldb	r2,0(r18)
    c794:	10044626 	beq	r2,zero,d8b0 <___vfiprintf_internal_r+0x1264>
    c798:	90c00047 	ldb	r3,1(r18)
    c79c:	94000044 	addi	r16,r18,1
    c7a0:	d8001d85 	stb	zero,118(sp)
    c7a4:	0009883a 	mov	r4,zero
    c7a8:	000f883a 	mov	r7,zero
    c7ac:	027fffc4 	movi	r9,-1
    c7b0:	0023883a 	mov	r17,zero
    c7b4:	0029883a 	mov	r20,zero
    c7b8:	01401604 	movi	r5,88
    c7bc:	01800244 	movi	r6,9
    c7c0:	03400a84 	movi	r13,42
    c7c4:	03001b04 	movi	r12,108
    c7c8:	84000044 	addi	r16,r16,1
    c7cc:	18bff804 	addi	r2,r3,-32
    c7d0:	28827336 	bltu	r5,r2,d1a0 <___vfiprintf_internal_r+0xb54>
    c7d4:	100490ba 	slli	r2,r2,2
    c7d8:	02800074 	movhi	r10,1
    c7dc:	52b1fb04 	addi	r10,r10,-14356
    c7e0:	1285883a 	add	r2,r2,r10
    c7e4:	10800017 	ldw	r2,0(r2)
    c7e8:	1000683a 	jmp	r2
    c7ec:	0000ced4 	movui	zero,827
    c7f0:	0000d1a0 	cmpeqi	zero,zero,838
    c7f4:	0000d1a0 	cmpeqi	zero,zero,838
    c7f8:	0000cef4 	movhi	zero,827
    c7fc:	0000d1a0 	cmpeqi	zero,zero,838
    c800:	0000d1a0 	cmpeqi	zero,zero,838
    c804:	0000d1a0 	cmpeqi	zero,zero,838
    c808:	0000d1a0 	cmpeqi	zero,zero,838
    c80c:	0000d1a0 	cmpeqi	zero,zero,838
    c810:	0000d1a0 	cmpeqi	zero,zero,838
    c814:	0000d0dc 	xori	zero,zero,835
    c818:	0000d0f8 	rdprs	zero,zero,835
    c81c:	0000d1a0 	cmpeqi	zero,zero,838
    c820:	0000c9e0 	cmpeqi	zero,zero,807
    c824:	0000d108 	cmpgei	zero,zero,836
    c828:	0000d1a0 	cmpeqi	zero,zero,838
    c82c:	0000cf00 	call	cf0 <atan+0x42c>
    c830:	0000cf0c 	andi	zero,zero,828
    c834:	0000cf0c 	andi	zero,zero,828
    c838:	0000cf0c 	andi	zero,zero,828
    c83c:	0000cf0c 	andi	zero,zero,828
    c840:	0000cf0c 	andi	zero,zero,828
    c844:	0000cf0c 	andi	zero,zero,828
    c848:	0000cf0c 	andi	zero,zero,828
    c84c:	0000cf0c 	andi	zero,zero,828
    c850:	0000cf0c 	andi	zero,zero,828
    c854:	0000d1a0 	cmpeqi	zero,zero,838
    c858:	0000d1a0 	cmpeqi	zero,zero,838
    c85c:	0000d1a0 	cmpeqi	zero,zero,838
    c860:	0000d1a0 	cmpeqi	zero,zero,838
    c864:	0000d1a0 	cmpeqi	zero,zero,838
    c868:	0000d1a0 	cmpeqi	zero,zero,838
    c86c:	0000d1a0 	cmpeqi	zero,zero,838
    c870:	0000d1a0 	cmpeqi	zero,zero,838
    c874:	0000d1a0 	cmpeqi	zero,zero,838
    c878:	0000d1a0 	cmpeqi	zero,zero,838
    c87c:	0000cf38 	rdprs	zero,zero,828
    c880:	0000d1a0 	cmpeqi	zero,zero,838
    c884:	0000d1a0 	cmpeqi	zero,zero,838
    c888:	0000d1a0 	cmpeqi	zero,zero,838
    c88c:	0000d1a0 	cmpeqi	zero,zero,838
    c890:	0000d1a0 	cmpeqi	zero,zero,838
    c894:	0000d1a0 	cmpeqi	zero,zero,838
    c898:	0000d1a0 	cmpeqi	zero,zero,838
    c89c:	0000d1a0 	cmpeqi	zero,zero,838
    c8a0:	0000d1a0 	cmpeqi	zero,zero,838
    c8a4:	0000d1a0 	cmpeqi	zero,zero,838
    c8a8:	0000cf70 	cmpltui	zero,zero,829
    c8ac:	0000d1a0 	cmpeqi	zero,zero,838
    c8b0:	0000d1a0 	cmpeqi	zero,zero,838
    c8b4:	0000d1a0 	cmpeqi	zero,zero,838
    c8b8:	0000d1a0 	cmpeqi	zero,zero,838
    c8bc:	0000d1a0 	cmpeqi	zero,zero,838
    c8c0:	0000cfc8 	cmpgei	zero,zero,831
    c8c4:	0000d1a0 	cmpeqi	zero,zero,838
    c8c8:	0000d1a0 	cmpeqi	zero,zero,838
    c8cc:	0000d038 	rdprs	zero,zero,832
    c8d0:	0000d1a0 	cmpeqi	zero,zero,838
    c8d4:	0000d1a0 	cmpeqi	zero,zero,838
    c8d8:	0000d1a0 	cmpeqi	zero,zero,838
    c8dc:	0000d1a0 	cmpeqi	zero,zero,838
    c8e0:	0000d1a0 	cmpeqi	zero,zero,838
    c8e4:	0000d1a0 	cmpeqi	zero,zero,838
    c8e8:	0000d1a0 	cmpeqi	zero,zero,838
    c8ec:	0000d1a0 	cmpeqi	zero,zero,838
    c8f0:	0000d1a0 	cmpeqi	zero,zero,838
    c8f4:	0000d1a0 	cmpeqi	zero,zero,838
    c8f8:	0000cde4 	muli	zero,zero,823
    c8fc:	0000ce10 	cmplti	zero,zero,824
    c900:	0000d1a0 	cmpeqi	zero,zero,838
    c904:	0000d1a0 	cmpeqi	zero,zero,838
    c908:	0000d1a0 	cmpeqi	zero,zero,838
    c90c:	0000d148 	cmpgei	zero,zero,837
    c910:	0000ce10 	cmplti	zero,zero,824
    c914:	0000d1a0 	cmpeqi	zero,zero,838
    c918:	0000d1a0 	cmpeqi	zero,zero,838
    c91c:	0000cca4 	muli	zero,zero,818
    c920:	0000d1a0 	cmpeqi	zero,zero,838
    c924:	0000ccb4 	movhi	zero,818
    c928:	0000ccf0 	cmpltui	zero,zero,819
    c92c:	0000c9ec 	andhi	zero,zero,807
    c930:	0000cc98 	cmpnei	zero,zero,818
    c934:	0000d1a0 	cmpeqi	zero,zero,838
    c938:	0000d074 	movhi	zero,833
    c93c:	0000d1a0 	cmpeqi	zero,zero,838
    c940:	0000d0cc 	andi	zero,zero,835
    c944:	0000d1a0 	cmpeqi	zero,zero,838
    c948:	0000d1a0 	cmpeqi	zero,zero,838
    c94c:	0000cd90 	cmplti	zero,zero,822
    c950:	42000204 	addi	r8,r8,8
    c954:	da802317 	ldw	r10,140(sp)
    c958:	5455883a 	add	r10,r10,r17
    c95c:	da802315 	stw	r10,140(sp)
    c960:	003f8b06 	br	c790 <__alt_data_end+0xff80c790>
    c964:	d9002017 	ldw	r4,128(sp)
    c968:	a00b883a 	mov	r5,r20
    c96c:	00074c40 	call	74c4 <__swsetup_r>
    c970:	1003b11e 	bne	r2,zero,d838 <___vfiprintf_internal_r+0x11ec>
    c974:	a080030b 	ldhu	r2,12(r20)
    c978:	00c00284 	movi	r3,10
    c97c:	1080068c 	andi	r2,r2,26
    c980:	10ff541e 	bne	r2,r3,c6d4 <__alt_data_end+0xff80c6d4>
    c984:	a080038f 	ldh	r2,14(r20)
    c988:	103f5216 	blt	r2,zero,c6d4 <__alt_data_end+0xff80c6d4>
    c98c:	d9c02217 	ldw	r7,136(sp)
    c990:	d9002017 	ldw	r4,128(sp)
    c994:	e00d883a 	mov	r6,fp
    c998:	a00b883a 	mov	r5,r20
    c99c:	000dac40 	call	dac4 <__sbprintf>
    c9a0:	dfc03617 	ldw	ra,216(sp)
    c9a4:	df003517 	ldw	fp,212(sp)
    c9a8:	ddc03417 	ldw	r23,208(sp)
    c9ac:	dd803317 	ldw	r22,204(sp)
    c9b0:	dd403217 	ldw	r21,200(sp)
    c9b4:	dd003117 	ldw	r20,196(sp)
    c9b8:	dcc03017 	ldw	r19,192(sp)
    c9bc:	dc802f17 	ldw	r18,188(sp)
    c9c0:	dc402e17 	ldw	r17,184(sp)
    c9c4:	dc002d17 	ldw	r16,180(sp)
    c9c8:	dec03704 	addi	sp,sp,220
    c9cc:	f800283a 	ret
    c9d0:	00094980 	call	9498 <__sinit>
    c9d4:	003f2f06 	br	c694 <__alt_data_end+0xff80c694>
    c9d8:	0463c83a 	sub	r17,zero,r17
    c9dc:	d8802215 	stw	r2,136(sp)
    c9e0:	a5000114 	ori	r20,r20,4
    c9e4:	80c00007 	ldb	r3,0(r16)
    c9e8:	003f7706 	br	c7c8 <__alt_data_end+0xff80c7c8>
    c9ec:	00800c04 	movi	r2,48
    c9f0:	da802217 	ldw	r10,136(sp)
    c9f4:	d8801d05 	stb	r2,116(sp)
    c9f8:	00801e04 	movi	r2,120
    c9fc:	d8801d45 	stb	r2,117(sp)
    ca00:	d8001d85 	stb	zero,118(sp)
    ca04:	50c00104 	addi	r3,r10,4
    ca08:	54800017 	ldw	r18,0(r10)
    ca0c:	0027883a 	mov	r19,zero
    ca10:	a0800094 	ori	r2,r20,2
    ca14:	48030b16 	blt	r9,zero,d644 <___vfiprintf_internal_r+0xff8>
    ca18:	00bfdfc4 	movi	r2,-129
    ca1c:	a096703a 	and	r11,r20,r2
    ca20:	d8c02215 	stw	r3,136(sp)
    ca24:	5d000094 	ori	r20,r11,2
    ca28:	90032b1e 	bne	r18,zero,d6d8 <___vfiprintf_internal_r+0x108c>
    ca2c:	00800074 	movhi	r2,1
    ca30:	10846e04 	addi	r2,r2,4536
    ca34:	d8802615 	stw	r2,152(sp)
    ca38:	0039883a 	mov	fp,zero
    ca3c:	48017b1e 	bne	r9,zero,d02c <___vfiprintf_internal_r+0x9e0>
    ca40:	0013883a 	mov	r9,zero
    ca44:	0027883a 	mov	r19,zero
    ca48:	dd401a04 	addi	r21,sp,104
    ca4c:	4825883a 	mov	r18,r9
    ca50:	4cc0010e 	bge	r9,r19,ca58 <___vfiprintf_internal_r+0x40c>
    ca54:	9825883a 	mov	r18,r19
    ca58:	e7003fcc 	andi	fp,fp,255
    ca5c:	e700201c 	xori	fp,fp,128
    ca60:	e73fe004 	addi	fp,fp,-128
    ca64:	e0000126 	beq	fp,zero,ca6c <___vfiprintf_internal_r+0x420>
    ca68:	94800044 	addi	r18,r18,1
    ca6c:	a380008c 	andi	r14,r20,2
    ca70:	70000126 	beq	r14,zero,ca78 <___vfiprintf_internal_r+0x42c>
    ca74:	94800084 	addi	r18,r18,2
    ca78:	a700210c 	andi	fp,r20,132
    ca7c:	e001df1e 	bne	fp,zero,d1fc <___vfiprintf_internal_r+0xbb0>
    ca80:	8c87c83a 	sub	r3,r17,r18
    ca84:	00c1dd0e 	bge	zero,r3,d1fc <___vfiprintf_internal_r+0xbb0>
    ca88:	01c00404 	movi	r7,16
    ca8c:	d8801c17 	ldw	r2,112(sp)
    ca90:	38c3ad0e 	bge	r7,r3,d948 <___vfiprintf_internal_r+0x12fc>
    ca94:	02800074 	movhi	r10,1
    ca98:	5284d104 	addi	r10,r10,4932
    ca9c:	dc002915 	stw	r16,164(sp)
    caa0:	d9801b17 	ldw	r6,108(sp)
    caa4:	da802415 	stw	r10,144(sp)
    caa8:	03c001c4 	movi	r15,7
    caac:	da402515 	stw	r9,148(sp)
    cab0:	db802815 	stw	r14,160(sp)
    cab4:	1821883a 	mov	r16,r3
    cab8:	00000506 	br	cad0 <___vfiprintf_internal_r+0x484>
    cabc:	31400084 	addi	r5,r6,2
    cac0:	42000204 	addi	r8,r8,8
    cac4:	200d883a 	mov	r6,r4
    cac8:	843ffc04 	addi	r16,r16,-16
    cacc:	3c000d0e 	bge	r7,r16,cb04 <___vfiprintf_internal_r+0x4b8>
    cad0:	10800404 	addi	r2,r2,16
    cad4:	31000044 	addi	r4,r6,1
    cad8:	45800015 	stw	r22,0(r8)
    cadc:	41c00115 	stw	r7,4(r8)
    cae0:	d8801c15 	stw	r2,112(sp)
    cae4:	d9001b15 	stw	r4,108(sp)
    cae8:	793ff40e 	bge	r15,r4,cabc <__alt_data_end+0xff80cabc>
    caec:	1001b51e 	bne	r2,zero,d1c4 <___vfiprintf_internal_r+0xb78>
    caf0:	843ffc04 	addi	r16,r16,-16
    caf4:	000d883a 	mov	r6,zero
    caf8:	01400044 	movi	r5,1
    cafc:	d811883a 	mov	r8,sp
    cb00:	3c3ff316 	blt	r7,r16,cad0 <__alt_data_end+0xff80cad0>
    cb04:	8007883a 	mov	r3,r16
    cb08:	da402517 	ldw	r9,148(sp)
    cb0c:	db802817 	ldw	r14,160(sp)
    cb10:	dc002917 	ldw	r16,164(sp)
    cb14:	da802417 	ldw	r10,144(sp)
    cb18:	1885883a 	add	r2,r3,r2
    cb1c:	40c00115 	stw	r3,4(r8)
    cb20:	42800015 	stw	r10,0(r8)
    cb24:	d8801c15 	stw	r2,112(sp)
    cb28:	d9401b15 	stw	r5,108(sp)
    cb2c:	00c001c4 	movi	r3,7
    cb30:	19426016 	blt	r3,r5,d4b4 <___vfiprintf_internal_r+0xe68>
    cb34:	d8c01d87 	ldb	r3,118(sp)
    cb38:	42000204 	addi	r8,r8,8
    cb3c:	29000044 	addi	r4,r5,1
    cb40:	1801b31e 	bne	r3,zero,d210 <___vfiprintf_internal_r+0xbc4>
    cb44:	7001c026 	beq	r14,zero,d248 <___vfiprintf_internal_r+0xbfc>
    cb48:	d8c01d04 	addi	r3,sp,116
    cb4c:	10800084 	addi	r2,r2,2
    cb50:	40c00015 	stw	r3,0(r8)
    cb54:	00c00084 	movi	r3,2
    cb58:	40c00115 	stw	r3,4(r8)
    cb5c:	d8801c15 	stw	r2,112(sp)
    cb60:	d9001b15 	stw	r4,108(sp)
    cb64:	00c001c4 	movi	r3,7
    cb68:	1902650e 	bge	r3,r4,d500 <___vfiprintf_internal_r+0xeb4>
    cb6c:	10029a1e 	bne	r2,zero,d5d8 <___vfiprintf_internal_r+0xf8c>
    cb70:	00c02004 	movi	r3,128
    cb74:	01000044 	movi	r4,1
    cb78:	000b883a 	mov	r5,zero
    cb7c:	d811883a 	mov	r8,sp
    cb80:	e0c1b31e 	bne	fp,r3,d250 <___vfiprintf_internal_r+0xc04>
    cb84:	8cb9c83a 	sub	fp,r17,r18
    cb88:	0701b10e 	bge	zero,fp,d250 <___vfiprintf_internal_r+0xc04>
    cb8c:	01c00404 	movi	r7,16
    cb90:	3f03890e 	bge	r7,fp,d9b8 <___vfiprintf_internal_r+0x136c>
    cb94:	00c00074 	movhi	r3,1
    cb98:	18c4cd04 	addi	r3,r3,4916
    cb9c:	d8c02415 	stw	r3,144(sp)
    cba0:	8007883a 	mov	r3,r16
    cba4:	034001c4 	movi	r13,7
    cba8:	e021883a 	mov	r16,fp
    cbac:	da402515 	stw	r9,148(sp)
    cbb0:	1839883a 	mov	fp,r3
    cbb4:	00000506 	br	cbcc <___vfiprintf_internal_r+0x580>
    cbb8:	29800084 	addi	r6,r5,2
    cbbc:	42000204 	addi	r8,r8,8
    cbc0:	180b883a 	mov	r5,r3
    cbc4:	843ffc04 	addi	r16,r16,-16
    cbc8:	3c000d0e 	bge	r7,r16,cc00 <___vfiprintf_internal_r+0x5b4>
    cbcc:	10800404 	addi	r2,r2,16
    cbd0:	28c00044 	addi	r3,r5,1
    cbd4:	45c00015 	stw	r23,0(r8)
    cbd8:	41c00115 	stw	r7,4(r8)
    cbdc:	d8801c15 	stw	r2,112(sp)
    cbe0:	d8c01b15 	stw	r3,108(sp)
    cbe4:	68fff40e 	bge	r13,r3,cbb8 <__alt_data_end+0xff80cbb8>
    cbe8:	1002241e 	bne	r2,zero,d47c <___vfiprintf_internal_r+0xe30>
    cbec:	843ffc04 	addi	r16,r16,-16
    cbf0:	01800044 	movi	r6,1
    cbf4:	000b883a 	mov	r5,zero
    cbf8:	d811883a 	mov	r8,sp
    cbfc:	3c3ff316 	blt	r7,r16,cbcc <__alt_data_end+0xff80cbcc>
    cc00:	da402517 	ldw	r9,148(sp)
    cc04:	e007883a 	mov	r3,fp
    cc08:	8039883a 	mov	fp,r16
    cc0c:	1821883a 	mov	r16,r3
    cc10:	d8c02417 	ldw	r3,144(sp)
    cc14:	1705883a 	add	r2,r2,fp
    cc18:	47000115 	stw	fp,4(r8)
    cc1c:	40c00015 	stw	r3,0(r8)
    cc20:	d8801c15 	stw	r2,112(sp)
    cc24:	d9801b15 	stw	r6,108(sp)
    cc28:	00c001c4 	movi	r3,7
    cc2c:	19827616 	blt	r3,r6,d608 <___vfiprintf_internal_r+0xfbc>
    cc30:	4cf9c83a 	sub	fp,r9,r19
    cc34:	42000204 	addi	r8,r8,8
    cc38:	31000044 	addi	r4,r6,1
    cc3c:	300b883a 	mov	r5,r6
    cc40:	07018516 	blt	zero,fp,d258 <___vfiprintf_internal_r+0xc0c>
    cc44:	9885883a 	add	r2,r19,r2
    cc48:	45400015 	stw	r21,0(r8)
    cc4c:	44c00115 	stw	r19,4(r8)
    cc50:	d8801c15 	stw	r2,112(sp)
    cc54:	d9001b15 	stw	r4,108(sp)
    cc58:	00c001c4 	movi	r3,7
    cc5c:	1901dd0e 	bge	r3,r4,d3d4 <___vfiprintf_internal_r+0xd88>
    cc60:	1002401e 	bne	r2,zero,d564 <___vfiprintf_internal_r+0xf18>
    cc64:	d8001b15 	stw	zero,108(sp)
    cc68:	a2c0010c 	andi	r11,r20,4
    cc6c:	58000226 	beq	r11,zero,cc78 <___vfiprintf_internal_r+0x62c>
    cc70:	8ca7c83a 	sub	r19,r17,r18
    cc74:	04c2f216 	blt	zero,r19,d840 <___vfiprintf_internal_r+0x11f4>
    cc78:	8c80010e 	bge	r17,r18,cc80 <___vfiprintf_internal_r+0x634>
    cc7c:	9023883a 	mov	r17,r18
    cc80:	da802317 	ldw	r10,140(sp)
    cc84:	5455883a 	add	r10,r10,r17
    cc88:	da802315 	stw	r10,140(sp)
    cc8c:	d8001b15 	stw	zero,108(sp)
    cc90:	d811883a 	mov	r8,sp
    cc94:	003ea206 	br	c720 <__alt_data_end+0xff80c720>
    cc98:	a5000814 	ori	r20,r20,32
    cc9c:	80c00007 	ldb	r3,0(r16)
    cca0:	003ec906 	br	c7c8 <__alt_data_end+0xff80c7c8>
    cca4:	80c00007 	ldb	r3,0(r16)
    cca8:	1b030926 	beq	r3,r12,d8d0 <___vfiprintf_internal_r+0x1284>
    ccac:	a5000414 	ori	r20,r20,16
    ccb0:	003ec506 	br	c7c8 <__alt_data_end+0xff80c7c8>
    ccb4:	21003fcc 	andi	r4,r4,255
    ccb8:	20035e1e 	bne	r4,zero,da34 <___vfiprintf_internal_r+0x13e8>
    ccbc:	a080080c 	andi	r2,r20,32
    ccc0:	1002a526 	beq	r2,zero,d758 <___vfiprintf_internal_r+0x110c>
    ccc4:	da802217 	ldw	r10,136(sp)
    ccc8:	50800017 	ldw	r2,0(r10)
    cccc:	da802317 	ldw	r10,140(sp)
    ccd0:	5007d7fa 	srai	r3,r10,31
    ccd4:	da802217 	ldw	r10,136(sp)
    ccd8:	10c00115 	stw	r3,4(r2)
    ccdc:	52800104 	addi	r10,r10,4
    cce0:	da802215 	stw	r10,136(sp)
    cce4:	da802317 	ldw	r10,140(sp)
    cce8:	12800015 	stw	r10,0(r2)
    ccec:	003e8c06 	br	c720 <__alt_data_end+0xff80c720>
    ccf0:	21003fcc 	andi	r4,r4,255
    ccf4:	2003511e 	bne	r4,zero,da3c <___vfiprintf_internal_r+0x13f0>
    ccf8:	a080080c 	andi	r2,r20,32
    ccfc:	1000a126 	beq	r2,zero,cf84 <___vfiprintf_internal_r+0x938>
    cd00:	da802217 	ldw	r10,136(sp)
    cd04:	d8001d85 	stb	zero,118(sp)
    cd08:	50800204 	addi	r2,r10,8
    cd0c:	54800017 	ldw	r18,0(r10)
    cd10:	54c00117 	ldw	r19,4(r10)
    cd14:	4802b416 	blt	r9,zero,d7e8 <___vfiprintf_internal_r+0x119c>
    cd18:	013fdfc4 	movi	r4,-129
    cd1c:	94c6b03a 	or	r3,r18,r19
    cd20:	d8802215 	stw	r2,136(sp)
    cd24:	a128703a 	and	r20,r20,r4
    cd28:	1800a226 	beq	r3,zero,cfb4 <___vfiprintf_internal_r+0x968>
    cd2c:	0039883a 	mov	fp,zero
    cd30:	dd401a04 	addi	r21,sp,104
    cd34:	9006d0fa 	srli	r3,r18,3
    cd38:	9808977a 	slli	r4,r19,29
    cd3c:	9826d0fa 	srli	r19,r19,3
    cd40:	948001cc 	andi	r18,r18,7
    cd44:	90800c04 	addi	r2,r18,48
    cd48:	ad7fffc4 	addi	r21,r21,-1
    cd4c:	20e4b03a 	or	r18,r4,r3
    cd50:	a8800005 	stb	r2,0(r21)
    cd54:	94c6b03a 	or	r3,r18,r19
    cd58:	183ff61e 	bne	r3,zero,cd34 <__alt_data_end+0xff80cd34>
    cd5c:	a0c0004c 	andi	r3,r20,1
    cd60:	18005926 	beq	r3,zero,cec8 <___vfiprintf_internal_r+0x87c>
    cd64:	10803fcc 	andi	r2,r2,255
    cd68:	1080201c 	xori	r2,r2,128
    cd6c:	10bfe004 	addi	r2,r2,-128
    cd70:	00c00c04 	movi	r3,48
    cd74:	10c05426 	beq	r2,r3,cec8 <___vfiprintf_internal_r+0x87c>
    cd78:	da801e17 	ldw	r10,120(sp)
    cd7c:	a8bfffc4 	addi	r2,r21,-1
    cd80:	a8ffffc5 	stb	r3,-1(r21)
    cd84:	50a7c83a 	sub	r19,r10,r2
    cd88:	102b883a 	mov	r21,r2
    cd8c:	003f2f06 	br	ca4c <__alt_data_end+0xff80ca4c>
    cd90:	21003fcc 	andi	r4,r4,255
    cd94:	2003421e 	bne	r4,zero,daa0 <___vfiprintf_internal_r+0x1454>
    cd98:	00800074 	movhi	r2,1
    cd9c:	10846e04 	addi	r2,r2,4536
    cda0:	d8802615 	stw	r2,152(sp)
    cda4:	a080080c 	andi	r2,r20,32
    cda8:	1000aa26 	beq	r2,zero,d054 <___vfiprintf_internal_r+0xa08>
    cdac:	da802217 	ldw	r10,136(sp)
    cdb0:	54800017 	ldw	r18,0(r10)
    cdb4:	54c00117 	ldw	r19,4(r10)
    cdb8:	52800204 	addi	r10,r10,8
    cdbc:	da802215 	stw	r10,136(sp)
    cdc0:	a080004c 	andi	r2,r20,1
    cdc4:	1001d226 	beq	r2,zero,d510 <___vfiprintf_internal_r+0xec4>
    cdc8:	94c4b03a 	or	r2,r18,r19
    cdcc:	1002351e 	bne	r2,zero,d6a4 <___vfiprintf_internal_r+0x1058>
    cdd0:	d8001d85 	stb	zero,118(sp)
    cdd4:	48022216 	blt	r9,zero,d660 <___vfiprintf_internal_r+0x1014>
    cdd8:	00bfdfc4 	movi	r2,-129
    cddc:	a0a8703a 	and	r20,r20,r2
    cde0:	003f1506 	br	ca38 <__alt_data_end+0xff80ca38>
    cde4:	da802217 	ldw	r10,136(sp)
    cde8:	04800044 	movi	r18,1
    cdec:	d8001d85 	stb	zero,118(sp)
    cdf0:	50800017 	ldw	r2,0(r10)
    cdf4:	52800104 	addi	r10,r10,4
    cdf8:	da802215 	stw	r10,136(sp)
    cdfc:	d8801005 	stb	r2,64(sp)
    ce00:	9027883a 	mov	r19,r18
    ce04:	dd401004 	addi	r21,sp,64
    ce08:	0013883a 	mov	r9,zero
    ce0c:	003f1706 	br	ca6c <__alt_data_end+0xff80ca6c>
    ce10:	21003fcc 	andi	r4,r4,255
    ce14:	2003201e 	bne	r4,zero,da98 <___vfiprintf_internal_r+0x144c>
    ce18:	a080080c 	andi	r2,r20,32
    ce1c:	10004b26 	beq	r2,zero,cf4c <___vfiprintf_internal_r+0x900>
    ce20:	da802217 	ldw	r10,136(sp)
    ce24:	50800117 	ldw	r2,4(r10)
    ce28:	54800017 	ldw	r18,0(r10)
    ce2c:	52800204 	addi	r10,r10,8
    ce30:	da802215 	stw	r10,136(sp)
    ce34:	1027883a 	mov	r19,r2
    ce38:	10022c16 	blt	r2,zero,d6ec <___vfiprintf_internal_r+0x10a0>
    ce3c:	df001d83 	ldbu	fp,118(sp)
    ce40:	48007216 	blt	r9,zero,d00c <___vfiprintf_internal_r+0x9c0>
    ce44:	00ffdfc4 	movi	r3,-129
    ce48:	94c4b03a 	or	r2,r18,r19
    ce4c:	a0e8703a 	and	r20,r20,r3
    ce50:	1000cc26 	beq	r2,zero,d184 <___vfiprintf_internal_r+0xb38>
    ce54:	98021026 	beq	r19,zero,d698 <___vfiprintf_internal_r+0x104c>
    ce58:	dc402415 	stw	r17,144(sp)
    ce5c:	dc002515 	stw	r16,148(sp)
    ce60:	9823883a 	mov	r17,r19
    ce64:	9021883a 	mov	r16,r18
    ce68:	dd401a04 	addi	r21,sp,104
    ce6c:	4825883a 	mov	r18,r9
    ce70:	4027883a 	mov	r19,r8
    ce74:	8009883a 	mov	r4,r16
    ce78:	880b883a 	mov	r5,r17
    ce7c:	01800284 	movi	r6,10
    ce80:	000f883a 	mov	r7,zero
    ce84:	000ea2c0 	call	ea2c <__umoddi3>
    ce88:	10800c04 	addi	r2,r2,48
    ce8c:	ad7fffc4 	addi	r21,r21,-1
    ce90:	8009883a 	mov	r4,r16
    ce94:	880b883a 	mov	r5,r17
    ce98:	a8800005 	stb	r2,0(r21)
    ce9c:	01800284 	movi	r6,10
    cea0:	000f883a 	mov	r7,zero
    cea4:	000e4b40 	call	e4b4 <__udivdi3>
    cea8:	1021883a 	mov	r16,r2
    ceac:	10c4b03a 	or	r2,r2,r3
    ceb0:	1823883a 	mov	r17,r3
    ceb4:	103fef1e 	bne	r2,zero,ce74 <__alt_data_end+0xff80ce74>
    ceb8:	dc402417 	ldw	r17,144(sp)
    cebc:	dc002517 	ldw	r16,148(sp)
    cec0:	9013883a 	mov	r9,r18
    cec4:	9811883a 	mov	r8,r19
    cec8:	da801e17 	ldw	r10,120(sp)
    cecc:	5567c83a 	sub	r19,r10,r21
    ced0:	003ede06 	br	ca4c <__alt_data_end+0xff80ca4c>
    ced4:	38803fcc 	andi	r2,r7,255
    ced8:	1080201c 	xori	r2,r2,128
    cedc:	10bfe004 	addi	r2,r2,-128
    cee0:	1002371e 	bne	r2,zero,d7c0 <___vfiprintf_internal_r+0x1174>
    cee4:	01000044 	movi	r4,1
    cee8:	01c00804 	movi	r7,32
    ceec:	80c00007 	ldb	r3,0(r16)
    cef0:	003e3506 	br	c7c8 <__alt_data_end+0xff80c7c8>
    cef4:	a5000054 	ori	r20,r20,1
    cef8:	80c00007 	ldb	r3,0(r16)
    cefc:	003e3206 	br	c7c8 <__alt_data_end+0xff80c7c8>
    cf00:	a5002014 	ori	r20,r20,128
    cf04:	80c00007 	ldb	r3,0(r16)
    cf08:	003e2f06 	br	c7c8 <__alt_data_end+0xff80c7c8>
    cf0c:	8015883a 	mov	r10,r16
    cf10:	0023883a 	mov	r17,zero
    cf14:	18bff404 	addi	r2,r3,-48
    cf18:	50c00007 	ldb	r3,0(r10)
    cf1c:	8c4002a4 	muli	r17,r17,10
    cf20:	84000044 	addi	r16,r16,1
    cf24:	8015883a 	mov	r10,r16
    cf28:	1463883a 	add	r17,r2,r17
    cf2c:	18bff404 	addi	r2,r3,-48
    cf30:	30bff92e 	bgeu	r6,r2,cf18 <__alt_data_end+0xff80cf18>
    cf34:	003e2506 	br	c7cc <__alt_data_end+0xff80c7cc>
    cf38:	21003fcc 	andi	r4,r4,255
    cf3c:	2002d41e 	bne	r4,zero,da90 <___vfiprintf_internal_r+0x1444>
    cf40:	a5000414 	ori	r20,r20,16
    cf44:	a080080c 	andi	r2,r20,32
    cf48:	103fb51e 	bne	r2,zero,ce20 <__alt_data_end+0xff80ce20>
    cf4c:	a080040c 	andi	r2,r20,16
    cf50:	1001f826 	beq	r2,zero,d734 <___vfiprintf_internal_r+0x10e8>
    cf54:	da802217 	ldw	r10,136(sp)
    cf58:	54800017 	ldw	r18,0(r10)
    cf5c:	52800104 	addi	r10,r10,4
    cf60:	da802215 	stw	r10,136(sp)
    cf64:	9027d7fa 	srai	r19,r18,31
    cf68:	9805883a 	mov	r2,r19
    cf6c:	003fb206 	br	ce38 <__alt_data_end+0xff80ce38>
    cf70:	21003fcc 	andi	r4,r4,255
    cf74:	2002c41e 	bne	r4,zero,da88 <___vfiprintf_internal_r+0x143c>
    cf78:	a5000414 	ori	r20,r20,16
    cf7c:	a080080c 	andi	r2,r20,32
    cf80:	103f5f1e 	bne	r2,zero,cd00 <__alt_data_end+0xff80cd00>
    cf84:	a080040c 	andi	r2,r20,16
    cf88:	10020f26 	beq	r2,zero,d7c8 <___vfiprintf_internal_r+0x117c>
    cf8c:	da802217 	ldw	r10,136(sp)
    cf90:	d8001d85 	stb	zero,118(sp)
    cf94:	0027883a 	mov	r19,zero
    cf98:	50800104 	addi	r2,r10,4
    cf9c:	54800017 	ldw	r18,0(r10)
    cfa0:	48021116 	blt	r9,zero,d7e8 <___vfiprintf_internal_r+0x119c>
    cfa4:	00ffdfc4 	movi	r3,-129
    cfa8:	d8802215 	stw	r2,136(sp)
    cfac:	a0e8703a 	and	r20,r20,r3
    cfb0:	903f5e1e 	bne	r18,zero,cd2c <__alt_data_end+0xff80cd2c>
    cfb4:	0039883a 	mov	fp,zero
    cfb8:	4802a626 	beq	r9,zero,da54 <___vfiprintf_internal_r+0x1408>
    cfbc:	0025883a 	mov	r18,zero
    cfc0:	0027883a 	mov	r19,zero
    cfc4:	003f5a06 	br	cd30 <__alt_data_end+0xff80cd30>
    cfc8:	21003fcc 	andi	r4,r4,255
    cfcc:	20029f1e 	bne	r4,zero,da4c <___vfiprintf_internal_r+0x1400>
    cfd0:	a5000414 	ori	r20,r20,16
    cfd4:	a080080c 	andi	r2,r20,32
    cfd8:	10005e1e 	bne	r2,zero,d154 <___vfiprintf_internal_r+0xb08>
    cfdc:	a080040c 	andi	r2,r20,16
    cfe0:	1001a21e 	bne	r2,zero,d66c <___vfiprintf_internal_r+0x1020>
    cfe4:	a080100c 	andi	r2,r20,64
    cfe8:	d8001d85 	stb	zero,118(sp)
    cfec:	da802217 	ldw	r10,136(sp)
    cff0:	1002231e 	bne	r2,zero,d880 <___vfiprintf_internal_r+0x1234>
    cff4:	50800104 	addi	r2,r10,4
    cff8:	54800017 	ldw	r18,0(r10)
    cffc:	0027883a 	mov	r19,zero
    d000:	4801a00e 	bge	r9,zero,d684 <___vfiprintf_internal_r+0x1038>
    d004:	d8802215 	stw	r2,136(sp)
    d008:	0039883a 	mov	fp,zero
    d00c:	94c4b03a 	or	r2,r18,r19
    d010:	103f901e 	bne	r2,zero,ce54 <__alt_data_end+0xff80ce54>
    d014:	00800044 	movi	r2,1
    d018:	10803fcc 	andi	r2,r2,255
    d01c:	00c00044 	movi	r3,1
    d020:	10c05926 	beq	r2,r3,d188 <___vfiprintf_internal_r+0xb3c>
    d024:	00c00084 	movi	r3,2
    d028:	10ffe41e 	bne	r2,r3,cfbc <__alt_data_end+0xff80cfbc>
    d02c:	0025883a 	mov	r18,zero
    d030:	0027883a 	mov	r19,zero
    d034:	00013d06 	br	d52c <___vfiprintf_internal_r+0xee0>
    d038:	21003fcc 	andi	r4,r4,255
    d03c:	2002811e 	bne	r4,zero,da44 <___vfiprintf_internal_r+0x13f8>
    d040:	00800074 	movhi	r2,1
    d044:	10846904 	addi	r2,r2,4516
    d048:	d8802615 	stw	r2,152(sp)
    d04c:	a080080c 	andi	r2,r20,32
    d050:	103f561e 	bne	r2,zero,cdac <__alt_data_end+0xff80cdac>
    d054:	a080040c 	andi	r2,r20,16
    d058:	1001d126 	beq	r2,zero,d7a0 <___vfiprintf_internal_r+0x1154>
    d05c:	da802217 	ldw	r10,136(sp)
    d060:	0027883a 	mov	r19,zero
    d064:	54800017 	ldw	r18,0(r10)
    d068:	52800104 	addi	r10,r10,4
    d06c:	da802215 	stw	r10,136(sp)
    d070:	003f5306 	br	cdc0 <__alt_data_end+0xff80cdc0>
    d074:	da802217 	ldw	r10,136(sp)
    d078:	d8001d85 	stb	zero,118(sp)
    d07c:	55400017 	ldw	r21,0(r10)
    d080:	50c00104 	addi	r3,r10,4
    d084:	a8024226 	beq	r21,zero,d990 <___vfiprintf_internal_r+0x1344>
    d088:	48021816 	blt	r9,zero,d8ec <___vfiprintf_internal_r+0x12a0>
    d08c:	480d883a 	mov	r6,r9
    d090:	000b883a 	mov	r5,zero
    d094:	a809883a 	mov	r4,r21
    d098:	d8c02a15 	stw	r3,168(sp)
    d09c:	da002b15 	stw	r8,172(sp)
    d0a0:	da402c15 	stw	r9,176(sp)
    d0a4:	000aa040 	call	aa04 <memchr>
    d0a8:	d8c02a17 	ldw	r3,168(sp)
    d0ac:	da002b17 	ldw	r8,172(sp)
    d0b0:	da402c17 	ldw	r9,176(sp)
    d0b4:	10024826 	beq	r2,zero,d9d8 <___vfiprintf_internal_r+0x138c>
    d0b8:	1567c83a 	sub	r19,r2,r21
    d0bc:	df001d83 	ldbu	fp,118(sp)
    d0c0:	d8c02215 	stw	r3,136(sp)
    d0c4:	0013883a 	mov	r9,zero
    d0c8:	003e6006 	br	ca4c <__alt_data_end+0xff80ca4c>
    d0cc:	21003fcc 	andi	r4,r4,255
    d0d0:	203fc026 	beq	r4,zero,cfd4 <__alt_data_end+0xff80cfd4>
    d0d4:	d9c01d85 	stb	r7,118(sp)
    d0d8:	003fbe06 	br	cfd4 <__alt_data_end+0xff80cfd4>
    d0dc:	da802217 	ldw	r10,136(sp)
    d0e0:	54400017 	ldw	r17,0(r10)
    d0e4:	50800104 	addi	r2,r10,4
    d0e8:	883e3b16 	blt	r17,zero,c9d8 <__alt_data_end+0xff80c9d8>
    d0ec:	d8802215 	stw	r2,136(sp)
    d0f0:	80c00007 	ldb	r3,0(r16)
    d0f4:	003db406 	br	c7c8 <__alt_data_end+0xff80c7c8>
    d0f8:	01000044 	movi	r4,1
    d0fc:	01c00ac4 	movi	r7,43
    d100:	80c00007 	ldb	r3,0(r16)
    d104:	003db006 	br	c7c8 <__alt_data_end+0xff80c7c8>
    d108:	80c00007 	ldb	r3,0(r16)
    d10c:	82800044 	addi	r10,r16,1
    d110:	1b423c26 	beq	r3,r13,da04 <___vfiprintf_internal_r+0x13b8>
    d114:	18bff404 	addi	r2,r3,-48
    d118:	0013883a 	mov	r9,zero
    d11c:	30822b36 	bltu	r6,r2,d9cc <___vfiprintf_internal_r+0x1380>
    d120:	50c00007 	ldb	r3,0(r10)
    d124:	4a4002a4 	muli	r9,r9,10
    d128:	54000044 	addi	r16,r10,1
    d12c:	8015883a 	mov	r10,r16
    d130:	4893883a 	add	r9,r9,r2
    d134:	18bff404 	addi	r2,r3,-48
    d138:	30bff92e 	bgeu	r6,r2,d120 <__alt_data_end+0xff80d120>
    d13c:	483da30e 	bge	r9,zero,c7cc <__alt_data_end+0xff80c7cc>
    d140:	027fffc4 	movi	r9,-1
    d144:	003da106 	br	c7cc <__alt_data_end+0xff80c7cc>
    d148:	a5001014 	ori	r20,r20,64
    d14c:	80c00007 	ldb	r3,0(r16)
    d150:	003d9d06 	br	c7c8 <__alt_data_end+0xff80c7c8>
    d154:	da802217 	ldw	r10,136(sp)
    d158:	d8001d85 	stb	zero,118(sp)
    d15c:	50c00204 	addi	r3,r10,8
    d160:	54800017 	ldw	r18,0(r10)
    d164:	54c00117 	ldw	r19,4(r10)
    d168:	4801ca16 	blt	r9,zero,d894 <___vfiprintf_internal_r+0x1248>
    d16c:	013fdfc4 	movi	r4,-129
    d170:	94c4b03a 	or	r2,r18,r19
    d174:	d8c02215 	stw	r3,136(sp)
    d178:	a128703a 	and	r20,r20,r4
    d17c:	0039883a 	mov	fp,zero
    d180:	103f341e 	bne	r2,zero,ce54 <__alt_data_end+0xff80ce54>
    d184:	483e2e26 	beq	r9,zero,ca40 <__alt_data_end+0xff80ca40>
    d188:	0025883a 	mov	r18,zero
    d18c:	94800c04 	addi	r18,r18,48
    d190:	dc8019c5 	stb	r18,103(sp)
    d194:	dcc02717 	ldw	r19,156(sp)
    d198:	dd4019c4 	addi	r21,sp,103
    d19c:	003e2b06 	br	ca4c <__alt_data_end+0xff80ca4c>
    d1a0:	21003fcc 	andi	r4,r4,255
    d1a4:	2002361e 	bne	r4,zero,da80 <___vfiprintf_internal_r+0x1434>
    d1a8:	1801c126 	beq	r3,zero,d8b0 <___vfiprintf_internal_r+0x1264>
    d1ac:	04800044 	movi	r18,1
    d1b0:	d8c01005 	stb	r3,64(sp)
    d1b4:	d8001d85 	stb	zero,118(sp)
    d1b8:	9027883a 	mov	r19,r18
    d1bc:	dd401004 	addi	r21,sp,64
    d1c0:	003f1106 	br	ce08 <__alt_data_end+0xff80ce08>
    d1c4:	d9402117 	ldw	r5,132(sp)
    d1c8:	d9002017 	ldw	r4,128(sp)
    d1cc:	d9801a04 	addi	r6,sp,104
    d1d0:	d9c02b15 	stw	r7,172(sp)
    d1d4:	dbc02a15 	stw	r15,168(sp)
    d1d8:	000c5380 	call	c538 <__sprint_r.part.0>
    d1dc:	d9c02b17 	ldw	r7,172(sp)
    d1e0:	dbc02a17 	ldw	r15,168(sp)
    d1e4:	10006d1e 	bne	r2,zero,d39c <___vfiprintf_internal_r+0xd50>
    d1e8:	d9801b17 	ldw	r6,108(sp)
    d1ec:	d8801c17 	ldw	r2,112(sp)
    d1f0:	d811883a 	mov	r8,sp
    d1f4:	31400044 	addi	r5,r6,1
    d1f8:	003e3306 	br	cac8 <__alt_data_end+0xff80cac8>
    d1fc:	d9401b17 	ldw	r5,108(sp)
    d200:	d8801c17 	ldw	r2,112(sp)
    d204:	29000044 	addi	r4,r5,1
    d208:	d8c01d87 	ldb	r3,118(sp)
    d20c:	183e4d26 	beq	r3,zero,cb44 <__alt_data_end+0xff80cb44>
    d210:	00c00044 	movi	r3,1
    d214:	d9401d84 	addi	r5,sp,118
    d218:	10c5883a 	add	r2,r2,r3
    d21c:	41400015 	stw	r5,0(r8)
    d220:	40c00115 	stw	r3,4(r8)
    d224:	d8801c15 	stw	r2,112(sp)
    d228:	d9001b15 	stw	r4,108(sp)
    d22c:	014001c4 	movi	r5,7
    d230:	2900a90e 	bge	r5,r4,d4d8 <___vfiprintf_internal_r+0xe8c>
    d234:	1000da1e 	bne	r2,zero,d5a0 <___vfiprintf_internal_r+0xf54>
    d238:	7000ab1e 	bne	r14,zero,d4e8 <___vfiprintf_internal_r+0xe9c>
    d23c:	000b883a 	mov	r5,zero
    d240:	1809883a 	mov	r4,r3
    d244:	d811883a 	mov	r8,sp
    d248:	00c02004 	movi	r3,128
    d24c:	e0fe4d26 	beq	fp,r3,cb84 <__alt_data_end+0xff80cb84>
    d250:	4cf9c83a 	sub	fp,r9,r19
    d254:	073e7b0e 	bge	zero,fp,cc44 <__alt_data_end+0xff80cc44>
    d258:	01c00404 	movi	r7,16
    d25c:	3f01900e 	bge	r7,fp,d8a0 <___vfiprintf_internal_r+0x1254>
    d260:	00c00074 	movhi	r3,1
    d264:	18c4cd04 	addi	r3,r3,4916
    d268:	d8c02415 	stw	r3,144(sp)
    d26c:	034001c4 	movi	r13,7
    d270:	00000506 	br	d288 <___vfiprintf_internal_r+0xc3c>
    d274:	29000084 	addi	r4,r5,2
    d278:	42000204 	addi	r8,r8,8
    d27c:	180b883a 	mov	r5,r3
    d280:	e73ffc04 	addi	fp,fp,-16
    d284:	3f000d0e 	bge	r7,fp,d2bc <___vfiprintf_internal_r+0xc70>
    d288:	10800404 	addi	r2,r2,16
    d28c:	28c00044 	addi	r3,r5,1
    d290:	45c00015 	stw	r23,0(r8)
    d294:	41c00115 	stw	r7,4(r8)
    d298:	d8801c15 	stw	r2,112(sp)
    d29c:	d8c01b15 	stw	r3,108(sp)
    d2a0:	68fff40e 	bge	r13,r3,d274 <__alt_data_end+0xff80d274>
    d2a4:	1000101e 	bne	r2,zero,d2e8 <___vfiprintf_internal_r+0xc9c>
    d2a8:	e73ffc04 	addi	fp,fp,-16
    d2ac:	01000044 	movi	r4,1
    d2b0:	000b883a 	mov	r5,zero
    d2b4:	d811883a 	mov	r8,sp
    d2b8:	3f3ff316 	blt	r7,fp,d288 <__alt_data_end+0xff80d288>
    d2bc:	da802417 	ldw	r10,144(sp)
    d2c0:	1705883a 	add	r2,r2,fp
    d2c4:	47000115 	stw	fp,4(r8)
    d2c8:	42800015 	stw	r10,0(r8)
    d2cc:	d8801c15 	stw	r2,112(sp)
    d2d0:	d9001b15 	stw	r4,108(sp)
    d2d4:	00c001c4 	movi	r3,7
    d2d8:	19003616 	blt	r3,r4,d3b4 <___vfiprintf_internal_r+0xd68>
    d2dc:	42000204 	addi	r8,r8,8
    d2e0:	21000044 	addi	r4,r4,1
    d2e4:	003e5706 	br	cc44 <__alt_data_end+0xff80cc44>
    d2e8:	d9402117 	ldw	r5,132(sp)
    d2ec:	d9002017 	ldw	r4,128(sp)
    d2f0:	d9801a04 	addi	r6,sp,104
    d2f4:	d9c02b15 	stw	r7,172(sp)
    d2f8:	db402a15 	stw	r13,168(sp)
    d2fc:	000c5380 	call	c538 <__sprint_r.part.0>
    d300:	d9c02b17 	ldw	r7,172(sp)
    d304:	db402a17 	ldw	r13,168(sp)
    d308:	1000241e 	bne	r2,zero,d39c <___vfiprintf_internal_r+0xd50>
    d30c:	d9401b17 	ldw	r5,108(sp)
    d310:	d8801c17 	ldw	r2,112(sp)
    d314:	d811883a 	mov	r8,sp
    d318:	29000044 	addi	r4,r5,1
    d31c:	003fd806 	br	d280 <__alt_data_end+0xff80d280>
    d320:	d9401b17 	ldw	r5,108(sp)
    d324:	00c00074 	movhi	r3,1
    d328:	18c4d104 	addi	r3,r3,4932
    d32c:	d8c02415 	stw	r3,144(sp)
    d330:	29400044 	addi	r5,r5,1
    d334:	d8c02417 	ldw	r3,144(sp)
    d338:	14c5883a 	add	r2,r2,r19
    d33c:	44c00115 	stw	r19,4(r8)
    d340:	40c00015 	stw	r3,0(r8)
    d344:	d8801c15 	stw	r2,112(sp)
    d348:	d9401b15 	stw	r5,108(sp)
    d34c:	00c001c4 	movi	r3,7
    d350:	1940070e 	bge	r3,r5,d370 <___vfiprintf_internal_r+0xd24>
    d354:	103e4826 	beq	r2,zero,cc78 <__alt_data_end+0xff80cc78>
    d358:	d9402117 	ldw	r5,132(sp)
    d35c:	d9002017 	ldw	r4,128(sp)
    d360:	d9801a04 	addi	r6,sp,104
    d364:	000c5380 	call	c538 <__sprint_r.part.0>
    d368:	10000c1e 	bne	r2,zero,d39c <___vfiprintf_internal_r+0xd50>
    d36c:	d8801c17 	ldw	r2,112(sp)
    d370:	8c80010e 	bge	r17,r18,d378 <___vfiprintf_internal_r+0xd2c>
    d374:	9023883a 	mov	r17,r18
    d378:	da802317 	ldw	r10,140(sp)
    d37c:	5455883a 	add	r10,r10,r17
    d380:	da802315 	stw	r10,140(sp)
    d384:	103e4126 	beq	r2,zero,cc8c <__alt_data_end+0xff80cc8c>
    d388:	d9402117 	ldw	r5,132(sp)
    d38c:	d9002017 	ldw	r4,128(sp)
    d390:	d9801a04 	addi	r6,sp,104
    d394:	000c5380 	call	c538 <__sprint_r.part.0>
    d398:	103e3c26 	beq	r2,zero,cc8c <__alt_data_end+0xff80cc8c>
    d39c:	dd002117 	ldw	r20,132(sp)
    d3a0:	a080030b 	ldhu	r2,12(r20)
    d3a4:	1080100c 	andi	r2,r2,64
    d3a8:	1001231e 	bne	r2,zero,d838 <___vfiprintf_internal_r+0x11ec>
    d3ac:	d8802317 	ldw	r2,140(sp)
    d3b0:	003d7b06 	br	c9a0 <__alt_data_end+0xff80c9a0>
    d3b4:	1000991e 	bne	r2,zero,d61c <___vfiprintf_internal_r+0xfd0>
    d3b8:	00c00044 	movi	r3,1
    d3bc:	9805883a 	mov	r2,r19
    d3c0:	dd400015 	stw	r21,0(sp)
    d3c4:	dcc00115 	stw	r19,4(sp)
    d3c8:	dcc01c15 	stw	r19,112(sp)
    d3cc:	d8c01b15 	stw	r3,108(sp)
    d3d0:	d811883a 	mov	r8,sp
    d3d4:	42000204 	addi	r8,r8,8
    d3d8:	a2c0010c 	andi	r11,r20,4
    d3dc:	583fe426 	beq	r11,zero,d370 <__alt_data_end+0xff80d370>
    d3e0:	8ca7c83a 	sub	r19,r17,r18
    d3e4:	04ffe20e 	bge	zero,r19,d370 <__alt_data_end+0xff80d370>
    d3e8:	01c00404 	movi	r7,16
    d3ec:	3cffcc0e 	bge	r7,r19,d320 <__alt_data_end+0xff80d320>
    d3f0:	02800074 	movhi	r10,1
    d3f4:	5284d104 	addi	r10,r10,4932
    d3f8:	d9001b17 	ldw	r4,108(sp)
    d3fc:	da802415 	stw	r10,144(sp)
    d400:	382b883a 	mov	r21,r7
    d404:	050001c4 	movi	r20,7
    d408:	df002017 	ldw	fp,128(sp)
    d40c:	00000506 	br	d424 <___vfiprintf_internal_r+0xdd8>
    d410:	21400084 	addi	r5,r4,2
    d414:	42000204 	addi	r8,r8,8
    d418:	1809883a 	mov	r4,r3
    d41c:	9cfffc04 	addi	r19,r19,-16
    d420:	acffc40e 	bge	r21,r19,d334 <__alt_data_end+0xff80d334>
    d424:	10800404 	addi	r2,r2,16
    d428:	20c00044 	addi	r3,r4,1
    d42c:	45800015 	stw	r22,0(r8)
    d430:	45400115 	stw	r21,4(r8)
    d434:	d8801c15 	stw	r2,112(sp)
    d438:	d8c01b15 	stw	r3,108(sp)
    d43c:	a0fff40e 	bge	r20,r3,d410 <__alt_data_end+0xff80d410>
    d440:	1000041e 	bne	r2,zero,d454 <___vfiprintf_internal_r+0xe08>
    d444:	01400044 	movi	r5,1
    d448:	0009883a 	mov	r4,zero
    d44c:	d811883a 	mov	r8,sp
    d450:	003ff206 	br	d41c <__alt_data_end+0xff80d41c>
    d454:	d9402117 	ldw	r5,132(sp)
    d458:	d9801a04 	addi	r6,sp,104
    d45c:	e009883a 	mov	r4,fp
    d460:	000c5380 	call	c538 <__sprint_r.part.0>
    d464:	103fcd1e 	bne	r2,zero,d39c <__alt_data_end+0xff80d39c>
    d468:	d9001b17 	ldw	r4,108(sp)
    d46c:	d8801c17 	ldw	r2,112(sp)
    d470:	d811883a 	mov	r8,sp
    d474:	21400044 	addi	r5,r4,1
    d478:	003fe806 	br	d41c <__alt_data_end+0xff80d41c>
    d47c:	d9402117 	ldw	r5,132(sp)
    d480:	d9002017 	ldw	r4,128(sp)
    d484:	d9801a04 	addi	r6,sp,104
    d488:	d9c02b15 	stw	r7,172(sp)
    d48c:	db402a15 	stw	r13,168(sp)
    d490:	000c5380 	call	c538 <__sprint_r.part.0>
    d494:	d9c02b17 	ldw	r7,172(sp)
    d498:	db402a17 	ldw	r13,168(sp)
    d49c:	103fbf1e 	bne	r2,zero,d39c <__alt_data_end+0xff80d39c>
    d4a0:	d9401b17 	ldw	r5,108(sp)
    d4a4:	d8801c17 	ldw	r2,112(sp)
    d4a8:	d811883a 	mov	r8,sp
    d4ac:	29800044 	addi	r6,r5,1
    d4b0:	003dc406 	br	cbc4 <__alt_data_end+0xff80cbc4>
    d4b4:	1000d21e 	bne	r2,zero,d800 <___vfiprintf_internal_r+0x11b4>
    d4b8:	d8c01d87 	ldb	r3,118(sp)
    d4bc:	18009526 	beq	r3,zero,d714 <___vfiprintf_internal_r+0x10c8>
    d4c0:	00800044 	movi	r2,1
    d4c4:	d8c01d84 	addi	r3,sp,118
    d4c8:	1009883a 	mov	r4,r2
    d4cc:	d8c00015 	stw	r3,0(sp)
    d4d0:	d8800115 	stw	r2,4(sp)
    d4d4:	d811883a 	mov	r8,sp
    d4d8:	200b883a 	mov	r5,r4
    d4dc:	42000204 	addi	r8,r8,8
    d4e0:	21000044 	addi	r4,r4,1
    d4e4:	003d9706 	br	cb44 <__alt_data_end+0xff80cb44>
    d4e8:	d9001d04 	addi	r4,sp,116
    d4ec:	00800084 	movi	r2,2
    d4f0:	d9000015 	stw	r4,0(sp)
    d4f4:	d8800115 	stw	r2,4(sp)
    d4f8:	1809883a 	mov	r4,r3
    d4fc:	d811883a 	mov	r8,sp
    d500:	200b883a 	mov	r5,r4
    d504:	42000204 	addi	r8,r8,8
    d508:	21000044 	addi	r4,r4,1
    d50c:	003f4e06 	br	d248 <__alt_data_end+0xff80d248>
    d510:	d8001d85 	stb	zero,118(sp)
    d514:	48005016 	blt	r9,zero,d658 <___vfiprintf_internal_r+0x100c>
    d518:	00ffdfc4 	movi	r3,-129
    d51c:	94c4b03a 	or	r2,r18,r19
    d520:	a0e8703a 	and	r20,r20,r3
    d524:	103d4426 	beq	r2,zero,ca38 <__alt_data_end+0xff80ca38>
    d528:	0039883a 	mov	fp,zero
    d52c:	d9002617 	ldw	r4,152(sp)
    d530:	dd401a04 	addi	r21,sp,104
    d534:	908003cc 	andi	r2,r18,15
    d538:	9806973a 	slli	r3,r19,28
    d53c:	2085883a 	add	r2,r4,r2
    d540:	9024d13a 	srli	r18,r18,4
    d544:	10800003 	ldbu	r2,0(r2)
    d548:	9826d13a 	srli	r19,r19,4
    d54c:	ad7fffc4 	addi	r21,r21,-1
    d550:	1ca4b03a 	or	r18,r3,r18
    d554:	a8800005 	stb	r2,0(r21)
    d558:	94c4b03a 	or	r2,r18,r19
    d55c:	103ff51e 	bne	r2,zero,d534 <__alt_data_end+0xff80d534>
    d560:	003e5906 	br	cec8 <__alt_data_end+0xff80cec8>
    d564:	d9402117 	ldw	r5,132(sp)
    d568:	d9002017 	ldw	r4,128(sp)
    d56c:	d9801a04 	addi	r6,sp,104
    d570:	000c5380 	call	c538 <__sprint_r.part.0>
    d574:	103f891e 	bne	r2,zero,d39c <__alt_data_end+0xff80d39c>
    d578:	d8801c17 	ldw	r2,112(sp)
    d57c:	d811883a 	mov	r8,sp
    d580:	003f9506 	br	d3d8 <__alt_data_end+0xff80d3d8>
    d584:	d9402117 	ldw	r5,132(sp)
    d588:	d9002017 	ldw	r4,128(sp)
    d58c:	d9801a04 	addi	r6,sp,104
    d590:	000c5380 	call	c538 <__sprint_r.part.0>
    d594:	103f811e 	bne	r2,zero,d39c <__alt_data_end+0xff80d39c>
    d598:	d811883a 	mov	r8,sp
    d59c:	003ced06 	br	c954 <__alt_data_end+0xff80c954>
    d5a0:	d9402117 	ldw	r5,132(sp)
    d5a4:	d9002017 	ldw	r4,128(sp)
    d5a8:	d9801a04 	addi	r6,sp,104
    d5ac:	da402c15 	stw	r9,176(sp)
    d5b0:	db802a15 	stw	r14,168(sp)
    d5b4:	000c5380 	call	c538 <__sprint_r.part.0>
    d5b8:	da402c17 	ldw	r9,176(sp)
    d5bc:	db802a17 	ldw	r14,168(sp)
    d5c0:	103f761e 	bne	r2,zero,d39c <__alt_data_end+0xff80d39c>
    d5c4:	d9401b17 	ldw	r5,108(sp)
    d5c8:	d8801c17 	ldw	r2,112(sp)
    d5cc:	d811883a 	mov	r8,sp
    d5d0:	29000044 	addi	r4,r5,1
    d5d4:	003d5b06 	br	cb44 <__alt_data_end+0xff80cb44>
    d5d8:	d9402117 	ldw	r5,132(sp)
    d5dc:	d9002017 	ldw	r4,128(sp)
    d5e0:	d9801a04 	addi	r6,sp,104
    d5e4:	da402c15 	stw	r9,176(sp)
    d5e8:	000c5380 	call	c538 <__sprint_r.part.0>
    d5ec:	da402c17 	ldw	r9,176(sp)
    d5f0:	103f6a1e 	bne	r2,zero,d39c <__alt_data_end+0xff80d39c>
    d5f4:	d9401b17 	ldw	r5,108(sp)
    d5f8:	d8801c17 	ldw	r2,112(sp)
    d5fc:	d811883a 	mov	r8,sp
    d600:	29000044 	addi	r4,r5,1
    d604:	003f1006 	br	d248 <__alt_data_end+0xff80d248>
    d608:	1000c31e 	bne	r2,zero,d918 <___vfiprintf_internal_r+0x12cc>
    d60c:	01000044 	movi	r4,1
    d610:	000b883a 	mov	r5,zero
    d614:	d811883a 	mov	r8,sp
    d618:	003f0d06 	br	d250 <__alt_data_end+0xff80d250>
    d61c:	d9402117 	ldw	r5,132(sp)
    d620:	d9002017 	ldw	r4,128(sp)
    d624:	d9801a04 	addi	r6,sp,104
    d628:	000c5380 	call	c538 <__sprint_r.part.0>
    d62c:	103f5b1e 	bne	r2,zero,d39c <__alt_data_end+0xff80d39c>
    d630:	d9001b17 	ldw	r4,108(sp)
    d634:	d8801c17 	ldw	r2,112(sp)
    d638:	d811883a 	mov	r8,sp
    d63c:	21000044 	addi	r4,r4,1
    d640:	003d8006 	br	cc44 <__alt_data_end+0xff80cc44>
    d644:	01000074 	movhi	r4,1
    d648:	21046e04 	addi	r4,r4,4536
    d64c:	d9002615 	stw	r4,152(sp)
    d650:	d8c02215 	stw	r3,136(sp)
    d654:	1029883a 	mov	r20,r2
    d658:	94c4b03a 	or	r2,r18,r19
    d65c:	103fb21e 	bne	r2,zero,d528 <__alt_data_end+0xff80d528>
    d660:	0039883a 	mov	fp,zero
    d664:	00800084 	movi	r2,2
    d668:	003e6b06 	br	d018 <__alt_data_end+0xff80d018>
    d66c:	da802217 	ldw	r10,136(sp)
    d670:	d8001d85 	stb	zero,118(sp)
    d674:	0027883a 	mov	r19,zero
    d678:	50800104 	addi	r2,r10,4
    d67c:	54800017 	ldw	r18,0(r10)
    d680:	483e6016 	blt	r9,zero,d004 <__alt_data_end+0xff80d004>
    d684:	00ffdfc4 	movi	r3,-129
    d688:	d8802215 	stw	r2,136(sp)
    d68c:	a0e8703a 	and	r20,r20,r3
    d690:	0039883a 	mov	fp,zero
    d694:	903ebb26 	beq	r18,zero,d184 <__alt_data_end+0xff80d184>
    d698:	00800244 	movi	r2,9
    d69c:	14bdee36 	bltu	r2,r18,ce58 <__alt_data_end+0xff80ce58>
    d6a0:	003eba06 	br	d18c <__alt_data_end+0xff80d18c>
    d6a4:	00800c04 	movi	r2,48
    d6a8:	d8c01d45 	stb	r3,117(sp)
    d6ac:	d8801d05 	stb	r2,116(sp)
    d6b0:	d8001d85 	stb	zero,118(sp)
    d6b4:	a0c00094 	ori	r3,r20,2
    d6b8:	4800a916 	blt	r9,zero,d960 <___vfiprintf_internal_r+0x1314>
    d6bc:	00bfdfc4 	movi	r2,-129
    d6c0:	a096703a 	and	r11,r20,r2
    d6c4:	5d000094 	ori	r20,r11,2
    d6c8:	0039883a 	mov	fp,zero
    d6cc:	003f9706 	br	d52c <__alt_data_end+0xff80d52c>
    d6d0:	8025883a 	mov	r18,r16
    d6d4:	003c2e06 	br	c790 <__alt_data_end+0xff80c790>
    d6d8:	00800074 	movhi	r2,1
    d6dc:	10846e04 	addi	r2,r2,4536
    d6e0:	0039883a 	mov	fp,zero
    d6e4:	d8802615 	stw	r2,152(sp)
    d6e8:	003f9006 	br	d52c <__alt_data_end+0xff80d52c>
    d6ec:	04a5c83a 	sub	r18,zero,r18
    d6f0:	07000b44 	movi	fp,45
    d6f4:	9004c03a 	cmpne	r2,r18,zero
    d6f8:	04e7c83a 	sub	r19,zero,r19
    d6fc:	df001d85 	stb	fp,118(sp)
    d700:	98a7c83a 	sub	r19,r19,r2
    d704:	48009f16 	blt	r9,zero,d984 <___vfiprintf_internal_r+0x1338>
    d708:	00bfdfc4 	movi	r2,-129
    d70c:	a0a8703a 	and	r20,r20,r2
    d710:	003dd006 	br	ce54 <__alt_data_end+0xff80ce54>
    d714:	70004c26 	beq	r14,zero,d848 <___vfiprintf_internal_r+0x11fc>
    d718:	00800084 	movi	r2,2
    d71c:	d8c01d04 	addi	r3,sp,116
    d720:	d8c00015 	stw	r3,0(sp)
    d724:	d8800115 	stw	r2,4(sp)
    d728:	01000044 	movi	r4,1
    d72c:	d811883a 	mov	r8,sp
    d730:	003f7306 	br	d500 <__alt_data_end+0xff80d500>
    d734:	a080100c 	andi	r2,r20,64
    d738:	da802217 	ldw	r10,136(sp)
    d73c:	103e0626 	beq	r2,zero,cf58 <__alt_data_end+0xff80cf58>
    d740:	5480000f 	ldh	r18,0(r10)
    d744:	52800104 	addi	r10,r10,4
    d748:	da802215 	stw	r10,136(sp)
    d74c:	9027d7fa 	srai	r19,r18,31
    d750:	9805883a 	mov	r2,r19
    d754:	003db806 	br	ce38 <__alt_data_end+0xff80ce38>
    d758:	a080040c 	andi	r2,r20,16
    d75c:	1000091e 	bne	r2,zero,d784 <___vfiprintf_internal_r+0x1138>
    d760:	a2c0100c 	andi	r11,r20,64
    d764:	58000726 	beq	r11,zero,d784 <___vfiprintf_internal_r+0x1138>
    d768:	da802217 	ldw	r10,136(sp)
    d76c:	50800017 	ldw	r2,0(r10)
    d770:	52800104 	addi	r10,r10,4
    d774:	da802215 	stw	r10,136(sp)
    d778:	da802317 	ldw	r10,140(sp)
    d77c:	1280000d 	sth	r10,0(r2)
    d780:	003be706 	br	c720 <__alt_data_end+0xff80c720>
    d784:	da802217 	ldw	r10,136(sp)
    d788:	50800017 	ldw	r2,0(r10)
    d78c:	52800104 	addi	r10,r10,4
    d790:	da802215 	stw	r10,136(sp)
    d794:	da802317 	ldw	r10,140(sp)
    d798:	12800015 	stw	r10,0(r2)
    d79c:	003be006 	br	c720 <__alt_data_end+0xff80c720>
    d7a0:	a080100c 	andi	r2,r20,64
    d7a4:	da802217 	ldw	r10,136(sp)
    d7a8:	10003026 	beq	r2,zero,d86c <___vfiprintf_internal_r+0x1220>
    d7ac:	5480000b 	ldhu	r18,0(r10)
    d7b0:	52800104 	addi	r10,r10,4
    d7b4:	0027883a 	mov	r19,zero
    d7b8:	da802215 	stw	r10,136(sp)
    d7bc:	003d8006 	br	cdc0 <__alt_data_end+0xff80cdc0>
    d7c0:	80c00007 	ldb	r3,0(r16)
    d7c4:	003c0006 	br	c7c8 <__alt_data_end+0xff80c7c8>
    d7c8:	a080100c 	andi	r2,r20,64
    d7cc:	d8001d85 	stb	zero,118(sp)
    d7d0:	da802217 	ldw	r10,136(sp)
    d7d4:	1000201e 	bne	r2,zero,d858 <___vfiprintf_internal_r+0x120c>
    d7d8:	50800104 	addi	r2,r10,4
    d7dc:	54800017 	ldw	r18,0(r10)
    d7e0:	0027883a 	mov	r19,zero
    d7e4:	483def0e 	bge	r9,zero,cfa4 <__alt_data_end+0xff80cfa4>
    d7e8:	94c6b03a 	or	r3,r18,r19
    d7ec:	d8802215 	stw	r2,136(sp)
    d7f0:	183d4e1e 	bne	r3,zero,cd2c <__alt_data_end+0xff80cd2c>
    d7f4:	0039883a 	mov	fp,zero
    d7f8:	0005883a 	mov	r2,zero
    d7fc:	003e0606 	br	d018 <__alt_data_end+0xff80d018>
    d800:	d9402117 	ldw	r5,132(sp)
    d804:	d9002017 	ldw	r4,128(sp)
    d808:	d9801a04 	addi	r6,sp,104
    d80c:	da402c15 	stw	r9,176(sp)
    d810:	db802a15 	stw	r14,168(sp)
    d814:	000c5380 	call	c538 <__sprint_r.part.0>
    d818:	da402c17 	ldw	r9,176(sp)
    d81c:	db802a17 	ldw	r14,168(sp)
    d820:	103ede1e 	bne	r2,zero,d39c <__alt_data_end+0xff80d39c>
    d824:	d9401b17 	ldw	r5,108(sp)
    d828:	d8801c17 	ldw	r2,112(sp)
    d82c:	d811883a 	mov	r8,sp
    d830:	29000044 	addi	r4,r5,1
    d834:	003e7406 	br	d208 <__alt_data_end+0xff80d208>
    d838:	00bfffc4 	movi	r2,-1
    d83c:	003c5806 	br	c9a0 <__alt_data_end+0xff80c9a0>
    d840:	d811883a 	mov	r8,sp
    d844:	003ee806 	br	d3e8 <__alt_data_end+0xff80d3e8>
    d848:	000b883a 	mov	r5,zero
    d84c:	01000044 	movi	r4,1
    d850:	d811883a 	mov	r8,sp
    d854:	003e7c06 	br	d248 <__alt_data_end+0xff80d248>
    d858:	50800104 	addi	r2,r10,4
    d85c:	5480000b 	ldhu	r18,0(r10)
    d860:	0027883a 	mov	r19,zero
    d864:	483dcf0e 	bge	r9,zero,cfa4 <__alt_data_end+0xff80cfa4>
    d868:	003fdf06 	br	d7e8 <__alt_data_end+0xff80d7e8>
    d86c:	54800017 	ldw	r18,0(r10)
    d870:	52800104 	addi	r10,r10,4
    d874:	0027883a 	mov	r19,zero
    d878:	da802215 	stw	r10,136(sp)
    d87c:	003d5006 	br	cdc0 <__alt_data_end+0xff80cdc0>
    d880:	50800104 	addi	r2,r10,4
    d884:	5480000b 	ldhu	r18,0(r10)
    d888:	0027883a 	mov	r19,zero
    d88c:	483f7d0e 	bge	r9,zero,d684 <__alt_data_end+0xff80d684>
    d890:	003ddc06 	br	d004 <__alt_data_end+0xff80d004>
    d894:	d8c02215 	stw	r3,136(sp)
    d898:	0039883a 	mov	fp,zero
    d89c:	003ddb06 	br	d00c <__alt_data_end+0xff80d00c>
    d8a0:	02800074 	movhi	r10,1
    d8a4:	5284cd04 	addi	r10,r10,4916
    d8a8:	da802415 	stw	r10,144(sp)
    d8ac:	003e8306 	br	d2bc <__alt_data_end+0xff80d2bc>
    d8b0:	d8801c17 	ldw	r2,112(sp)
    d8b4:	dd002117 	ldw	r20,132(sp)
    d8b8:	103eb926 	beq	r2,zero,d3a0 <__alt_data_end+0xff80d3a0>
    d8bc:	d9002017 	ldw	r4,128(sp)
    d8c0:	d9801a04 	addi	r6,sp,104
    d8c4:	a00b883a 	mov	r5,r20
    d8c8:	000c5380 	call	c538 <__sprint_r.part.0>
    d8cc:	003eb406 	br	d3a0 <__alt_data_end+0xff80d3a0>
    d8d0:	80c00043 	ldbu	r3,1(r16)
    d8d4:	a5000814 	ori	r20,r20,32
    d8d8:	84000044 	addi	r16,r16,1
    d8dc:	18c03fcc 	andi	r3,r3,255
    d8e0:	18c0201c 	xori	r3,r3,128
    d8e4:	18ffe004 	addi	r3,r3,-128
    d8e8:	003bb706 	br	c7c8 <__alt_data_end+0xff80c7c8>
    d8ec:	a809883a 	mov	r4,r21
    d8f0:	d8c02a15 	stw	r3,168(sp)
    d8f4:	da002b15 	stw	r8,172(sp)
    d8f8:	000515c0 	call	515c <strlen>
    d8fc:	d8c02a17 	ldw	r3,168(sp)
    d900:	1027883a 	mov	r19,r2
    d904:	df001d83 	ldbu	fp,118(sp)
    d908:	d8c02215 	stw	r3,136(sp)
    d90c:	0013883a 	mov	r9,zero
    d910:	da002b17 	ldw	r8,172(sp)
    d914:	003c4d06 	br	ca4c <__alt_data_end+0xff80ca4c>
    d918:	d9402117 	ldw	r5,132(sp)
    d91c:	d9002017 	ldw	r4,128(sp)
    d920:	d9801a04 	addi	r6,sp,104
    d924:	da402c15 	stw	r9,176(sp)
    d928:	000c5380 	call	c538 <__sprint_r.part.0>
    d92c:	da402c17 	ldw	r9,176(sp)
    d930:	103e9a1e 	bne	r2,zero,d39c <__alt_data_end+0xff80d39c>
    d934:	d9401b17 	ldw	r5,108(sp)
    d938:	d8801c17 	ldw	r2,112(sp)
    d93c:	d811883a 	mov	r8,sp
    d940:	29000044 	addi	r4,r5,1
    d944:	003e4206 	br	d250 <__alt_data_end+0xff80d250>
    d948:	d9401b17 	ldw	r5,108(sp)
    d94c:	01000074 	movhi	r4,1
    d950:	2104d104 	addi	r4,r4,4932
    d954:	d9002415 	stw	r4,144(sp)
    d958:	29400044 	addi	r5,r5,1
    d95c:	003c6d06 	br	cb14 <__alt_data_end+0xff80cb14>
    d960:	0039883a 	mov	fp,zero
    d964:	00800084 	movi	r2,2
    d968:	10803fcc 	andi	r2,r2,255
    d96c:	01000044 	movi	r4,1
    d970:	11001e26 	beq	r2,r4,d9ec <___vfiprintf_internal_r+0x13a0>
    d974:	01000084 	movi	r4,2
    d978:	11001e1e 	bne	r2,r4,d9f4 <___vfiprintf_internal_r+0x13a8>
    d97c:	1829883a 	mov	r20,r3
    d980:	003eea06 	br	d52c <__alt_data_end+0xff80d52c>
    d984:	a007883a 	mov	r3,r20
    d988:	00800044 	movi	r2,1
    d98c:	003ff606 	br	d968 <__alt_data_end+0xff80d968>
    d990:	00800184 	movi	r2,6
    d994:	1240012e 	bgeu	r2,r9,d99c <___vfiprintf_internal_r+0x1350>
    d998:	1013883a 	mov	r9,r2
    d99c:	4827883a 	mov	r19,r9
    d9a0:	4825883a 	mov	r18,r9
    d9a4:	48001516 	blt	r9,zero,d9fc <___vfiprintf_internal_r+0x13b0>
    d9a8:	05400074 	movhi	r21,1
    d9ac:	d8c02215 	stw	r3,136(sp)
    d9b0:	ad447304 	addi	r21,r21,4556
    d9b4:	003d1406 	br	ce08 <__alt_data_end+0xff80ce08>
    d9b8:	02800074 	movhi	r10,1
    d9bc:	5284cd04 	addi	r10,r10,4916
    d9c0:	da802415 	stw	r10,144(sp)
    d9c4:	200d883a 	mov	r6,r4
    d9c8:	003c9106 	br	cc10 <__alt_data_end+0xff80cc10>
    d9cc:	5021883a 	mov	r16,r10
    d9d0:	0013883a 	mov	r9,zero
    d9d4:	003b7d06 	br	c7cc <__alt_data_end+0xff80c7cc>
    d9d8:	4827883a 	mov	r19,r9
    d9dc:	df001d83 	ldbu	fp,118(sp)
    d9e0:	d8c02215 	stw	r3,136(sp)
    d9e4:	0013883a 	mov	r9,zero
    d9e8:	003c1806 	br	ca4c <__alt_data_end+0xff80ca4c>
    d9ec:	1829883a 	mov	r20,r3
    d9f0:	003d1806 	br	ce54 <__alt_data_end+0xff80ce54>
    d9f4:	1829883a 	mov	r20,r3
    d9f8:	003ccd06 	br	cd30 <__alt_data_end+0xff80cd30>
    d9fc:	0025883a 	mov	r18,zero
    da00:	003fe906 	br	d9a8 <__alt_data_end+0xff80d9a8>
    da04:	d8802217 	ldw	r2,136(sp)
    da08:	80c00043 	ldbu	r3,1(r16)
    da0c:	5021883a 	mov	r16,r10
    da10:	12400017 	ldw	r9,0(r2)
    da14:	10800104 	addi	r2,r2,4
    da18:	d8802215 	stw	r2,136(sp)
    da1c:	483faf0e 	bge	r9,zero,d8dc <__alt_data_end+0xff80d8dc>
    da20:	18c03fcc 	andi	r3,r3,255
    da24:	18c0201c 	xori	r3,r3,128
    da28:	027fffc4 	movi	r9,-1
    da2c:	18ffe004 	addi	r3,r3,-128
    da30:	003b6506 	br	c7c8 <__alt_data_end+0xff80c7c8>
    da34:	d9c01d85 	stb	r7,118(sp)
    da38:	003ca006 	br	ccbc <__alt_data_end+0xff80ccbc>
    da3c:	d9c01d85 	stb	r7,118(sp)
    da40:	003cad06 	br	ccf8 <__alt_data_end+0xff80ccf8>
    da44:	d9c01d85 	stb	r7,118(sp)
    da48:	003d7d06 	br	d040 <__alt_data_end+0xff80d040>
    da4c:	d9c01d85 	stb	r7,118(sp)
    da50:	003d5f06 	br	cfd0 <__alt_data_end+0xff80cfd0>
    da54:	a080004c 	andi	r2,r20,1
    da58:	0039883a 	mov	fp,zero
    da5c:	10000526 	beq	r2,zero,da74 <___vfiprintf_internal_r+0x1428>
    da60:	00800c04 	movi	r2,48
    da64:	d88019c5 	stb	r2,103(sp)
    da68:	dcc02717 	ldw	r19,156(sp)
    da6c:	dd4019c4 	addi	r21,sp,103
    da70:	003bf606 	br	ca4c <__alt_data_end+0xff80ca4c>
    da74:	0027883a 	mov	r19,zero
    da78:	dd401a04 	addi	r21,sp,104
    da7c:	003bf306 	br	ca4c <__alt_data_end+0xff80ca4c>
    da80:	d9c01d85 	stb	r7,118(sp)
    da84:	003dc806 	br	d1a8 <__alt_data_end+0xff80d1a8>
    da88:	d9c01d85 	stb	r7,118(sp)
    da8c:	003d3a06 	br	cf78 <__alt_data_end+0xff80cf78>
    da90:	d9c01d85 	stb	r7,118(sp)
    da94:	003d2a06 	br	cf40 <__alt_data_end+0xff80cf40>
    da98:	d9c01d85 	stb	r7,118(sp)
    da9c:	003cde06 	br	ce18 <__alt_data_end+0xff80ce18>
    daa0:	d9c01d85 	stb	r7,118(sp)
    daa4:	003cbc06 	br	cd98 <__alt_data_end+0xff80cd98>

0000daa8 <__vfiprintf_internal>:
    daa8:	00800074 	movhi	r2,1
    daac:	108b4b04 	addi	r2,r2,11564
    dab0:	300f883a 	mov	r7,r6
    dab4:	280d883a 	mov	r6,r5
    dab8:	200b883a 	mov	r5,r4
    dabc:	11000017 	ldw	r4,0(r2)
    dac0:	000c64c1 	jmpi	c64c <___vfiprintf_internal_r>

0000dac4 <__sbprintf>:
    dac4:	2880030b 	ldhu	r2,12(r5)
    dac8:	2ac01917 	ldw	r11,100(r5)
    dacc:	2a80038b 	ldhu	r10,14(r5)
    dad0:	2a400717 	ldw	r9,28(r5)
    dad4:	2a000917 	ldw	r8,36(r5)
    dad8:	defee204 	addi	sp,sp,-1144
    dadc:	00c10004 	movi	r3,1024
    dae0:	dc011a15 	stw	r16,1128(sp)
    dae4:	10bfff4c 	andi	r2,r2,65533
    dae8:	2821883a 	mov	r16,r5
    daec:	d8cb883a 	add	r5,sp,r3
    daf0:	dc811c15 	stw	r18,1136(sp)
    daf4:	dc411b15 	stw	r17,1132(sp)
    daf8:	dfc11d15 	stw	ra,1140(sp)
    dafc:	2025883a 	mov	r18,r4
    db00:	d881030d 	sth	r2,1036(sp)
    db04:	dac11915 	stw	r11,1124(sp)
    db08:	da81038d 	sth	r10,1038(sp)
    db0c:	da410715 	stw	r9,1052(sp)
    db10:	da010915 	stw	r8,1060(sp)
    db14:	dec10015 	stw	sp,1024(sp)
    db18:	dec10415 	stw	sp,1040(sp)
    db1c:	d8c10215 	stw	r3,1032(sp)
    db20:	d8c10515 	stw	r3,1044(sp)
    db24:	d8010615 	stw	zero,1048(sp)
    db28:	000c64c0 	call	c64c <___vfiprintf_internal_r>
    db2c:	1023883a 	mov	r17,r2
    db30:	10000416 	blt	r2,zero,db44 <__sbprintf+0x80>
    db34:	d9410004 	addi	r5,sp,1024
    db38:	9009883a 	mov	r4,r18
    db3c:	00090bc0 	call	90bc <_fflush_r>
    db40:	10000d1e 	bne	r2,zero,db78 <__sbprintf+0xb4>
    db44:	d881030b 	ldhu	r2,1036(sp)
    db48:	1080100c 	andi	r2,r2,64
    db4c:	10000326 	beq	r2,zero,db5c <__sbprintf+0x98>
    db50:	8080030b 	ldhu	r2,12(r16)
    db54:	10801014 	ori	r2,r2,64
    db58:	8080030d 	sth	r2,12(r16)
    db5c:	8805883a 	mov	r2,r17
    db60:	dfc11d17 	ldw	ra,1140(sp)
    db64:	dc811c17 	ldw	r18,1136(sp)
    db68:	dc411b17 	ldw	r17,1132(sp)
    db6c:	dc011a17 	ldw	r16,1128(sp)
    db70:	dec11e04 	addi	sp,sp,1144
    db74:	f800283a 	ret
    db78:	047fffc4 	movi	r17,-1
    db7c:	003ff106 	br	db44 <__alt_data_end+0xff80db44>

0000db80 <_write_r>:
    db80:	defffd04 	addi	sp,sp,-12
    db84:	2805883a 	mov	r2,r5
    db88:	dc000015 	stw	r16,0(sp)
    db8c:	04000074 	movhi	r16,1
    db90:	dc400115 	stw	r17,4(sp)
    db94:	300b883a 	mov	r5,r6
    db98:	8411e404 	addi	r16,r16,18320
    db9c:	2023883a 	mov	r17,r4
    dba0:	380d883a 	mov	r6,r7
    dba4:	1009883a 	mov	r4,r2
    dba8:	dfc00215 	stw	ra,8(sp)
    dbac:	80000015 	stw	zero,0(r16)
    dbb0:	000f3cc0 	call	f3cc <write>
    dbb4:	00ffffc4 	movi	r3,-1
    dbb8:	10c00526 	beq	r2,r3,dbd0 <_write_r+0x50>
    dbbc:	dfc00217 	ldw	ra,8(sp)
    dbc0:	dc400117 	ldw	r17,4(sp)
    dbc4:	dc000017 	ldw	r16,0(sp)
    dbc8:	dec00304 	addi	sp,sp,12
    dbcc:	f800283a 	ret
    dbd0:	80c00017 	ldw	r3,0(r16)
    dbd4:	183ff926 	beq	r3,zero,dbbc <__alt_data_end+0xff80dbbc>
    dbd8:	88c00015 	stw	r3,0(r17)
    dbdc:	003ff706 	br	dbbc <__alt_data_end+0xff80dbbc>

0000dbe0 <_close_r>:
    dbe0:	defffd04 	addi	sp,sp,-12
    dbe4:	dc000015 	stw	r16,0(sp)
    dbe8:	04000074 	movhi	r16,1
    dbec:	dc400115 	stw	r17,4(sp)
    dbf0:	8411e404 	addi	r16,r16,18320
    dbf4:	2023883a 	mov	r17,r4
    dbf8:	2809883a 	mov	r4,r5
    dbfc:	dfc00215 	stw	ra,8(sp)
    dc00:	80000015 	stw	zero,0(r16)
    dc04:	000f1140 	call	f114 <close>
    dc08:	00ffffc4 	movi	r3,-1
    dc0c:	10c00526 	beq	r2,r3,dc24 <_close_r+0x44>
    dc10:	dfc00217 	ldw	ra,8(sp)
    dc14:	dc400117 	ldw	r17,4(sp)
    dc18:	dc000017 	ldw	r16,0(sp)
    dc1c:	dec00304 	addi	sp,sp,12
    dc20:	f800283a 	ret
    dc24:	80c00017 	ldw	r3,0(r16)
    dc28:	183ff926 	beq	r3,zero,dc10 <__alt_data_end+0xff80dc10>
    dc2c:	88c00015 	stw	r3,0(r17)
    dc30:	003ff706 	br	dc10 <__alt_data_end+0xff80dc10>

0000dc34 <_calloc_r>:
    dc34:	298b383a 	mul	r5,r5,r6
    dc38:	defffe04 	addi	sp,sp,-8
    dc3c:	dfc00115 	stw	ra,4(sp)
    dc40:	dc000015 	stw	r16,0(sp)
    dc44:	000a1f80 	call	a1f8 <_malloc_r>
    dc48:	10002926 	beq	r2,zero,dcf0 <_calloc_r+0xbc>
    dc4c:	11bfff17 	ldw	r6,-4(r2)
    dc50:	1021883a 	mov	r16,r2
    dc54:	00bfff04 	movi	r2,-4
    dc58:	308c703a 	and	r6,r6,r2
    dc5c:	00c00904 	movi	r3,36
    dc60:	308d883a 	add	r6,r6,r2
    dc64:	19801636 	bltu	r3,r6,dcc0 <_calloc_r+0x8c>
    dc68:	008004c4 	movi	r2,19
    dc6c:	11800b2e 	bgeu	r2,r6,dc9c <_calloc_r+0x68>
    dc70:	80000015 	stw	zero,0(r16)
    dc74:	80000115 	stw	zero,4(r16)
    dc78:	008006c4 	movi	r2,27
    dc7c:	11801a2e 	bgeu	r2,r6,dce8 <_calloc_r+0xb4>
    dc80:	80000215 	stw	zero,8(r16)
    dc84:	80000315 	stw	zero,12(r16)
    dc88:	30c0151e 	bne	r6,r3,dce0 <_calloc_r+0xac>
    dc8c:	80000415 	stw	zero,16(r16)
    dc90:	80800604 	addi	r2,r16,24
    dc94:	80000515 	stw	zero,20(r16)
    dc98:	00000106 	br	dca0 <_calloc_r+0x6c>
    dc9c:	8005883a 	mov	r2,r16
    dca0:	10000015 	stw	zero,0(r2)
    dca4:	10000115 	stw	zero,4(r2)
    dca8:	10000215 	stw	zero,8(r2)
    dcac:	8005883a 	mov	r2,r16
    dcb0:	dfc00117 	ldw	ra,4(sp)
    dcb4:	dc000017 	ldw	r16,0(sp)
    dcb8:	dec00204 	addi	sp,sp,8
    dcbc:	f800283a 	ret
    dcc0:	000b883a 	mov	r5,zero
    dcc4:	8009883a 	mov	r4,r16
    dcc8:	000ac440 	call	ac44 <memset>
    dccc:	8005883a 	mov	r2,r16
    dcd0:	dfc00117 	ldw	ra,4(sp)
    dcd4:	dc000017 	ldw	r16,0(sp)
    dcd8:	dec00204 	addi	sp,sp,8
    dcdc:	f800283a 	ret
    dce0:	80800404 	addi	r2,r16,16
    dce4:	003fee06 	br	dca0 <__alt_data_end+0xff80dca0>
    dce8:	80800204 	addi	r2,r16,8
    dcec:	003fec06 	br	dca0 <__alt_data_end+0xff80dca0>
    dcf0:	0005883a 	mov	r2,zero
    dcf4:	003fee06 	br	dcb0 <__alt_data_end+0xff80dcb0>

0000dcf8 <_fclose_r>:
    dcf8:	28003926 	beq	r5,zero,dde0 <_fclose_r+0xe8>
    dcfc:	defffc04 	addi	sp,sp,-16
    dd00:	dc400115 	stw	r17,4(sp)
    dd04:	dc000015 	stw	r16,0(sp)
    dd08:	dfc00315 	stw	ra,12(sp)
    dd0c:	dc800215 	stw	r18,8(sp)
    dd10:	2023883a 	mov	r17,r4
    dd14:	2821883a 	mov	r16,r5
    dd18:	20000226 	beq	r4,zero,dd24 <_fclose_r+0x2c>
    dd1c:	20800e17 	ldw	r2,56(r4)
    dd20:	10002726 	beq	r2,zero,ddc0 <_fclose_r+0xc8>
    dd24:	8080030f 	ldh	r2,12(r16)
    dd28:	1000071e 	bne	r2,zero,dd48 <_fclose_r+0x50>
    dd2c:	0005883a 	mov	r2,zero
    dd30:	dfc00317 	ldw	ra,12(sp)
    dd34:	dc800217 	ldw	r18,8(sp)
    dd38:	dc400117 	ldw	r17,4(sp)
    dd3c:	dc000017 	ldw	r16,0(sp)
    dd40:	dec00404 	addi	sp,sp,16
    dd44:	f800283a 	ret
    dd48:	800b883a 	mov	r5,r16
    dd4c:	8809883a 	mov	r4,r17
    dd50:	0008ea00 	call	8ea0 <__sflush_r>
    dd54:	1025883a 	mov	r18,r2
    dd58:	80800b17 	ldw	r2,44(r16)
    dd5c:	10000426 	beq	r2,zero,dd70 <_fclose_r+0x78>
    dd60:	81400717 	ldw	r5,28(r16)
    dd64:	8809883a 	mov	r4,r17
    dd68:	103ee83a 	callr	r2
    dd6c:	10001616 	blt	r2,zero,ddc8 <_fclose_r+0xd0>
    dd70:	8080030b 	ldhu	r2,12(r16)
    dd74:	1080200c 	andi	r2,r2,128
    dd78:	1000151e 	bne	r2,zero,ddd0 <_fclose_r+0xd8>
    dd7c:	81400c17 	ldw	r5,48(r16)
    dd80:	28000526 	beq	r5,zero,dd98 <_fclose_r+0xa0>
    dd84:	80801004 	addi	r2,r16,64
    dd88:	28800226 	beq	r5,r2,dd94 <_fclose_r+0x9c>
    dd8c:	8809883a 	mov	r4,r17
    dd90:	000960c0 	call	960c <_free_r>
    dd94:	80000c15 	stw	zero,48(r16)
    dd98:	81401117 	ldw	r5,68(r16)
    dd9c:	28000326 	beq	r5,zero,ddac <_fclose_r+0xb4>
    dda0:	8809883a 	mov	r4,r17
    dda4:	000960c0 	call	960c <_free_r>
    dda8:	80001115 	stw	zero,68(r16)
    ddac:	00094a80 	call	94a8 <__sfp_lock_acquire>
    ddb0:	8000030d 	sth	zero,12(r16)
    ddb4:	00094ac0 	call	94ac <__sfp_lock_release>
    ddb8:	9005883a 	mov	r2,r18
    ddbc:	003fdc06 	br	dd30 <__alt_data_end+0xff80dd30>
    ddc0:	00094980 	call	9498 <__sinit>
    ddc4:	003fd706 	br	dd24 <__alt_data_end+0xff80dd24>
    ddc8:	04bfffc4 	movi	r18,-1
    ddcc:	003fe806 	br	dd70 <__alt_data_end+0xff80dd70>
    ddd0:	81400417 	ldw	r5,16(r16)
    ddd4:	8809883a 	mov	r4,r17
    ddd8:	000960c0 	call	960c <_free_r>
    dddc:	003fe706 	br	dd7c <__alt_data_end+0xff80dd7c>
    dde0:	0005883a 	mov	r2,zero
    dde4:	f800283a 	ret

0000dde8 <fclose>:
    dde8:	00800074 	movhi	r2,1
    ddec:	108b4b04 	addi	r2,r2,11564
    ddf0:	200b883a 	mov	r5,r4
    ddf4:	11000017 	ldw	r4,0(r2)
    ddf8:	000dcf81 	jmpi	dcf8 <_fclose_r>

0000ddfc <__fputwc>:
    ddfc:	defff804 	addi	sp,sp,-32
    de00:	dcc00415 	stw	r19,16(sp)
    de04:	dc800315 	stw	r18,12(sp)
    de08:	dc000115 	stw	r16,4(sp)
    de0c:	dfc00715 	stw	ra,28(sp)
    de10:	dd400615 	stw	r21,24(sp)
    de14:	dd000515 	stw	r20,20(sp)
    de18:	dc400215 	stw	r17,8(sp)
    de1c:	2027883a 	mov	r19,r4
    de20:	2825883a 	mov	r18,r5
    de24:	3021883a 	mov	r16,r6
    de28:	0009fe80 	call	9fe8 <__locale_mb_cur_max>
    de2c:	00c00044 	movi	r3,1
    de30:	10c03e26 	beq	r2,r3,df2c <__fputwc+0x130>
    de34:	81c01704 	addi	r7,r16,92
    de38:	900d883a 	mov	r6,r18
    de3c:	d80b883a 	mov	r5,sp
    de40:	9809883a 	mov	r4,r19
    de44:	000e2cc0 	call	e2cc <_wcrtomb_r>
    de48:	1029883a 	mov	r20,r2
    de4c:	00bfffc4 	movi	r2,-1
    de50:	a0802026 	beq	r20,r2,ded4 <__fputwc+0xd8>
    de54:	d9400003 	ldbu	r5,0(sp)
    de58:	a0001c26 	beq	r20,zero,decc <__fputwc+0xd0>
    de5c:	0023883a 	mov	r17,zero
    de60:	05400284 	movi	r21,10
    de64:	00000906 	br	de8c <__fputwc+0x90>
    de68:	80800017 	ldw	r2,0(r16)
    de6c:	11400005 	stb	r5,0(r2)
    de70:	80c00017 	ldw	r3,0(r16)
    de74:	18c00044 	addi	r3,r3,1
    de78:	80c00015 	stw	r3,0(r16)
    de7c:	8c400044 	addi	r17,r17,1
    de80:	dc45883a 	add	r2,sp,r17
    de84:	8d00112e 	bgeu	r17,r20,decc <__fputwc+0xd0>
    de88:	11400003 	ldbu	r5,0(r2)
    de8c:	80c00217 	ldw	r3,8(r16)
    de90:	18ffffc4 	addi	r3,r3,-1
    de94:	80c00215 	stw	r3,8(r16)
    de98:	183ff30e 	bge	r3,zero,de68 <__alt_data_end+0xff80de68>
    de9c:	80800617 	ldw	r2,24(r16)
    dea0:	18801916 	blt	r3,r2,df08 <__fputwc+0x10c>
    dea4:	80800017 	ldw	r2,0(r16)
    dea8:	11400005 	stb	r5,0(r2)
    deac:	80800017 	ldw	r2,0(r16)
    deb0:	10c00003 	ldbu	r3,0(r2)
    deb4:	10800044 	addi	r2,r2,1
    deb8:	1d402326 	beq	r3,r21,df48 <__fputwc+0x14c>
    debc:	80800015 	stw	r2,0(r16)
    dec0:	8c400044 	addi	r17,r17,1
    dec4:	dc45883a 	add	r2,sp,r17
    dec8:	8d3fef36 	bltu	r17,r20,de88 <__alt_data_end+0xff80de88>
    decc:	9005883a 	mov	r2,r18
    ded0:	00000406 	br	dee4 <__fputwc+0xe8>
    ded4:	80c0030b 	ldhu	r3,12(r16)
    ded8:	a005883a 	mov	r2,r20
    dedc:	18c01014 	ori	r3,r3,64
    dee0:	80c0030d 	sth	r3,12(r16)
    dee4:	dfc00717 	ldw	ra,28(sp)
    dee8:	dd400617 	ldw	r21,24(sp)
    deec:	dd000517 	ldw	r20,20(sp)
    def0:	dcc00417 	ldw	r19,16(sp)
    def4:	dc800317 	ldw	r18,12(sp)
    def8:	dc400217 	ldw	r17,8(sp)
    defc:	dc000117 	ldw	r16,4(sp)
    df00:	dec00804 	addi	sp,sp,32
    df04:	f800283a 	ret
    df08:	800d883a 	mov	r6,r16
    df0c:	29403fcc 	andi	r5,r5,255
    df10:	9809883a 	mov	r4,r19
    df14:	000e1740 	call	e174 <__swbuf_r>
    df18:	10bfffe0 	cmpeqi	r2,r2,-1
    df1c:	10803fcc 	andi	r2,r2,255
    df20:	103fd626 	beq	r2,zero,de7c <__alt_data_end+0xff80de7c>
    df24:	00bfffc4 	movi	r2,-1
    df28:	003fee06 	br	dee4 <__alt_data_end+0xff80dee4>
    df2c:	90ffffc4 	addi	r3,r18,-1
    df30:	01003f84 	movi	r4,254
    df34:	20ffbf36 	bltu	r4,r3,de34 <__alt_data_end+0xff80de34>
    df38:	900b883a 	mov	r5,r18
    df3c:	dc800005 	stb	r18,0(sp)
    df40:	1029883a 	mov	r20,r2
    df44:	003fc506 	br	de5c <__alt_data_end+0xff80de5c>
    df48:	800d883a 	mov	r6,r16
    df4c:	a80b883a 	mov	r5,r21
    df50:	9809883a 	mov	r4,r19
    df54:	000e1740 	call	e174 <__swbuf_r>
    df58:	10bfffe0 	cmpeqi	r2,r2,-1
    df5c:	003fef06 	br	df1c <__alt_data_end+0xff80df1c>

0000df60 <_fputwc_r>:
    df60:	3080030b 	ldhu	r2,12(r6)
    df64:	10c8000c 	andi	r3,r2,8192
    df68:	1800051e 	bne	r3,zero,df80 <_fputwc_r+0x20>
    df6c:	30c01917 	ldw	r3,100(r6)
    df70:	10880014 	ori	r2,r2,8192
    df74:	3080030d 	sth	r2,12(r6)
    df78:	18880014 	ori	r2,r3,8192
    df7c:	30801915 	stw	r2,100(r6)
    df80:	000ddfc1 	jmpi	ddfc <__fputwc>

0000df84 <fputwc>:
    df84:	00800074 	movhi	r2,1
    df88:	defffc04 	addi	sp,sp,-16
    df8c:	108b4b04 	addi	r2,r2,11564
    df90:	dc000115 	stw	r16,4(sp)
    df94:	14000017 	ldw	r16,0(r2)
    df98:	dc400215 	stw	r17,8(sp)
    df9c:	dfc00315 	stw	ra,12(sp)
    dfa0:	2023883a 	mov	r17,r4
    dfa4:	80000226 	beq	r16,zero,dfb0 <fputwc+0x2c>
    dfa8:	80800e17 	ldw	r2,56(r16)
    dfac:	10001026 	beq	r2,zero,dff0 <fputwc+0x6c>
    dfb0:	2880030b 	ldhu	r2,12(r5)
    dfb4:	10c8000c 	andi	r3,r2,8192
    dfb8:	1800051e 	bne	r3,zero,dfd0 <fputwc+0x4c>
    dfbc:	28c01917 	ldw	r3,100(r5)
    dfc0:	10880014 	ori	r2,r2,8192
    dfc4:	2880030d 	sth	r2,12(r5)
    dfc8:	18880014 	ori	r2,r3,8192
    dfcc:	28801915 	stw	r2,100(r5)
    dfd0:	280d883a 	mov	r6,r5
    dfd4:	8009883a 	mov	r4,r16
    dfd8:	880b883a 	mov	r5,r17
    dfdc:	dfc00317 	ldw	ra,12(sp)
    dfe0:	dc400217 	ldw	r17,8(sp)
    dfe4:	dc000117 	ldw	r16,4(sp)
    dfe8:	dec00404 	addi	sp,sp,16
    dfec:	000ddfc1 	jmpi	ddfc <__fputwc>
    dff0:	8009883a 	mov	r4,r16
    dff4:	d9400015 	stw	r5,0(sp)
    dff8:	00094980 	call	9498 <__sinit>
    dffc:	d9400017 	ldw	r5,0(sp)
    e000:	003feb06 	br	dfb0 <__alt_data_end+0xff80dfb0>

0000e004 <_fstat_r>:
    e004:	defffd04 	addi	sp,sp,-12
    e008:	2805883a 	mov	r2,r5
    e00c:	dc000015 	stw	r16,0(sp)
    e010:	04000074 	movhi	r16,1
    e014:	dc400115 	stw	r17,4(sp)
    e018:	8411e404 	addi	r16,r16,18320
    e01c:	2023883a 	mov	r17,r4
    e020:	300b883a 	mov	r5,r6
    e024:	1009883a 	mov	r4,r2
    e028:	dfc00215 	stw	ra,8(sp)
    e02c:	80000015 	stw	zero,0(r16)
    e030:	000f1540 	call	f154 <fstat>
    e034:	00ffffc4 	movi	r3,-1
    e038:	10c00526 	beq	r2,r3,e050 <_fstat_r+0x4c>
    e03c:	dfc00217 	ldw	ra,8(sp)
    e040:	dc400117 	ldw	r17,4(sp)
    e044:	dc000017 	ldw	r16,0(sp)
    e048:	dec00304 	addi	sp,sp,12
    e04c:	f800283a 	ret
    e050:	80c00017 	ldw	r3,0(r16)
    e054:	183ff926 	beq	r3,zero,e03c <__alt_data_end+0xff80e03c>
    e058:	88c00015 	stw	r3,0(r17)
    e05c:	003ff706 	br	e03c <__alt_data_end+0xff80e03c>

0000e060 <_isatty_r>:
    e060:	defffd04 	addi	sp,sp,-12
    e064:	dc000015 	stw	r16,0(sp)
    e068:	04000074 	movhi	r16,1
    e06c:	dc400115 	stw	r17,4(sp)
    e070:	8411e404 	addi	r16,r16,18320
    e074:	2023883a 	mov	r17,r4
    e078:	2809883a 	mov	r4,r5
    e07c:	dfc00215 	stw	ra,8(sp)
    e080:	80000015 	stw	zero,0(r16)
    e084:	000f1740 	call	f174 <isatty>
    e088:	00ffffc4 	movi	r3,-1
    e08c:	10c00526 	beq	r2,r3,e0a4 <_isatty_r+0x44>
    e090:	dfc00217 	ldw	ra,8(sp)
    e094:	dc400117 	ldw	r17,4(sp)
    e098:	dc000017 	ldw	r16,0(sp)
    e09c:	dec00304 	addi	sp,sp,12
    e0a0:	f800283a 	ret
    e0a4:	80c00017 	ldw	r3,0(r16)
    e0a8:	183ff926 	beq	r3,zero,e090 <__alt_data_end+0xff80e090>
    e0ac:	88c00015 	stw	r3,0(r17)
    e0b0:	003ff706 	br	e090 <__alt_data_end+0xff80e090>

0000e0b4 <_lseek_r>:
    e0b4:	defffd04 	addi	sp,sp,-12
    e0b8:	2805883a 	mov	r2,r5
    e0bc:	dc000015 	stw	r16,0(sp)
    e0c0:	04000074 	movhi	r16,1
    e0c4:	dc400115 	stw	r17,4(sp)
    e0c8:	300b883a 	mov	r5,r6
    e0cc:	8411e404 	addi	r16,r16,18320
    e0d0:	2023883a 	mov	r17,r4
    e0d4:	380d883a 	mov	r6,r7
    e0d8:	1009883a 	mov	r4,r2
    e0dc:	dfc00215 	stw	ra,8(sp)
    e0e0:	80000015 	stw	zero,0(r16)
    e0e4:	000f2600 	call	f260 <lseek>
    e0e8:	00ffffc4 	movi	r3,-1
    e0ec:	10c00526 	beq	r2,r3,e104 <_lseek_r+0x50>
    e0f0:	dfc00217 	ldw	ra,8(sp)
    e0f4:	dc400117 	ldw	r17,4(sp)
    e0f8:	dc000017 	ldw	r16,0(sp)
    e0fc:	dec00304 	addi	sp,sp,12
    e100:	f800283a 	ret
    e104:	80c00017 	ldw	r3,0(r16)
    e108:	183ff926 	beq	r3,zero,e0f0 <__alt_data_end+0xff80e0f0>
    e10c:	88c00015 	stw	r3,0(r17)
    e110:	003ff706 	br	e0f0 <__alt_data_end+0xff80e0f0>

0000e114 <_read_r>:
    e114:	defffd04 	addi	sp,sp,-12
    e118:	2805883a 	mov	r2,r5
    e11c:	dc000015 	stw	r16,0(sp)
    e120:	04000074 	movhi	r16,1
    e124:	dc400115 	stw	r17,4(sp)
    e128:	300b883a 	mov	r5,r6
    e12c:	8411e404 	addi	r16,r16,18320
    e130:	2023883a 	mov	r17,r4
    e134:	380d883a 	mov	r6,r7
    e138:	1009883a 	mov	r4,r2
    e13c:	dfc00215 	stw	ra,8(sp)
    e140:	80000015 	stw	zero,0(r16)
    e144:	000f30c0 	call	f30c <read>
    e148:	00ffffc4 	movi	r3,-1
    e14c:	10c00526 	beq	r2,r3,e164 <_read_r+0x50>
    e150:	dfc00217 	ldw	ra,8(sp)
    e154:	dc400117 	ldw	r17,4(sp)
    e158:	dc000017 	ldw	r16,0(sp)
    e15c:	dec00304 	addi	sp,sp,12
    e160:	f800283a 	ret
    e164:	80c00017 	ldw	r3,0(r16)
    e168:	183ff926 	beq	r3,zero,e150 <__alt_data_end+0xff80e150>
    e16c:	88c00015 	stw	r3,0(r17)
    e170:	003ff706 	br	e150 <__alt_data_end+0xff80e150>

0000e174 <__swbuf_r>:
    e174:	defffb04 	addi	sp,sp,-20
    e178:	dcc00315 	stw	r19,12(sp)
    e17c:	dc800215 	stw	r18,8(sp)
    e180:	dc000015 	stw	r16,0(sp)
    e184:	dfc00415 	stw	ra,16(sp)
    e188:	dc400115 	stw	r17,4(sp)
    e18c:	2025883a 	mov	r18,r4
    e190:	2827883a 	mov	r19,r5
    e194:	3021883a 	mov	r16,r6
    e198:	20000226 	beq	r4,zero,e1a4 <__swbuf_r+0x30>
    e19c:	20800e17 	ldw	r2,56(r4)
    e1a0:	10004226 	beq	r2,zero,e2ac <__swbuf_r+0x138>
    e1a4:	80800617 	ldw	r2,24(r16)
    e1a8:	8100030b 	ldhu	r4,12(r16)
    e1ac:	80800215 	stw	r2,8(r16)
    e1b0:	2080020c 	andi	r2,r4,8
    e1b4:	10003626 	beq	r2,zero,e290 <__swbuf_r+0x11c>
    e1b8:	80c00417 	ldw	r3,16(r16)
    e1bc:	18003426 	beq	r3,zero,e290 <__swbuf_r+0x11c>
    e1c0:	2088000c 	andi	r2,r4,8192
    e1c4:	9c403fcc 	andi	r17,r19,255
    e1c8:	10001a26 	beq	r2,zero,e234 <__swbuf_r+0xc0>
    e1cc:	80800017 	ldw	r2,0(r16)
    e1d0:	81000517 	ldw	r4,20(r16)
    e1d4:	10c7c83a 	sub	r3,r2,r3
    e1d8:	1900200e 	bge	r3,r4,e25c <__swbuf_r+0xe8>
    e1dc:	18c00044 	addi	r3,r3,1
    e1e0:	81000217 	ldw	r4,8(r16)
    e1e4:	11400044 	addi	r5,r2,1
    e1e8:	81400015 	stw	r5,0(r16)
    e1ec:	213fffc4 	addi	r4,r4,-1
    e1f0:	81000215 	stw	r4,8(r16)
    e1f4:	14c00005 	stb	r19,0(r2)
    e1f8:	80800517 	ldw	r2,20(r16)
    e1fc:	10c01e26 	beq	r2,r3,e278 <__swbuf_r+0x104>
    e200:	8080030b 	ldhu	r2,12(r16)
    e204:	1080004c 	andi	r2,r2,1
    e208:	10000226 	beq	r2,zero,e214 <__swbuf_r+0xa0>
    e20c:	00800284 	movi	r2,10
    e210:	88801926 	beq	r17,r2,e278 <__swbuf_r+0x104>
    e214:	8805883a 	mov	r2,r17
    e218:	dfc00417 	ldw	ra,16(sp)
    e21c:	dcc00317 	ldw	r19,12(sp)
    e220:	dc800217 	ldw	r18,8(sp)
    e224:	dc400117 	ldw	r17,4(sp)
    e228:	dc000017 	ldw	r16,0(sp)
    e22c:	dec00504 	addi	sp,sp,20
    e230:	f800283a 	ret
    e234:	81401917 	ldw	r5,100(r16)
    e238:	00b7ffc4 	movi	r2,-8193
    e23c:	21080014 	ori	r4,r4,8192
    e240:	2884703a 	and	r2,r5,r2
    e244:	80801915 	stw	r2,100(r16)
    e248:	80800017 	ldw	r2,0(r16)
    e24c:	8100030d 	sth	r4,12(r16)
    e250:	81000517 	ldw	r4,20(r16)
    e254:	10c7c83a 	sub	r3,r2,r3
    e258:	193fe016 	blt	r3,r4,e1dc <__alt_data_end+0xff80e1dc>
    e25c:	800b883a 	mov	r5,r16
    e260:	9009883a 	mov	r4,r18
    e264:	00090bc0 	call	90bc <_fflush_r>
    e268:	1000071e 	bne	r2,zero,e288 <__swbuf_r+0x114>
    e26c:	80800017 	ldw	r2,0(r16)
    e270:	00c00044 	movi	r3,1
    e274:	003fda06 	br	e1e0 <__alt_data_end+0xff80e1e0>
    e278:	800b883a 	mov	r5,r16
    e27c:	9009883a 	mov	r4,r18
    e280:	00090bc0 	call	90bc <_fflush_r>
    e284:	103fe326 	beq	r2,zero,e214 <__alt_data_end+0xff80e214>
    e288:	00bfffc4 	movi	r2,-1
    e28c:	003fe206 	br	e218 <__alt_data_end+0xff80e218>
    e290:	800b883a 	mov	r5,r16
    e294:	9009883a 	mov	r4,r18
    e298:	00074c40 	call	74c4 <__swsetup_r>
    e29c:	103ffa1e 	bne	r2,zero,e288 <__alt_data_end+0xff80e288>
    e2a0:	8100030b 	ldhu	r4,12(r16)
    e2a4:	80c00417 	ldw	r3,16(r16)
    e2a8:	003fc506 	br	e1c0 <__alt_data_end+0xff80e1c0>
    e2ac:	00094980 	call	9498 <__sinit>
    e2b0:	003fbc06 	br	e1a4 <__alt_data_end+0xff80e1a4>

0000e2b4 <__swbuf>:
    e2b4:	00800074 	movhi	r2,1
    e2b8:	108b4b04 	addi	r2,r2,11564
    e2bc:	280d883a 	mov	r6,r5
    e2c0:	200b883a 	mov	r5,r4
    e2c4:	11000017 	ldw	r4,0(r2)
    e2c8:	000e1741 	jmpi	e174 <__swbuf_r>

0000e2cc <_wcrtomb_r>:
    e2cc:	defff604 	addi	sp,sp,-40
    e2d0:	00800074 	movhi	r2,1
    e2d4:	dc800815 	stw	r18,32(sp)
    e2d8:	dc400715 	stw	r17,28(sp)
    e2dc:	dc000615 	stw	r16,24(sp)
    e2e0:	108b4f04 	addi	r2,r2,11580
    e2e4:	dfc00915 	stw	ra,36(sp)
    e2e8:	2021883a 	mov	r16,r4
    e2ec:	3823883a 	mov	r17,r7
    e2f0:	14800017 	ldw	r18,0(r2)
    e2f4:	28001426 	beq	r5,zero,e348 <_wcrtomb_r+0x7c>
    e2f8:	d9400415 	stw	r5,16(sp)
    e2fc:	d9800515 	stw	r6,20(sp)
    e300:	0009fdc0 	call	9fdc <__locale_charset>
    e304:	d9800517 	ldw	r6,20(sp)
    e308:	d9400417 	ldw	r5,16(sp)
    e30c:	100f883a 	mov	r7,r2
    e310:	dc400015 	stw	r17,0(sp)
    e314:	8009883a 	mov	r4,r16
    e318:	903ee83a 	callr	r18
    e31c:	00ffffc4 	movi	r3,-1
    e320:	10c0031e 	bne	r2,r3,e330 <_wcrtomb_r+0x64>
    e324:	88000015 	stw	zero,0(r17)
    e328:	00c02284 	movi	r3,138
    e32c:	80c00015 	stw	r3,0(r16)
    e330:	dfc00917 	ldw	ra,36(sp)
    e334:	dc800817 	ldw	r18,32(sp)
    e338:	dc400717 	ldw	r17,28(sp)
    e33c:	dc000617 	ldw	r16,24(sp)
    e340:	dec00a04 	addi	sp,sp,40
    e344:	f800283a 	ret
    e348:	0009fdc0 	call	9fdc <__locale_charset>
    e34c:	100f883a 	mov	r7,r2
    e350:	dc400015 	stw	r17,0(sp)
    e354:	000d883a 	mov	r6,zero
    e358:	d9400104 	addi	r5,sp,4
    e35c:	8009883a 	mov	r4,r16
    e360:	903ee83a 	callr	r18
    e364:	003fed06 	br	e31c <__alt_data_end+0xff80e31c>

0000e368 <wcrtomb>:
    e368:	defff604 	addi	sp,sp,-40
    e36c:	00800074 	movhi	r2,1
    e370:	dc800615 	stw	r18,24(sp)
    e374:	dc400515 	stw	r17,20(sp)
    e378:	108b4b04 	addi	r2,r2,11564
    e37c:	dfc00915 	stw	ra,36(sp)
    e380:	dd000815 	stw	r20,32(sp)
    e384:	dcc00715 	stw	r19,28(sp)
    e388:	dc000415 	stw	r16,16(sp)
    e38c:	3025883a 	mov	r18,r6
    e390:	14400017 	ldw	r17,0(r2)
    e394:	20001926 	beq	r4,zero,e3fc <wcrtomb+0x94>
    e398:	00800074 	movhi	r2,1
    e39c:	108b4f04 	addi	r2,r2,11580
    e3a0:	15000017 	ldw	r20,0(r2)
    e3a4:	2021883a 	mov	r16,r4
    e3a8:	2827883a 	mov	r19,r5
    e3ac:	0009fdc0 	call	9fdc <__locale_charset>
    e3b0:	100f883a 	mov	r7,r2
    e3b4:	dc800015 	stw	r18,0(sp)
    e3b8:	980d883a 	mov	r6,r19
    e3bc:	800b883a 	mov	r5,r16
    e3c0:	8809883a 	mov	r4,r17
    e3c4:	a03ee83a 	callr	r20
    e3c8:	00ffffc4 	movi	r3,-1
    e3cc:	10c0031e 	bne	r2,r3,e3dc <wcrtomb+0x74>
    e3d0:	90000015 	stw	zero,0(r18)
    e3d4:	00c02284 	movi	r3,138
    e3d8:	88c00015 	stw	r3,0(r17)
    e3dc:	dfc00917 	ldw	ra,36(sp)
    e3e0:	dd000817 	ldw	r20,32(sp)
    e3e4:	dcc00717 	ldw	r19,28(sp)
    e3e8:	dc800617 	ldw	r18,24(sp)
    e3ec:	dc400517 	ldw	r17,20(sp)
    e3f0:	dc000417 	ldw	r16,16(sp)
    e3f4:	dec00a04 	addi	sp,sp,40
    e3f8:	f800283a 	ret
    e3fc:	00800074 	movhi	r2,1
    e400:	108b4f04 	addi	r2,r2,11580
    e404:	14000017 	ldw	r16,0(r2)
    e408:	0009fdc0 	call	9fdc <__locale_charset>
    e40c:	100f883a 	mov	r7,r2
    e410:	dc800015 	stw	r18,0(sp)
    e414:	000d883a 	mov	r6,zero
    e418:	d9400104 	addi	r5,sp,4
    e41c:	8809883a 	mov	r4,r17
    e420:	803ee83a 	callr	r16
    e424:	003fe806 	br	e3c8 <__alt_data_end+0xff80e3c8>

0000e428 <__ascii_wctomb>:
    e428:	28000526 	beq	r5,zero,e440 <__ascii_wctomb+0x18>
    e42c:	00803fc4 	movi	r2,255
    e430:	11800536 	bltu	r2,r6,e448 <__ascii_wctomb+0x20>
    e434:	29800005 	stb	r6,0(r5)
    e438:	00800044 	movi	r2,1
    e43c:	f800283a 	ret
    e440:	0005883a 	mov	r2,zero
    e444:	f800283a 	ret
    e448:	00802284 	movi	r2,138
    e44c:	20800015 	stw	r2,0(r4)
    e450:	00bfffc4 	movi	r2,-1
    e454:	f800283a 	ret

0000e458 <_wctomb_r>:
    e458:	00800074 	movhi	r2,1
    e45c:	defff904 	addi	sp,sp,-28
    e460:	108b4f04 	addi	r2,r2,11580
    e464:	dfc00615 	stw	ra,24(sp)
    e468:	dc400515 	stw	r17,20(sp)
    e46c:	dc000415 	stw	r16,16(sp)
    e470:	3823883a 	mov	r17,r7
    e474:	14000017 	ldw	r16,0(r2)
    e478:	d9000115 	stw	r4,4(sp)
    e47c:	d9400215 	stw	r5,8(sp)
    e480:	d9800315 	stw	r6,12(sp)
    e484:	0009fdc0 	call	9fdc <__locale_charset>
    e488:	d9800317 	ldw	r6,12(sp)
    e48c:	d9400217 	ldw	r5,8(sp)
    e490:	d9000117 	ldw	r4,4(sp)
    e494:	100f883a 	mov	r7,r2
    e498:	dc400015 	stw	r17,0(sp)
    e49c:	803ee83a 	callr	r16
    e4a0:	dfc00617 	ldw	ra,24(sp)
    e4a4:	dc400517 	ldw	r17,20(sp)
    e4a8:	dc000417 	ldw	r16,16(sp)
    e4ac:	dec00704 	addi	sp,sp,28
    e4b0:	f800283a 	ret

0000e4b4 <__udivdi3>:
    e4b4:	defff504 	addi	sp,sp,-44
    e4b8:	dcc00415 	stw	r19,16(sp)
    e4bc:	dc000115 	stw	r16,4(sp)
    e4c0:	dfc00a15 	stw	ra,40(sp)
    e4c4:	df000915 	stw	fp,36(sp)
    e4c8:	ddc00815 	stw	r23,32(sp)
    e4cc:	dd800715 	stw	r22,28(sp)
    e4d0:	dd400615 	stw	r21,24(sp)
    e4d4:	dd000515 	stw	r20,20(sp)
    e4d8:	dc800315 	stw	r18,12(sp)
    e4dc:	dc400215 	stw	r17,8(sp)
    e4e0:	2027883a 	mov	r19,r4
    e4e4:	2821883a 	mov	r16,r5
    e4e8:	3800411e 	bne	r7,zero,e5f0 <__udivdi3+0x13c>
    e4ec:	3023883a 	mov	r17,r6
    e4f0:	2025883a 	mov	r18,r4
    e4f4:	2980522e 	bgeu	r5,r6,e640 <__udivdi3+0x18c>
    e4f8:	00bfffd4 	movui	r2,65535
    e4fc:	282d883a 	mov	r22,r5
    e500:	1180a836 	bltu	r2,r6,e7a4 <__udivdi3+0x2f0>
    e504:	00803fc4 	movi	r2,255
    e508:	1185803a 	cmpltu	r2,r2,r6
    e50c:	100490fa 	slli	r2,r2,3
    e510:	3086d83a 	srl	r3,r6,r2
    e514:	01000074 	movhi	r4,1
    e518:	21042344 	addi	r4,r4,4237
    e51c:	20c7883a 	add	r3,r4,r3
    e520:	18c00003 	ldbu	r3,0(r3)
    e524:	1885883a 	add	r2,r3,r2
    e528:	00c00804 	movi	r3,32
    e52c:	1887c83a 	sub	r3,r3,r2
    e530:	18000526 	beq	r3,zero,e548 <__udivdi3+0x94>
    e534:	80e0983a 	sll	r16,r16,r3
    e538:	9884d83a 	srl	r2,r19,r2
    e53c:	30e2983a 	sll	r17,r6,r3
    e540:	98e4983a 	sll	r18,r19,r3
    e544:	142cb03a 	or	r22,r2,r16
    e548:	882ad43a 	srli	r21,r17,16
    e54c:	b009883a 	mov	r4,r22
    e550:	8d3fffcc 	andi	r20,r17,65535
    e554:	a80b883a 	mov	r5,r21
    e558:	0004e6c0 	call	4e6c <__umodsi3>
    e55c:	b009883a 	mov	r4,r22
    e560:	a80b883a 	mov	r5,r21
    e564:	1027883a 	mov	r19,r2
    e568:	0004e080 	call	4e08 <__udivsi3>
    e56c:	102d883a 	mov	r22,r2
    e570:	9826943a 	slli	r19,r19,16
    e574:	9004d43a 	srli	r2,r18,16
    e578:	a5a1383a 	mul	r16,r20,r22
    e57c:	14c4b03a 	or	r2,r2,r19
    e580:	1400052e 	bgeu	r2,r16,e598 <__udivdi3+0xe4>
    e584:	1445883a 	add	r2,r2,r17
    e588:	b0ffffc4 	addi	r3,r22,-1
    e58c:	14400136 	bltu	r2,r17,e594 <__udivdi3+0xe0>
    e590:	14012336 	bltu	r2,r16,ea20 <__udivdi3+0x56c>
    e594:	182d883a 	mov	r22,r3
    e598:	1421c83a 	sub	r16,r2,r16
    e59c:	a80b883a 	mov	r5,r21
    e5a0:	8009883a 	mov	r4,r16
    e5a4:	0004e6c0 	call	4e6c <__umodsi3>
    e5a8:	1027883a 	mov	r19,r2
    e5ac:	a80b883a 	mov	r5,r21
    e5b0:	8009883a 	mov	r4,r16
    e5b4:	0004e080 	call	4e08 <__udivsi3>
    e5b8:	9826943a 	slli	r19,r19,16
    e5bc:	a0a9383a 	mul	r20,r20,r2
    e5c0:	94bfffcc 	andi	r18,r18,65535
    e5c4:	94e4b03a 	or	r18,r18,r19
    e5c8:	9500052e 	bgeu	r18,r20,e5e0 <__udivdi3+0x12c>
    e5cc:	8ca5883a 	add	r18,r17,r18
    e5d0:	10ffffc4 	addi	r3,r2,-1
    e5d4:	9440f136 	bltu	r18,r17,e99c <__udivdi3+0x4e8>
    e5d8:	9500f02e 	bgeu	r18,r20,e99c <__udivdi3+0x4e8>
    e5dc:	10bfff84 	addi	r2,r2,-2
    e5e0:	b00c943a 	slli	r6,r22,16
    e5e4:	0007883a 	mov	r3,zero
    e5e8:	3084b03a 	or	r2,r6,r2
    e5ec:	00005906 	br	e754 <__udivdi3+0x2a0>
    e5f0:	29c05636 	bltu	r5,r7,e74c <__udivdi3+0x298>
    e5f4:	00bfffd4 	movui	r2,65535
    e5f8:	11c0622e 	bgeu	r2,r7,e784 <__udivdi3+0x2d0>
    e5fc:	00804034 	movhi	r2,256
    e600:	10bfffc4 	addi	r2,r2,-1
    e604:	11c0ee36 	bltu	r2,r7,e9c0 <__udivdi3+0x50c>
    e608:	00800404 	movi	r2,16
    e60c:	3886d83a 	srl	r3,r7,r2
    e610:	01000074 	movhi	r4,1
    e614:	21042344 	addi	r4,r4,4237
    e618:	20c7883a 	add	r3,r4,r3
    e61c:	18c00003 	ldbu	r3,0(r3)
    e620:	05400804 	movi	r21,32
    e624:	1885883a 	add	r2,r3,r2
    e628:	a8abc83a 	sub	r21,r21,r2
    e62c:	a800621e 	bne	r21,zero,e7b8 <__udivdi3+0x304>
    e630:	3c00e936 	bltu	r7,r16,e9d8 <__udivdi3+0x524>
    e634:	9985403a 	cmpgeu	r2,r19,r6
    e638:	0007883a 	mov	r3,zero
    e63c:	00004506 	br	e754 <__udivdi3+0x2a0>
    e640:	3000041e 	bne	r6,zero,e654 <__udivdi3+0x1a0>
    e644:	000b883a 	mov	r5,zero
    e648:	01000044 	movi	r4,1
    e64c:	0004e080 	call	4e08 <__udivsi3>
    e650:	1023883a 	mov	r17,r2
    e654:	00bfffd4 	movui	r2,65535
    e658:	14404e2e 	bgeu	r2,r17,e794 <__udivdi3+0x2e0>
    e65c:	00804034 	movhi	r2,256
    e660:	10bfffc4 	addi	r2,r2,-1
    e664:	1440d836 	bltu	r2,r17,e9c8 <__udivdi3+0x514>
    e668:	00800404 	movi	r2,16
    e66c:	8886d83a 	srl	r3,r17,r2
    e670:	01000074 	movhi	r4,1
    e674:	21042344 	addi	r4,r4,4237
    e678:	20c7883a 	add	r3,r4,r3
    e67c:	18c00003 	ldbu	r3,0(r3)
    e680:	1885883a 	add	r2,r3,r2
    e684:	00c00804 	movi	r3,32
    e688:	1887c83a 	sub	r3,r3,r2
    e68c:	18008f1e 	bne	r3,zero,e8cc <__udivdi3+0x418>
    e690:	882ad43a 	srli	r21,r17,16
    e694:	8461c83a 	sub	r16,r16,r17
    e698:	8d3fffcc 	andi	r20,r17,65535
    e69c:	00c00044 	movi	r3,1
    e6a0:	8009883a 	mov	r4,r16
    e6a4:	a80b883a 	mov	r5,r21
    e6a8:	d8c00015 	stw	r3,0(sp)
    e6ac:	0004e6c0 	call	4e6c <__umodsi3>
    e6b0:	8009883a 	mov	r4,r16
    e6b4:	a80b883a 	mov	r5,r21
    e6b8:	1027883a 	mov	r19,r2
    e6bc:	0004e080 	call	4e08 <__udivsi3>
    e6c0:	9826943a 	slli	r19,r19,16
    e6c4:	9008d43a 	srli	r4,r18,16
    e6c8:	1521383a 	mul	r16,r2,r20
    e6cc:	102d883a 	mov	r22,r2
    e6d0:	24c8b03a 	or	r4,r4,r19
    e6d4:	d8c00017 	ldw	r3,0(sp)
    e6d8:	2400052e 	bgeu	r4,r16,e6f0 <__udivdi3+0x23c>
    e6dc:	2449883a 	add	r4,r4,r17
    e6e0:	b0bfffc4 	addi	r2,r22,-1
    e6e4:	24400136 	bltu	r4,r17,e6ec <__udivdi3+0x238>
    e6e8:	2400ca36 	bltu	r4,r16,ea14 <__udivdi3+0x560>
    e6ec:	102d883a 	mov	r22,r2
    e6f0:	2421c83a 	sub	r16,r4,r16
    e6f4:	a80b883a 	mov	r5,r21
    e6f8:	8009883a 	mov	r4,r16
    e6fc:	d8c00015 	stw	r3,0(sp)
    e700:	0004e6c0 	call	4e6c <__umodsi3>
    e704:	1027883a 	mov	r19,r2
    e708:	a80b883a 	mov	r5,r21
    e70c:	8009883a 	mov	r4,r16
    e710:	0004e080 	call	4e08 <__udivsi3>
    e714:	9826943a 	slli	r19,r19,16
    e718:	1529383a 	mul	r20,r2,r20
    e71c:	94bfffcc 	andi	r18,r18,65535
    e720:	94e4b03a 	or	r18,r18,r19
    e724:	d8c00017 	ldw	r3,0(sp)
    e728:	9500052e 	bgeu	r18,r20,e740 <__udivdi3+0x28c>
    e72c:	8ca5883a 	add	r18,r17,r18
    e730:	113fffc4 	addi	r4,r2,-1
    e734:	94409736 	bltu	r18,r17,e994 <__udivdi3+0x4e0>
    e738:	9500962e 	bgeu	r18,r20,e994 <__udivdi3+0x4e0>
    e73c:	10bfff84 	addi	r2,r2,-2
    e740:	b00c943a 	slli	r6,r22,16
    e744:	3084b03a 	or	r2,r6,r2
    e748:	00000206 	br	e754 <__udivdi3+0x2a0>
    e74c:	0007883a 	mov	r3,zero
    e750:	0005883a 	mov	r2,zero
    e754:	dfc00a17 	ldw	ra,40(sp)
    e758:	df000917 	ldw	fp,36(sp)
    e75c:	ddc00817 	ldw	r23,32(sp)
    e760:	dd800717 	ldw	r22,28(sp)
    e764:	dd400617 	ldw	r21,24(sp)
    e768:	dd000517 	ldw	r20,20(sp)
    e76c:	dcc00417 	ldw	r19,16(sp)
    e770:	dc800317 	ldw	r18,12(sp)
    e774:	dc400217 	ldw	r17,8(sp)
    e778:	dc000117 	ldw	r16,4(sp)
    e77c:	dec00b04 	addi	sp,sp,44
    e780:	f800283a 	ret
    e784:	00803fc4 	movi	r2,255
    e788:	11c5803a 	cmpltu	r2,r2,r7
    e78c:	100490fa 	slli	r2,r2,3
    e790:	003f9e06 	br	e60c <__alt_data_end+0xff80e60c>
    e794:	00803fc4 	movi	r2,255
    e798:	1445803a 	cmpltu	r2,r2,r17
    e79c:	100490fa 	slli	r2,r2,3
    e7a0:	003fb206 	br	e66c <__alt_data_end+0xff80e66c>
    e7a4:	00804034 	movhi	r2,256
    e7a8:	10bfffc4 	addi	r2,r2,-1
    e7ac:	11808836 	bltu	r2,r6,e9d0 <__udivdi3+0x51c>
    e7b0:	00800404 	movi	r2,16
    e7b4:	003f5606 	br	e510 <__alt_data_end+0xff80e510>
    e7b8:	30aed83a 	srl	r23,r6,r2
    e7bc:	3d4e983a 	sll	r7,r7,r21
    e7c0:	80acd83a 	srl	r22,r16,r2
    e7c4:	9884d83a 	srl	r2,r19,r2
    e7c8:	3deeb03a 	or	r23,r7,r23
    e7cc:	b824d43a 	srli	r18,r23,16
    e7d0:	8560983a 	sll	r16,r16,r21
    e7d4:	b009883a 	mov	r4,r22
    e7d8:	900b883a 	mov	r5,r18
    e7dc:	3568983a 	sll	r20,r6,r21
    e7e0:	1420b03a 	or	r16,r2,r16
    e7e4:	0004e6c0 	call	4e6c <__umodsi3>
    e7e8:	b009883a 	mov	r4,r22
    e7ec:	900b883a 	mov	r5,r18
    e7f0:	1023883a 	mov	r17,r2
    e7f4:	0004e080 	call	4e08 <__udivsi3>
    e7f8:	8808943a 	slli	r4,r17,16
    e7fc:	bf3fffcc 	andi	fp,r23,65535
    e800:	8006d43a 	srli	r3,r16,16
    e804:	e0a3383a 	mul	r17,fp,r2
    e808:	100d883a 	mov	r6,r2
    e80c:	1906b03a 	or	r3,r3,r4
    e810:	1c40042e 	bgeu	r3,r17,e824 <__udivdi3+0x370>
    e814:	1dc7883a 	add	r3,r3,r23
    e818:	10bfffc4 	addi	r2,r2,-1
    e81c:	1dc0752e 	bgeu	r3,r23,e9f4 <__udivdi3+0x540>
    e820:	100d883a 	mov	r6,r2
    e824:	1c63c83a 	sub	r17,r3,r17
    e828:	900b883a 	mov	r5,r18
    e82c:	8809883a 	mov	r4,r17
    e830:	d9800015 	stw	r6,0(sp)
    e834:	0004e6c0 	call	4e6c <__umodsi3>
    e838:	102d883a 	mov	r22,r2
    e83c:	8809883a 	mov	r4,r17
    e840:	900b883a 	mov	r5,r18
    e844:	0004e080 	call	4e08 <__udivsi3>
    e848:	b02c943a 	slli	r22,r22,16
    e84c:	e089383a 	mul	r4,fp,r2
    e850:	843fffcc 	andi	r16,r16,65535
    e854:	85a0b03a 	or	r16,r16,r22
    e858:	d9800017 	ldw	r6,0(sp)
    e85c:	8100042e 	bgeu	r16,r4,e870 <__udivdi3+0x3bc>
    e860:	85e1883a 	add	r16,r16,r23
    e864:	10ffffc4 	addi	r3,r2,-1
    e868:	85c05e2e 	bgeu	r16,r23,e9e4 <__udivdi3+0x530>
    e86c:	1805883a 	mov	r2,r3
    e870:	300c943a 	slli	r6,r6,16
    e874:	a17fffcc 	andi	r5,r20,65535
    e878:	a028d43a 	srli	r20,r20,16
    e87c:	3084b03a 	or	r2,r6,r2
    e880:	10ffffcc 	andi	r3,r2,65535
    e884:	100cd43a 	srli	r6,r2,16
    e888:	194f383a 	mul	r7,r3,r5
    e88c:	1d07383a 	mul	r3,r3,r20
    e890:	314b383a 	mul	r5,r6,r5
    e894:	3810d43a 	srli	r8,r7,16
    e898:	8121c83a 	sub	r16,r16,r4
    e89c:	1947883a 	add	r3,r3,r5
    e8a0:	40c7883a 	add	r3,r8,r3
    e8a4:	350d383a 	mul	r6,r6,r20
    e8a8:	1940022e 	bgeu	r3,r5,e8b4 <__udivdi3+0x400>
    e8ac:	01000074 	movhi	r4,1
    e8b0:	310d883a 	add	r6,r6,r4
    e8b4:	1828d43a 	srli	r20,r3,16
    e8b8:	a18d883a 	add	r6,r20,r6
    e8bc:	81803e36 	bltu	r16,r6,e9b8 <__udivdi3+0x504>
    e8c0:	81803826 	beq	r16,r6,e9a4 <__udivdi3+0x4f0>
    e8c4:	0007883a 	mov	r3,zero
    e8c8:	003fa206 	br	e754 <__alt_data_end+0xff80e754>
    e8cc:	88e2983a 	sll	r17,r17,r3
    e8d0:	80a8d83a 	srl	r20,r16,r2
    e8d4:	80e0983a 	sll	r16,r16,r3
    e8d8:	882ad43a 	srli	r21,r17,16
    e8dc:	9884d83a 	srl	r2,r19,r2
    e8e0:	a009883a 	mov	r4,r20
    e8e4:	a80b883a 	mov	r5,r21
    e8e8:	142eb03a 	or	r23,r2,r16
    e8ec:	98e4983a 	sll	r18,r19,r3
    e8f0:	0004e6c0 	call	4e6c <__umodsi3>
    e8f4:	a009883a 	mov	r4,r20
    e8f8:	a80b883a 	mov	r5,r21
    e8fc:	1021883a 	mov	r16,r2
    e900:	0004e080 	call	4e08 <__udivsi3>
    e904:	1039883a 	mov	fp,r2
    e908:	8d3fffcc 	andi	r20,r17,65535
    e90c:	8020943a 	slli	r16,r16,16
    e910:	b804d43a 	srli	r2,r23,16
    e914:	a72d383a 	mul	r22,r20,fp
    e918:	1404b03a 	or	r2,r2,r16
    e91c:	1580062e 	bgeu	r2,r22,e938 <__udivdi3+0x484>
    e920:	1445883a 	add	r2,r2,r17
    e924:	e0ffffc4 	addi	r3,fp,-1
    e928:	14403836 	bltu	r2,r17,ea0c <__udivdi3+0x558>
    e92c:	1580372e 	bgeu	r2,r22,ea0c <__udivdi3+0x558>
    e930:	e73fff84 	addi	fp,fp,-2
    e934:	1445883a 	add	r2,r2,r17
    e938:	15adc83a 	sub	r22,r2,r22
    e93c:	a80b883a 	mov	r5,r21
    e940:	b009883a 	mov	r4,r22
    e944:	0004e6c0 	call	4e6c <__umodsi3>
    e948:	1027883a 	mov	r19,r2
    e94c:	b009883a 	mov	r4,r22
    e950:	a80b883a 	mov	r5,r21
    e954:	0004e080 	call	4e08 <__udivsi3>
    e958:	9826943a 	slli	r19,r19,16
    e95c:	a0a1383a 	mul	r16,r20,r2
    e960:	b93fffcc 	andi	r4,r23,65535
    e964:	24c8b03a 	or	r4,r4,r19
    e968:	2400062e 	bgeu	r4,r16,e984 <__udivdi3+0x4d0>
    e96c:	2449883a 	add	r4,r4,r17
    e970:	10ffffc4 	addi	r3,r2,-1
    e974:	24402336 	bltu	r4,r17,ea04 <__udivdi3+0x550>
    e978:	2400222e 	bgeu	r4,r16,ea04 <__udivdi3+0x550>
    e97c:	10bfff84 	addi	r2,r2,-2
    e980:	2449883a 	add	r4,r4,r17
    e984:	e038943a 	slli	fp,fp,16
    e988:	2421c83a 	sub	r16,r4,r16
    e98c:	e086b03a 	or	r3,fp,r2
    e990:	003f4306 	br	e6a0 <__alt_data_end+0xff80e6a0>
    e994:	2005883a 	mov	r2,r4
    e998:	003f6906 	br	e740 <__alt_data_end+0xff80e740>
    e99c:	1805883a 	mov	r2,r3
    e9a0:	003f0f06 	br	e5e0 <__alt_data_end+0xff80e5e0>
    e9a4:	1806943a 	slli	r3,r3,16
    e9a8:	9d66983a 	sll	r19,r19,r21
    e9ac:	39ffffcc 	andi	r7,r7,65535
    e9b0:	19c7883a 	add	r3,r3,r7
    e9b4:	98ffc32e 	bgeu	r19,r3,e8c4 <__alt_data_end+0xff80e8c4>
    e9b8:	10bfffc4 	addi	r2,r2,-1
    e9bc:	003fc106 	br	e8c4 <__alt_data_end+0xff80e8c4>
    e9c0:	00800604 	movi	r2,24
    e9c4:	003f1106 	br	e60c <__alt_data_end+0xff80e60c>
    e9c8:	00800604 	movi	r2,24
    e9cc:	003f2706 	br	e66c <__alt_data_end+0xff80e66c>
    e9d0:	00800604 	movi	r2,24
    e9d4:	003ece06 	br	e510 <__alt_data_end+0xff80e510>
    e9d8:	0007883a 	mov	r3,zero
    e9dc:	00800044 	movi	r2,1
    e9e0:	003f5c06 	br	e754 <__alt_data_end+0xff80e754>
    e9e4:	813fa12e 	bgeu	r16,r4,e86c <__alt_data_end+0xff80e86c>
    e9e8:	10bfff84 	addi	r2,r2,-2
    e9ec:	85e1883a 	add	r16,r16,r23
    e9f0:	003f9f06 	br	e870 <__alt_data_end+0xff80e870>
    e9f4:	1c7f8a2e 	bgeu	r3,r17,e820 <__alt_data_end+0xff80e820>
    e9f8:	31bfff84 	addi	r6,r6,-2
    e9fc:	1dc7883a 	add	r3,r3,r23
    ea00:	003f8806 	br	e824 <__alt_data_end+0xff80e824>
    ea04:	1805883a 	mov	r2,r3
    ea08:	003fde06 	br	e984 <__alt_data_end+0xff80e984>
    ea0c:	1839883a 	mov	fp,r3
    ea10:	003fc906 	br	e938 <__alt_data_end+0xff80e938>
    ea14:	b5bfff84 	addi	r22,r22,-2
    ea18:	2449883a 	add	r4,r4,r17
    ea1c:	003f3406 	br	e6f0 <__alt_data_end+0xff80e6f0>
    ea20:	b5bfff84 	addi	r22,r22,-2
    ea24:	1445883a 	add	r2,r2,r17
    ea28:	003edb06 	br	e598 <__alt_data_end+0xff80e598>

0000ea2c <__umoddi3>:
    ea2c:	defff404 	addi	sp,sp,-48
    ea30:	df000a15 	stw	fp,40(sp)
    ea34:	dc400315 	stw	r17,12(sp)
    ea38:	dc000215 	stw	r16,8(sp)
    ea3c:	dfc00b15 	stw	ra,44(sp)
    ea40:	ddc00915 	stw	r23,36(sp)
    ea44:	dd800815 	stw	r22,32(sp)
    ea48:	dd400715 	stw	r21,28(sp)
    ea4c:	dd000615 	stw	r20,24(sp)
    ea50:	dcc00515 	stw	r19,20(sp)
    ea54:	dc800415 	stw	r18,16(sp)
    ea58:	2021883a 	mov	r16,r4
    ea5c:	2823883a 	mov	r17,r5
    ea60:	2839883a 	mov	fp,r5
    ea64:	38003c1e 	bne	r7,zero,eb58 <__umoddi3+0x12c>
    ea68:	3027883a 	mov	r19,r6
    ea6c:	2029883a 	mov	r20,r4
    ea70:	2980512e 	bgeu	r5,r6,ebb8 <__umoddi3+0x18c>
    ea74:	00bfffd4 	movui	r2,65535
    ea78:	11809a36 	bltu	r2,r6,ece4 <__umoddi3+0x2b8>
    ea7c:	01003fc4 	movi	r4,255
    ea80:	2189803a 	cmpltu	r4,r4,r6
    ea84:	200890fa 	slli	r4,r4,3
    ea88:	3104d83a 	srl	r2,r6,r4
    ea8c:	00c00074 	movhi	r3,1
    ea90:	18c42344 	addi	r3,r3,4237
    ea94:	1885883a 	add	r2,r3,r2
    ea98:	10c00003 	ldbu	r3,0(r2)
    ea9c:	00800804 	movi	r2,32
    eaa0:	1909883a 	add	r4,r3,r4
    eaa4:	1125c83a 	sub	r18,r2,r4
    eaa8:	90000526 	beq	r18,zero,eac0 <__umoddi3+0x94>
    eaac:	8ca2983a 	sll	r17,r17,r18
    eab0:	8108d83a 	srl	r4,r16,r4
    eab4:	34a6983a 	sll	r19,r6,r18
    eab8:	84a8983a 	sll	r20,r16,r18
    eabc:	2478b03a 	or	fp,r4,r17
    eac0:	982ed43a 	srli	r23,r19,16
    eac4:	e009883a 	mov	r4,fp
    eac8:	9dbfffcc 	andi	r22,r19,65535
    eacc:	b80b883a 	mov	r5,r23
    ead0:	0004e6c0 	call	4e6c <__umodsi3>
    ead4:	e009883a 	mov	r4,fp
    ead8:	b80b883a 	mov	r5,r23
    eadc:	102b883a 	mov	r21,r2
    eae0:	0004e080 	call	4e08 <__udivsi3>
    eae4:	a806943a 	slli	r3,r21,16
    eae8:	a008d43a 	srli	r4,r20,16
    eaec:	b085383a 	mul	r2,r22,r2
    eaf0:	20c8b03a 	or	r4,r4,r3
    eaf4:	2080032e 	bgeu	r4,r2,eb04 <__umoddi3+0xd8>
    eaf8:	24c9883a 	add	r4,r4,r19
    eafc:	24c00136 	bltu	r4,r19,eb04 <__umoddi3+0xd8>
    eb00:	20811036 	bltu	r4,r2,ef44 <__umoddi3+0x518>
    eb04:	20abc83a 	sub	r21,r4,r2
    eb08:	b80b883a 	mov	r5,r23
    eb0c:	a809883a 	mov	r4,r21
    eb10:	0004e6c0 	call	4e6c <__umodsi3>
    eb14:	1023883a 	mov	r17,r2
    eb18:	b80b883a 	mov	r5,r23
    eb1c:	a809883a 	mov	r4,r21
    eb20:	0004e080 	call	4e08 <__udivsi3>
    eb24:	8822943a 	slli	r17,r17,16
    eb28:	b085383a 	mul	r2,r22,r2
    eb2c:	a0ffffcc 	andi	r3,r20,65535
    eb30:	1c46b03a 	or	r3,r3,r17
    eb34:	1880042e 	bgeu	r3,r2,eb48 <__umoddi3+0x11c>
    eb38:	1cc7883a 	add	r3,r3,r19
    eb3c:	1cc00236 	bltu	r3,r19,eb48 <__umoddi3+0x11c>
    eb40:	1880012e 	bgeu	r3,r2,eb48 <__umoddi3+0x11c>
    eb44:	1cc7883a 	add	r3,r3,r19
    eb48:	1885c83a 	sub	r2,r3,r2
    eb4c:	1484d83a 	srl	r2,r2,r18
    eb50:	0007883a 	mov	r3,zero
    eb54:	00004f06 	br	ec94 <__umoddi3+0x268>
    eb58:	29c04c36 	bltu	r5,r7,ec8c <__umoddi3+0x260>
    eb5c:	00bfffd4 	movui	r2,65535
    eb60:	11c0582e 	bgeu	r2,r7,ecc4 <__umoddi3+0x298>
    eb64:	00804034 	movhi	r2,256
    eb68:	10bfffc4 	addi	r2,r2,-1
    eb6c:	11c0e736 	bltu	r2,r7,ef0c <__umoddi3+0x4e0>
    eb70:	01000404 	movi	r4,16
    eb74:	3904d83a 	srl	r2,r7,r4
    eb78:	00c00074 	movhi	r3,1
    eb7c:	18c42344 	addi	r3,r3,4237
    eb80:	1885883a 	add	r2,r3,r2
    eb84:	14c00003 	ldbu	r19,0(r2)
    eb88:	00c00804 	movi	r3,32
    eb8c:	9927883a 	add	r19,r19,r4
    eb90:	1ce9c83a 	sub	r20,r3,r19
    eb94:	a000581e 	bne	r20,zero,ecf8 <__umoddi3+0x2cc>
    eb98:	3c400136 	bltu	r7,r17,eba0 <__umoddi3+0x174>
    eb9c:	8180eb36 	bltu	r16,r6,ef4c <__umoddi3+0x520>
    eba0:	8185c83a 	sub	r2,r16,r6
    eba4:	89e3c83a 	sub	r17,r17,r7
    eba8:	8089803a 	cmpltu	r4,r16,r2
    ebac:	8939c83a 	sub	fp,r17,r4
    ebb0:	e007883a 	mov	r3,fp
    ebb4:	00003706 	br	ec94 <__umoddi3+0x268>
    ebb8:	3000041e 	bne	r6,zero,ebcc <__umoddi3+0x1a0>
    ebbc:	000b883a 	mov	r5,zero
    ebc0:	01000044 	movi	r4,1
    ebc4:	0004e080 	call	4e08 <__udivsi3>
    ebc8:	1027883a 	mov	r19,r2
    ebcc:	00bfffd4 	movui	r2,65535
    ebd0:	14c0402e 	bgeu	r2,r19,ecd4 <__umoddi3+0x2a8>
    ebd4:	00804034 	movhi	r2,256
    ebd8:	10bfffc4 	addi	r2,r2,-1
    ebdc:	14c0cd36 	bltu	r2,r19,ef14 <__umoddi3+0x4e8>
    ebe0:	00800404 	movi	r2,16
    ebe4:	9886d83a 	srl	r3,r19,r2
    ebe8:	01000074 	movhi	r4,1
    ebec:	21042344 	addi	r4,r4,4237
    ebf0:	20c7883a 	add	r3,r4,r3
    ebf4:	18c00003 	ldbu	r3,0(r3)
    ebf8:	1887883a 	add	r3,r3,r2
    ebfc:	00800804 	movi	r2,32
    ec00:	10e5c83a 	sub	r18,r2,r3
    ec04:	9000901e 	bne	r18,zero,ee48 <__umoddi3+0x41c>
    ec08:	982cd43a 	srli	r22,r19,16
    ec0c:	8ce3c83a 	sub	r17,r17,r19
    ec10:	9d7fffcc 	andi	r21,r19,65535
    ec14:	b00b883a 	mov	r5,r22
    ec18:	8809883a 	mov	r4,r17
    ec1c:	0004e6c0 	call	4e6c <__umodsi3>
    ec20:	8809883a 	mov	r4,r17
    ec24:	b00b883a 	mov	r5,r22
    ec28:	1021883a 	mov	r16,r2
    ec2c:	0004e080 	call	4e08 <__udivsi3>
    ec30:	8006943a 	slli	r3,r16,16
    ec34:	a008d43a 	srli	r4,r20,16
    ec38:	1545383a 	mul	r2,r2,r21
    ec3c:	20c8b03a 	or	r4,r4,r3
    ec40:	2080042e 	bgeu	r4,r2,ec54 <__umoddi3+0x228>
    ec44:	24c9883a 	add	r4,r4,r19
    ec48:	24c00236 	bltu	r4,r19,ec54 <__umoddi3+0x228>
    ec4c:	2080012e 	bgeu	r4,r2,ec54 <__umoddi3+0x228>
    ec50:	24c9883a 	add	r4,r4,r19
    ec54:	20a1c83a 	sub	r16,r4,r2
    ec58:	b00b883a 	mov	r5,r22
    ec5c:	8009883a 	mov	r4,r16
    ec60:	0004e6c0 	call	4e6c <__umodsi3>
    ec64:	1023883a 	mov	r17,r2
    ec68:	b00b883a 	mov	r5,r22
    ec6c:	8009883a 	mov	r4,r16
    ec70:	0004e080 	call	4e08 <__udivsi3>
    ec74:	8822943a 	slli	r17,r17,16
    ec78:	1545383a 	mul	r2,r2,r21
    ec7c:	a53fffcc 	andi	r20,r20,65535
    ec80:	a446b03a 	or	r3,r20,r17
    ec84:	18bfb02e 	bgeu	r3,r2,eb48 <__alt_data_end+0xff80eb48>
    ec88:	003fab06 	br	eb38 <__alt_data_end+0xff80eb38>
    ec8c:	2005883a 	mov	r2,r4
    ec90:	2807883a 	mov	r3,r5
    ec94:	dfc00b17 	ldw	ra,44(sp)
    ec98:	df000a17 	ldw	fp,40(sp)
    ec9c:	ddc00917 	ldw	r23,36(sp)
    eca0:	dd800817 	ldw	r22,32(sp)
    eca4:	dd400717 	ldw	r21,28(sp)
    eca8:	dd000617 	ldw	r20,24(sp)
    ecac:	dcc00517 	ldw	r19,20(sp)
    ecb0:	dc800417 	ldw	r18,16(sp)
    ecb4:	dc400317 	ldw	r17,12(sp)
    ecb8:	dc000217 	ldw	r16,8(sp)
    ecbc:	dec00c04 	addi	sp,sp,48
    ecc0:	f800283a 	ret
    ecc4:	04c03fc4 	movi	r19,255
    ecc8:	99c9803a 	cmpltu	r4,r19,r7
    eccc:	200890fa 	slli	r4,r4,3
    ecd0:	003fa806 	br	eb74 <__alt_data_end+0xff80eb74>
    ecd4:	00803fc4 	movi	r2,255
    ecd8:	14c5803a 	cmpltu	r2,r2,r19
    ecdc:	100490fa 	slli	r2,r2,3
    ece0:	003fc006 	br	ebe4 <__alt_data_end+0xff80ebe4>
    ece4:	00804034 	movhi	r2,256
    ece8:	10bfffc4 	addi	r2,r2,-1
    ecec:	11808b36 	bltu	r2,r6,ef1c <__umoddi3+0x4f0>
    ecf0:	01000404 	movi	r4,16
    ecf4:	003f6406 	br	ea88 <__alt_data_end+0xff80ea88>
    ecf8:	34c4d83a 	srl	r2,r6,r19
    ecfc:	3d0e983a 	sll	r7,r7,r20
    ed00:	8cf8d83a 	srl	fp,r17,r19
    ed04:	8d10983a 	sll	r8,r17,r20
    ed08:	38aab03a 	or	r21,r7,r2
    ed0c:	a82cd43a 	srli	r22,r21,16
    ed10:	84e2d83a 	srl	r17,r16,r19
    ed14:	e009883a 	mov	r4,fp
    ed18:	b00b883a 	mov	r5,r22
    ed1c:	8a22b03a 	or	r17,r17,r8
    ed20:	3524983a 	sll	r18,r6,r20
    ed24:	0004e6c0 	call	4e6c <__umodsi3>
    ed28:	e009883a 	mov	r4,fp
    ed2c:	b00b883a 	mov	r5,r22
    ed30:	102f883a 	mov	r23,r2
    ed34:	0004e080 	call	4e08 <__udivsi3>
    ed38:	100d883a 	mov	r6,r2
    ed3c:	b808943a 	slli	r4,r23,16
    ed40:	aa3fffcc 	andi	r8,r21,65535
    ed44:	8804d43a 	srli	r2,r17,16
    ed48:	41af383a 	mul	r23,r8,r6
    ed4c:	8520983a 	sll	r16,r16,r20
    ed50:	1104b03a 	or	r2,r2,r4
    ed54:	15c0042e 	bgeu	r2,r23,ed68 <__umoddi3+0x33c>
    ed58:	1545883a 	add	r2,r2,r21
    ed5c:	30ffffc4 	addi	r3,r6,-1
    ed60:	1540742e 	bgeu	r2,r21,ef34 <__umoddi3+0x508>
    ed64:	180d883a 	mov	r6,r3
    ed68:	15efc83a 	sub	r23,r2,r23
    ed6c:	b00b883a 	mov	r5,r22
    ed70:	b809883a 	mov	r4,r23
    ed74:	d9800115 	stw	r6,4(sp)
    ed78:	da000015 	stw	r8,0(sp)
    ed7c:	0004e6c0 	call	4e6c <__umodsi3>
    ed80:	b00b883a 	mov	r5,r22
    ed84:	b809883a 	mov	r4,r23
    ed88:	1039883a 	mov	fp,r2
    ed8c:	0004e080 	call	4e08 <__udivsi3>
    ed90:	da000017 	ldw	r8,0(sp)
    ed94:	e038943a 	slli	fp,fp,16
    ed98:	100b883a 	mov	r5,r2
    ed9c:	4089383a 	mul	r4,r8,r2
    eda0:	8a3fffcc 	andi	r8,r17,65535
    eda4:	4710b03a 	or	r8,r8,fp
    eda8:	d9800117 	ldw	r6,4(sp)
    edac:	4100042e 	bgeu	r8,r4,edc0 <__umoddi3+0x394>
    edb0:	4551883a 	add	r8,r8,r21
    edb4:	10bfffc4 	addi	r2,r2,-1
    edb8:	45405a2e 	bgeu	r8,r21,ef24 <__umoddi3+0x4f8>
    edbc:	100b883a 	mov	r5,r2
    edc0:	300c943a 	slli	r6,r6,16
    edc4:	91ffffcc 	andi	r7,r18,65535
    edc8:	9004d43a 	srli	r2,r18,16
    edcc:	314cb03a 	or	r6,r6,r5
    edd0:	317fffcc 	andi	r5,r6,65535
    edd4:	300cd43a 	srli	r6,r6,16
    edd8:	29d3383a 	mul	r9,r5,r7
    eddc:	288b383a 	mul	r5,r5,r2
    ede0:	31cf383a 	mul	r7,r6,r7
    ede4:	4806d43a 	srli	r3,r9,16
    ede8:	4111c83a 	sub	r8,r8,r4
    edec:	29cb883a 	add	r5,r5,r7
    edf0:	194b883a 	add	r5,r3,r5
    edf4:	3085383a 	mul	r2,r6,r2
    edf8:	29c0022e 	bgeu	r5,r7,ee04 <__umoddi3+0x3d8>
    edfc:	00c00074 	movhi	r3,1
    ee00:	10c5883a 	add	r2,r2,r3
    ee04:	2808d43a 	srli	r4,r5,16
    ee08:	280a943a 	slli	r5,r5,16
    ee0c:	4a7fffcc 	andi	r9,r9,65535
    ee10:	2085883a 	add	r2,r4,r2
    ee14:	2a4b883a 	add	r5,r5,r9
    ee18:	40803636 	bltu	r8,r2,eef4 <__umoddi3+0x4c8>
    ee1c:	40804d26 	beq	r8,r2,ef54 <__umoddi3+0x528>
    ee20:	4089c83a 	sub	r4,r8,r2
    ee24:	280f883a 	mov	r7,r5
    ee28:	81cfc83a 	sub	r7,r16,r7
    ee2c:	81c7803a 	cmpltu	r3,r16,r7
    ee30:	20c7c83a 	sub	r3,r4,r3
    ee34:	1cc4983a 	sll	r2,r3,r19
    ee38:	3d0ed83a 	srl	r7,r7,r20
    ee3c:	1d06d83a 	srl	r3,r3,r20
    ee40:	11c4b03a 	or	r2,r2,r7
    ee44:	003f9306 	br	ec94 <__alt_data_end+0xff80ec94>
    ee48:	9ca6983a 	sll	r19,r19,r18
    ee4c:	88e8d83a 	srl	r20,r17,r3
    ee50:	80c4d83a 	srl	r2,r16,r3
    ee54:	982cd43a 	srli	r22,r19,16
    ee58:	8ca2983a 	sll	r17,r17,r18
    ee5c:	a009883a 	mov	r4,r20
    ee60:	b00b883a 	mov	r5,r22
    ee64:	1478b03a 	or	fp,r2,r17
    ee68:	0004e6c0 	call	4e6c <__umodsi3>
    ee6c:	a009883a 	mov	r4,r20
    ee70:	b00b883a 	mov	r5,r22
    ee74:	1023883a 	mov	r17,r2
    ee78:	0004e080 	call	4e08 <__udivsi3>
    ee7c:	9d7fffcc 	andi	r21,r19,65535
    ee80:	880a943a 	slli	r5,r17,16
    ee84:	e008d43a 	srli	r4,fp,16
    ee88:	a885383a 	mul	r2,r21,r2
    ee8c:	84a8983a 	sll	r20,r16,r18
    ee90:	2148b03a 	or	r4,r4,r5
    ee94:	2080042e 	bgeu	r4,r2,eea8 <__umoddi3+0x47c>
    ee98:	24c9883a 	add	r4,r4,r19
    ee9c:	24c00236 	bltu	r4,r19,eea8 <__umoddi3+0x47c>
    eea0:	2080012e 	bgeu	r4,r2,eea8 <__umoddi3+0x47c>
    eea4:	24c9883a 	add	r4,r4,r19
    eea8:	20a3c83a 	sub	r17,r4,r2
    eeac:	b00b883a 	mov	r5,r22
    eeb0:	8809883a 	mov	r4,r17
    eeb4:	0004e6c0 	call	4e6c <__umodsi3>
    eeb8:	102f883a 	mov	r23,r2
    eebc:	8809883a 	mov	r4,r17
    eec0:	b00b883a 	mov	r5,r22
    eec4:	0004e080 	call	4e08 <__udivsi3>
    eec8:	b82e943a 	slli	r23,r23,16
    eecc:	a885383a 	mul	r2,r21,r2
    eed0:	e13fffcc 	andi	r4,fp,65535
    eed4:	25c8b03a 	or	r4,r4,r23
    eed8:	2080042e 	bgeu	r4,r2,eeec <__umoddi3+0x4c0>
    eedc:	24c9883a 	add	r4,r4,r19
    eee0:	24c00236 	bltu	r4,r19,eeec <__umoddi3+0x4c0>
    eee4:	2080012e 	bgeu	r4,r2,eeec <__umoddi3+0x4c0>
    eee8:	24c9883a 	add	r4,r4,r19
    eeec:	20a3c83a 	sub	r17,r4,r2
    eef0:	003f4806 	br	ec14 <__alt_data_end+0xff80ec14>
    eef4:	2c8fc83a 	sub	r7,r5,r18
    eef8:	1545c83a 	sub	r2,r2,r21
    eefc:	29cb803a 	cmpltu	r5,r5,r7
    ef00:	1145c83a 	sub	r2,r2,r5
    ef04:	4089c83a 	sub	r4,r8,r2
    ef08:	003fc706 	br	ee28 <__alt_data_end+0xff80ee28>
    ef0c:	01000604 	movi	r4,24
    ef10:	003f1806 	br	eb74 <__alt_data_end+0xff80eb74>
    ef14:	00800604 	movi	r2,24
    ef18:	003f3206 	br	ebe4 <__alt_data_end+0xff80ebe4>
    ef1c:	01000604 	movi	r4,24
    ef20:	003ed906 	br	ea88 <__alt_data_end+0xff80ea88>
    ef24:	413fa52e 	bgeu	r8,r4,edbc <__alt_data_end+0xff80edbc>
    ef28:	297fff84 	addi	r5,r5,-2
    ef2c:	4551883a 	add	r8,r8,r21
    ef30:	003fa306 	br	edc0 <__alt_data_end+0xff80edc0>
    ef34:	15ff8b2e 	bgeu	r2,r23,ed64 <__alt_data_end+0xff80ed64>
    ef38:	31bfff84 	addi	r6,r6,-2
    ef3c:	1545883a 	add	r2,r2,r21
    ef40:	003f8906 	br	ed68 <__alt_data_end+0xff80ed68>
    ef44:	24c9883a 	add	r4,r4,r19
    ef48:	003eee06 	br	eb04 <__alt_data_end+0xff80eb04>
    ef4c:	8005883a 	mov	r2,r16
    ef50:	003f1706 	br	ebb0 <__alt_data_end+0xff80ebb0>
    ef54:	817fe736 	bltu	r16,r5,eef4 <__alt_data_end+0xff80eef4>
    ef58:	280f883a 	mov	r7,r5
    ef5c:	0009883a 	mov	r4,zero
    ef60:	003fb106 	br	ee28 <__alt_data_end+0xff80ee28>

0000ef64 <__eqdf2>:
    ef64:	2804d53a 	srli	r2,r5,20
    ef68:	3806d53a 	srli	r3,r7,20
    ef6c:	02000434 	movhi	r8,16
    ef70:	423fffc4 	addi	r8,r8,-1
    ef74:	1081ffcc 	andi	r2,r2,2047
    ef78:	0281ffc4 	movi	r10,2047
    ef7c:	2a12703a 	and	r9,r5,r8
    ef80:	18c1ffcc 	andi	r3,r3,2047
    ef84:	3a10703a 	and	r8,r7,r8
    ef88:	280ad7fa 	srli	r5,r5,31
    ef8c:	380ed7fa 	srli	r7,r7,31
    ef90:	12801026 	beq	r2,r10,efd4 <__eqdf2+0x70>
    ef94:	0281ffc4 	movi	r10,2047
    ef98:	1a800a26 	beq	r3,r10,efc4 <__eqdf2+0x60>
    ef9c:	10c00226 	beq	r2,r3,efa8 <__eqdf2+0x44>
    efa0:	00800044 	movi	r2,1
    efa4:	f800283a 	ret
    efa8:	4a3ffd1e 	bne	r9,r8,efa0 <__alt_data_end+0xff80efa0>
    efac:	21bffc1e 	bne	r4,r6,efa0 <__alt_data_end+0xff80efa0>
    efb0:	29c00c26 	beq	r5,r7,efe4 <__eqdf2+0x80>
    efb4:	103ffa1e 	bne	r2,zero,efa0 <__alt_data_end+0xff80efa0>
    efb8:	2244b03a 	or	r2,r4,r9
    efbc:	1004c03a 	cmpne	r2,r2,zero
    efc0:	f800283a 	ret
    efc4:	3214b03a 	or	r10,r6,r8
    efc8:	503ff426 	beq	r10,zero,ef9c <__alt_data_end+0xff80ef9c>
    efcc:	00800044 	movi	r2,1
    efd0:	f800283a 	ret
    efd4:	2254b03a 	or	r10,r4,r9
    efd8:	503fee26 	beq	r10,zero,ef94 <__alt_data_end+0xff80ef94>
    efdc:	00800044 	movi	r2,1
    efe0:	f800283a 	ret
    efe4:	0005883a 	mov	r2,zero
    efe8:	f800283a 	ret

0000efec <__fixdfsi>:
    efec:	280cd53a 	srli	r6,r5,20
    eff0:	00c00434 	movhi	r3,16
    eff4:	18ffffc4 	addi	r3,r3,-1
    eff8:	3181ffcc 	andi	r6,r6,2047
    effc:	01c0ff84 	movi	r7,1022
    f000:	28c6703a 	and	r3,r5,r3
    f004:	280ad7fa 	srli	r5,r5,31
    f008:	3980120e 	bge	r7,r6,f054 <__fixdfsi+0x68>
    f00c:	00810744 	movi	r2,1053
    f010:	11800c16 	blt	r2,r6,f044 <__fixdfsi+0x58>
    f014:	00810cc4 	movi	r2,1075
    f018:	1185c83a 	sub	r2,r2,r6
    f01c:	01c007c4 	movi	r7,31
    f020:	18c00434 	orhi	r3,r3,16
    f024:	38800d16 	blt	r7,r2,f05c <__fixdfsi+0x70>
    f028:	31befb44 	addi	r6,r6,-1043
    f02c:	2084d83a 	srl	r2,r4,r2
    f030:	1986983a 	sll	r3,r3,r6
    f034:	1884b03a 	or	r2,r3,r2
    f038:	28000726 	beq	r5,zero,f058 <__fixdfsi+0x6c>
    f03c:	0085c83a 	sub	r2,zero,r2
    f040:	f800283a 	ret
    f044:	00a00034 	movhi	r2,32768
    f048:	10bfffc4 	addi	r2,r2,-1
    f04c:	2885883a 	add	r2,r5,r2
    f050:	f800283a 	ret
    f054:	0005883a 	mov	r2,zero
    f058:	f800283a 	ret
    f05c:	008104c4 	movi	r2,1043
    f060:	1185c83a 	sub	r2,r2,r6
    f064:	1884d83a 	srl	r2,r3,r2
    f068:	003ff306 	br	f038 <__alt_data_end+0xff80f038>

0000f06c <__floatunsidf>:
    f06c:	defffe04 	addi	sp,sp,-8
    f070:	dc000015 	stw	r16,0(sp)
    f074:	dfc00115 	stw	ra,4(sp)
    f078:	2021883a 	mov	r16,r4
    f07c:	20002226 	beq	r4,zero,f108 <__floatunsidf+0x9c>
    f080:	0004cac0 	call	4cac <__clzsi2>
    f084:	01010784 	movi	r4,1054
    f088:	2089c83a 	sub	r4,r4,r2
    f08c:	01810cc4 	movi	r6,1075
    f090:	310dc83a 	sub	r6,r6,r4
    f094:	00c007c4 	movi	r3,31
    f098:	1980120e 	bge	r3,r6,f0e4 <__floatunsidf+0x78>
    f09c:	00c104c4 	movi	r3,1043
    f0a0:	1907c83a 	sub	r3,r3,r4
    f0a4:	80ca983a 	sll	r5,r16,r3
    f0a8:	00800434 	movhi	r2,16
    f0ac:	10bfffc4 	addi	r2,r2,-1
    f0b0:	2101ffcc 	andi	r4,r4,2047
    f0b4:	0021883a 	mov	r16,zero
    f0b8:	288a703a 	and	r5,r5,r2
    f0bc:	2008953a 	slli	r4,r4,20
    f0c0:	00c00434 	movhi	r3,16
    f0c4:	18ffffc4 	addi	r3,r3,-1
    f0c8:	28c6703a 	and	r3,r5,r3
    f0cc:	8005883a 	mov	r2,r16
    f0d0:	1906b03a 	or	r3,r3,r4
    f0d4:	dfc00117 	ldw	ra,4(sp)
    f0d8:	dc000017 	ldw	r16,0(sp)
    f0dc:	dec00204 	addi	sp,sp,8
    f0e0:	f800283a 	ret
    f0e4:	00c002c4 	movi	r3,11
    f0e8:	188bc83a 	sub	r5,r3,r2
    f0ec:	814ad83a 	srl	r5,r16,r5
    f0f0:	00c00434 	movhi	r3,16
    f0f4:	18ffffc4 	addi	r3,r3,-1
    f0f8:	81a0983a 	sll	r16,r16,r6
    f0fc:	2101ffcc 	andi	r4,r4,2047
    f100:	28ca703a 	and	r5,r5,r3
    f104:	003fed06 	br	f0bc <__alt_data_end+0xff80f0bc>
    f108:	0009883a 	mov	r4,zero
    f10c:	000b883a 	mov	r5,zero
    f110:	003fea06 	br	f0bc <__alt_data_end+0xff80f0bc>

0000f114 <close>:

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    f114:	d0a00717 	ldw	r2,-32740(gp)
    f118:	10000926 	beq	r2,zero,f140 <close+0x2c>
#include "os/alt_syscall.h"

#ifdef ALT_USE_DIRECT_DRIVERS

int ALT_CLOSE (int fildes)
{
    f11c:	deffff04 	addi	sp,sp,-4
    f120:	dfc00015 	stw	ra,0(sp)
    f124:	103ee83a 	callr	r2
  
  ALT_STUB_WARNING(close);
  
  /* Indicate an error */
  
  ALT_ERRNO = ENOSYS;
    f128:	00c01604 	movi	r3,88
    f12c:	10c00015 	stw	r3,0(r2)
  return -1;
}
    f130:	00bfffc4 	movi	r2,-1
    f134:	dfc00017 	ldw	ra,0(sp)
    f138:	dec00104 	addi	sp,sp,4
    f13c:	f800283a 	ret
    f140:	d0a69b04 	addi	r2,gp,-26004
  
  ALT_STUB_WARNING(close);
  
  /* Indicate an error */
  
  ALT_ERRNO = ENOSYS;
    f144:	00c01604 	movi	r3,88
    f148:	10c00015 	stw	r3,0(r2)
  return -1;
}
    f14c:	00bfffc4 	movi	r2,-1
    f150:	f800283a 	ret

0000f154 <fstat>:
 * Provide minimal version that just describes all file descriptors 
 * as character devices for provided stdio devices.
 */
int ALT_FSTAT (int file, struct stat *st)
{
    switch (file) {
    f154:	00800084 	movi	r2,2
    f158:	11000436 	bltu	r2,r4,f16c <fstat+0x18>
    case 1: /* stdout file descriptor */
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
#endif /* ALT_STDERR_PRESENT */
        st->st_mode = _IFCHR;
    f15c:	00880004 	movi	r2,8192
    f160:	28800115 	stw	r2,4(r5)
        return 0;
    f164:	0005883a 	mov	r2,zero
    f168:	f800283a 	ret
    default:
        return -1;
    f16c:	00bfffc4 	movi	r2,-1

#if !defined(ALT_STDIN_PRESENT) && !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(fstat);
#endif
}
    f170:	f800283a 	ret

0000f174 <isatty>:

#if !defined(ALT_STDIN_PRESENT) && !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(isatty);
#endif
}
    f174:	00800084 	movi	r2,2
    f178:	1105403a 	cmpgeu	r2,r2,r4
    f17c:	f800283a 	ret

0000f180 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    f180:	deffff04 	addi	sp,sp,-4
    f184:	01000074 	movhi	r4,1
    f188:	01400074 	movhi	r5,1
    f18c:	dfc00015 	stw	ra,0(sp)
    f190:	2104dd04 	addi	r4,r4,4980
    f194:	294b5604 	addi	r5,r5,11608

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    f198:	2140061e 	bne	r4,r5,f1b4 <alt_load+0x34>
    f19c:	01000034 	movhi	r4,0
    f1a0:	01400034 	movhi	r5,0
    f1a4:	21000804 	addi	r4,r4,32
    f1a8:	29400804 	addi	r5,r5,32
    f1ac:	2140121e 	bne	r4,r5,f1f8 <alt_load+0x78>
    f1b0:	00000b06 	br	f1e0 <alt_load+0x60>
    f1b4:	00c00074 	movhi	r3,1
    f1b8:	18cb5604 	addi	r3,r3,11608
    f1bc:	1907c83a 	sub	r3,r3,r4
    f1c0:	0005883a 	mov	r2,zero
  {
    while( to != end )
    f1c4:	10fff526 	beq	r2,r3,f19c <__alt_data_end+0xff80f19c>
    {
      *to++ = *from++;
    f1c8:	114f883a 	add	r7,r2,r5
    f1cc:	39c00017 	ldw	r7,0(r7)
    f1d0:	110d883a 	add	r6,r2,r4
    f1d4:	10800104 	addi	r2,r2,4
    f1d8:	31c00015 	stw	r7,0(r6)
    f1dc:	003ff906 	br	f1c4 <__alt_data_end+0xff80f1c4>
    f1e0:	01000074 	movhi	r4,1
    f1e4:	01400074 	movhi	r5,1
    f1e8:	2103ea04 	addi	r4,r4,4008
    f1ec:	2943ea04 	addi	r5,r5,4008

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    f1f0:	2140101e 	bne	r4,r5,f234 <alt_load+0xb4>
    f1f4:	00000b06 	br	f224 <alt_load+0xa4>
    f1f8:	00c00034 	movhi	r3,0
    f1fc:	18c00804 	addi	r3,r3,32
    f200:	1907c83a 	sub	r3,r3,r4
    f204:	0005883a 	mov	r2,zero
  {
    while( to != end )
    f208:	10fff526 	beq	r2,r3,f1e0 <__alt_data_end+0xff80f1e0>
    {
      *to++ = *from++;
    f20c:	114f883a 	add	r7,r2,r5
    f210:	39c00017 	ldw	r7,0(r7)
    f214:	110d883a 	add	r6,r2,r4
    f218:	10800104 	addi	r2,r2,4
    f21c:	31c00015 	stw	r7,0(r6)
    f220:	003ff906 	br	f208 <__alt_data_end+0xff80f208>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    f224:	0010cf40 	call	10cf4 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    f228:	dfc00017 	ldw	ra,0(sp)
    f22c:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    f230:	0010dec1 	jmpi	10dec <alt_icache_flush_all>
    f234:	00c00074 	movhi	r3,1
    f238:	18c4dd04 	addi	r3,r3,4980
    f23c:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    f240:	0005883a 	mov	r2,zero
  {
    while( to != end )
    f244:	18bff726 	beq	r3,r2,f224 <__alt_data_end+0xff80f224>
    {
      *to++ = *from++;
    f248:	114f883a 	add	r7,r2,r5
    f24c:	39c00017 	ldw	r7,0(r7)
    f250:	110d883a 	add	r6,r2,r4
    f254:	10800104 	addi	r2,r2,4
    f258:	31c00015 	stw	r7,0(r6)
    f25c:	003ff906 	br	f244 <__alt_data_end+0xff80f244>

0000f260 <lseek>:
    f260:	d0a00717 	ldw	r2,-32740(gp)
    f264:	10000926 	beq	r2,zero,f28c <lseek+0x2c>
#include "os/alt_syscall.h"

#ifdef ALT_USE_DIRECT_DRIVERS

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    f268:	deffff04 	addi	sp,sp,-4
    f26c:	dfc00015 	stw	ra,0(sp)
    f270:	103ee83a 	callr	r2
  
  ALT_STUB_WARNING(lseek);
  
  /* Indicate an error */
  
  ALT_ERRNO = ENOSYS;
    f274:	00c01604 	movi	r3,88
    f278:	10c00015 	stw	r3,0(r2)
  return -1;
}
    f27c:	00bfffc4 	movi	r2,-1
    f280:	dfc00017 	ldw	ra,0(sp)
    f284:	dec00104 	addi	sp,sp,4
    f288:	f800283a 	ret
    f28c:	d0a69b04 	addi	r2,gp,-26004
  
  ALT_STUB_WARNING(lseek);
  
  /* Indicate an error */
  
  ALT_ERRNO = ENOSYS;
    f290:	00c01604 	movi	r3,88
    f294:	10c00015 	stw	r3,0(r2)
  return -1;
}
    f298:	00bfffc4 	movi	r2,-1
    f29c:	f800283a 	ret

0000f2a0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    f2a0:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    f2a4:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    f2a8:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    f2ac:	000f42c0 	call	f42c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    f2b0:	000f4580 	call	f458 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    f2b4:	d1a69c17 	ldw	r6,-26000(gp)
    f2b8:	d1669d17 	ldw	r5,-25996(gp)
    f2bc:	d1269e17 	ldw	r4,-25992(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    f2c0:	dfc00017 	ldw	ra,0(sp)
    f2c4:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    f2c8:	00006b01 	jmpi	6b0 <main>

0000f2cc <__malloc_lock>:
    f2cc:	f800283a 	ret

0000f2d0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    f2d0:	f800283a 	ret

0000f2d4 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    f2d4:	defffe04 	addi	sp,sp,-8
    f2d8:	dc000015 	stw	r16,0(sp)
    f2dc:	dfc00115 	stw	ra,4(sp)
    f2e0:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    f2e4:	000515c0 	call	515c <strlen>
    f2e8:	01000074 	movhi	r4,1
    f2ec:	000f883a 	mov	r7,zero
    f2f0:	100d883a 	mov	r6,r2
    f2f4:	800b883a 	mov	r5,r16
    f2f8:	21070604 	addi	r4,r4,7192
#else
    return fputs(str, stdout);
#endif
#endif
}
    f2fc:	dfc00117 	ldw	ra,4(sp)
    f300:	dc000017 	ldw	r16,0(sp)
    f304:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    f308:	00108e81 	jmpi	108e8 <altera_avalon_jtag_uart_write>

0000f30c <read>:
#if !defined(ALT_STDIN_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(read);
#endif

    switch (file) {
    f30c:	2000041e 	bne	r4,zero,f320 <read+0x14>
#ifdef ALT_STDIN_PRESENT
    case 0: /* stdin file descriptor */
        return ALT_DRIVER_READ(ALT_STDIN_DEV, ptr, len, 0);
    f310:	01000074 	movhi	r4,1
    f314:	000f883a 	mov	r7,zero
    f318:	21070604 	addi	r4,r4,7192
    f31c:	00107981 	jmpi	10798 <altera_avalon_jtag_uart_read>
    f320:	d0a00717 	ldw	r2,-32740(gp)
    f324:	10000926 	beq	r2,zero,f34c <read+0x40>
/*
 * Provide minimal version that just reads from the stdin device when provided.
 */

int ALT_READ (int file, void *ptr, size_t len)
{
    f328:	deffff04 	addi	sp,sp,-4
    f32c:	dfc00015 	stw	ra,0(sp)
    f330:	103ee83a 	callr	r2
#ifdef ALT_STDIN_PRESENT
    case 0: /* stdin file descriptor */
        return ALT_DRIVER_READ(ALT_STDIN_DEV, ptr, len, 0);
#endif /* ALT_STDIN_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    f334:	00c01444 	movi	r3,81
    f338:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    f33c:	00bfffc4 	movi	r2,-1
    f340:	dfc00017 	ldw	ra,0(sp)
    f344:	dec00104 	addi	sp,sp,4
    f348:	f800283a 	ret
    f34c:	d0a69b04 	addi	r2,gp,-26004
#ifdef ALT_STDIN_PRESENT
    case 0: /* stdin file descriptor */
        return ALT_DRIVER_READ(ALT_STDIN_DEV, ptr, len, 0);
#endif /* ALT_STDIN_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    f350:	00c01444 	movi	r3,81
    f354:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    f358:	00bfffc4 	movi	r2,-1
    f35c:	f800283a 	ret

0000f360 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f360:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f364:	00ffff84 	movi	r3,-2
    f368:	30c4703a 	and	r2,r6,r3
    f36c:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    f370:	d0a00817 	ldw	r2,-32736(gp)
    f374:	017fff04 	movi	r5,-4
    f378:	108000c4 	addi	r2,r2,3
    f37c:	1144703a 	and	r2,r2,r5
    f380:	3140004c 	andi	r5,r6,1
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    f384:	01802034 	movhi	r6,128
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    f388:	d0a00815 	stw	r2,-32736(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    f38c:	1109883a 	add	r4,r2,r4
    f390:	31800004 	addi	r6,r6,0
    f394:	3100062e 	bgeu	r6,r4,f3b0 <sbrk+0x50>
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
    f398:	0005303a 	rdctl	r2,status
  
  status &= ~NIOS2_STATUS_PIE_MSK;
    f39c:	10c4703a 	and	r2,r2,r3
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
    f3a0:	2886b03a 	or	r3,r5,r2
    f3a4:	1801703a 	wrctl	status,r3
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    f3a8:	00bfffc4 	movi	r2,-1
    f3ac:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
    f3b0:	d1200815 	stw	r4,-32736(gp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
    f3b4:	0009303a 	rdctl	r4,status
  
  status &= ~NIOS2_STATUS_PIE_MSK;
    f3b8:	20c6703a 	and	r3,r4,r3
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
    f3bc:	28c6b03a 	or	r3,r5,r3
    f3c0:	1801703a 	wrctl	status,r3
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
    f3c4:	f800283a 	ret

0000f3c8 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    f3c8:	0010c7c1 	jmpi	10c7c <alt_busy_sleep>

0000f3cc <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    f3cc:	00800044 	movi	r2,1
    f3d0:	20800226 	beq	r4,r2,f3dc <write+0x10>
    f3d4:	00800084 	movi	r2,2
    f3d8:	2080041e 	bne	r4,r2,f3ec <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    f3dc:	01000074 	movhi	r4,1
    f3e0:	000f883a 	mov	r7,zero
    f3e4:	21070604 	addi	r4,r4,7192
    f3e8:	00108e81 	jmpi	108e8 <altera_avalon_jtag_uart_write>
    f3ec:	d0a00717 	ldw	r2,-32740(gp)
    f3f0:	10000926 	beq	r2,zero,f418 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    f3f4:	deffff04 	addi	sp,sp,-4
    f3f8:	dfc00015 	stw	ra,0(sp)
    f3fc:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    f400:	00c01444 	movi	r3,81
    f404:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    f408:	00bfffc4 	movi	r2,-1
    f40c:	dfc00017 	ldw	ra,0(sp)
    f410:	dec00104 	addi	sp,sp,4
    f414:	f800283a 	ret
    f418:	d0a69b04 	addi	r2,gp,-26004
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    f41c:	00c01444 	movi	r3,81
    f420:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    f424:	00bfffc4 	movi	r2,-1
    f428:	f800283a 	ret

0000f42c <alt_irq_init>:
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    ALTERA_VIC_IRQ_INIT ( VIC_0, vic_0);
    f42c:	01000074 	movhi	r4,1
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    f430:	deffff04 	addi	sp,sp,-4
    ALTERA_VIC_IRQ_INIT ( VIC_0, vic_0);
    f434:	210b2204 	addi	r4,r4,11400
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    f438:	dfc00015 	stw	ra,0(sp)
    ALTERA_VIC_IRQ_INIT ( VIC_0, vic_0);
    f43c:	0010ac00 	call	10ac0 <alt_vic_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    f440:	00802034 	movhi	r2,128
    f444:	10800044 	addi	r2,r2,1
    f448:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    f44c:	dfc00017 	ldw	ra,0(sp)
    f450:	dec00104 	addi	sp,sp,4
    f454:	f800283a 	ret

0000f458 <alt_sys_init>:
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
    f458:	01000074 	movhi	r4,1
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    f45c:	deffff04 	addi	sp,sp,-4
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
    f460:	210b1404 	addi	r4,r4,11344
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    f464:	dfc00015 	stw	ra,0(sp)
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
    f468:	00101a40 	call	101a4 <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    f46c:	01000074 	movhi	r4,1
    f470:	01800084 	movi	r6,2
    f474:	000b883a 	mov	r5,zero
    f478:	21070604 	addi	r4,r4,7192
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
}
    f47c:	dfc00017 	ldw	ra,0(sp)
    f480:	dec00104 	addi	sp,sp,4
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    f484:	00106f01 	jmpi	106f0 <altera_avalon_jtag_uart_init>

0000f488 <alt_avalon_i2c_register_optional_irq_handler>:
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
    dev->callback         = callback;
    f488:	00800074 	movhi	r2,1
    irq->irq_busy=0;
}

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
   irq_data->irq_busy=0;
    f48c:	28000215 	stw	zero,8(r5)
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
    dev->callback         = callback;
    f490:	10bf4704 	addi	r2,r2,-740
    f494:	20800615 	stw	r2,24(r4)
    dev->callback_context = context;
    f498:	21400715 	stw	r5,28(r4)
    dev->control          = control;
    f49c:	20000815 	stw	zero,32(r4)
    f4a0:	f800283a 	ret

0000f4a4 <alt_avalon_i2c_register_callback>:
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
    dev->callback         = callback;
    f4a4:	21400615 	stw	r5,24(r4)
    dev->callback_context = context;
    f4a8:	21c00715 	stw	r7,28(r4)
    dev->control          = control;
    f4ac:	21800815 	stw	r6,32(r4)
    f4b0:	f800283a 	ret

0000f4b4 <alt_avalon_i2c_open>:
/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
    ALT_AVALON_I2C_DEV_t* dev = NULL;

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
    f4b4:	d1600904 	addi	r5,gp,-32732
    f4b8:	0010d781 	jmpi	10d78 <alt_find_dev>

0000f4bc <alt_avalon_i2c_enable>:
}

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
    f4bc:	21400717 	ldw	r5,28(r4)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
    f4c0:	20800317 	ldw	r2,12(r4)
    f4c4:	10c00237 	ldwio	r3,8(r2)
   if (enable_status)
    f4c8:	18c0004c 	andi	r3,r3,1
    f4cc:	18000b1e 	bne	r3,zero,f4fc <alt_avalon_i2c_enable+0x40>
   {
     return ALT_AVALON_I2C_BUSY;
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
    f4d0:	21000617 	ldw	r4,24(r4)
    f4d4:	00c00074 	movhi	r3,1
    f4d8:	18ff4704 	addi	r3,r3,-740
    f4dc:	20c0011e 	bne	r4,r3,f4e4 <alt_avalon_i2c_enable+0x28>
   {
     irq_data->irq_busy=0;
    f4e0:	28000215 	stw	zero,8(r5)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
    f4e4:	10800204 	addi	r2,r2,8
    f4e8:	10c00037 	ldwio	r3,0(r2)
    f4ec:	18c00054 	ori	r3,r3,1
    f4f0:	10c00035 	stwio	r3,0(r2)
    f4f4:	0005883a 	mov	r2,zero
    f4f8:	f800283a 	ret
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
   if (enable_status)
   {
     return ALT_AVALON_I2C_BUSY;
    f4fc:	00bffe44 	movi	r2,-7
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);

   return ALT_AVALON_I2C_SUCCESS;
}
    f500:	f800283a 	ret

0000f504 <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
    f504:	20800317 	ldw	r2,12(r4)
    f508:	10800204 	addi	r2,r2,8
    f50c:	11000037 	ldwio	r4,0(r2)
    f510:	00ffff84 	movi	r3,-2
    f514:	20c6703a 	and	r3,r4,r3
    f518:	10c00035 	stwio	r3,0(r2)
    f51c:	f800283a 	ret

0000f520 <alt_avalon_i2c_master_config_get>:
/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{

    cfg->addr_mode = i2c_dev->address_mode;
    f520:	20800d17 	ldw	r2,52(r4)
    f524:	28800015 	stw	r2,0(r5)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
    f528:	20800317 	ldw	r2,12(r4)
    f52c:	10800237 	ldwio	r2,8(r2)
    f530:	1080008c 	andi	r2,r2,2
    f534:	1005d07a 	srai	r2,r2,1
    f538:	28800115 	stw	r2,4(r5)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
    f53c:	20800317 	ldw	r2,12(r4)
    f540:	10800937 	ldwio	r2,36(r2)
    f544:	2880020d 	sth	r2,8(r5)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
    f548:	20800317 	ldw	r2,12(r4)
    f54c:	10800837 	ldwio	r2,32(r2)
    f550:	2880028d 	sth	r2,10(r5)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
    f554:	20800317 	ldw	r2,12(r4)
    f558:	10800a37 	ldwio	r2,40(r2)
    f55c:	2880030d 	sth	r2,12(r5)
    f560:	f800283a 	ret

0000f564 <alt_avalon_i2c_master_config_set>:
/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
    i2c_dev->address_mode   =   cfg->addr_mode;
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
    f564:	21800317 	ldw	r6,12(r4)

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
    i2c_dev->address_mode   =   cfg->addr_mode;
    f568:	28800017 	ldw	r2,0(r5)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
    f56c:	31800204 	addi	r6,r6,8

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
    i2c_dev->address_mode   =   cfg->addr_mode;
    f570:	20800d15 	stw	r2,52(r4)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
    f574:	31c00037 	ldwio	r7,0(r6)
    f578:	00ffff44 	movi	r3,-3
    f57c:	28800117 	ldw	r2,4(r5)
    f580:	38c6703a 	and	r3,r7,r3
    f584:	1085883a 	add	r2,r2,r2
    f588:	1080008c 	andi	r2,r2,2
    f58c:	10c4b03a 	or	r2,r2,r3
    f590:	30800035 	stwio	r2,0(r6)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
    f594:	20800317 	ldw	r2,12(r4)
    f598:	28c0020b 	ldhu	r3,8(r5)
    f59c:	10c00935 	stwio	r3,36(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
    f5a0:	20800317 	ldw	r2,12(r4)
    f5a4:	28c0028b 	ldhu	r3,10(r5)
    f5a8:	10c00835 	stwio	r3,32(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
    f5ac:	20800317 	ldw	r2,12(r4)
    f5b0:	28c0030b 	ldhu	r3,12(r5)
    f5b4:	10c00a35 	stwio	r3,40(r2)
    f5b8:	f800283a 	ret

0000f5bc <alt_avalon_i2c_master_config_speed_get>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
    f5bc:	28c0028b 	ldhu	r3,10(r5)
    f5c0:	18000f26 	beq	r3,zero,f600 <alt_avalon_i2c_master_config_speed_get+0x44>
    f5c4:	2940020b 	ldhu	r5,8(r5)
    f5c8:	28000d26 	beq	r5,zero,f600 <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
    f5cc:	21000c17 	ldw	r4,48(r4)
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
    f5d0:	defffe04 	addi	sp,sp,-8
   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   {
       return ALT_AVALON_I2C_BAD_ARG;
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
    f5d4:	194b883a 	add	r5,r3,r5
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
    f5d8:	dc000015 	stw	r16,0(sp)
    f5dc:	dfc00115 	stw	ra,4(sp)
    f5e0:	3021883a 	mov	r16,r6
   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   {
       return ALT_AVALON_I2C_BAD_ARG;
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
    f5e4:	0004e080 	call	4e08 <__udivsi3>
    f5e8:	80800015 	stw	r2,0(r16)

   return ALT_AVALON_I2C_SUCCESS;
    f5ec:	0005883a 	mov	r2,zero
}
    f5f0:	dfc00117 	ldw	ra,4(sp)
    f5f4:	dc000017 	ldw	r16,0(sp)
    f5f8:	dec00204 	addi	sp,sp,8
    f5fc:	f800283a 	ret
                                                alt_u32 * speed_in_hz)
{

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   {
       return ALT_AVALON_I2C_BAD_ARG;
    f600:	00bfff44 	movi	r2,-3
    f604:	f800283a 	ret

0000f608 <alt_avalon_i2c_master_config_speed_set>:
                                                alt_u32 speed_in_hz)
{
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
    f608:	00c001b4 	movhi	r3,6
    f60c:	30bfffc4 	addi	r2,r6,-1
    f610:	18c69fc4 	addi	r3,r3,6783
    f614:	18801d36 	bltu	r3,r2,f68c <alt_avalon_i2c_master_config_speed_set+0x84>
    {
        return ALT_AVALON_I2C_RANGE;
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
    f618:	21000c17 	ldw	r4,48(r4)
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
    f61c:	defffd04 	addi	sp,sp,-12
    f620:	dc000015 	stw	r16,0(sp)
    f624:	2821883a 	mov	r16,r5
    {
        return ALT_AVALON_I2C_RANGE;
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
    f628:	318b883a 	add	r5,r6,r6
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
    f62c:	dc400115 	stw	r17,4(sp)
    f630:	dfc00215 	stw	ra,8(sp)
    f634:	3023883a 	mov	r17,r6
    {
        return ALT_AVALON_I2C_RANGE;
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
    f638:	0004e080 	call	4e08 <__udivsi3>

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
    f63c:	010000b4 	movhi	r4,2
    f640:	2121a804 	addi	r4,r4,-31072

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
    f644:	10c00f04 	addi	r3,r2,60
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
    f648:	10bff104 	addi	r2,r2,-60

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
    f64c:	2440032e 	bgeu	r4,r17,f65c <alt_avalon_i2c_master_config_speed_set+0x54>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
    f650:	01000044 	movi	r4,1
    f654:	81000115 	stw	r4,4(r16)
    f658:	00000106 	br	f660 <alt_avalon_i2c_master_config_speed_set+0x58>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
    f65c:	80000115 	stw	zero,4(r16)
    }

    cfg->scl_lcnt = scl_lcnt;
    cfg->scl_hcnt = scl_hcnt;
    f660:	80c0020d 	sth	r3,8(r16)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
    f664:	1006d07a 	srli	r3,r2,1
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
    }

    cfg->scl_lcnt = scl_lcnt;
    f668:	8080028d 	sth	r2,10(r16)
    cfg->scl_hcnt = scl_hcnt;
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
    f66c:	10c5c83a 	sub	r2,r2,r3
    f670:	8080030d 	sth	r2,12(r16)
    f674:	0005883a 	mov	r2,zero

    return ALT_AVALON_I2C_SUCCESS;

}
    f678:	dfc00217 	ldw	ra,8(sp)
    f67c:	dc400117 	ldw	r17,4(sp)
    f680:	dc000017 	ldw	r16,0(sp)
    f684:	dec00304 	addi	sp,sp,12
    f688:	f800283a 	ret
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
    {
        return ALT_AVALON_I2C_RANGE;
    f68c:	00bfff04 	movi	r2,-4
    f690:	f800283a 	ret

0000f694 <alt_avalon_i2c_is_busy>:
/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
    f694:	20800317 	ldw	r2,12(r4)
    f698:	10800537 	ldwio	r2,20(r2)
    {
       return ALT_AVALON_I2C_TRUE;
    }

    return ALT_AVALON_I2C_FALSE;
}
    f69c:	1080004c 	andi	r2,r2,1
    f6a0:	f800283a 	ret

0000f6a4 <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    f6a4:	38000015 	stw	zero,0(r7)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    f6a8:	20c00317 	ldw	r3,12(r4)
    f6ac:	18800737 	ldwio	r2,28(r3)
    f6b0:	10000926 	beq	r2,zero,f6d8 <alt_avalon_i2c_rx_read_available+0x34>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
    f6b4:	38800017 	ldw	r2,0(r7)
    f6b8:	2885883a 	add	r2,r5,r2
    f6bc:	18c00137 	ldwio	r3,4(r3)
    f6c0:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
    f6c4:	38800017 	ldw	r2,0(r7)
    f6c8:	10800044 	addi	r2,r2,1
    f6cc:	38800015 	stw	r2,0(r7)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    f6d0:	11bff51e 	bne	r2,r6,f6a8 <__alt_data_end+0xff80f6a8>
    f6d4:	303ff426 	beq	r6,zero,f6a8 <__alt_data_end+0xff80f6a8>
    f6d8:	f800283a 	ret

0000f6dc <alt_avalon_i2c_rx_read>:
    }
}

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
    f6dc:	defffb04 	addi	sp,sp,-20
    f6e0:	dc000015 	stw	r16,0(sp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
    f6e4:	040000b4 	movhi	r16,2
    }
}

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
    f6e8:	dcc00315 	stw	r19,12(sp)
    f6ec:	dc800215 	stw	r18,8(sp)
    f6f0:	dc400115 	stw	r17,4(sp)
    f6f4:	dfc00415 	stw	ra,16(sp)
    f6f8:	2023883a 	mov	r17,r4
    f6fc:	2825883a 	mov	r18,r5
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
    f700:	8421a804 	addi	r16,r16,-31072
    {
      if (timeout<10) alt_busy_sleep(10000);
    f704:	04c00244 	movi	r19,9
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
    f708:	88800317 	ldw	r2,12(r17)
    f70c:	10800737 	ldwio	r2,28(r2)
    f710:	1000071e 	bne	r2,zero,f730 <alt_avalon_i2c_rx_read+0x54>
    {
      if (timeout<10) alt_busy_sleep(10000);
    f714:	9c000236 	bltu	r19,r16,f720 <alt_avalon_i2c_rx_read+0x44>
    f718:	0109c404 	movi	r4,10000
    f71c:	0010c7c0 	call	10c7c <alt_busy_sleep>
    f720:	843fffc4 	addi	r16,r16,-1
      if (--timeout == 0)
    f724:	803ff81e 	bne	r16,zero,f708 <__alt_data_end+0xff80f708>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
    f728:	00bfff84 	movi	r2,-2
    f72c:	00000106 	br	f734 <alt_avalon_i2c_rx_read+0x58>
}

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    f730:	0005883a 	mov	r2,zero
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
    f734:	88c00317 	ldw	r3,12(r17)
    f738:	18c00137 	ldwio	r3,4(r3)
    f73c:	90c00005 	stb	r3,0(r18)
        
    return status;
}
    f740:	dfc00417 	ldw	ra,16(sp)
    f744:	dcc00317 	ldw	r19,12(sp)
    f748:	dc800217 	ldw	r18,8(sp)
    f74c:	dc400117 	ldw	r17,4(sp)
    f750:	dc000017 	ldw	r16,0(sp)
    f754:	dec00504 	addi	sp,sp,20
    f758:	f800283a 	ret

0000f75c <alt_avalon_i2c_master_target_get>:
}

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
    *target_addr=i2c_dev->master_target_address;
    f75c:	20800917 	ldw	r2,36(r4)
    f760:	28800015 	stw	r2,0(r5)
    f764:	f800283a 	ret

0000f768 <alt_avalon_i2c_master_target_set>:
}

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
    i2c_dev->master_target_address=target_addr;
    f768:	21400915 	stw	r5,36(r4)
    f76c:	f800283a 	ret

0000f770 <alt_avalon_i2c_check_nack>:
}

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
    f770:	20800317 	ldw	r2,12(r4)
    f774:	10800437 	ldwio	r2,16(r2)
    f778:	1080010c 	andi	r2,r2,4
    f77c:	10000226 	beq	r2,zero,f788 <alt_avalon_i2c_check_nack+0x18>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
    f780:	00bffec4 	movi	r2,-5
    f784:	28800015 	stw	r2,0(r5)
    f788:	f800283a 	ret

0000f78c <alt_avalon_i2c_check_arblost>:
}

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
    f78c:	20800317 	ldw	r2,12(r4)
    f790:	10800437 	ldwio	r2,16(r2)
    f794:	1080020c 	andi	r2,r2,8
    f798:	10000226 	beq	r2,zero,f7a4 <alt_avalon_i2c_check_arblost+0x18>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
    f79c:	00bffe84 	movi	r2,-6
    f7a0:	28800015 	stw	r2,0(r5)
    f7a4:	f800283a 	ret

0000f7a8 <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
    f7a8:	defff804 	addi	sp,sp,-32
    f7ac:	dd400615 	stw	r21,24(sp)
    f7b0:	dd000515 	stw	r20,20(sp)
    f7b4:	dcc00415 	stw	r19,16(sp)
    f7b8:	dc800315 	stw	r18,12(sp)
    f7bc:	dc400215 	stw	r17,8(sp)
    f7c0:	dc000115 	stw	r16,4(sp)
    f7c4:	dfc00715 	stw	ra,28(sp)
    f7c8:	2029883a 	mov	r20,r4
    f7cc:	2823883a 	mov	r17,r5
    f7d0:	3025883a 	mov	r18,r6
    f7d4:	3821883a 	mov	r16,r7
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    f7d8:	d8000015 	stw	zero,0(sp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
    f7dc:	04c9c404 	movi	r19,10000
    {
      if (timeout<10) alt_busy_sleep(10000);    
    f7e0:	05400244 	movi	r21,9
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
    f7e4:	a0c00317 	ldw	r3,12(r20)
    f7e8:	18800437 	ldwio	r2,16(r3)
    f7ec:	1080004c 	andi	r2,r2,1
    f7f0:	1000071e 	bne	r2,zero,f810 <alt_avalon_i2c_cmd_write+0x68>
    {
      if (timeout<10) alt_busy_sleep(10000);    
    f7f4:	acc00236 	bltu	r21,r19,f800 <alt_avalon_i2c_cmd_write+0x58>
    f7f8:	0109c404 	movi	r4,10000
    f7fc:	0010c7c0 	call	10c7c <alt_busy_sleep>
    f800:	9cffffc4 	addi	r19,r19,-1
      if (--timeout == 0)
    f804:	983ff71e 	bne	r19,zero,f7e4 <__alt_data_end+0xff80f7e4>
      {
        return ALT_AVALON_I2C_TIMEOUT;
    f808:	00bfff84 	movi	r2,-2
    f80c:	00000f06 	br	f84c <alt_avalon_i2c_cmd_write+0xa4>
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
    f810:	94803fcc 	andi	r18,r18,255
    f814:	9024927a 	slli	r18,r18,9
    f818:	84003fcc 	andi	r16,r16,255
    f81c:	8020923a 	slli	r16,r16,8
    f820:	8c403fcc 	andi	r17,r17,255
    f824:	9462b03a 	or	r17,r18,r17
    f828:	8c20b03a 	or	r16,r17,r16
    f82c:	1c000035 	stwio	r16,0(r3)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
    f830:	d80b883a 	mov	r5,sp
    f834:	a009883a 	mov	r4,r20
    f838:	000f7700 	call	f770 <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
    f83c:	d80b883a 	mov	r5,sp
    f840:	a009883a 	mov	r4,r20
    f844:	000f78c0 	call	f78c <alt_avalon_i2c_check_arblost>
    
    return status;
    f848:	d8800017 	ldw	r2,0(sp)
}
    f84c:	dfc00717 	ldw	ra,28(sp)
    f850:	dd400617 	ldw	r21,24(sp)
    f854:	dd000517 	ldw	r20,20(sp)
    f858:	dcc00417 	ldw	r19,16(sp)
    f85c:	dc800317 	ldw	r18,12(sp)
    f860:	dc400217 	ldw	r17,8(sp)
    f864:	dc000117 	ldw	r16,4(sp)
    f868:	dec00804 	addi	sp,sp,32
    f86c:	f800283a 	ret

0000f870 <alt_avalon_i2c_send_address>:
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
    f870:	22000d17 	ldw	r8,52(r4)
    f874:	01c00044 	movi	r7,1
    f878:	31803fcc 	andi	r6,r6,255
    f87c:	20800917 	ldw	r2,36(r4)
    f880:	41c0141e 	bne	r8,r7,f8d4 <alt_avalon_i2c_send_address+0x64>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
    f884:	10de0014 	ori	r3,r2,30720
    f888:	1806d1fa 	srli	r3,r3,7
    f88c:	00bfff84 	movi	r2,-2

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
    f890:	defffe04 	addi	sp,sp,-8
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
    f894:	1886703a 	and	r3,r3,r2
    f898:	194ab03a 	or	r5,r3,r5
    f89c:	000f883a 	mov	r7,zero
    f8a0:	29403fcc 	andi	r5,r5,255

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
    f8a4:	dc000015 	stw	r16,0(sp)
    f8a8:	dfc00115 	stw	ra,4(sp)
    f8ac:	2021883a 	mov	r16,r4
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
    f8b0:	000f7a80 	call	f7a8 <alt_avalon_i2c_cmd_write>
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
    f8b4:	81400903 	ldbu	r5,36(r16)
    f8b8:	000f883a 	mov	r7,zero
    f8bc:	000d883a 	mov	r6,zero
    f8c0:	8009883a 	mov	r4,r16
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
    }
    
    return status;
}
    f8c4:	dfc00117 	ldw	ra,4(sp)
    f8c8:	dc000017 	ldw	r16,0(sp)
    f8cc:	dec00204 	addi	sp,sp,8
    f8d0:	00000406 	br	f8e4 <alt_avalon_i2c_send_address+0x74>
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
    f8d4:	1085883a 	add	r2,r2,r2
    f8d8:	114ab03a 	or	r5,r2,r5
    f8dc:	000f883a 	mov	r7,zero
    f8e0:	29403fcc 	andi	r5,r5,255
    f8e4:	000f7a81 	jmpi	f7a8 <alt_avalon_i2c_cmd_write>

0000f8e8 <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
    f8e8:	defff904 	addi	sp,sp,-28
    f8ec:	dcc00415 	stw	r19,16(sp)
    f8f0:	dfc00615 	stw	ra,24(sp)
    f8f4:	dd000515 	stw	r20,20(sp)
    f8f8:	dc800315 	stw	r18,12(sp)
    f8fc:	dc400215 	stw	r17,8(sp)
    f900:	dc000115 	stw	r16,4(sp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    f904:	d8000015 	stw	zero,0(sp)
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
    f908:	dcc00717 	ldw	r19,28(sp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout=size * 10000;
    
    if (size==0)
    f90c:	30003b26 	beq	r6,zero,f9fc <alt_avalon_i2c_master_transmit+0x114>
    {
      return ALT_AVALON_I2C_SUCCESS;
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
    f910:	3d003fcc 	andi	r20,r7,255
    f914:	2023883a 	mov	r17,r4
    f918:	2825883a 	mov	r18,r5
    f91c:	3021883a 	mov	r16,r6
    f920:	a000061e 	bne	r20,zero,f93c <alt_avalon_i2c_master_transmit+0x54>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
    f924:	000f4bc0 	call	f4bc <alt_avalon_i2c_enable>
    f928:	d8800015 	stw	r2,0(sp)
      if (status != ALT_AVALON_I2C_SUCCESS)
    f92c:	1000341e 	bne	r2,zero,fa00 <alt_avalon_i2c_master_transmit+0x118>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
    f930:	88800317 	ldw	r2,12(r17)
    f934:	00c00704 	movi	r3,28
    f938:	10c00435 	stwio	r3,16(r2)
      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
    f93c:	a00d883a 	mov	r6,r20
    f940:	000b883a 	mov	r5,zero
    f944:	8809883a 	mov	r4,r17
    f948:	000f8700 	call	f870 <alt_avalon_i2c_send_address>
    f94c:	d8800015 	stw	r2,0(sp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    f950:	1000171e 	bne	r2,zero,f9b0 <alt_avalon_i2c_master_transmit+0xc8>
    f954:	853fffc4 	addi	r20,r16,-1
    f958:	9529883a 	add	r20,r18,r20
    f95c:	d8800017 	ldw	r2,0(sp)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
    f960:	95000926 	beq	r18,r20,f988 <alt_avalon_i2c_master_transmit+0xa0>
    f964:	1000081e 	bne	r2,zero,f988 <alt_avalon_i2c_master_transmit+0xa0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
    f968:	91400003 	ldbu	r5,0(r18)
    f96c:	000f883a 	mov	r7,zero
    f970:	000d883a 	mov	r6,zero
    f974:	8809883a 	mov	r4,r17
    f978:	000f7a80 	call	f7a8 <alt_avalon_i2c_cmd_write>
    f97c:	d8800015 	stw	r2,0(sp)
            
            ++buffer;
    f980:	94800044 	addi	r18,r18,1
    f984:	003ff506 	br	f95c <__alt_data_end+0xff80f95c>
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
    f988:	1000091e 	bne	r2,zero,f9b0 <alt_avalon_i2c_master_transmit+0xc8>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
    f98c:	91400003 	ldbu	r5,0(r18)
    f990:	9cc03fcc 	andi	r19,r19,255
    f994:	980f883a 	mov	r7,r19
    f998:	000d883a 	mov	r6,zero
    f99c:	8809883a 	mov	r4,r17
    f9a0:	000f7a80 	call	f7a8 <alt_avalon_i2c_cmd_write>
    f9a4:	d8800015 	stw	r2,0(sp)
            --size;
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    f9a8:	9800011e 	bne	r19,zero,f9b0 <alt_avalon_i2c_master_transmit+0xc8>
    f9ac:	10001126 	beq	r2,zero,f9f4 <alt_avalon_i2c_master_transmit+0x10c>
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout=size * 10000;
    f9b0:	8409c424 	muli	r16,r16,10000
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);
    f9b4:	04800244 	movi	r18,9
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
    f9b8:	8809883a 	mov	r4,r17
    f9bc:	000f6940 	call	f694 <alt_avalon_i2c_is_busy>
    f9c0:	10000726 	beq	r2,zero,f9e0 <alt_avalon_i2c_master_transmit+0xf8>
        {
            if (timeout<10) alt_busy_sleep(10000);
    f9c4:	94000236 	bltu	r18,r16,f9d0 <alt_avalon_i2c_master_transmit+0xe8>
    f9c8:	0109c404 	movi	r4,10000
    f9cc:	0010c7c0 	call	10c7c <alt_busy_sleep>
            if (--timeout == 0)
    f9d0:	843fffc4 	addi	r16,r16,-1
    f9d4:	803ff81e 	bne	r16,zero,f9b8 <__alt_data_end+0xff80f9b8>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
    f9d8:	00bfff84 	movi	r2,-2
    f9dc:	d8800015 	stw	r2,0(sp)
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
    f9e0:	8809883a 	mov	r4,r17
    f9e4:	d80b883a 	mov	r5,sp
    f9e8:	000f7700 	call	f770 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
    f9ec:	8809883a 	mov	r4,r17
    f9f0:	000f5040 	call	f504 <alt_avalon_i2c_disable>
    }


    return status;
    f9f4:	d8800017 	ldw	r2,0(sp)
    f9f8:	00000106 	br	fa00 <alt_avalon_i2c_master_transmit+0x118>
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout=size * 10000;
    
    if (size==0)
    {
      return ALT_AVALON_I2C_SUCCESS;
    f9fc:	0005883a 	mov	r2,zero
        alt_avalon_i2c_disable(i2c_dev);
    }


    return status;
}
    fa00:	dfc00617 	ldw	ra,24(sp)
    fa04:	dd000517 	ldw	r20,20(sp)
    fa08:	dcc00417 	ldw	r19,16(sp)
    fa0c:	dc800317 	ldw	r18,12(sp)
    fa10:	dc400217 	ldw	r17,8(sp)
    fa14:	dc000117 	ldw	r16,4(sp)
    fa18:	dec00704 	addi	sp,sp,28
    fa1c:	f800283a 	ret

0000fa20 <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
    fa20:	defff604 	addi	sp,sp,-40
    fa24:	dd000615 	stw	r20,24(sp)
    fa28:	dfc00915 	stw	ra,36(sp)
    fa2c:	dd800815 	stw	r22,32(sp)
    fa30:	dd400715 	stw	r21,28(sp)
    fa34:	dcc00515 	stw	r19,20(sp)
    fa38:	dc800415 	stw	r18,16(sp)
    fa3c:	dc400315 	stw	r17,12(sp)
    fa40:	dc000215 	stw	r16,8(sp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    fa44:	d8000115 	stw	zero,4(sp)
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
    fa48:	dd000a17 	ldw	r20,40(sp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
    alt_u32 bytes_written=0;
    alt_u32 temp_bytes_read;
    
    if (size==0)
    fa4c:	30005326 	beq	r6,zero,fb9c <alt_avalon_i2c_master_receive+0x17c>
    {
      return ALT_AVALON_I2C_SUCCESS;
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
    fa50:	3cc03fcc 	andi	r19,r7,255
    fa54:	2023883a 	mov	r17,r4
    fa58:	2821883a 	mov	r16,r5
    fa5c:	3025883a 	mov	r18,r6
    fa60:	9800061e 	bne	r19,zero,fa7c <alt_avalon_i2c_master_receive+0x5c>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
    fa64:	000f4bc0 	call	f4bc <alt_avalon_i2c_enable>
    fa68:	d8800115 	stw	r2,4(sp)
      if (status != ALT_AVALON_I2C_SUCCESS)
    fa6c:	10004c1e 	bne	r2,zero,fba0 <alt_avalon_i2c_master_receive+0x180>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
    fa70:	88800317 	ldw	r2,12(r17)
    fa74:	00c00704 	movi	r3,28
    fa78:	10c00435 	stwio	r3,16(r2)
      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
    fa7c:	980d883a 	mov	r6,r19
    fa80:	01400044 	movi	r5,1
    fa84:	8809883a 	mov	r4,r17
    fa88:	000f8700 	call	f870 <alt_avalon_i2c_send_address>
    fa8c:	d8800115 	stw	r2,4(sp)

    if (status == ALT_AVALON_I2C_SUCCESS)
    fa90:	10001f1e 	bne	r2,zero,fb10 <alt_avalon_i2c_master_receive+0xf0>
    fa94:	002b883a 	mov	r21,zero
    fa98:	0027883a 	mov	r19,zero
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
    fa9c:	95bfffc4 	addi	r22,r18,-1
    faa0:	d8800117 	ldw	r2,4(sp)
    faa4:	ad800836 	bltu	r21,r22,fac8 <alt_avalon_i2c_master_receive+0xa8>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
    faa8:	10001a1e 	bne	r2,zero,fb14 <alt_avalon_i2c_master_receive+0xf4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
    faac:	a1c03fcc 	andi	r7,r20,255
    fab0:	000d883a 	mov	r6,zero
    fab4:	000b883a 	mov	r5,zero
    fab8:	8809883a 	mov	r4,r17
    fabc:	000f7a80 	call	f7a8 <alt_avalon_i2c_cmd_write>
    fac0:	d8800115 	stw	r2,4(sp)
    fac4:	00001306 	br	fb14 <alt_avalon_i2c_master_receive+0xf4>
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
    fac8:	103ff71e 	bne	r2,zero,faa8 <__alt_data_end+0xff80faa8>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
    facc:	000f883a 	mov	r7,zero
    fad0:	000d883a 	mov	r6,zero
    fad4:	000b883a 	mov	r5,zero
    fad8:	8809883a 	mov	r4,r17
    fadc:	000f7a80 	call	f7a8 <alt_avalon_i2c_cmd_write>
    fae0:	d8800115 	stw	r2,4(sp)
            bytes_written++;
    fae4:	ad400044 	addi	r21,r21,1
            if (status == ALT_AVALON_I2C_SUCCESS)
    fae8:	103fed1e 	bne	r2,zero,faa0 <__alt_data_end+0xff80faa0>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
    faec:	800b883a 	mov	r5,r16
    faf0:	d80f883a 	mov	r7,sp
    faf4:	000d883a 	mov	r6,zero
    faf8:	8809883a 	mov	r4,r17
    fafc:	000f6a40 	call	f6a4 <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
    fb00:	d8800017 	ldw	r2,0(sp)
    fb04:	80a1883a 	add	r16,r16,r2
               bytes_read+=temp_bytes_read;
    fb08:	98a7883a 	add	r19,r19,r2
    fb0c:	003fe406 	br	faa0 <__alt_data_end+0xff80faa0>
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout;
    alt_u32 bytes_read=0;
    fb10:	0027883a 	mov	r19,zero
    fb14:	9c27c83a 	sub	r19,r19,r16
    fb18:	84c5883a 	add	r2,r16,r19
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
    fb1c:	1480082e 	bgeu	r2,r18,fb40 <alt_avalon_i2c_master_receive+0x120>
    fb20:	d8800117 	ldw	r2,4(sp)
    fb24:	10000a1e 	bne	r2,zero,fb50 <alt_avalon_i2c_master_receive+0x130>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
    fb28:	800b883a 	mov	r5,r16
    fb2c:	8809883a 	mov	r4,r17
    fb30:	000f6dc0 	call	f6dc <alt_avalon_i2c_rx_read>
    fb34:	d8800115 	stw	r2,4(sp)
        buffer++;
    fb38:	84000044 	addi	r16,r16,1
    fb3c:	003ff606 	br	fb18 <__alt_data_end+0xff80fb18>
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    fb40:	a5003fcc 	andi	r20,r20,255
    fb44:	a000021e 	bne	r20,zero,fb50 <alt_avalon_i2c_master_receive+0x130>
    fb48:	d8800117 	ldw	r2,4(sp)
    fb4c:	10001126 	beq	r2,zero,fb94 <alt_avalon_i2c_master_receive+0x174>
    {
        timeout=10000 * size;
    fb50:	9489c424 	muli	r18,r18,10000
        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);
    fb54:	04000244 	movi	r16,9

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
    fb58:	8809883a 	mov	r4,r17
    fb5c:	000f6940 	call	f694 <alt_avalon_i2c_is_busy>
    fb60:	10000726 	beq	r2,zero,fb80 <alt_avalon_i2c_master_receive+0x160>
        {
            if (timeout<10) alt_busy_sleep(10000);
    fb64:	84800236 	bltu	r16,r18,fb70 <alt_avalon_i2c_master_receive+0x150>
    fb68:	0109c404 	movi	r4,10000
    fb6c:	0010c7c0 	call	10c7c <alt_busy_sleep>
            if (--timeout == 0)
    fb70:	94bfffc4 	addi	r18,r18,-1
    fb74:	903ff81e 	bne	r18,zero,fb58 <__alt_data_end+0xff80fb58>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
    fb78:	00bfff84 	movi	r2,-2
    fb7c:	d8800115 	stw	r2,4(sp)
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
    fb80:	8809883a 	mov	r4,r17
    fb84:	d9400104 	addi	r5,sp,4
    fb88:	000f7700 	call	f770 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
    fb8c:	8809883a 	mov	r4,r17
    fb90:	000f5040 	call	f504 <alt_avalon_i2c_disable>
    }

    return status;
    fb94:	d8800117 	ldw	r2,4(sp)
    fb98:	00000106 	br	fba0 <alt_avalon_i2c_master_receive+0x180>
    alt_u32 bytes_written=0;
    alt_u32 temp_bytes_read;
    
    if (size==0)
    {
      return ALT_AVALON_I2C_SUCCESS;
    fb9c:	0005883a 	mov	r2,zero
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
    }

    return status;
}
    fba0:	dfc00917 	ldw	ra,36(sp)
    fba4:	dd800817 	ldw	r22,32(sp)
    fba8:	dd400717 	ldw	r21,28(sp)
    fbac:	dd000617 	ldw	r20,24(sp)
    fbb0:	dcc00517 	ldw	r19,20(sp)
    fbb4:	dc800417 	ldw	r18,16(sp)
    fbb8:	dc400317 	ldw	r17,12(sp)
    fbbc:	dc000217 	ldw	r16,8(sp)
    fbc0:	dec00a04 	addi	sp,sp,40
    fbc4:	f800283a 	ret

0000fbc8 <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
    fbc8:	20c00317 	ldw	r3,12(r4)
    fbcc:	19000437 	ldwio	r4,16(r3)
    fbd0:	18800337 	ldwio	r2,12(r3)
    fbd4:	2084703a 	and	r2,r4,r2
    fbd8:	28800015 	stw	r2,0(r5)
    fbdc:	f800283a 	ret

0000fbe0 <alt_avalon_i2c_int_raw_status_get>:
/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
    fbe0:	20800317 	ldw	r2,12(r4)
    fbe4:	10800437 	ldwio	r2,16(r2)
    fbe8:	28800015 	stw	r2,0(r5)
    fbec:	f800283a 	ret

0000fbf0 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
    fbf0:	20800317 	ldw	r2,12(r4)
    fbf4:	11400435 	stwio	r5,16(r2)
    fbf8:	f800283a 	ret

0000fbfc <alt_avalon_i2c_enabled_ints_get>:
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
    fbfc:	20800317 	ldw	r2,12(r4)
    fc00:	10800337 	ldwio	r2,12(r2)
    fc04:	108007cc 	andi	r2,r2,31
    fc08:	28800015 	stw	r2,0(r5)
    fc0c:	f800283a 	ret

0000fc10 <alt_avalon_i2c_int_disable>:
}

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    fc10:	defffc04 	addi	sp,sp,-16
    fc14:	dc000115 	stw	r16,4(sp)
    fc18:	2821883a 	mov	r16,r5
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
    fc1c:	d80b883a 	mov	r5,sp
}

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    fc20:	dc400215 	stw	r17,8(sp)
    fc24:	dfc00315 	stw	ra,12(sp)
    fc28:	2023883a 	mov	r17,r4
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
    fc2c:	000fbfc0 	call	fbfc <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
    fc30:	d8800017 	ldw	r2,0(sp)
    fc34:	040a303a 	nor	r5,zero,r16
    fc38:	288a703a 	and	r5,r5,r2
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
    fc3c:	88800317 	ldw	r2,12(r17)
    fc40:	294007cc 	andi	r5,r5,31
    fc44:	11400335 	stwio	r5,12(r2)
}
    fc48:	dfc00317 	ldw	ra,12(sp)
    fc4c:	dc400217 	ldw	r17,8(sp)
    fc50:	dc000117 	ldw	r16,4(sp)
    fc54:	dec00404 	addi	sp,sp,16
    fc58:	f800283a 	ret

0000fc5c <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
    fc5c:	defffc04 	addi	sp,sp,-16
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
    fc60:	014007c4 	movi	r5,31
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
    fc64:	dc800215 	stw	r18,8(sp)
    fc68:	dfc00315 	stw	ra,12(sp)
    fc6c:	2025883a 	mov	r18,r4
    fc70:	dc400115 	stw	r17,4(sp)
    fc74:	dc000015 	stw	r16,0(sp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
    fc78:	000fc100 	call	fc10 <alt_avalon_i2c_int_disable>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
    fc7c:	90800317 	ldw	r2,12(r18)
    fc80:	00c00704 	movi	r3,28
    fc84:	10c00435 	stwio	r3,16(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
    fc88:	90800617 	ldw	r2,24(r18)
    fc8c:	10000b26 	beq	r2,zero,fcbc <alt_avalon_i2c_irq+0x60>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fc90:	0023303a 	rdctl	r17,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fc94:	043fff84 	movi	r16,-2
    fc98:	8c06703a 	and	r3,r17,r16
    fc9c:	1801703a 	wrctl	status,r3
    {
        cpu_sr = alt_irq_disable_all();
        dev->callback(dev);
    fca0:	9009883a 	mov	r4,r18
    fca4:	103ee83a 	callr	r2
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
    fca8:	0005303a 	rdctl	r2,status
  
  status &= ~NIOS2_STATUS_PIE_MSK;
    fcac:	1420703a 	and	r16,r2,r16
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
    fcb0:	8c40004c 	andi	r17,r17,1
    fcb4:	8c20b03a 	or	r16,r17,r16
    fcb8:	8001703a 	wrctl	status,r16
        alt_irq_enable_all(cpu_sr);
    }

    return;
}
    fcbc:	dfc00317 	ldw	ra,12(sp)
    fcc0:	dc800217 	ldw	r18,8(sp)
    fcc4:	dc400117 	ldw	r17,4(sp)
    fcc8:	dc000017 	ldw	r16,0(sp)
    fccc:	dec00404 	addi	sp,sp,16
    fcd0:	f800283a 	ret

0000fcd4 <alt_avalon_i2c_int_enable>:
}

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    fcd4:	defffc04 	addi	sp,sp,-16
    fcd8:	dc400215 	stw	r17,8(sp)
    fcdc:	2823883a 	mov	r17,r5
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
    fce0:	d80b883a 	mov	r5,sp
}

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    fce4:	dc000115 	stw	r16,4(sp)
    fce8:	dfc00315 	stw	ra,12(sp)
    fcec:	2021883a 	mov	r16,r4
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
    fcf0:	000fbfc0 	call	fbfc <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
    fcf4:	d9400017 	ldw	r5,0(sp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
    fcf8:	80800317 	ldw	r2,12(r16)
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
    enabled_ints |= mask;
    fcfc:	894ab03a 	or	r5,r17,r5
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
    fd00:	294007cc 	andi	r5,r5,31
    fd04:	11400335 	stwio	r5,12(r2)
}
    fd08:	dfc00317 	ldw	ra,12(sp)
    fd0c:	dc400217 	ldw	r17,8(sp)
    fd10:	dc000117 	ldw	r16,4(sp)
    fd14:	dec00404 	addi	sp,sp,16
    fd18:	f800283a 	ret

0000fd1c <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
    fd1c:	defffb04 	addi	sp,sp,-20
    fd20:	dc000115 	stw	r16,4(sp)
   int timeout=100000;
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   IRQ_DATA_t *irq = i2c_dev->callback_context;
    fd24:	24000717 	ldw	r16,28(r4)

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
    fd28:	dc800315 	stw	r18,12(sp)
    fd2c:	dc400215 	stw	r17,8(sp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   IRQ_DATA_t *irq = i2c_dev->callback_context;

   if (irq->irq_busy==2)  /*receive request*/
    fd30:	84800217 	ldw	r18,8(r16)

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
    fd34:	dfc00415 	stw	ra,16(sp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   IRQ_DATA_t *irq = i2c_dev->callback_context;

   if (irq->irq_busy==2)  /*receive request*/
    fd38:	00800084 	movi	r2,2

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
    fd3c:	2023883a 	mov	r17,r4
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   IRQ_DATA_t *irq = i2c_dev->callback_context;

   if (irq->irq_busy==2)  /*receive request*/
    fd40:	90800326 	beq	r18,r2,fd50 <optional_irq_callback+0x34>

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
    fd44:	048000b4 	movhi	r18,2
    fd48:	94a1a804 	addi	r18,r18,-31072
    fd4c:	00001506 	br	fda4 <optional_irq_callback+0x88>
   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   IRQ_DATA_t *irq = i2c_dev->callback_context;

   if (irq->irq_busy==2)  /*receive request*/
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
    fd50:	81800117 	ldw	r6,4(r16)
    fd54:	81400017 	ldw	r5,0(r16)
    fd58:	d80f883a 	mov	r7,sp
    fd5c:	000f6a40 	call	f6a4 <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
    fd60:	d8c00017 	ldw	r3,0(sp)
    fd64:	80800117 	ldw	r2,4(r16)
       irq->buffer+=bytes_read;
    fd68:	81000017 	ldw	r4,0(r16)
   IRQ_DATA_t *irq = i2c_dev->callback_context;

   if (irq->irq_busy==2)  /*receive request*/
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
       irq->size-=bytes_read;
    fd6c:	10c5c83a 	sub	r2,r2,r3
       irq->buffer+=bytes_read;
    fd70:	20c7883a 	add	r3,r4,r3
   IRQ_DATA_t *irq = i2c_dev->callback_context;

   if (irq->irq_busy==2)  /*receive request*/
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
       irq->size-=bytes_read;
    fd74:	80800115 	stw	r2,4(r16)
       irq->buffer+=bytes_read;
    fd78:	80c00015 	stw	r3,0(r16)
       if (irq->size > 0)
    fd7c:	103ff126 	beq	r2,zero,fd44 <__alt_data_end+0xff80fd44>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
    fd80:	88800317 	ldw	r2,12(r17)
    fd84:	00c00704 	movi	r3,28
    fd88:	10c00435 	stwio	r3,16(r2)
       if (irq->size > 0)
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
    fd8c:	900b883a 	mov	r5,r18
    fd90:	8809883a 	mov	r4,r17
    fd94:	000fcd40 	call	fcd4 <alt_avalon_i2c_int_enable>
    fd98:	00000806 	br	fdbc <optional_irq_callback+0xa0>
    fd9c:	94bfffc4 	addi	r18,r18,-1
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
    fda0:	90000326 	beq	r18,zero,fdb0 <optional_irq_callback+0x94>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    fda4:	8809883a 	mov	r4,r17
    fda8:	000f6940 	call	f694 <alt_avalon_i2c_is_busy>
    fdac:	103ffb1e 	bne	r2,zero,fd9c <__alt_data_end+0xff80fd9c>
         break;
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
    fdb0:	8809883a 	mov	r4,r17
    fdb4:	000f5040 	call	f504 <alt_avalon_i2c_disable>

    irq->irq_busy=0;
    fdb8:	80000215 	stw	zero,8(r16)
}
    fdbc:	dfc00417 	ldw	ra,16(sp)
    fdc0:	dc800317 	ldw	r18,12(sp)
    fdc4:	dc400217 	ldw	r17,8(sp)
    fdc8:	dc000117 	ldw	r16,4(sp)
    fdcc:	dec00504 	addi	sp,sp,20
    fdd0:	f800283a 	ret

0000fdd4 <alt_avalon_i2c_interrupt_transaction_status>:
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
    }
}

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
    fdd4:	defff804 	addi	sp,sp,-32
    fdd8:	dc800515 	stw	r18,20(sp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
    fddc:	24800717 	ldw	r18,28(r4)
    alt_u32 timeout=10000 * irq_data->size + 10000;
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
    fde0:	d9400104 	addi	r5,sp,4
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
    }
}

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
    fde4:	dfc00715 	stw	ra,28(sp)
    fde8:	dc400415 	stw	r17,16(sp)
    fdec:	dc000315 	stw	r16,12(sp)
    fdf0:	2023883a 	mov	r17,r4
    fdf4:	dcc00615 	stw	r19,24(sp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    fdf8:	d8000215 	stw	zero,8(sp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
    alt_u32 timeout=10000 * irq_data->size + 10000;
    fdfc:	94000117 	ldw	r16,4(r18)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
    fe00:	000fbfc0 	call	fbfc <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
    fe04:	d9400117 	ldw	r5,4(sp)
    fe08:	8809883a 	mov	r4,r17
    fe0c:	000fc100 	call	fc10 <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
    fe10:	d9400204 	addi	r5,sp,8
    fe14:	8809883a 	mov	r4,r17
    fe18:	000f7700 	call	f770 <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    fe1c:	d8c00217 	ldw	r3,8(sp)
    fe20:	90800217 	ldw	r2,8(r18)
    fe24:	18001826 	beq	r3,zero,fe88 <alt_avalon_i2c_interrupt_transaction_status+0xb4>
    {
      if (irq_data->irq_busy)
    fe28:	10001526 	beq	r2,zero,fe80 <alt_avalon_i2c_interrupt_transaction_status+0xac>

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
    alt_u32 timeout=10000 * irq_data->size + 10000;
    fe2c:	84000044 	addi	r16,r16,1
    fe30:	8409c424 	muli	r16,r16,10000
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
              if (timeout<10) alt_busy_sleep(10000);
    fe34:	04c00244 	movi	r19,9

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
    fe38:	8809883a 	mov	r4,r17
    fe3c:	000f6940 	call	f694 <alt_avalon_i2c_is_busy>
    fe40:	10000726 	beq	r2,zero,fe60 <alt_avalon_i2c_interrupt_transaction_status+0x8c>
        {
              if (timeout<10) alt_busy_sleep(10000);
    fe44:	9c000236 	bltu	r19,r16,fe50 <alt_avalon_i2c_interrupt_transaction_status+0x7c>
    fe48:	0109c404 	movi	r4,10000
    fe4c:	0010c7c0 	call	10c7c <alt_busy_sleep>
              if (--timeout == 0)
    fe50:	843fffc4 	addi	r16,r16,-1
    fe54:	803ff81e 	bne	r16,zero,fe38 <__alt_data_end+0xff80fe38>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
    fe58:	00bfff84 	movi	r2,-2
    fe5c:	d8800215 	stw	r2,8(sp)
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
    fe60:	91400017 	ldw	r5,0(r18)
    fe64:	d80f883a 	mov	r7,sp
    fe68:	000d883a 	mov	r6,zero
    fe6c:	8809883a 	mov	r4,r17
    fe70:	000f6a40 	call	f6a4 <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
    fe74:	8809883a 	mov	r4,r17
    fe78:	000f5040 	call	f504 <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
    fe7c:	90000215 	stw	zero,8(r18)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
    fe80:	d8800217 	ldw	r2,8(sp)
    fe84:	00000506 	br	fe9c <alt_avalon_i2c_interrupt_transaction_status+0xc8>
    }
    
    if (irq_data->irq_busy)
    fe88:	10000426 	beq	r2,zero,fe9c <alt_avalon_i2c_interrupt_transaction_status+0xc8>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
    fe8c:	d9400117 	ldw	r5,4(sp)
    fe90:	8809883a 	mov	r4,r17
    fe94:	000fcd40 	call	fcd4 <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
    fe98:	00bffe44 	movi	r2,-7
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
}
    fe9c:	dfc00717 	ldw	ra,28(sp)
    fea0:	dcc00617 	ldw	r19,24(sp)
    fea4:	dc800517 	ldw	r18,20(sp)
    fea8:	dc400417 	ldw	r17,16(sp)
    feac:	dc000317 	ldw	r16,12(sp)
    feb0:	dec00804 	addi	sp,sp,32
    feb4:	f800283a 	ret

0000feb8 <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
    feb8:	20800317 	ldw	r2,12(r4)
    febc:	10800237 	ldwio	r2,8(r2)
    fec0:	10800c0c 	andi	r2,r2,48
    fec4:	1005d13a 	srai	r2,r2,4
    fec8:	28800015 	stw	r2,0(r5)
    fecc:	f800283a 	ret

0000fed0 <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
    fed0:	20c00317 	ldw	r3,12(r4)
    fed4:	18c00204 	addi	r3,r3,8
    fed8:	19000037 	ldwio	r4,0(r3)
    fedc:	00bff3c4 	movi	r2,-49
    fee0:	280a913a 	slli	r5,r5,4
    fee4:	2084703a 	and	r2,r4,r2
    fee8:	29400c0c 	andi	r5,r5,48
    feec:	288ab03a 	or	r5,r5,r2
    fef0:	19400035 	stwio	r5,0(r3)
    fef4:	f800283a 	ret

0000fef8 <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
    fef8:	defff704 	addi	sp,sp,-36
    fefc:	dcc00315 	stw	r19,12(sp)
    ff00:	dfc00815 	stw	ra,32(sp)
    ff04:	ddc00715 	stw	r23,28(sp)
    ff08:	dd800615 	stw	r22,24(sp)
    ff0c:	dd400515 	stw	r21,20(sp)
    ff10:	dd000415 	stw	r20,16(sp)
    ff14:	dc800215 	stw	r18,8(sp)
    ff18:	dc400115 	stw	r17,4(sp)
    ff1c:	dc000015 	stw	r16,0(sp)
    ff20:	dcc00917 	ldw	r19,36(sp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
    alt_u32 timeout;
    alt_u32 bytes_written=0;
    
    if (size==0)
    ff24:	30004626 	beq	r6,zero,10040 <alt_avalon_i2c_master_receive_using_interrupts+0x148>
    {
      return ALT_AVALON_I2C_SUCCESS;
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
    ff28:	20c00617 	ldw	r3,24(r4)
    ff2c:	00800074 	movhi	r2,1
    ff30:	10bf4704 	addi	r2,r2,-740
    ff34:	2023883a 	mov	r17,r4
    ff38:	1880431e 	bne	r3,r2,10048 <alt_avalon_i2c_master_receive_using_interrupts+0x150>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
    ff3c:	3c003fcc 	andi	r16,r7,255
    ff40:	3025883a 	mov	r18,r6
    ff44:	282b883a 	mov	r21,r5
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
    ff48:	25000717 	ldw	r20,28(r4)
    {
       return ALT_AVALON_I2C_BAD_ARG;    
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
    ff4c:	8000051e 	bne	r16,zero,ff64 <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
    ff50:	000f4bc0 	call	f4bc <alt_avalon_i2c_enable>
      if (status != ALT_AVALON_I2C_SUCCESS)
    ff54:	10003d1e 	bne	r2,zero,1004c <alt_avalon_i2c_master_receive_using_interrupts+0x154>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
    ff58:	88800317 	ldw	r2,12(r17)
    ff5c:	00c00704 	movi	r3,28
    ff60:	10c00435 	stwio	r3,16(r2)
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
    ff64:	800d883a 	mov	r6,r16
    ff68:	01400044 	movi	r5,1
    ff6c:	8809883a 	mov	r4,r17
    ff70:	000f8700 	call	f870 <alt_avalon_i2c_send_address>
    ff74:	1021883a 	mov	r16,r2

    if (status == ALT_AVALON_I2C_SUCCESS)
    ff78:	1000151e 	bne	r2,zero,ffd0 <alt_avalon_i2c_master_receive_using_interrupts+0xd8>
    ff7c:	002d883a 	mov	r22,zero
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
    ff80:	95ffffc4 	addi	r23,r18,-1
    ff84:	b5c0092e 	bgeu	r22,r23,ffac <alt_avalon_i2c_master_receive_using_interrupts+0xb4>
    ff88:	8000111e 	bne	r16,zero,ffd0 <alt_avalon_i2c_master_receive_using_interrupts+0xd8>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
    ff8c:	000f883a 	mov	r7,zero
    ff90:	000d883a 	mov	r6,zero
    ff94:	000b883a 	mov	r5,zero
    ff98:	8809883a 	mov	r4,r17
    ff9c:	000f7a80 	call	f7a8 <alt_avalon_i2c_cmd_write>
    ffa0:	1021883a 	mov	r16,r2
            bytes_written++;
    ffa4:	b5800044 	addi	r22,r22,1
    ffa8:	003ff606 	br	ff84 <__alt_data_end+0xff80ff84>
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
    ffac:	8000081e 	bne	r16,zero,ffd0 <alt_avalon_i2c_master_receive_using_interrupts+0xd8>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
    ffb0:	9cc03fcc 	andi	r19,r19,255
    ffb4:	980f883a 	mov	r7,r19
    ffb8:	000d883a 	mov	r6,zero
    ffbc:	000b883a 	mov	r5,zero
    ffc0:	8809883a 	mov	r4,r17
    ffc4:	000f7a80 	call	f7a8 <alt_avalon_i2c_cmd_write>
    ffc8:	1021883a 	mov	r16,r2
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    ffcc:	10000f26 	beq	r2,zero,1000c <alt_avalon_i2c_master_receive_using_interrupts+0x114>
    {
        timeout=10000 * size;
    ffd0:	9489c424 	muli	r18,r18,10000
        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);
    ffd4:	04c00244 	movi	r19,9
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
    ffd8:	8809883a 	mov	r4,r17
    ffdc:	000f6940 	call	f694 <alt_avalon_i2c_is_busy>
    ffe0:	10000626 	beq	r2,zero,fffc <alt_avalon_i2c_master_receive_using_interrupts+0x104>
        {
            if (timeout<10) alt_busy_sleep(10000);
    ffe4:	9c800236 	bltu	r19,r18,fff0 <alt_avalon_i2c_master_receive_using_interrupts+0xf8>
    ffe8:	0109c404 	movi	r4,10000
    ffec:	0010c7c0 	call	10c7c <alt_busy_sleep>
            if (--timeout == 0)
    fff0:	94bfffc4 	addi	r18,r18,-1
    fff4:	903ff81e 	bne	r18,zero,ffd8 <__alt_data_end+0xff80ffd8>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
    fff8:	043fff84 	movi	r16,-2
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
    fffc:	8809883a 	mov	r4,r17
   10000:	000f5040 	call	f504 <alt_avalon_i2c_disable>
   10004:	8005883a 	mov	r2,r16
   10008:	00001006 	br	1004c <alt_avalon_i2c_master_receive_using_interrupts+0x154>
    }
    else
    {
       if (issue_stop)
   1000c:	98000c26 	beq	r19,zero,10040 <alt_avalon_i2c_master_receive_using_interrupts+0x148>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   10010:	88800317 	ldw	r2,12(r17)
   10014:	00c00704 	movi	r3,28
   10018:	10c00435 	stwio	r3,16(r2)
       if (issue_stop)
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
   1001c:	000b883a 	mov	r5,zero
   10020:	8809883a 	mov	r4,r17
   10024:	000fed00 	call	fed0 <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
   10028:	01400084 	movi	r5,2
   1002c:	a1400215 	stw	r5,8(r20)
         
         irq_data->buffer = buffer;
   10030:	a5400015 	stw	r21,0(r20)
         irq_data->size = size;
   10034:	a4800115 	stw	r18,4(r20)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   10038:	8809883a 	mov	r4,r17
   1003c:	000fcd40 	call	fcd4 <alt_avalon_i2c_int_enable>
   10040:	0005883a 	mov	r2,zero
   10044:	00000106 	br	1004c <alt_avalon_i2c_master_receive_using_interrupts+0x154>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   10048:	00bfff44 	movi	r2,-3
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
       }
    }

    return status;
}
   1004c:	dfc00817 	ldw	ra,32(sp)
   10050:	ddc00717 	ldw	r23,28(sp)
   10054:	dd800617 	ldw	r22,24(sp)
   10058:	dd400517 	ldw	r21,20(sp)
   1005c:	dd000417 	ldw	r20,16(sp)
   10060:	dcc00317 	ldw	r19,12(sp)
   10064:	dc800217 	ldw	r18,8(sp)
   10068:	dc400117 	ldw	r17,4(sp)
   1006c:	dc000017 	ldw	r16,0(sp)
   10070:	dec00904 	addi	sp,sp,36
   10074:	f800283a 	ret

00010078 <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   10078:	defff604 	addi	sp,sp,-40
   1007c:	ddc00815 	stw	r23,32(sp)
   10080:	dd800715 	stw	r22,28(sp)
   10084:	dd400615 	stw	r21,24(sp)
   10088:	dd000515 	stw	r20,20(sp)
   1008c:	dcc00415 	stw	r19,16(sp)
   10090:	dc800315 	stw	r18,12(sp)
   10094:	dc400215 	stw	r17,8(sp)
   10098:	dc000115 	stw	r16,4(sp)
   1009c:	dfc00915 	stw	ra,36(sp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
   100a0:	39c03fcc 	andi	r7,r7,255
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   100a4:	2023883a 	mov	r17,r4
   100a8:	2825883a 	mov	r18,r5
   100ac:	3027883a 	mov	r19,r6
   100b0:	0409c404 	movi	r16,10000
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
   100b4:	053fffc4 	movi	r20,-1
      {
        if (retry<10) alt_busy_sleep(10000);      
   100b8:	05400244 	movi	r21,9
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   100bc:	05800044 	movi	r22,1
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   100c0:	05c00084 	movi	r23,2
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
   100c4:	38001926 	beq	r7,zero,1012c <alt_avalon_i2c_master_rx+0xb4>
    {
      while (retry--) 
   100c8:	843fffc4 	addi	r16,r16,-1
   100cc:	85001926 	beq	r16,r20,10134 <alt_avalon_i2c_master_rx+0xbc>
      {
        if (retry<10) alt_busy_sleep(10000);      
   100d0:	ac000236 	bltu	r21,r16,100dc <alt_avalon_i2c_master_rx+0x64>
   100d4:	0109c404 	movi	r4,10000
   100d8:	0010c7c0 	call	10c7c <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   100dc:	dd800015 	stw	r22,0(sp)
   100e0:	000f883a 	mov	r7,zero
   100e4:	980d883a 	mov	r6,r19
   100e8:	900b883a 	mov	r5,r18
   100ec:	8809883a 	mov	r4,r17
   100f0:	000fef80 	call	fef8 <alt_avalon_i2c_master_receive_using_interrupts>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   100f4:	10c001c4 	addi	r3,r2,7
   100f8:	b8fff32e 	bgeu	r23,r3,100c8 <__alt_data_end+0xff8100c8>
   100fc:	00000d06 	br	10134 <alt_avalon_i2c_master_rx+0xbc>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   10100:	ac000236 	bltu	r21,r16,1010c <alt_avalon_i2c_master_rx+0x94>
   10104:	0109c404 	movi	r4,10000
   10108:	0010c7c0 	call	10c7c <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   1010c:	dd800015 	stw	r22,0(sp)
   10110:	000f883a 	mov	r7,zero
   10114:	980d883a 	mov	r6,r19
   10118:	900b883a 	mov	r5,r18
   1011c:	8809883a 	mov	r4,r17
   10120:	000fa200 	call	fa20 <alt_avalon_i2c_master_receive>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   10124:	10c001c4 	addi	r3,r2,7
   10128:	b8c00236 	bltu	r23,r3,10134 <alt_avalon_i2c_master_rx+0xbc>
        break;
      }
    }
    else
    {
      while (retry--) 
   1012c:	843fffc4 	addi	r16,r16,-1
   10130:	853ff31e 	bne	r16,r20,10100 <__alt_data_end+0xff810100>
        break;
      }
    }
    
    return status;
}        
   10134:	dfc00917 	ldw	ra,36(sp)
   10138:	ddc00817 	ldw	r23,32(sp)
   1013c:	dd800717 	ldw	r22,28(sp)
   10140:	dd400617 	ldw	r21,24(sp)
   10144:	dd000517 	ldw	r20,20(sp)
   10148:	dcc00417 	ldw	r19,16(sp)
   1014c:	dc800317 	ldw	r18,12(sp)
   10150:	dc400217 	ldw	r17,8(sp)
   10154:	dc000117 	ldw	r16,4(sp)
   10158:	dec00a04 	addi	sp,sp,40
   1015c:	f800283a 	ret

00010160 <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
   10160:	20800317 	ldw	r2,12(r4)
   10164:	10800237 	ldwio	r2,8(r2)
   10168:	1080030c 	andi	r2,r2,12
   1016c:	1005d0ba 	srai	r2,r2,2
   10170:	28800015 	stw	r2,0(r5)
   10174:	f800283a 	ret

00010178 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
   10178:	20c00317 	ldw	r3,12(r4)
   1017c:	18c00204 	addi	r3,r3,8
   10180:	19000037 	ldwio	r4,0(r3)
   10184:	00bffcc4 	movi	r2,-13
   10188:	294b883a 	add	r5,r5,r5
   1018c:	294b883a 	add	r5,r5,r5
   10190:	2084703a 	and	r2,r4,r2
   10194:	2940030c 	andi	r5,r5,12
   10198:	288ab03a 	or	r5,r5,r2
   1019c:	19400035 	stwio	r5,0(r3)
   101a0:	f800283a 	ret

000101a4 <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
   101a4:	defff804 	addi	sp,sp,-32
   101a8:	dfc00715 	stw	ra,28(sp)
   101ac:	dc000515 	stw	r16,20(sp)
   101b0:	dc400615 	stw	r17,24(sp)
   101b4:	2021883a 	mov	r16,r4
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
   101b8:	000f5040 	call	f504 <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   101bc:	014007c4 	movi	r5,31
   101c0:	8009883a 	mov	r4,r16
   101c4:	000fc100 	call	fc10 <alt_avalon_i2c_int_disable>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   101c8:	80800317 	ldw	r2,12(r16)
   101cc:	00c00704 	movi	r3,28
   101d0:	10c00435 	stwio	r3,16(r2)

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
   101d4:	044000c4 	movi	r17,3
   101d8:	880b883a 	mov	r5,r17
   101dc:	8009883a 	mov	r4,r16
   101e0:	00101780 	call	10178 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
   101e4:	880b883a 	mov	r5,r17
   101e8:	8009883a 	mov	r4,r16
   101ec:	000fed00 	call	fed0 <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
   101f0:	018000b4 	movhi	r6,2
   101f4:	31a1a804 	addi	r6,r6,-31072
   101f8:	d9400104 	addi	r5,sp,4
   101fc:	8009883a 	mov	r4,r16
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
   10200:	d8000215 	stw	zero,8(sp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
   10204:	d8000115 	stw	zero,4(sp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
   10208:	000f6080 	call	f608 <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
   1020c:	d9400104 	addi	r5,sp,4
   10210:	8009883a 	mov	r4,r16
   10214:	000f5640 	call	f564 <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
   10218:	8009883a 	mov	r4,r16
   1021c:	d1600904 	addi	r5,gp,-32732
   10220:	0010d0c0 	call	10d0c <alt_dev_llist_insert>
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);

    if (!error)
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
   10224:	81400517 	ldw	r5,20(r16)
   10228:	81000417 	ldw	r4,16(r16)
   1022c:	01800074 	movhi	r6,1
   10230:	d8000015 	stw	zero,0(sp)
   10234:	800f883a 	mov	r7,r16
   10238:	31bf1704 	addi	r6,r6,-932
   1023c:	0010b700 	call	10b70 <alt_ic_isr_register>
        alt_printf("failed to create semaphores\n");
    }

    return;

}
   10240:	dfc00717 	ldw	ra,28(sp)
   10244:	dc400617 	ldw	r17,24(sp)
   10248:	dc000517 	ldw	r16,20(sp)
   1024c:	dec00804 	addi	sp,sp,32
   10250:	f800283a 	ret

00010254 <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   10254:	defff804 	addi	sp,sp,-32
   10258:	dd000415 	stw	r20,16(sp)
   1025c:	dfc00715 	stw	ra,28(sp)
   10260:	dd800615 	stw	r22,24(sp)
   10264:	dd400515 	stw	r21,20(sp)
   10268:	dcc00315 	stw	r19,12(sp)
   1026c:	dc800215 	stw	r18,8(sp)
   10270:	dc400115 	stw	r17,4(sp)
   10274:	dc000015 	stw	r16,0(sp)
   10278:	dd000817 	ldw	r20,32(sp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout=size*10000;
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
    
    if (size==0)
   1027c:	30004426 	beq	r6,zero,10390 <alt_avalon_i2c_master_transmit_using_interrupts+0x13c>
    {
      return ALT_AVALON_I2C_SUCCESS;
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   10280:	20c00617 	ldw	r3,24(r4)
   10284:	00800074 	movhi	r2,1
   10288:	10bf4704 	addi	r2,r2,-740
   1028c:	2023883a 	mov	r17,r4
   10290:	1880411e 	bne	r3,r2,10398 <alt_avalon_i2c_master_transmit_using_interrupts+0x144>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   10294:	3c003fcc 	andi	r16,r7,255
   10298:	2827883a 	mov	r19,r5
   1029c:	3025883a 	mov	r18,r6
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout=size*10000;
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   102a0:	25400717 	ldw	r21,28(r4)
    {
       return ALT_AVALON_I2C_BAD_ARG;    
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   102a4:	8000051e 	bne	r16,zero,102bc <alt_avalon_i2c_master_transmit_using_interrupts+0x68>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   102a8:	000f4bc0 	call	f4bc <alt_avalon_i2c_enable>
      if (status != ALT_AVALON_I2C_SUCCESS)
   102ac:	10003b1e 	bne	r2,zero,1039c <alt_avalon_i2c_master_transmit_using_interrupts+0x148>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   102b0:	88800317 	ldw	r2,12(r17)
   102b4:	00c00704 	movi	r3,28
   102b8:	10c00435 	stwio	r3,16(r2)
      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   102bc:	800d883a 	mov	r6,r16
   102c0:	000b883a 	mov	r5,zero
   102c4:	8809883a 	mov	r4,r17
   102c8:	000f8700 	call	f870 <alt_avalon_i2c_send_address>
   102cc:	1021883a 	mov	r16,r2
        
    if (status == ALT_AVALON_I2C_SUCCESS)
   102d0:	1000151e 	bne	r2,zero,10328 <alt_avalon_i2c_master_transmit_using_interrupts+0xd4>
   102d4:	95bfffc4 	addi	r22,r18,-1
   102d8:	9dad883a 	add	r22,r19,r22
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   102dc:	9d800926 	beq	r19,r22,10304 <alt_avalon_i2c_master_transmit_using_interrupts+0xb0>
   102e0:	8000111e 	bne	r16,zero,10328 <alt_avalon_i2c_master_transmit_using_interrupts+0xd4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   102e4:	99400003 	ldbu	r5,0(r19)
   102e8:	000f883a 	mov	r7,zero
   102ec:	000d883a 	mov	r6,zero
   102f0:	8809883a 	mov	r4,r17
   102f4:	000f7a80 	call	f7a8 <alt_avalon_i2c_cmd_write>
   102f8:	1021883a 	mov	r16,r2
            
            ++buffer;
   102fc:	9cc00044 	addi	r19,r19,1
   10300:	003ff606 	br	102dc <__alt_data_end+0xff8102dc>
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   10304:	8000081e 	bne	r16,zero,10328 <alt_avalon_i2c_master_transmit_using_interrupts+0xd4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   10308:	99400003 	ldbu	r5,0(r19)
   1030c:	a5003fcc 	andi	r20,r20,255
   10310:	a00f883a 	mov	r7,r20
   10314:	000d883a 	mov	r6,zero
   10318:	8809883a 	mov	r4,r17
   1031c:	000f7a80 	call	f7a8 <alt_avalon_i2c_cmd_write>
   10320:	1021883a 	mov	r16,r2
            --size;
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   10324:	10000f26 	beq	r2,zero,10364 <alt_avalon_i2c_master_transmit_using_interrupts+0x110>
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout=size*10000;
   10328:	9489c424 	muli	r18,r18,10000
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);        
   1032c:	04c00244 	movi	r19,9
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   10330:	8809883a 	mov	r4,r17
   10334:	000f6940 	call	f694 <alt_avalon_i2c_is_busy>
   10338:	10000626 	beq	r2,zero,10354 <alt_avalon_i2c_master_transmit_using_interrupts+0x100>
        {
            if (timeout<10) alt_busy_sleep(10000);        
   1033c:	9c800236 	bltu	r19,r18,10348 <alt_avalon_i2c_master_transmit_using_interrupts+0xf4>
   10340:	0109c404 	movi	r4,10000
   10344:	0010c7c0 	call	10c7c <alt_busy_sleep>
            if (--timeout == 0)
   10348:	94bfffc4 	addi	r18,r18,-1
   1034c:	903ff81e 	bne	r18,zero,10330 <__alt_data_end+0xff810330>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   10350:	043fff84 	movi	r16,-2
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   10354:	8809883a 	mov	r4,r17
   10358:	000f5040 	call	f504 <alt_avalon_i2c_disable>
   1035c:	8005883a 	mov	r2,r16
   10360:	00000e06 	br	1039c <alt_avalon_i2c_master_transmit_using_interrupts+0x148>
    }
    else
    {
       if (issue_stop)
   10364:	a0000a26 	beq	r20,zero,10390 <alt_avalon_i2c_master_transmit_using_interrupts+0x13c>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   10368:	88800317 	ldw	r2,12(r17)
   1036c:	00c00704 	movi	r3,28
   10370:	10c00435 	stwio	r3,16(r2)
       if (issue_stop)
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
   10374:	000b883a 	mov	r5,zero
   10378:	8809883a 	mov	r4,r17
   1037c:	00101780 	call	10178 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
   10380:	01400044 	movi	r5,1
   10384:	a9400215 	stw	r5,8(r21)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
   10388:	8809883a 	mov	r4,r17
   1038c:	000fcd40 	call	fcd4 <alt_avalon_i2c_int_enable>
   10390:	0005883a 	mov	r2,zero
   10394:	00000106 	br	1039c <alt_avalon_i2c_master_transmit_using_interrupts+0x148>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   10398:	00bfff44 	movi	r2,-3
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
       }
    }
    
    return status;
}
   1039c:	dfc00717 	ldw	ra,28(sp)
   103a0:	dd800617 	ldw	r22,24(sp)
   103a4:	dd400517 	ldw	r21,20(sp)
   103a8:	dd000417 	ldw	r20,16(sp)
   103ac:	dcc00317 	ldw	r19,12(sp)
   103b0:	dc800217 	ldw	r18,8(sp)
   103b4:	dc400117 	ldw	r17,4(sp)
   103b8:	dc000017 	ldw	r16,0(sp)
   103bc:	dec00804 	addi	sp,sp,32
   103c0:	f800283a 	ret

000103c4 <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   103c4:	defff504 	addi	sp,sp,-44
   103c8:	df000915 	stw	fp,36(sp)
   103cc:	ddc00815 	stw	r23,32(sp)
   103d0:	dd800715 	stw	r22,28(sp)
   103d4:	dd400615 	stw	r21,24(sp)
   103d8:	dd000515 	stw	r20,20(sp)
   103dc:	dcc00415 	stw	r19,16(sp)
   103e0:	dc800315 	stw	r18,12(sp)
   103e4:	dc400215 	stw	r17,8(sp)
   103e8:	dc000115 	stw	r16,4(sp)
   103ec:	dfc00a15 	stw	ra,40(sp)
   103f0:	2023883a 	mov	r17,r4
   103f4:	2825883a 	mov	r18,r5
   103f8:	3027883a 	mov	r19,r6
   103fc:	382d883a 	mov	r22,r7
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   10400:	0409c404 	movi	r16,10000
    
    while (retry--)
   10404:	057fffc4 	movi	r21,-1
    {
      if (retry<10) alt_busy_sleep(10000);
   10408:	05c00244 	movi	r23,9
   1040c:	05000044 	movi	r20,1
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   10410:	07000084 	movi	fp,2
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
   10414:	843fffc4 	addi	r16,r16,-1
   10418:	85400f26 	beq	r16,r21,10458 <alt_avalon_i2c_master_tx+0x94>
    {
      if (retry<10) alt_busy_sleep(10000);
   1041c:	bc000236 	bltu	r23,r16,10428 <alt_avalon_i2c_master_tx+0x64>
   10420:	0109c404 	movi	r4,10000
   10424:	0010c7c0 	call	10c7c <alt_busy_sleep>
      if (use_interrupts)
   10428:	b0803fcc 	andi	r2,r22,255
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
   1042c:	dd000015 	stw	r20,0(sp)
   10430:	000f883a 	mov	r7,zero
   10434:	980d883a 	mov	r6,r19
   10438:	900b883a 	mov	r5,r18
   1043c:	8809883a 	mov	r4,r17
    alt_u32 retry=10000;  
    
    while (retry--)
    {
      if (retry<10) alt_busy_sleep(10000);
      if (use_interrupts)
   10440:	10000226 	beq	r2,zero,1044c <alt_avalon_i2c_master_tx+0x88>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
   10444:	00102540 	call	10254 <alt_avalon_i2c_master_transmit_using_interrupts>
   10448:	00000106 	br	10450 <alt_avalon_i2c_master_tx+0x8c>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
   1044c:	000f8e80 	call	f8e8 <alt_avalon_i2c_master_transmit>
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   10450:	10c001c4 	addi	r3,r2,7
   10454:	e0ffef2e 	bgeu	fp,r3,10414 <__alt_data_end+0xff810414>
      break;
    }

    return status;
}        
   10458:	dfc00a17 	ldw	ra,40(sp)
   1045c:	df000917 	ldw	fp,36(sp)
   10460:	ddc00817 	ldw	r23,32(sp)
   10464:	dd800717 	ldw	r22,28(sp)
   10468:	dd400617 	ldw	r21,24(sp)
   1046c:	dd000517 	ldw	r20,20(sp)
   10470:	dcc00417 	ldw	r19,16(sp)
   10474:	dc800317 	ldw	r18,12(sp)
   10478:	dc400217 	ldw	r17,8(sp)
   1047c:	dc000117 	ldw	r16,4(sp)
   10480:	dec00b04 	addi	sp,sp,44
   10484:	f800283a 	ret

00010488 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
   10488:	defff504 	addi	sp,sp,-44
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
   1048c:	d8c00c03 	ldbu	r3,48(sp)
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
   10490:	df000915 	stw	fp,36(sp)
   10494:	ddc00815 	stw	r23,32(sp)
   10498:	dd800715 	stw	r22,28(sp)
   1049c:	dd400615 	stw	r21,24(sp)
   104a0:	dd000515 	stw	r20,20(sp)
   104a4:	dcc00415 	stw	r19,16(sp)
   104a8:	dc800315 	stw	r18,12(sp)
   104ac:	dc400215 	stw	r17,8(sp)
   104b0:	dc000115 	stw	r16,4(sp)
   104b4:	dfc00a15 	stw	ra,40(sp)
   104b8:	2023883a 	mov	r17,r4
   104bc:	2825883a 	mov	r18,r5
   104c0:	3027883a 	mov	r19,r6
   104c4:	3829883a 	mov	r20,r7
   104c8:	0409c404 	movi	r16,10000
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
   104cc:	05bfffc4 	movi	r22,-1
      {
        if (retry<10) alt_busy_sleep(10000);      
   104d0:	05c00244 	movi	r23,9
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   104d4:	05400084 	movi	r21,2
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   104d8:	07000044 	movi	fp,1
                                       const alt_u8 use_interrupts)                                       
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
   104dc:	18002126 	beq	r3,zero,10564 <alt_avalon_i2c_master_tx_rx+0xdc>
    {
      while (retry--) 
   104e0:	843fffc4 	addi	r16,r16,-1
   104e4:	85802a26 	beq	r16,r22,10590 <alt_avalon_i2c_master_tx_rx+0x108>
      {
        if (retry<10) alt_busy_sleep(10000);      
   104e8:	bc000236 	bltu	r23,r16,104f4 <alt_avalon_i2c_master_tx_rx+0x6c>
   104ec:	0109c404 	movi	r4,10000
   104f0:	0010c7c0 	call	10c7c <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   104f4:	d8000015 	stw	zero,0(sp)
   104f8:	000f883a 	mov	r7,zero
   104fc:	980d883a 	mov	r6,r19
   10500:	900b883a 	mov	r5,r18
   10504:	8809883a 	mov	r4,r17
   10508:	00102540 	call	10254 <alt_avalon_i2c_master_transmit_using_interrupts>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   1050c:	10c001c4 	addi	r3,r2,7
   10510:	a8fff32e 	bgeu	r21,r3,104e0 <__alt_data_end+0xff8104e0>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   10514:	d9800b17 	ldw	r6,44(sp)
   10518:	df000015 	stw	fp,0(sp)
   1051c:	01c00044 	movi	r7,1
   10520:	a00b883a 	mov	r5,r20
   10524:	8809883a 	mov	r4,r17
   10528:	000fef80 	call	fef8 <alt_avalon_i2c_master_receive_using_interrupts>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   1052c:	10c001c4 	addi	r3,r2,7
   10530:	a8ffeb2e 	bgeu	r21,r3,104e0 <__alt_data_end+0xff8104e0>
   10534:	00001606 	br	10590 <alt_avalon_i2c_master_tx_rx+0x108>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   10538:	bc000236 	bltu	r23,r16,10544 <alt_avalon_i2c_master_tx_rx+0xbc>
   1053c:	0109c404 	movi	r4,10000
   10540:	0010c7c0 	call	10c7c <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   10544:	d8000015 	stw	zero,0(sp)
   10548:	000f883a 	mov	r7,zero
   1054c:	980d883a 	mov	r6,r19
   10550:	900b883a 	mov	r5,r18
   10554:	8809883a 	mov	r4,r17
   10558:	000f8e80 	call	f8e8 <alt_avalon_i2c_master_transmit>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   1055c:	10c001c4 	addi	r3,r2,7
   10560:	a8c00336 	bltu	r21,r3,10570 <alt_avalon_i2c_master_tx_rx+0xe8>
        break;
      }
    }
    else 
    {
      while (retry--) 
   10564:	843fffc4 	addi	r16,r16,-1
   10568:	85bff31e 	bne	r16,r22,10538 <__alt_data_end+0xff810538>
   1056c:	00000806 	br	10590 <alt_avalon_i2c_master_tx_rx+0x108>
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   10570:	d9800b17 	ldw	r6,44(sp)
   10574:	df000015 	stw	fp,0(sp)
   10578:	01c00044 	movi	r7,1
   1057c:	a00b883a 	mov	r5,r20
   10580:	8809883a 	mov	r4,r17
   10584:	000fa200 	call	fa20 <alt_avalon_i2c_master_receive>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   10588:	10c001c4 	addi	r3,r2,7
   1058c:	a8fff52e 	bgeu	r21,r3,10564 <__alt_data_end+0xff810564>
        break;
      }
    }
    
    return status;
}                                       
   10590:	dfc00a17 	ldw	ra,40(sp)
   10594:	df000917 	ldw	fp,36(sp)
   10598:	ddc00817 	ldw	r23,32(sp)
   1059c:	dd800717 	ldw	r22,28(sp)
   105a0:	dd400617 	ldw	r21,24(sp)
   105a4:	dd000517 	ldw	r20,20(sp)
   105a8:	dcc00417 	ldw	r19,16(sp)
   105ac:	dc800317 	ldw	r18,12(sp)
   105b0:	dc400217 	ldw	r17,8(sp)
   105b4:	dc000117 	ldw	r16,4(sp)
   105b8:	dec00b04 	addi	sp,sp,44
   105bc:	f800283a 	ret

000105c0 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   105c0:	20800017 	ldw	r2,0(r4)
   105c4:	10800104 	addi	r2,r2,4
   105c8:	10c00037 	ldwio	r3,0(r2)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   105cc:	18c1000c 	andi	r3,r3,1024
   105d0:	18000526 	beq	r3,zero,105e8 <altera_avalon_jtag_uart_timeout+0x28>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   105d4:	20c00817 	ldw	r3,32(r4)
   105d8:	18c10014 	ori	r3,r3,1024
   105dc:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   105e0:	20000915 	stw	zero,36(r4)
   105e4:	00000606 	br	10600 <altera_avalon_jtag_uart_timeout+0x40>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   105e8:	20800917 	ldw	r2,36(r4)
   105ec:	00e00034 	movhi	r3,32768
   105f0:	18ffff04 	addi	r3,r3,-4
   105f4:	18800236 	bltu	r3,r2,10600 <altera_avalon_jtag_uart_timeout+0x40>
    sp->host_inactive++;
   105f8:	10800044 	addi	r2,r2,1
   105fc:	20800915 	stw	r2,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   10600:	d0a6a117 	ldw	r2,-25980(gp)
   10604:	f800283a 	ret

00010608 <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
   10608:	21c00017 	ldw	r7,0(r4)
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1060c:	027fff84 	movi	r9,-2
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   10610:	023fff44 	movi	r8,-3
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10614:	39800104 	addi	r6,r7,4
   10618:	30800037 	ldwio	r2,0(r6)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   1061c:	10c0c00c 	andi	r3,r2,768
   10620:	18003226 	beq	r3,zero,106ec <altera_avalon_jtag_uart_irq+0xe4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   10624:	10c0400c 	andi	r3,r2,256
   10628:	18001826 	beq	r3,zero,1068c <altera_avalon_jtag_uart_irq+0x84>
   1062c:	00c00074 	movhi	r3,1
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10630:	21400a17 	ldw	r5,40(r4)
        if (next == sp->rx_out)
   10634:	22800b17 	ldw	r10,44(r4)
   10638:	29400044 	addi	r5,r5,1
   1063c:	2941ffcc 	andi	r5,r5,2047
   10640:	2a800b26 	beq	r5,r10,10670 <altera_avalon_jtag_uart_irq+0x68>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   10644:	38c00037 	ldwio	r3,0(r7)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   10648:	1960000c 	andi	r5,r3,32768
   1064c:	28000826 	beq	r5,zero,10670 <altera_avalon_jtag_uart_irq+0x68>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   10650:	21400a17 	ldw	r5,40(r4)
   10654:	214b883a 	add	r5,r4,r5
   10658:	28c00e05 	stb	r3,56(r5)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1065c:	21400a17 	ldw	r5,40(r4)
   10660:	29400044 	addi	r5,r5,1
   10664:	2941ffcc 	andi	r5,r5,2047
   10668:	21400a15 	stw	r5,40(r4)
   1066c:	003ff006 	br	10630 <__alt_data_end+0xff810630>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   10670:	18ffffec 	andhi	r3,r3,65535
   10674:	18000526 	beq	r3,zero,1068c <altera_avalon_jtag_uart_irq+0x84>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10678:	20c00817 	ldw	r3,32(r4)
   1067c:	1a46703a 	and	r3,r3,r9
   10680:	20c00815 	stw	r3,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   10684:	30c00035 	stwio	r3,0(r6)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10688:	30c00037 	ldwio	r3,0(r6)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   1068c:	10c0800c 	andi	r3,r2,512
   10690:	183fe126 	beq	r3,zero,10618 <__alt_data_end+0xff810618>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   10694:	1004d43a 	srli	r2,r2,16

      while (space > 0 && sp->tx_out != sp->tx_in)
   10698:	103fdf26 	beq	r2,zero,10618 <__alt_data_end+0xff810618>
   1069c:	21400d17 	ldw	r5,52(r4)
   106a0:	20c00c17 	ldw	r3,48(r4)
   106a4:	28c00a26 	beq	r5,r3,106d0 <altera_avalon_jtag_uart_irq+0xc8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   106a8:	20c00d17 	ldw	r3,52(r4)
   106ac:	20c7883a 	add	r3,r4,r3
   106b0:	18c20e07 	ldb	r3,2104(r3)
   106b4:	38c00035 	stwio	r3,0(r7)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   106b8:	20c00d17 	ldw	r3,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   106bc:	10bfffc4 	addi	r2,r2,-1

      while (space > 0 && sp->tx_out != sp->tx_in)
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   106c0:	18c00044 	addi	r3,r3,1
   106c4:	18c1ffcc 	andi	r3,r3,2047
   106c8:	20c00d15 	stw	r3,52(r4)
   106cc:	003ff206 	br	10698 <__alt_data_end+0xff810698>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   106d0:	20800817 	ldw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   106d4:	20c00017 	ldw	r3,0(r4)
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   106d8:	1204703a 	and	r2,r2,r8
   106dc:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   106e0:	18800135 	stwio	r2,4(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   106e4:	30800037 	ldwio	r2,0(r6)
   106e8:	003fcb06 	br	10618 <__alt_data_end+0xff810618>
   106ec:	f800283a 	ret

000106f0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   106f0:	defffd04 	addi	sp,sp,-12
   106f4:	dc000115 	stw	r16,4(sp)
   106f8:	2021883a 	mov	r16,r4
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   106fc:	80c00017 	ldw	r3,0(r16)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10700:	00800044 	movi	r2,1
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   10704:	dfc00215 	stw	ra,8(sp)
   10708:	2809883a 	mov	r4,r5
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1070c:	80800815 	stw	r2,32(r16)
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   10710:	300b883a 	mov	r5,r6
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   10714:	18800135 	stwio	r2,4(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   10718:	01800074 	movhi	r6,1
   1071c:	800f883a 	mov	r7,r16
   10720:	31818204 	addi	r6,r6,1544
   10724:	d8000015 	stw	zero,0(sp)
   10728:	0010b700 	call	10b70 <alt_ic_isr_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   1072c:	d166a117 	ldw	r5,-25980(gp)
   10730:	01800074 	movhi	r6,1
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   10734:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   10738:	800f883a 	mov	r7,r16
   1073c:	31817004 	addi	r6,r6,1472
   10740:	81000204 	addi	r4,r16,8
   10744:	0010be80 	call	10be8 <alt_alarm_start>
   10748:	1000030e 	bge	r2,zero,10758 <altera_avalon_jtag_uart_init+0x68>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   1074c:	00a00034 	movhi	r2,32768
   10750:	10bfffc4 	addi	r2,r2,-1
   10754:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   10758:	dfc00217 	ldw	ra,8(sp)
   1075c:	dc000117 	ldw	r16,4(sp)
   10760:	dec00304 	addi	sp,sp,12
   10764:	f800283a 	ret

00010768 <altera_avalon_jtag_uart_close>:
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   10768:	21800c17 	ldw	r6,48(r4)
    if (flags & O_NONBLOCK) {
   1076c:	2950000c 	andi	r5,r5,16384
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   10770:	20800d17 	ldw	r2,52(r4)
   10774:	11800626 	beq	r2,r6,10790 <altera_avalon_jtag_uart_close+0x28>
   10778:	20c00917 	ldw	r3,36(r4)
   1077c:	20800117 	ldw	r2,4(r4)
   10780:	1880032e 	bgeu	r3,r2,10790 <altera_avalon_jtag_uart_close+0x28>
    if (flags & O_NONBLOCK) {
   10784:	283ffa26 	beq	r5,zero,10770 <__alt_data_end+0xff810770>
      return -EWOULDBLOCK; 
   10788:	00bffd44 	movi	r2,-11
   1078c:	f800283a 	ret
    }
  }

  return 0;
   10790:	0005883a 	mov	r2,zero
}
   10794:	f800283a 	ret

00010798 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   10798:	defff504 	addi	sp,sp,-44
   1079c:	df000915 	stw	fp,36(sp)
   107a0:	ddc00815 	stw	r23,32(sp)
   107a4:	dd800715 	stw	r22,28(sp)
   107a8:	dd000515 	stw	r20,20(sp)
   107ac:	dc800315 	stw	r18,12(sp)
   107b0:	dc400215 	stw	r17,8(sp)
   107b4:	3829883a 	mov	r20,r7
   107b8:	dfc00a15 	stw	ra,40(sp)
   107bc:	dd400615 	stw	r21,24(sp)
   107c0:	dcc00415 	stw	r19,16(sp)
   107c4:	dc000115 	stw	r16,4(sp)
   107c8:	2023883a 	mov	r17,r4
   107cc:	282d883a 	mov	r22,r5
   107d0:	3025883a 	mov	r18,r6
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   107d4:	05c20004 	movi	r23,2048
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
   107d8:	27000e04 	addi	fp,r4,56
    /* If we read any data then return it */
    if (ptr != buffer)
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   107dc:	39d0000c 	andi	r7,r7,16384
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   107e0:	0480300e 	bge	zero,r18,108a4 <altera_avalon_jtag_uart_read+0x10c>
   107e4:	b007883a 	mov	r3,r22
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   107e8:	8d400a17 	ldw	r21,40(r17)
      out = sp->rx_out;
   107ec:	8cc00b17 	ldw	r19,44(r17)

      if (in >= out)
   107f0:	acc00236 	bltu	r21,r19,107fc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   107f4:	ace1c83a 	sub	r16,r21,r19
   107f8:	00000106 	br	10800 <altera_avalon_jtag_uart_read+0x68>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   107fc:	bce1c83a 	sub	r16,r23,r19

      if (n == 0)
   10800:	80000e26 	beq	r16,zero,1083c <altera_avalon_jtag_uart_read+0xa4>
   10804:	9400012e 	bgeu	r18,r16,1080c <altera_avalon_jtag_uart_read+0x74>
   10808:	9021883a 	mov	r16,r18
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
   1080c:	800d883a 	mov	r6,r16
   10810:	1809883a 	mov	r4,r3
   10814:	e4cb883a 	add	r5,fp,r19
   10818:	d9c00015 	stw	r7,0(sp)
   1081c:	0004ed40 	call	4ed4 <memcpy>
      ptr   += n;
   10820:	1407883a 	add	r3,r2,r16
      space -= n;
   10824:	9425c83a 	sub	r18,r18,r16

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10828:	9c21883a 	add	r16,r19,r16
   1082c:	8401ffcc 	andi	r16,r16,2047
   10830:	8c000b15 	stw	r16,44(r17)
    }
    while (space > 0);
   10834:	d9c00017 	ldw	r7,0(sp)
   10838:	04bfeb16 	blt	zero,r18,107e8 <__alt_data_end+0xff8107e8>

    /* If we read any data then return it */
    if (ptr != buffer)
   1083c:	1d80091e 	bne	r3,r22,10864 <altera_avalon_jtag_uart_read+0xcc>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   10840:	3800181e 	bne	r7,zero,108a4 <altera_avalon_jtag_uart_read+0x10c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   10844:	88800a17 	ldw	r2,40(r17)
   10848:	a880031e 	bne	r21,r2,10858 <altera_avalon_jtag_uart_read+0xc0>
   1084c:	88c00917 	ldw	r3,36(r17)
   10850:	88800117 	ldw	r2,4(r17)
   10854:	18bffb36 	bltu	r3,r2,10844 <__alt_data_end+0xff810844>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   10858:	88800a17 	ldw	r2,40(r17)
   1085c:	a8bfe01e 	bne	r21,r2,107e0 <__alt_data_end+0xff8107e0>
   10860:	00001006 	br	108a4 <altera_avalon_jtag_uart_read+0x10c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10864:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10868:	00bfff84 	movi	r2,-2
   1086c:	208a703a 	and	r5,r4,r2
   10870:	2801703a 	wrctl	status,r5

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10874:	89400817 	ldw	r5,32(r17)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10878:	89800017 	ldw	r6,0(r17)

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1087c:	29400054 	ori	r5,r5,1
   10880:	89400815 	stw	r5,32(r17)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10884:	31400135 	stwio	r5,4(r6)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
   10888:	000b303a 	rdctl	r5,status
  
  status &= ~NIOS2_STATUS_PIE_MSK;
   1088c:	2884703a 	and	r2,r5,r2
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
   10890:	2100004c 	andi	r4,r4,1
   10894:	2084b03a 	or	r2,r4,r2
   10898:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
   1089c:	1d85c83a 	sub	r2,r3,r22
   108a0:	00000506 	br	108b8 <altera_avalon_jtag_uart_read+0x120>
  else if (flags & O_NONBLOCK)
   108a4:	a510000c 	andi	r20,r20,16384
   108a8:	a0000226 	beq	r20,zero,108b4 <altera_avalon_jtag_uart_read+0x11c>
    return -EWOULDBLOCK;
   108ac:	00bffd44 	movi	r2,-11
   108b0:	00000106 	br	108b8 <altera_avalon_jtag_uart_read+0x120>
  else
    return -EIO;
   108b4:	00bffec4 	movi	r2,-5
}
   108b8:	dfc00a17 	ldw	ra,40(sp)
   108bc:	df000917 	ldw	fp,36(sp)
   108c0:	ddc00817 	ldw	r23,32(sp)
   108c4:	dd800717 	ldw	r22,28(sp)
   108c8:	dd400617 	ldw	r21,24(sp)
   108cc:	dd000517 	ldw	r20,20(sp)
   108d0:	dcc00417 	ldw	r19,16(sp)
   108d4:	dc800317 	ldw	r18,12(sp)
   108d8:	dc400217 	ldw	r17,8(sp)
   108dc:	dc000117 	ldw	r16,4(sp)
   108e0:	dec00b04 	addi	sp,sp,44
   108e4:	f800283a 	ret

000108e8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   108e8:	defff304 	addi	sp,sp,-52
   108ec:	df000b15 	stw	fp,44(sp)
   108f0:	ddc00a15 	stw	r23,40(sp)
   108f4:	dd800915 	stw	r22,36(sp)
   108f8:	dd400815 	stw	r21,32(sp)
   108fc:	dcc00615 	stw	r19,24(sp)
   10900:	dc800515 	stw	r18,20(sp)
   10904:	dc400415 	stw	r17,16(sp)
   10908:	382f883a 	mov	r23,r7
   1090c:	dfc00c15 	stw	ra,48(sp)
   10910:	dd000715 	stw	r20,28(sp)
   10914:	dc000315 	stw	r16,12(sp)
   10918:	2025883a 	mov	r18,r4
   1091c:	282b883a 	mov	r21,r5
   10920:	3027883a 	mov	r19,r6
   10924:	2823883a 	mov	r17,r5
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   10928:	002d883a 	mov	r22,zero
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1092c:	073fff84 	movi	fp,-2
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
   10930:	39d0000c 	andi	r7,r7,16384
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
   10934:	22020e04 	addi	r8,r4,2104
      if (in < out)
        n = out - 1 - in;
      else if (out > 0)
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   10938:	0241ffc4 	movi	r9,2047
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1093c:	04c01d0e 	bge	zero,r19,109b4 <altera_avalon_jtag_uart_write+0xcc>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   10940:	95000c17 	ldw	r20,48(r18)
      out = sp->tx_out;
   10944:	95800d17 	ldw	r22,52(r18)

      if (in < out)
   10948:	a580022e 	bgeu	r20,r22,10954 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   1094c:	b0ffffc4 	addi	r3,r22,-1
   10950:	00000206 	br	1095c <altera_avalon_jtag_uart_write+0x74>
      else if (out > 0)
   10954:	b0000326 	beq	r22,zero,10964 <altera_avalon_jtag_uart_write+0x7c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   10958:	00c20004 	movi	r3,2048
   1095c:	1d21c83a 	sub	r16,r3,r20
   10960:	00000106 	br	10968 <altera_avalon_jtag_uart_write+0x80>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   10964:	4d21c83a 	sub	r16,r9,r20

      if (n == 0)
   10968:	80001226 	beq	r16,zero,109b4 <altera_avalon_jtag_uart_write+0xcc>
   1096c:	9c00012e 	bgeu	r19,r16,10974 <altera_avalon_jtag_uart_write+0x8c>
   10970:	9821883a 	mov	r16,r19
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
   10974:	800d883a 	mov	r6,r16
   10978:	880b883a 	mov	r5,r17
   1097c:	4509883a 	add	r4,r8,r20
      ptr   += n;
   10980:	8c23883a 	add	r17,r17,r16
      count -= n;
   10984:	9c27c83a 	sub	r19,r19,r16

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10988:	a421883a 	add	r16,r20,r16
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
   1098c:	d9c00015 	stw	r7,0(sp)
   10990:	da000115 	stw	r8,4(sp)
   10994:	da400215 	stw	r9,8(sp)
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10998:	8401ffcc 	andi	r16,r16,2047
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
   1099c:	0004ed40 	call	4ed4 <memcpy>
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   109a0:	da400217 	ldw	r9,8(sp)
   109a4:	94000c15 	stw	r16,48(r18)
   109a8:	da000117 	ldw	r8,4(sp)
   109ac:	d9c00017 	ldw	r7,0(sp)
   109b0:	003fe206 	br	1093c <__alt_data_end+0xff81093c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   109b4:	0005303a 	rdctl	r2,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   109b8:	1706703a 	and	r3,r2,fp
   109bc:	1801703a 	wrctl	status,r3
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   109c0:	90c00817 	ldw	r3,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   109c4:	91000017 	ldw	r4,0(r18)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   109c8:	18c00094 	ori	r3,r3,2
   109cc:	90c00815 	stw	r3,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   109d0:	20c00135 	stwio	r3,4(r4)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
   109d4:	0007303a 	rdctl	r3,status
  
  status &= ~NIOS2_STATUS_PIE_MSK;
   109d8:	1f06703a 	and	r3,r3,fp
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
   109dc:	1080004c 	andi	r2,r2,1
   109e0:	10c4b03a 	or	r2,r2,r3
   109e4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   109e8:	04c0080e 	bge	zero,r19,10a0c <altera_avalon_jtag_uart_write+0x124>
    {
      if (flags & O_NONBLOCK)
   109ec:	3800101e 	bne	r7,zero,10a30 <altera_avalon_jtag_uart_write+0x148>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   109f0:	90c00d17 	ldw	r3,52(r18)
   109f4:	90800917 	ldw	r2,36(r18)
   109f8:	b0c0021e 	bne	r22,r3,10a04 <altera_avalon_jtag_uart_write+0x11c>
   109fc:	90c00117 	ldw	r3,4(r18)
   10a00:	10fffb36 	bltu	r2,r3,109f0 <__alt_data_end+0xff8109f0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   10a04:	103fcd26 	beq	r2,zero,1093c <__alt_data_end+0xff81093c>
   10a08:	00000606 	br	10a24 <altera_avalon_jtag_uart_write+0x13c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   10a0c:	8d400226 	beq	r17,r21,10a18 <altera_avalon_jtag_uart_write+0x130>
    return ptr - start;
   10a10:	8d45c83a 	sub	r2,r17,r21
   10a14:	00000806 	br	10a38 <altera_avalon_jtag_uart_write+0x150>
  else if (flags & O_NONBLOCK)
   10a18:	bdd0000c 	andi	r23,r23,16384
   10a1c:	b8000226 	beq	r23,zero,10a28 <altera_avalon_jtag_uart_write+0x140>
   10a20:	00000406 	br	10a34 <altera_avalon_jtag_uart_write+0x14c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   10a24:	8d7ffa1e 	bne	r17,r21,10a10 <__alt_data_end+0xff810a10>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   10a28:	00bffec4 	movi	r2,-5
   10a2c:	00000206 	br	10a38 <altera_avalon_jtag_uart_write+0x150>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   10a30:	8d7ff71e 	bne	r17,r21,10a10 <__alt_data_end+0xff810a10>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
   10a34:	00bffd44 	movi	r2,-11
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
}
   10a38:	dfc00c17 	ldw	ra,48(sp)
   10a3c:	df000b17 	ldw	fp,44(sp)
   10a40:	ddc00a17 	ldw	r23,40(sp)
   10a44:	dd800917 	ldw	r22,36(sp)
   10a48:	dd400817 	ldw	r21,32(sp)
   10a4c:	dd000717 	ldw	r20,28(sp)
   10a50:	dcc00617 	ldw	r19,24(sp)
   10a54:	dc800517 	ldw	r18,20(sp)
   10a58:	dc400417 	ldw	r17,16(sp)
   10a5c:	dc000317 	ldw	r16,12(sp)
   10a60:	dec00d04 	addi	sp,sp,52
   10a64:	f800283a 	ret

00010a68 <VIC_0_VECTOR_TABLE>:

    .section .text, "xa"
    .align 2
    .globl VIC_0_VECTOR_TABLE
VIC_0_VECTOR_TABLE:
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
   10a68:	0030e03a 	nextpc	et
   10a6c:	0010aa81 	jmpi	10aa8 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
   10a78:	0030e03a 	nextpc	et
   10a7c:	0010aa81 	jmpi	10aa8 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
   10a88:	0030e03a 	nextpc	et
   10a8c:	0010aa81 	jmpi	10aa8 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
   10a98:	0030e03a 	nextpc	et
   10a9c:	0010aa81 	jmpi	10aa8 <alt_shadow_non_preemptive_interrupt>
	...

00010aa8 <alt_shadow_non_preemptive_interrupt>:
    .section ALTERA_VIC_DRIVER_LINKER_SECTION
    .set nobreak
    .globl alt_shadow_non_preemptive_interrupt
alt_shadow_non_preemptive_interrupt:

    ldw r16, 4(et)               /* load ISR pointer */
   10aa8:	c4000117 	ldw	r16,4(et)

     /*
      * Get SP from previous register set.
      */

    rdprs sp, sp, 0
   10aac:	dec00038 	rdprs	sp,sp,0
    rdctl r5, status
    ori   r5, r5, NIOS2_STATUS_PIE_MSK
    wrctl status, r5
#endif

    ldw r4, 8(et)               /* load isr_context */
   10ab0:	c1000217 	ldw	r4,8(et)
    callr r16                   /* call ISR */
   10ab4:	803ee83a 	callr	r16
    /*
     * Notify the operating system that interrupt processing is complete.
     */
    ALT_OS_INT_EXIT_ASM

    addi ea, ea, -4             /* instruction that caused exception */
   10ab8:	ef7fff04 	addi	ea,ea,-4
    eret
   10abc:	ef80083a 	eret

00010ac0 <alt_vic_irq_init>:
{
    alt_u32 i;
    static const int VEC_SIZE_ARRAY[]={4, 8, 16, 32, 64, 128, 256, 512};

    /* Stores the VIC instance to list */
    alt_vic_dev_list[pdev->intr_controller_id] = pdev;
   10ac0:	20800117 	ldw	r2,4(r4)
   10ac4:	d0e69f04 	addi	r3,gp,-25988
   10ac8:	1085883a 	add	r2,r2,r2
   10acc:	1085883a 	add	r2,r2,r2
   10ad0:	1885883a 	add	r2,r3,r2
   10ad4:	11000015 	stw	r4,0(r2)

    /* Disables all interrupts */
    IOWR_ALTERA_VIC_INT_ENABLE_CLR(pdev->base, 0xFFFFFFFF);
   10ad8:	20800017 	ldw	r2,0(r4)
   10adc:	00ffffc4 	movi	r3,-1
   10ae0:	10c02235 	stwio	r3,136(r2)
   10ae4:	21400704 	addi	r5,r4,28

    /* Initialize INT_CONFIG for all interrupts in this VIC */
    for(i = 0; i < pdev->num_of_intr_ports; i++)
   10ae8:	0007883a 	mov	r3,zero
   10aec:	20800217 	ldw	r2,8(r4)
   10af0:	1880092e 	bgeu	r3,r2,10b18 <alt_vic_irq_init+0x58>
    {
        IOWR_ALTERA_VIC_INT_CONFIG(pdev->base, i, pdev->int_config[i]);
   10af4:	21800017 	ldw	r6,0(r4)
   10af8:	18c5883a 	add	r2,r3,r3
   10afc:	1085883a 	add	r2,r2,r2
   10b00:	3085883a 	add	r2,r6,r2
   10b04:	29800017 	ldw	r6,0(r5)
   10b08:	11800035 	stwio	r6,0(r2)

    /* Disables all interrupts */
    IOWR_ALTERA_VIC_INT_ENABLE_CLR(pdev->base, 0xFFFFFFFF);

    /* Initialize INT_CONFIG for all interrupts in this VIC */
    for(i = 0; i < pdev->num_of_intr_ports; i++)
   10b0c:	18c00044 	addi	r3,r3,1
   10b10:	29400104 	addi	r5,r5,4
   10b14:	003ff506 	br	10aec <__alt_data_end+0xff810aec>
    }

    /* Set vector size and disable/enable daisy-chained input */
    for(i = 0; i < sizeof(VEC_SIZE_ARRAY)/sizeof(VEC_SIZE_ARRAY[0]); i++)
    {
        if(VEC_SIZE_ARRAY[i] == pdev->vec_size)
   10b18:	21800517 	ldw	r6,20(r4)
   10b1c:	01c00074 	movhi	r7,1
   10b20:	0005883a 	mov	r2,zero
   10b24:	39c4d504 	addi	r7,r7,4948
    {
        IOWR_ALTERA_VIC_INT_CONFIG(pdev->base, i, pdev->int_config[i]);
    }

    /* Set vector size and disable/enable daisy-chained input */
    for(i = 0; i < sizeof(VEC_SIZE_ARRAY)/sizeof(VEC_SIZE_ARRAY[0]); i++)
   10b28:	01400204 	movi	r5,8
    {
        if(VEC_SIZE_ARRAY[i] == pdev->vec_size)
   10b2c:	1087883a 	add	r3,r2,r2
   10b30:	18c7883a 	add	r3,r3,r3
   10b34:	19c7883a 	add	r3,r3,r7
   10b38:	18c00017 	ldw	r3,0(r3)
   10b3c:	1980061e 	bne	r3,r6,10b58 <alt_vic_irq_init+0x98>
        {
            IOWR_ALTERA_VIC_CONFIG(pdev->base,
   10b40:	20c00417 	ldw	r3,16(r4)
   10b44:	21400017 	ldw	r5,0(r4)
   10b48:	180690fa 	slli	r3,r3,3
   10b4c:	1884b03a 	or	r2,r3,r2
   10b50:	28802835 	stwio	r2,160(r5)
                (i | (pdev->daisy_chain_present << ALTERA_VIC_CONFIG_DC_OFST)));
            break;
   10b54:	00000206 	br	10b60 <alt_vic_irq_init+0xa0>
    {
        IOWR_ALTERA_VIC_INT_CONFIG(pdev->base, i, pdev->int_config[i]);
    }

    /* Set vector size and disable/enable daisy-chained input */
    for(i = 0; i < sizeof(VEC_SIZE_ARRAY)/sizeof(VEC_SIZE_ARRAY[0]); i++)
   10b58:	10800044 	addi	r2,r2,1
   10b5c:	117ff31e 	bne	r2,r5,10b2c <__alt_data_end+0xff810b2c>
            break;
        }
    }

    /* Set vector table base address */
    IOWR_ALTERA_VIC_VEC_TBL_BASE(pdev->base,((alt_u32)pdev->vec_addr));
   10b60:	20800017 	ldw	r2,0(r4)
   10b64:	20c00617 	ldw	r3,24(r4)
   10b68:	10c02a35 	stwio	r3,168(r2)
   10b6c:	f800283a 	ret

00010b70 <alt_ic_isr_register>:
{
    alt_vic_dev *pdev;
    alt_u32 *offset;
    alt_irq_context status;

    if(ic_id >= ALT_NUM_EXTERNAL_INTERRUPT_CONTROLLERS)
   10b70:	20001b1e 	bne	r4,zero,10be0 <alt_ic_isr_register+0x70>
        return -1;

    /* Get VIC handle */
    pdev = alt_vic_dev_list[ic_id];
   10b74:	d0e69f17 	ldw	r3,-25988(gp)

    if(irq < pdev->num_of_intr_ports)
   10b78:	18800217 	ldw	r2,8(r3)
   10b7c:	2880182e 	bgeu	r5,r2,10be0 <alt_ic_isr_register+0x70>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10b80:	0011303a 	rdctl	r8,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10b84:	00bfff84 	movi	r2,-2
   10b88:	4088703a 	and	r4,r8,r2
   10b8c:	2001703a 	wrctl	status,r4
    {
        /* Disable all interrupts */
        status = alt_irq_disable_all ();

        /* Get table offset */
        offset = pdev->vec_addr + (irq * pdev->vec_size);
   10b90:	19000517 	ldw	r4,20(r3)
   10b94:	1a400617 	ldw	r9,24(r3)
   10b98:	2909383a 	mul	r4,r5,r4
   10b9c:	4909883a 	add	r4,r9,r4

        /* Write ISR and ISR context to vector table */
        ALT_VECTOR_TABLE_WRITE(offset+2, isr);
   10ba0:	21800215 	stw	r6,8(r4)
        ALT_VECTOR_TABLE_WRITE(offset+3, isr_context);
   10ba4:	21c00315 	stw	r7,12(r4)
   10ba8:	19000017 	ldw	r4,0(r3)
   10bac:	00c00044 	movi	r3,1

        if(isr)
        {
            /* Enable this IRQ on the VIC */
            IOWR_ALTERA_VIC_INT_ENABLE_SET(pdev->base, 1 << irq);
   10bb0:	1946983a 	sll	r3,r3,r5

        /* Write ISR and ISR context to vector table */
        ALT_VECTOR_TABLE_WRITE(offset+2, isr);
        ALT_VECTOR_TABLE_WRITE(offset+3, isr_context);

        if(isr)
   10bb4:	30000226 	beq	r6,zero,10bc0 <alt_ic_isr_register+0x50>
        {
            /* Enable this IRQ on the VIC */
            IOWR_ALTERA_VIC_INT_ENABLE_SET(pdev->base, 1 << irq);
   10bb8:	20c02135 	stwio	r3,132(r4)
   10bbc:	00000106 	br	10bc4 <alt_ic_isr_register+0x54>
        }
        else
        {
            /* Disable this IRQ on the VIC */
            IOWR_ALTERA_VIC_INT_ENABLE_CLR(pdev->base, 1 << irq);
   10bc0:	20c02235 	stwio	r3,136(r4)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
   10bc4:	0007303a 	rdctl	r3,status
  
  status &= ~NIOS2_STATUS_PIE_MSK;
   10bc8:	1884703a 	and	r2,r3,r2
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
   10bcc:	4200004c 	andi	r8,r8,1
   10bd0:	4084b03a 	or	r2,r8,r2
   10bd4:	1001703a 	wrctl	status,r2
        }

        /* Re-enable all interrupts */
        alt_irq_enable_all(status);

        return 0;
   10bd8:	0005883a 	mov	r2,zero
   10bdc:	f800283a 	ret
    alt_vic_dev *pdev;
    alt_u32 *offset;
    alt_irq_context status;

    if(ic_id >= ALT_NUM_EXTERNAL_INTERRUPT_CONTROLLERS)
        return -1;
   10be0:	00bfffc4 	movi	r2,-1

        return 0;
    }

    return -1;
}
   10be4:	f800283a 	ret

00010be8 <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
   10be8:	d0a6a117 	ldw	r2,-25980(gp)
   10bec:	10001f26 	beq	r2,zero,10c6c <alt_alarm_start+0x84>
  {
    if (alarm)
   10bf0:	20002026 	beq	r4,zero,10c74 <alt_alarm_start+0x8c>
    {
      alarm->callback = callback;
   10bf4:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
   10bf8:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10bfc:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10c00:	00bfff84 	movi	r2,-2
   10c04:	3084703a 	and	r2,r6,r2
   10c08:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   10c0c:	d0a6a017 	ldw	r2,-25984(gp)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
   10c10:	10c00044 	addi	r3,r2,1
   10c14:	194b883a 	add	r5,r3,r5
   10c18:	21400215 	stw	r5,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   10c1c:	2880032e 	bgeu	r5,r2,10c2c <alt_alarm_start+0x44>
      {
        alarm->rollover = 1;
   10c20:	00800044 	movi	r2,1
   10c24:	20800405 	stb	r2,16(r4)
   10c28:	00000106 	br	10c30 <alt_alarm_start+0x48>
      }
      else
      {
        alarm->rollover = 0;
   10c2c:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10c30:	d0a00b04 	addi	r2,gp,-32724
   10c34:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
   10c38:	d0a00b17 	ldw	r2,-32724(gp)
   10c3c:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   10c40:	d0a00b17 	ldw	r2,-32724(gp)
  list->next           = entry;
   10c44:	d1200b15 	stw	r4,-32724(gp)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
   10c48:	11000115 	stw	r4,4(r2)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
   10c4c:	0005303a 	rdctl	r2,status
  
  status &= ~NIOS2_STATUS_PIE_MSK;
   10c50:	00ffff84 	movi	r3,-2
   10c54:	10c6703a 	and	r3,r2,r3
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
   10c58:	3080004c 	andi	r2,r6,1
   10c5c:	10c4b03a 	or	r2,r2,r3
   10c60:	1001703a 	wrctl	status,r2
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
      alt_irq_enable_all (irq_context);

      return 0;
   10c64:	0005883a 	mov	r2,zero
   10c68:	f800283a 	ret
      return -EINVAL;
    }
  }
  else
  {
    return -ENOTSUP;
   10c6c:	00bfde84 	movi	r2,-134
   10c70:	f800283a 	ret

      return 0;
    }
    else
    {
      return -EINVAL;
   10c74:	00bffa84 	movi	r2,-22
  }
  else
  {
    return -ENOTSUP;
  }
}
   10c78:	f800283a 	ret

00010c7c <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   10c7c:	01420034 	movhi	r5,2048
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   10c80:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   10c84:	297fffc4 	addi	r5,r5,-1
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   10c88:	dc000015 	stw	r16,0(sp)
   10c8c:	dfc00115 	stw	ra,4(sp)
   10c90:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   10c94:	0004e080 	call	4e08 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   10c98:	10000e26 	beq	r2,zero,10cd4 <alt_busy_sleep+0x58>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   10c9c:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   10ca0:	013e0034 	movhi	r4,63488
   10ca4:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   10ca8:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   10cac:	21000044 	addi	r4,r4,1
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   10cb0:	297fffc4 	addi	r5,r5,-1
   10cb4:	283ffe1e 	bne	r5,zero,10cb0 <__alt_data_end+0xff810cb0>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   10cb8:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   10cbc:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   10cc0:	18bffb16 	blt	r3,r2,10cb0 <__alt_data_end+0xff810cb0>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10cc4:	8020913a 	slli	r16,r16,4
   10cc8:	843fffc4 	addi	r16,r16,-1
   10ccc:	803ffe1e 	bne	r16,zero,10cc8 <__alt_data_end+0xff810cc8>
   10cd0:	00000306 	br	10ce0 <alt_busy_sleep+0x64>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10cd4:	8020913a 	slli	r16,r16,4
   10cd8:	843fffc4 	addi	r16,r16,-1
   10cdc:	043ffe16 	blt	zero,r16,10cd8 <__alt_data_end+0xff810cd8>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
   10ce0:	0005883a 	mov	r2,zero
   10ce4:	dfc00117 	ldw	ra,4(sp)
   10ce8:	dc000017 	ldw	r16,0(sp)
   10cec:	dec00204 	addi	sp,sp,8
   10cf0:	f800283a 	ret

00010cf4 <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   10cf4:	0005883a 	mov	r2,zero
   10cf8:	00c20004 	movi	r3,2048
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   10cfc:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   10d00:	10800804 	addi	r2,r2,32
   10d04:	10fffd1e 	bne	r2,r3,10cfc <__alt_data_end+0xff810cfc>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   10d08:	f800283a 	ret

00010d0c <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   10d0c:	20000226 	beq	r4,zero,10d18 <alt_dev_llist_insert+0xc>
   10d10:	20800217 	ldw	r2,8(r4)
   10d14:	1000101e 	bne	r2,zero,10d58 <alt_dev_llist_insert+0x4c>
   10d18:	d0a00717 	ldw	r2,-32740(gp)
   10d1c:	10000926 	beq	r2,zero,10d44 <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   10d20:	deffff04 	addi	sp,sp,-4
   10d24:	dfc00015 	stw	ra,0(sp)
   10d28:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   10d2c:	00c00584 	movi	r3,22
   10d30:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   10d34:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   10d38:	dfc00017 	ldw	ra,0(sp)
   10d3c:	dec00104 	addi	sp,sp,4
   10d40:	f800283a 	ret
   10d44:	d0a69b04 	addi	r2,gp,-26004
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   10d48:	00c00584 	movi	r3,22
   10d4c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   10d50:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   10d54:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
   10d58:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10d5c:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   10d60:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   10d64:	28800017 	ldw	r2,0(r5)
   10d68:	11000115 	stw	r4,4(r2)
  list->next           = entry;
   10d6c:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
   10d70:	0005883a 	mov	r2,zero
   10d74:	f800283a 	ret

00010d78 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   10d78:	defffb04 	addi	sp,sp,-20
   10d7c:	dcc00315 	stw	r19,12(sp)
   10d80:	dc800215 	stw	r18,8(sp)
   10d84:	dc400115 	stw	r17,4(sp)
   10d88:	dc000015 	stw	r16,0(sp)
   10d8c:	dfc00415 	stw	ra,16(sp)
   10d90:	2027883a 	mov	r19,r4
   10d94:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
   10d98:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
   10d9c:	000515c0 	call	515c <strlen>
   10da0:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   10da4:	84400726 	beq	r16,r17,10dc4 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   10da8:	81000217 	ldw	r4,8(r16)
   10dac:	900d883a 	mov	r6,r18
   10db0:	980b883a 	mov	r5,r19
   10db4:	0010f2c0 	call	10f2c <memcmp>
   10db8:	10000426 	beq	r2,zero,10dcc <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   10dbc:	84000017 	ldw	r16,0(r16)
   10dc0:	003ff806 	br	10da4 <__alt_data_end+0xff810da4>
  }
  
  /* No match found */
  
  return NULL;
   10dc4:	0005883a 	mov	r2,zero
   10dc8:	00000106 	br	10dd0 <alt_find_dev+0x58>
   10dcc:	8005883a 	mov	r2,r16
}
   10dd0:	dfc00417 	ldw	ra,16(sp)
   10dd4:	dcc00317 	ldw	r19,12(sp)
   10dd8:	dc800217 	ldw	r18,8(sp)
   10ddc:	dc400117 	ldw	r17,4(sp)
   10de0:	dc000017 	ldw	r16,0(sp)
   10de4:	dec00504 	addi	sp,sp,20
   10de8:	f800283a 	ret

00010dec <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   10dec:	01440004 	movi	r5,4096
   10df0:	0009883a 	mov	r4,zero
   10df4:	0010ef41 	jmpi	10ef4 <alt_icache_flush>

00010df8 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10df8:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10dfc:	00bfff84 	movi	r2,-2
   10e00:	188a703a 	and	r5,r3,r2
   10e04:	2801703a 	wrctl	status,r5
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   10e08:	21800117 	ldw	r6,4(r4)
   10e0c:	21400017 	ldw	r5,0(r4)
   10e10:	29800115 	stw	r6,4(r5)
  entry->previous->next = entry->next;
   10e14:	21800117 	ldw	r6,4(r4)
   10e18:	31400015 	stw	r5,0(r6)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   10e1c:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
   10e20:	21000015 	stw	r4,0(r4)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
   10e24:	0009303a 	rdctl	r4,status
  
  status &= ~NIOS2_STATUS_PIE_MSK;
   10e28:	2084703a 	and	r2,r4,r2
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
   10e2c:	18c0004c 	andi	r3,r3,1
   10e30:	1884b03a 	or	r2,r3,r2
   10e34:	1001703a 	wrctl	status,r2
   10e38:	f800283a 	ret

00010e3c <alt_tick>:

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   10e3c:	d0a6a017 	ldw	r2,-25984(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   10e40:	defffb04 	addi	sp,sp,-20
   10e44:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   10e48:	d4200b17 	ldw	r16,-32724(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   10e4c:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   10e50:	dc800215 	stw	r18,8(sp)
   10e54:	dc400115 	stw	r17,4(sp)
   10e58:	dfc00415 	stw	ra,16(sp)
   10e5c:	dcc00315 	stw	r19,12(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   10e60:	d0a6a015 	stw	r2,-25984(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10e64:	d4600b04 	addi	r17,gp,-32724
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
   10e68:	04800044 	movi	r18,1

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10e6c:	84401a26 	beq	r16,r17,10ed8 <alt_tick+0x9c>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   10e70:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
   10e74:	84c00017 	ldw	r19,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   10e78:	10000326 	beq	r2,zero,10e88 <alt_tick+0x4c>
   10e7c:	d0a6a017 	ldw	r2,-25984(gp)
   10e80:	1000011e 	bne	r2,zero,10e88 <alt_tick+0x4c>
    {
      alarm->rollover = 0;
   10e84:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   10e88:	d0e6a017 	ldw	r3,-25984(gp)
   10e8c:	80800217 	ldw	r2,8(r16)
   10e90:	18800f36 	bltu	r3,r2,10ed0 <alt_tick+0x94>
   10e94:	80800403 	ldbu	r2,16(r16)
   10e98:	10000d1e 	bne	r2,zero,10ed0 <alt_tick+0x94>
    {
      next_callback = alarm->callback (alarm->context);
   10e9c:	80800317 	ldw	r2,12(r16)
   10ea0:	81000517 	ldw	r4,20(r16)
   10ea4:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   10ea8:	1000031e 	bne	r2,zero,10eb8 <alt_tick+0x7c>
      {
        alt_alarm_stop (alarm);
   10eac:	8009883a 	mov	r4,r16
   10eb0:	0010df80 	call	10df8 <alt_alarm_stop>
   10eb4:	00000606 	br	10ed0 <alt_tick+0x94>
      }
      else
      {
        alarm->time += next_callback;
   10eb8:	80c00217 	ldw	r3,8(r16)
   10ebc:	10c5883a 	add	r2,r2,r3
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   10ec0:	d0e6a017 	ldw	r3,-25984(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
   10ec4:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   10ec8:	10c0012e 	bgeu	r2,r3,10ed0 <alt_tick+0x94>
        {
          alarm->rollover = 1;
   10ecc:	84800405 	stb	r18,16(r16)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   10ed0:	9821883a 	mov	r16,r19
   10ed4:	003fe506 	br	10e6c <__alt_data_end+0xff810e6c>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   10ed8:	dfc00417 	ldw	ra,16(sp)
   10edc:	dcc00317 	ldw	r19,12(sp)
   10ee0:	dc800217 	ldw	r18,8(sp)
   10ee4:	dc400117 	ldw	r17,4(sp)
   10ee8:	dc000017 	ldw	r16,0(sp)
   10eec:	dec00504 	addi	sp,sp,20
   10ef0:	f800283a 	ret

00010ef4 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
   10ef4:	00840004 	movi	r2,4096
   10ef8:	1140012e 	bgeu	r2,r5,10f00 <alt_icache_flush+0xc>
   10efc:	100b883a 	mov	r5,r2
   10f00:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   10f04:	2005883a 	mov	r2,r4
   10f08:	1140032e 	bgeu	r2,r5,10f18 <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   10f0c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   10f10:	10800804 	addi	r2,r2,32
   10f14:	003ffc06 	br	10f08 <__alt_data_end+0xff810f08>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   10f18:	210007cc 	andi	r4,r4,31
   10f1c:	20000126 	beq	r4,zero,10f24 <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   10f20:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   10f24:	0000203a 	flushp
   10f28:	f800283a 	ret

00010f2c <memcmp>:
   10f2c:	01c000c4 	movi	r7,3
   10f30:	3980192e 	bgeu	r7,r6,10f98 <memcmp+0x6c>
   10f34:	2144b03a 	or	r2,r4,r5
   10f38:	11c4703a 	and	r2,r2,r7
   10f3c:	10000f26 	beq	r2,zero,10f7c <memcmp+0x50>
   10f40:	20800003 	ldbu	r2,0(r4)
   10f44:	28c00003 	ldbu	r3,0(r5)
   10f48:	10c0151e 	bne	r2,r3,10fa0 <memcmp+0x74>
   10f4c:	31bfff84 	addi	r6,r6,-2
   10f50:	01ffffc4 	movi	r7,-1
   10f54:	00000406 	br	10f68 <memcmp+0x3c>
   10f58:	20800003 	ldbu	r2,0(r4)
   10f5c:	28c00003 	ldbu	r3,0(r5)
   10f60:	31bfffc4 	addi	r6,r6,-1
   10f64:	10c00e1e 	bne	r2,r3,10fa0 <memcmp+0x74>
   10f68:	21000044 	addi	r4,r4,1
   10f6c:	29400044 	addi	r5,r5,1
   10f70:	31fff91e 	bne	r6,r7,10f58 <__alt_data_end+0xff810f58>
   10f74:	0005883a 	mov	r2,zero
   10f78:	f800283a 	ret
   10f7c:	20c00017 	ldw	r3,0(r4)
   10f80:	28800017 	ldw	r2,0(r5)
   10f84:	18bfee1e 	bne	r3,r2,10f40 <__alt_data_end+0xff810f40>
   10f88:	31bfff04 	addi	r6,r6,-4
   10f8c:	21000104 	addi	r4,r4,4
   10f90:	29400104 	addi	r5,r5,4
   10f94:	39bff936 	bltu	r7,r6,10f7c <__alt_data_end+0xff810f7c>
   10f98:	303fe91e 	bne	r6,zero,10f40 <__alt_data_end+0xff810f40>
   10f9c:	003ff506 	br	10f74 <__alt_data_end+0xff810f74>
   10fa0:	10c5c83a 	sub	r2,r2,r3
   10fa4:	f800283a 	ret
