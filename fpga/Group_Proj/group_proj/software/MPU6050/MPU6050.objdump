
MPU6050.elf:     file format elf32-littlenios2
MPU6050.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010020

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00006f20 memsz 0x00006f20 flags r-x
    LOAD off    0x00007f40 vaddr 0x00016f40 paddr 0x00017110 align 2**12
         filesz 0x000001d0 memsz 0x000001d0 flags rw-
    LOAD off    0x000082e0 vaddr 0x000172e0 paddr 0x000172e0 align 2**12
         filesz 0x00000000 memsz 0x00000074 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00010020  00010020  00008110  2**0
                  CONTENTS
  2 .text         00006d14  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000020c  00016d34  00016d34  00007d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000001d0  00016f40  00017110  00007f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000074  000172e0  000172e0  000082e0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00017354  00017354  00008110  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00008110  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000740  00000000  00000000  00008138  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000b285  00000000  00000000  00008878  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003c80  00000000  00000000  00013afd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00004bd5  00000000  00000000  0001777d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001058  00000000  00000000  0001c354  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002a87  00000000  00000000  0001d3ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c436  00000000  00000000  0001fe33  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0002c26c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001120  00000000  00000000  0002c2d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0002f671  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0002f674  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0002f677  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0002f678  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0002f679  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0002f682  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0002f68b  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000007  00000000  00000000  0002f694  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002c  00000000  00000000  0002f69b  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0005c3d7  00000000  00000000  0002f6c7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010020 l    d  .text	00000000 .text
00016d34 l    d  .rodata	00000000 .rodata
00016f40 l    d  .rwdata	00000000 .rwdata
000172e0 l    d  .bss	00000000 .bss
00017354 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../MPU6050_bsp//obj/HAL/src/crt0.o
000100a8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 Kalman.c
00000000 l    df *ABS*	00000000 MPU6050.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 s_atan.c
00016df8 l     O .rodata	00000020 atanhi
00016dd8 l     O .rodata	00000020 atanlo
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
00016f40 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00014fc8 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00017058 l     O .rwdata	0000009c vic_0
00017020 l     O .rwdata	00000038 i2c_0
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
000160f8 l     F .text	000000b8 optional_irq_callback
00016038 l     F .text	00000078 alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_vic_irq_init.c
00016f20 l     O .rodata	00000020 VEC_SIZE_ARRAY.1850
00000000 l    df *ABS*	00000000 altera_vic_isr_register.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 memcmp.c
00015764 g     F .text	0000002c alt_main
000172e0 g     O .bss	00000004 Q_bias
00014f18 g     F .text	00000080 _puts_r
000103c8 g     F .text	0000006c write_reg_MPU
00010e80 g     F .text	00000014 fabs
00010e94 g     F .text	00000130 sqrt
00017110 g       *ABS*	00000000 __flash_rwdata_start
00014ecc g     F .text	0000004c printf
000172e4 g     O .bss	00000004 rate
000172e8 g     O .bss	00000004 Q_angle
00015ab8 g     F .text	00000080 alt_avalon_i2c_rx_read
00011790 g     F .text	00000440 .hidden __divsf3
00015fd8 g     F .text	00000014 alt_avalon_i2c_enabled_ints_get
00010440 g     F .text	00000140 init_MPU
00015998 g     F .text	0000004c alt_avalon_i2c_master_config_speed_get
00016630 g     F .text	00000170 alt_avalon_i2c_master_transmit_using_interrupts
000124b0 g     F .text	00000070 .hidden __fixsfsi
00015790 g     F .text	00000038 alt_putstr
000137d8 g     F .text	000000dc .hidden __gtdf2
00017100 g     O .rwdata	00000004 jtag_uart
00014e58 g     F .text	00000010 __errno
000172fc g     O .bss	00000002 AccY
00010000 g     F .entry	0000001c __reset
000172ec g     O .bss	00000004 bias
00010020 g       *ABS*	00000000 __flash_exceptions_start
0001731c g     O .bss	00000004 errno
00017324 g     O .bss	00000004 alt_argv
0001f0f4 g       *ABS*	00000000 _gp
000157c8 g     F .text	00000004 usleep
00016294 g     F .text	00000018 alt_avalon_i2c_rx_fifo_threshold_get
00011fcc g     F .text	000004e4 .hidden __subsf3
00015a70 g     F .text	00000010 alt_avalon_i2c_is_busy
00015940 g     F .text	00000058 alt_avalon_i2c_master_config_set
000169d0 g       .text	00000000 VIC_0_VECTOR_TABLE
00016c4c g     F .text	00000074 alt_find_dev
00014e68 g     F .text	00000028 memcpy
000149bc g     F .text	000000dc .hidden __floatsidf
000138b4 g     F .text	000000f4 .hidden __ltdf2
00010580 g     F .text	0000003c get_x_accel_MPU
00015cc4 g     F .text	00000138 alt_avalon_i2c_master_transmit
00014f98 g     F .text	00000014 puts
0001124c g     F .text	00000074 __fpclassifyd
00014e90 g     F .text	0000003c _printf_r
00014d9c g     F .text	00000064 .hidden __udivsi3
00016ccc g     F .text	00000038 alt_icache_flush
00015898 g     F .text	00000048 alt_avalon_i2c_enable
00015fec g     F .text	0000004c alt_avalon_i2c_int_disable
00017300 g     O .bss	00000008 accZ
00015dfc g     F .text	000001a8 alt_avalon_i2c_master_receive
00010634 g     F .text	0000003c get_x_gyro_MPU
00012644 g     F .text	000008ac .hidden __adddf3
000170f4 g     O .rwdata	00000004 __fdlib_version
000160b0 g     F .text	00000048 alt_avalon_i2c_int_enable
000170f8 g     O .rwdata	00000004 _global_impure_ptr
00017354 g       *ABS*	00000000 __bss_end
00015fa4 g     F .text	00000018 alt_avalon_i2c_int_status_get
0001012c g     F .text	00000230 getAngle
00015880 g     F .text	00000010 alt_avalon_i2c_register_callback
00016580 g     F .text	000000b0 alt_avalon_i2c_init
000172f0 g     O .bss	00000004 R_measure
000106ac g     F .text	0000003c get_z_gyro_MPU
00016bc8 g     F .text	00000018 alt_dcache_flush_all
00016a10 g       .text	00000000 alt_shadow_non_preemptive_interrupt
00017110 g       *ABS*	00000000 __ram_rwdata_end
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
000157cc g     F .text	00000060 write
00015b68 g     F .text	0000001c alt_avalon_i2c_check_arblost
00015fcc g     F .text	0000000c alt_avalon_i2c_int_clear
00016f40 g       *ABS*	00000000 __ram_rodata_end
000138b4 g     F .text	000000f4 .hidden __ledf2
00017104 g     O .rwdata	00000008 alt_avalon_i2c_list
00014e00 g     F .text	00000058 .hidden __umodsi3
00017354 g       *ABS*	00000000 end
00015890 g     F .text	00000008 alt_avalon_i2c_open
00020000 g       *ABS*	00000000 __alt_stack_pointer
000167a0 g     F .text	000000c4 alt_avalon_i2c_master_tx
00014c40 g     F .text	00000064 .hidden __clzsi2
0001699c g     F .text	00000034 altera_avalon_jtag_uart_write
00015034 g     F .text	00000524 ___vfprintf_internal_r
00017340 g     O .bss	00000014 wr_buf
00015864 g     F .text	0000001c alt_avalon_i2c_register_optional_irq_handler
00017308 g     O .bss	00000002 AccZ
00010020 g     F .text	0000008c _start
000105f8 g     F .text	0000003c get_z_accel_MPU
000162d4 g     F .text	00000180 alt_avalon_i2c_master_receive_using_interrupts
000162ac g     F .text	00000028 alt_avalon_i2c_rx_fifo_threshold_set
00015858 g     F .text	0000000c alt_sys_init
00012520 g     F .text	00000124 .hidden __floatsisf
00016864 g     F .text	00000138 alt_avalon_i2c_master_tx_rx
00016f40 g       *ABS*	00000000 __ram_rwdata_start
00016d34 g       *ABS*	00000000 __ram_rodata_start
00010434 g     F .text	0000000c write_byte_MPU
000105bc g     F .text	0000003c get_y_accel_MPU
00016b50 g     F .text	00000078 alt_busy_sleep
000172f4 g     O .bss	00000004 angle
00016d04 g     F .text	00000030 memcmp
00015a80 g     F .text	00000038 alt_avalon_i2c_rx_read_available
00017354 g       *ABS*	00000000 __alt_stack_base
000172f8 g     O .bss	00000004 i2c_dev
00012ef0 g     F .text	000008e8 .hidden __divdf3
000139a8 g     F .text	00000718 .hidden __muldf3
00016be0 g     F .text	0000006c alt_dev_llist_insert
000161b0 g     F .text	000000e4 alt_avalon_i2c_interrupt_transaction_status
00010388 g     F .text	00000034 read_reg_MPU
00015b4c g     F .text	0000001c alt_avalon_i2c_check_nack
000100ac g     F .text	00000080 KalmanInit
00015574 g     F .text	000000b8 __sfvwrite_small_dev
000172e0 g       *ABS*	00000000 __bss_start
000106e8 g     F .text	00000210 main
00015b44 g     F .text	00000008 alt_avalon_i2c_master_target_set
00017320 g     O .bss	00000004 alt_envp
00015fbc g     F .text	00000010 alt_avalon_i2c_int_raw_status_get
000112c0 g     F .text	00000008 matherr
00014a98 g     F .text	000001a8 .hidden __truncdfsf2
0001710c g     O .rwdata	00000004 alt_errno
00014ca4 g     F .text	00000084 .hidden __divsi3
00011bd0 g     F .text	000003fc .hidden __mulsf3
0001732c g     O .bss	00000004 alt_vic_dev_list
00016d34 g       *ABS*	00000000 __flash_rodata_start
0001730a g     O .bss	00000002 AccX
0001582c g     F .text	0000002c alt_irq_init
000108f8 g     F .text	00000588 atan
00016e1d g     O .rodata	00000100 .hidden __clz_tab
0001562c g     F .text	00000058 _write_r
000170fc g     O .rwdata	00000004 _impure_ptr
00017328 g     O .bss	00000004 alt_argc
00015b38 g     F .text	0000000c alt_avalon_i2c_master_target_get
00015c4c g     F .text	00000078 alt_avalon_i2c_send_address
00016a28 g     F .text	000000b0 alt_vic_irq_init
00010020 g       *ABS*	00000000 __ram_exceptions_start
00010fc4 g     F .text	00000288 __ieee754_sqrt
00016554 g     F .text	0000002c alt_avalon_i2c_tfr_cmd_fifo_threshold_set
00016ad8 g     F .text	00000078 alt_ic_isr_register
000158e0 g     F .text	0000001c alt_avalon_i2c_disable
00017110 g       *ABS*	00000000 _edata
00017354 g       *ABS*	00000000 _end
00010020 g       *ABS*	00000000 __ram_exceptions_end
000158fc g     F .text	00000044 alt_avalon_i2c_master_config_get
00014d28 g     F .text	00000074 .hidden __modsi3
00020000 g       *ABS*	00000000 __alt_data_end
000159e4 g     F .text	0000008c alt_avalon_i2c_master_config_speed_set
00015b84 g     F .text	000000c8 alt_avalon_i2c_cmd_write
0001730c g     O .bss	00000008 accY
0001001c g       .entry	00000000 _exit
00010670 g     F .text	0000003c get_y_gyro_MPU
00014fac g     F .text	0000001c strlen
000137d8 g     F .text	000000dc .hidden __gedf2
00016cc0 g     F .text	0000000c alt_icache_flush_all
00017314 g     O .bss	00000008 accX
00015558 g     F .text	0000001c __vfprintf_internal
000140c0 g     F .text	000008fc .hidden __subdf3
00017330 g     O .bss	00000010 P
000112c8 g     F .text	000004c8 .hidden __addsf3
0001653c g     F .text	00000018 alt_avalon_i2c_tfr_cmd_fifo_threshold_get
000103bc g     F .text	0000000c read_byte_MPU
00015684 g     F .text	000000e0 alt_load
0001035c g     F .text	0000002c check_MPU
00016454 g     F .text	000000e8 alt_avalon_i2c_master_rx



Disassembly of section .entry:

00010000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   10000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   10004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   10008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   1000c:	00bffd16 	blt	zero,r2,10004 <__alt_data_end+0xffff0004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10010:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10014:	08400814 	ori	at,at,32
    jmp r1
   10018:	0800683a 	jmp	at

0001001c <_exit>:
   1001c:	00000000 	call	0 <__alt_mem_onchip_memory-0x10000>

Disassembly of section .text:

00010020 <_start>:
     * writing zero to SSTATUS register and executing an ERET instruction
     * to set STATUS.CRS to 0.
     */
    
    /* Get the current register set number (STATUS.CRS). */
    rdctl r2, status
   10020:	0005303a 	rdctl	r2,status
    andi r2, r2, NIOS2_STATUS_CRS_MSK
   10024:	10bf000c 	andi	r2,r2,64512
    
    /* Skip switching register set if STATUS.CRS is 0.  */
    beq r2, zero, 0f
   10028:	10000426 	beq	r2,zero,1003c <_start+0x1c>

    /* Set SSTATUS to 0 to get to set SSTATUS.PRS to 0. */
    .set nobreak
    movui sstatus, 0
   1002c:	07800014 	movui	sstatus,0
    .set break

    /* Switch to register set 0 and jump to label. */
    movhi ea, %hi(0f)
   10030:	07400074 	movhi	ea,1
    ori ea, ea, %lo(0f)
   10034:	ef400f14 	ori	ea,ea,60
    eret
   10038:	ef80083a 	eret

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   1003c:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   10040:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   10044:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   10048:	00bffd16 	blt	zero,r2,10040 <__alt_data_end+0xffff0040>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   1004c:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10050:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10054:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   10058:	d6bc3d14 	ori	gp,gp,61684
    /* 
     * Setup registers in shadow register sets
     * from 1 to NIOS2_NUM_OF_SHADOW_REG_SETS.
     */

    movui r2, 0     /* Contains value written into STATUS */
   1005c:	00800014 	movui	r2,0
    movui r3, NIOS2_NUM_OF_SHADOW_REG_SETS  /* counter */
   10060:	00c00114 	movui	r3,4
    movhi r4, 1     /* Constant to increment STATUS.PRS */
   10064:	01000074 	movhi	r4,1
    
.Linitialize_shadow_registers:
    /* Increment STATUS.PRS */
    add r2, r2, r4
   10068:	1105883a 	add	r2,r2,r4
    wrctl status, r2
   1006c:	1001703a 	wrctl	status,r2

    /* Clear r0 in the shadow register set (not done by hardware) */
    wrprs r0, r0
   10070:	0000a03a 	wrprs	zero,zero

    /* Write the GP in previous register set */
    wrprs gp, gp
   10074:	d034a03a 	wrprs	gp,gp
    wrprs r30, r0    /* ba */
    wrprs r31, r0    /* ra */
#endif /* NIOS2_ECC_PRESENT */

    /* Decrement shadow register set counter */
    addi r3, r3, -1
   10078:	18ffffc4 	addi	r3,r3,-1

    /* Done if index is 0. */
    bne r3, zero, .Linitialize_shadow_registers
   1007c:	183ffa1e 	bne	r3,zero,10068 <__alt_data_end+0xffff0068>
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10080:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10084:	109cb814 	ori	r2,r2,29408

    movhi r3, %hi(__bss_end)
   10088:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1008c:	18dcd514 	ori	r3,r3,29524

    beq r2, r3, 1f
   10090:	10c00326 	beq	r2,r3,100a0 <_start+0x80>

0:
    stw zero, (r2)
   10094:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10098:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1009c:	10fffd36 	bltu	r2,r3,10094 <__alt_data_end+0xffff0094>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   100a0:	00156840 	call	15684 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   100a4:	00157640 	call	15764 <alt_main>

000100a8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   100a8:	003fff06 	br	100a8 <__alt_data_end+0xffff00a8>

000100ac <KalmanInit>:
#include "Kalman.h"




void KalmanInit() {
   100ac:	defffe04 	addi	sp,sp,-8
   100b0:	dc000015 	stw	r16,0(sp)
	printf("1\n");
   100b4:	04000074 	movhi	r16,1
   100b8:	841b4d04 	addi	r16,r16,27956
   100bc:	8009883a 	mov	r4,r16
#include "Kalman.h"




void KalmanInit() {
   100c0:	dfc00115 	stw	ra,4(sp)
	printf("1\n");
   100c4:	0014f980 	call	14f98 <puts>
    /* We will set the variables like so, these can also be tuned by the user */
    Q_angle = 0.001f;
   100c8:	008ea0f4 	movhi	r2,14979
   100cc:	10849bc4 	addi	r2,r2,4719
   100d0:	d0a07d15 	stw	r2,-32268(gp)
    Q_bias = 0.003f;
   100d4:	008ed174 	movhi	r2,15173
   100d8:	10a6e984 	addi	r2,r2,-25690
   100dc:	d0a07b15 	stw	r2,-32276(gp)
    R_measure = 0.03f;
   100e0:	008f3db4 	movhi	r2,15606
    printf("1\n");
   100e4:	8009883a 	mov	r4,r16
void KalmanInit() {
	printf("1\n");
    /* We will set the variables like so, these can also be tuned by the user */
    Q_angle = 0.001f;
    Q_bias = 0.003f;
    R_measure = 0.03f;
   100e8:	10b0a3c4 	addi	r2,r2,-15729
   100ec:	d0a07f15 	stw	r2,-32260(gp)
    printf("1\n");
   100f0:	0014f980 	call	14f98 <puts>
    angle = 0.0f; // Reset the angle
    bias = 0.0f; // Reset bias
    printf("1\n");
   100f4:	8009883a 	mov	r4,r16
    /* We will set the variables like so, these can also be tuned by the user */
    Q_angle = 0.001f;
    Q_bias = 0.003f;
    R_measure = 0.03f;
    printf("1\n");
    angle = 0.0f; // Reset the angle
   100f8:	d0208015 	stw	zero,-32256(gp)
    bias = 0.0f; // Reset bias
   100fc:	d0207e15 	stw	zero,-32264(gp)
    printf("1\n");
   10100:	0014f980 	call	14f98 <puts>
    P[0][0] = 0.0f; // Since we assume that the bias is 0 and we know the starting angle (use setAngle), the error covariance matrix is set like so - see: http://en.wikipedia.org/wiki/Kalman_filter#Example_application.2C_technical
   10104:	00800074 	movhi	r2,1
   10108:	109ccc04 	addi	r2,r2,29488
   1010c:	10000015 	stw	zero,0(r2)
    P[0][1] = 0.0f;
   10110:	10000115 	stw	zero,4(r2)
    P[1][0] = 0.0f;
   10114:	10000215 	stw	zero,8(r2)
    P[1][1] = 0.0f;
   10118:	10000315 	stw	zero,12(r2)
};
   1011c:	dfc00117 	ldw	ra,4(sp)
   10120:	dc000017 	ldw	r16,0(sp)
   10124:	dec00204 	addi	sp,sp,8
   10128:	f800283a 	ret

0001012c <getAngle>:

// The angle should be in degrees and the rate should be in degrees per second and the delta time in seconds
float getAngle(float newAngle, float newRate, float dt) {
   1012c:	defff404 	addi	sp,sp,-48
   10130:	ddc00915 	stw	r23,36(sp)
    // See my blog post for more information: http://blog.tkjelectronics.dk/2012/09/a-practical-approach-to-kalman-filter-and-how-to-implement-it

    // Discrete Kalman filter time update equations - Time Update ("Predict")
    // Update xhat - Project the state ahead
    /* Step 1 */
    rate = newRate - bias;
   10134:	d5e07e17 	ldw	r23,-32264(gp)
    P[1][0] = 0.0f;
    P[1][1] = 0.0f;
};

// The angle should be in degrees and the rate should be in degrees per second and the delta time in seconds
float getAngle(float newAngle, float newRate, float dt) {
   10138:	200f883a 	mov	r7,r4
   1013c:	2809883a 	mov	r4,r5
    // See my blog post for more information: http://blog.tkjelectronics.dk/2012/09/a-practical-approach-to-kalman-filter-and-how-to-implement-it

    // Discrete Kalman filter time update equations - Time Update ("Predict")
    // Update xhat - Project the state ahead
    /* Step 1 */
    rate = newRate - bias;
   10140:	b80b883a 	mov	r5,r23
    P[1][0] = 0.0f;
    P[1][1] = 0.0f;
};

// The angle should be in degrees and the rate should be in degrees per second and the delta time in seconds
float getAngle(float newAngle, float newRate, float dt) {
   10144:	dfc00b15 	stw	ra,44(sp)
    // See my blog post for more information: http://blog.tkjelectronics.dk/2012/09/a-practical-approach-to-kalman-filter-and-how-to-implement-it

    // Discrete Kalman filter time update equations - Time Update ("Predict")
    // Update xhat - Project the state ahead
    /* Step 1 */
    rate = newRate - bias;
   10148:	d9c00115 	stw	r7,4(sp)
    P[1][0] = 0.0f;
    P[1][1] = 0.0f;
};

// The angle should be in degrees and the rate should be in degrees per second and the delta time in seconds
float getAngle(float newAngle, float newRate, float dt) {
   1014c:	df000a15 	stw	fp,40(sp)
   10150:	dd800815 	stw	r22,32(sp)
   10154:	dd400715 	stw	r21,28(sp)
   10158:	dd000615 	stw	r20,24(sp)
   1015c:	dcc00515 	stw	r19,20(sp)
   10160:	dc800415 	stw	r18,16(sp)
   10164:	dc400315 	stw	r17,12(sp)
   10168:	3025883a 	mov	r18,r6
   1016c:	dc000215 	stw	r16,8(sp)
    // See my blog post for more information: http://blog.tkjelectronics.dk/2012/09/a-practical-approach-to-kalman-filter-and-how-to-implement-it

    // Discrete Kalman filter time update equations - Time Update ("Predict")
    // Update xhat - Project the state ahead
    /* Step 1 */
    rate = newRate - bias;
   10170:	0011fcc0 	call	11fcc <__subsf3>
    angle += dt * rate;
   10174:	900b883a 	mov	r5,r18
   10178:	1009883a 	mov	r4,r2
    // See my blog post for more information: http://blog.tkjelectronics.dk/2012/09/a-practical-approach-to-kalman-filter-and-how-to-implement-it

    // Discrete Kalman filter time update equations - Time Update ("Predict")
    // Update xhat - Project the state ahead
    /* Step 1 */
    rate = newRate - bias;
   1017c:	d0a07c15 	stw	r2,-32272(gp)
    angle += dt * rate;
   10180:	0011bd00 	call	11bd0 <__mulsf3>
   10184:	d1608017 	ldw	r5,-32256(gp)

    // Update estimation error covariance - Project the error covariance ahead
    /* Step 2 */
    P[0][0] += dt * (dt*P[1][1] - P[0][1] - P[1][0] + Q_angle);
   10188:	04000074 	movhi	r16,1
   1018c:	841ccc04 	addi	r16,r16,29488

    // Discrete Kalman filter time update equations - Time Update ("Predict")
    // Update xhat - Project the state ahead
    /* Step 1 */
    rate = newRate - bias;
    angle += dt * rate;
   10190:	1009883a 	mov	r4,r2
   10194:	00112c80 	call	112c8 <__addsf3>

    // Update estimation error covariance - Project the error covariance ahead
    /* Step 2 */
    P[0][0] += dt * (dt*P[1][1] - P[0][1] - P[1][0] + Q_angle);
   10198:	87000317 	ldw	fp,12(r16)
   1019c:	9009883a 	mov	r4,r18

    // Discrete Kalman filter time update equations - Time Update ("Predict")
    // Update xhat - Project the state ahead
    /* Step 1 */
    rate = newRate - bias;
    angle += dt * rate;
   101a0:	102b883a 	mov	r21,r2

    // Update estimation error covariance - Project the error covariance ahead
    /* Step 2 */
    P[0][0] += dt * (dt*P[1][1] - P[0][1] - P[1][0] + Q_angle);
   101a4:	e00b883a 	mov	r5,fp
   101a8:	0011bd00 	call	11bd0 <__mulsf3>
   101ac:	84c00117 	ldw	r19,4(r16)
   101b0:	85800217 	ldw	r22,8(r16)
   101b4:	1009883a 	mov	r4,r2
   101b8:	980b883a 	mov	r5,r19
   101bc:	1029883a 	mov	r20,r2
   101c0:	0011fcc0 	call	11fcc <__subsf3>
   101c4:	b00b883a 	mov	r5,r22
   101c8:	1009883a 	mov	r4,r2
   101cc:	0011fcc0 	call	11fcc <__subsf3>
   101d0:	d1607d17 	ldw	r5,-32268(gp)
   101d4:	1009883a 	mov	r4,r2
   101d8:	00112c80 	call	112c8 <__addsf3>
   101dc:	900b883a 	mov	r5,r18
   101e0:	1009883a 	mov	r4,r2
   101e4:	0011bd00 	call	11bd0 <__mulsf3>
   101e8:	81400017 	ldw	r5,0(r16)
   101ec:	1009883a 	mov	r4,r2
   101f0:	00112c80 	call	112c8 <__addsf3>
    P[0][1] -= dt * P[1][1];
   101f4:	a00b883a 	mov	r5,r20
   101f8:	9809883a 	mov	r4,r19
    rate = newRate - bias;
    angle += dt * rate;

    // Update estimation error covariance - Project the error covariance ahead
    /* Step 2 */
    P[0][0] += dt * (dt*P[1][1] - P[0][1] - P[1][0] + Q_angle);
   101fc:	1023883a 	mov	r17,r2
    P[0][1] -= dt * P[1][1];
   10200:	0011fcc0 	call	11fcc <__subsf3>
    P[1][0] -= dt * P[1][1];
   10204:	a00b883a 	mov	r5,r20
   10208:	b009883a 	mov	r4,r22
    angle += dt * rate;

    // Update estimation error covariance - Project the error covariance ahead
    /* Step 2 */
    P[0][0] += dt * (dt*P[1][1] - P[0][1] - P[1][0] + Q_angle);
    P[0][1] -= dt * P[1][1];
   1020c:	1027883a 	mov	r19,r2
    P[1][0] -= dt * P[1][1];
   10210:	0011fcc0 	call	11fcc <__subsf3>
    P[1][1] += Q_bias * dt;
   10214:	d1607b17 	ldw	r5,-32276(gp)
   10218:	9009883a 	mov	r4,r18

    // Update estimation error covariance - Project the error covariance ahead
    /* Step 2 */
    P[0][0] += dt * (dt*P[1][1] - P[0][1] - P[1][0] + Q_angle);
    P[0][1] -= dt * P[1][1];
    P[1][0] -= dt * P[1][1];
   1021c:	102d883a 	mov	r22,r2
    P[1][1] += Q_bias * dt;
   10220:	0011bd00 	call	11bd0 <__mulsf3>
   10224:	e00b883a 	mov	r5,fp
   10228:	1009883a 	mov	r4,r2
   1022c:	00112c80 	call	112c8 <__addsf3>

    // Discrete Kalman filter measurement update equations - Measurement Update ("Correct")
    // Calculate Kalman gain - Compute the Kalman gain
    /* Step 4 */
    float S = P[0][0] + R_measure; // Estimate error
   10230:	d1607f17 	ldw	r5,-32260(gp)
   10234:	8809883a 	mov	r4,r17
   10238:	d8800015 	stw	r2,0(sp)
   1023c:	00112c80 	call	112c8 <__addsf3>
    /* Step 5 */
    float K[2]; // Kalman gain - This is a 2x1 vector
    K[0] = P[0][0] / S;
   10240:	8809883a 	mov	r4,r17
   10244:	100b883a 	mov	r5,r2
    P[1][1] += Q_bias * dt;

    // Discrete Kalman filter measurement update equations - Measurement Update ("Correct")
    // Calculate Kalman gain - Compute the Kalman gain
    /* Step 4 */
    float S = P[0][0] + R_measure; // Estimate error
   10248:	1025883a 	mov	r18,r2
    /* Step 5 */
    float K[2]; // Kalman gain - This is a 2x1 vector
    K[0] = P[0][0] / S;
   1024c:	00117900 	call	11790 <__divsf3>
    K[1] = P[1][0] / S;
   10250:	900b883a 	mov	r5,r18
   10254:	b009883a 	mov	r4,r22
    // Calculate Kalman gain - Compute the Kalman gain
    /* Step 4 */
    float S = P[0][0] + R_measure; // Estimate error
    /* Step 5 */
    float K[2]; // Kalman gain - This is a 2x1 vector
    K[0] = P[0][0] / S;
   10258:	1029883a 	mov	r20,r2
    K[1] = P[1][0] / S;
   1025c:	00117900 	call	11790 <__divsf3>

    // Calculate angle and bias - Update estimate with measurement zk (newAngle)
    /* Step 3 */
    float y = newAngle - angle; // Angle difference
   10260:	d9c00117 	ldw	r7,4(sp)
   10264:	a80b883a 	mov	r5,r21
    /* Step 4 */
    float S = P[0][0] + R_measure; // Estimate error
    /* Step 5 */
    float K[2]; // Kalman gain - This is a 2x1 vector
    K[0] = P[0][0] / S;
    K[1] = P[1][0] / S;
   10268:	1025883a 	mov	r18,r2

    // Calculate angle and bias - Update estimate with measurement zk (newAngle)
    /* Step 3 */
    float y = newAngle - angle; // Angle difference
   1026c:	3809883a 	mov	r4,r7
   10270:	0011fcc0 	call	11fcc <__subsf3>
    /* Step 6 */
    angle += K[0] * y;
   10274:	a009883a 	mov	r4,r20
   10278:	100b883a 	mov	r5,r2
    K[0] = P[0][0] / S;
    K[1] = P[1][0] / S;

    // Calculate angle and bias - Update estimate with measurement zk (newAngle)
    /* Step 3 */
    float y = newAngle - angle; // Angle difference
   1027c:	1039883a 	mov	fp,r2
    /* Step 6 */
    angle += K[0] * y;
   10280:	0011bd00 	call	11bd0 <__mulsf3>
   10284:	a80b883a 	mov	r5,r21
   10288:	1009883a 	mov	r4,r2
   1028c:	00112c80 	call	112c8 <__addsf3>
    bias += K[1] * y;
   10290:	e00b883a 	mov	r5,fp
   10294:	9009883a 	mov	r4,r18

    // Calculate angle and bias - Update estimate with measurement zk (newAngle)
    /* Step 3 */
    float y = newAngle - angle; // Angle difference
    /* Step 6 */
    angle += K[0] * y;
   10298:	102b883a 	mov	r21,r2
   1029c:	d0a08015 	stw	r2,-32256(gp)
    bias += K[1] * y;
   102a0:	0011bd00 	call	11bd0 <__mulsf3>
   102a4:	b80b883a 	mov	r5,r23
   102a8:	1009883a 	mov	r4,r2
   102ac:	00112c80 	call	112c8 <__addsf3>
    // Calculate estimation error covariance - Update the error covariance
    /* Step 7 */
    float P00_temp = P[0][0];
    float P01_temp = P[0][1];

    P[0][0] -= K[0] * P00_temp;
   102b0:	a00b883a 	mov	r5,r20
   102b4:	8809883a 	mov	r4,r17
    // Calculate angle and bias - Update estimate with measurement zk (newAngle)
    /* Step 3 */
    float y = newAngle - angle; // Angle difference
    /* Step 6 */
    angle += K[0] * y;
    bias += K[1] * y;
   102b8:	d0a07e15 	stw	r2,-32264(gp)
    // Calculate estimation error covariance - Update the error covariance
    /* Step 7 */
    float P00_temp = P[0][0];
    float P01_temp = P[0][1];

    P[0][0] -= K[0] * P00_temp;
   102bc:	0011bd00 	call	11bd0 <__mulsf3>
   102c0:	8809883a 	mov	r4,r17
   102c4:	100b883a 	mov	r5,r2
   102c8:	0011fcc0 	call	11fcc <__subsf3>
    P[0][1] -= K[0] * P01_temp;
   102cc:	a00b883a 	mov	r5,r20
   102d0:	9809883a 	mov	r4,r19
    // Calculate estimation error covariance - Update the error covariance
    /* Step 7 */
    float P00_temp = P[0][0];
    float P01_temp = P[0][1];

    P[0][0] -= K[0] * P00_temp;
   102d4:	80800015 	stw	r2,0(r16)
    P[0][1] -= K[0] * P01_temp;
   102d8:	0011bd00 	call	11bd0 <__mulsf3>
   102dc:	9809883a 	mov	r4,r19
   102e0:	100b883a 	mov	r5,r2
   102e4:	0011fcc0 	call	11fcc <__subsf3>
    P[1][0] -= K[1] * P00_temp;
   102e8:	900b883a 	mov	r5,r18
   102ec:	8809883a 	mov	r4,r17
    /* Step 7 */
    float P00_temp = P[0][0];
    float P01_temp = P[0][1];

    P[0][0] -= K[0] * P00_temp;
    P[0][1] -= K[0] * P01_temp;
   102f0:	80800115 	stw	r2,4(r16)
    P[1][0] -= K[1] * P00_temp;
   102f4:	0011bd00 	call	11bd0 <__mulsf3>
   102f8:	b009883a 	mov	r4,r22
   102fc:	100b883a 	mov	r5,r2
   10300:	0011fcc0 	call	11fcc <__subsf3>
    P[1][1] -= K[1] * P01_temp;
   10304:	900b883a 	mov	r5,r18
   10308:	9809883a 	mov	r4,r19
    float P00_temp = P[0][0];
    float P01_temp = P[0][1];

    P[0][0] -= K[0] * P00_temp;
    P[0][1] -= K[0] * P01_temp;
    P[1][0] -= K[1] * P00_temp;
   1030c:	80800215 	stw	r2,8(r16)
    P[1][1] -= K[1] * P01_temp;
   10310:	0011bd00 	call	11bd0 <__mulsf3>
   10314:	d8c00017 	ldw	r3,0(sp)
   10318:	100b883a 	mov	r5,r2
   1031c:	1809883a 	mov	r4,r3
   10320:	0011fcc0 	call	11fcc <__subsf3>
   10324:	80800315 	stw	r2,12(r16)

    return angle;
};
   10328:	a805883a 	mov	r2,r21
   1032c:	dfc00b17 	ldw	ra,44(sp)
   10330:	df000a17 	ldw	fp,40(sp)
   10334:	ddc00917 	ldw	r23,36(sp)
   10338:	dd800817 	ldw	r22,32(sp)
   1033c:	dd400717 	ldw	r21,28(sp)
   10340:	dd000617 	ldw	r20,24(sp)
   10344:	dcc00517 	ldw	r19,20(sp)
   10348:	dc800417 	ldw	r18,16(sp)
   1034c:	dc400317 	ldw	r17,12(sp)
   10350:	dc000217 	ldw	r16,8(sp)
   10354:	dec00c04 	addi	sp,sp,48
   10358:	f800283a 	ret

0001035c <check_MPU>:



ALT_AVALON_I2C_STATUS_CODE check_MPU(){
	alt_u8 buff_nil = 0;
	ALT_AVALON_I2C_STATUS_CODE ret = alt_avalon_i2c_master_tx(i2c_dev, &buff_nil, 0, ALT_AVALON_I2C_NO_INTERRUPTS);
   1035c:	d1208117 	ldw	r4,-32252(gp)

alt_u8 wr_buf[WR_BUF_LEN];



ALT_AVALON_I2C_STATUS_CODE check_MPU(){
   10360:	defffe04 	addi	sp,sp,-8
	alt_u8 buff_nil = 0;
	ALT_AVALON_I2C_STATUS_CODE ret = alt_avalon_i2c_master_tx(i2c_dev, &buff_nil, 0, ALT_AVALON_I2C_NO_INTERRUPTS);
   10364:	000f883a 	mov	r7,zero
   10368:	000d883a 	mov	r6,zero
   1036c:	d80b883a 	mov	r5,sp

alt_u8 wr_buf[WR_BUF_LEN];



ALT_AVALON_I2C_STATUS_CODE check_MPU(){
   10370:	dfc00115 	stw	ra,4(sp)
	alt_u8 buff_nil = 0;
   10374:	d8000005 	stb	zero,0(sp)
	ALT_AVALON_I2C_STATUS_CODE ret = alt_avalon_i2c_master_tx(i2c_dev, &buff_nil, 0, ALT_AVALON_I2C_NO_INTERRUPTS);
   10378:	00167a00 	call	167a0 <alt_avalon_i2c_master_tx>
	return ret;
}
   1037c:	dfc00117 	ldw	ra,4(sp)
   10380:	dec00204 	addi	sp,sp,8
   10384:	f800283a 	ret

00010388 <read_reg_MPU>:

ALT_AVALON_I2C_STATUS_CODE read_reg_MPU(alt_u8 reg, alt_u8 * ret_buf, alt_u32 len){
   10388:	defffc04 	addi	sp,sp,-16
   1038c:	d9000205 	stb	r4,8(sp)
	return alt_avalon_i2c_master_tx_rx(i2c_dev, &reg, 1, ret_buf, len, ALT_AVALON_I2C_NO_INTERRUPTS);
   10390:	d1208117 	ldw	r4,-32252(gp)
   10394:	d9800015 	stw	r6,0(sp)
   10398:	280f883a 	mov	r7,r5
   1039c:	d8000115 	stw	zero,4(sp)
   103a0:	01800044 	movi	r6,1
   103a4:	d9400204 	addi	r5,sp,8
	alt_u8 buff_nil = 0;
	ALT_AVALON_I2C_STATUS_CODE ret = alt_avalon_i2c_master_tx(i2c_dev, &buff_nil, 0, ALT_AVALON_I2C_NO_INTERRUPTS);
	return ret;
}

ALT_AVALON_I2C_STATUS_CODE read_reg_MPU(alt_u8 reg, alt_u8 * ret_buf, alt_u32 len){
   103a8:	dfc00315 	stw	ra,12(sp)
	return alt_avalon_i2c_master_tx_rx(i2c_dev, &reg, 1, ret_buf, len, ALT_AVALON_I2C_NO_INTERRUPTS);
   103ac:	00168640 	call	16864 <alt_avalon_i2c_master_tx_rx>
}
   103b0:	dfc00317 	ldw	ra,12(sp)
   103b4:	dec00404 	addi	sp,sp,16
   103b8:	f800283a 	ret

000103bc <read_byte_MPU>:

ALT_AVALON_I2C_STATUS_CODE read_byte_MPU(alt_u8 reg, alt_u8 * ret){
	return read_reg_MPU(reg, ret, 1);
   103bc:	01800044 	movi	r6,1
   103c0:	21003fcc 	andi	r4,r4,255
   103c4:	00103881 	jmpi	10388 <read_reg_MPU>

000103c8 <write_reg_MPU>:
}

ALT_AVALON_I2C_STATUS_CODE write_reg_MPU(alt_u8 reg, alt_u8 * buf, alt_u32 len){
   103c8:	defffd04 	addi	sp,sp,-12
	wr_buf[0] = reg;
   103cc:	00800074 	movhi	r2,1

ALT_AVALON_I2C_STATUS_CODE read_byte_MPU(alt_u8 reg, alt_u8 * ret){
	return read_reg_MPU(reg, ret, 1);
}

ALT_AVALON_I2C_STATUS_CODE write_reg_MPU(alt_u8 reg, alt_u8 * buf, alt_u32 len){
   103d0:	dc400115 	stw	r17,4(sp)
   103d4:	dc000015 	stw	r16,0(sp)
   103d8:	dfc00215 	stw	ra,8(sp)
	wr_buf[0] = reg;
   103dc:	109cd004 	addi	r2,r2,29504
   103e0:	11000005 	stb	r4,0(r2)
	memcpy(&wr_buf+sizeof(alt_u8), buf, (len > WR_BUF_LEN ? WR_BUF_LEN : len));
   103e4:	04400504 	movi	r17,20

ALT_AVALON_I2C_STATUS_CODE read_byte_MPU(alt_u8 reg, alt_u8 * ret){
	return read_reg_MPU(reg, ret, 1);
}

ALT_AVALON_I2C_STATUS_CODE write_reg_MPU(alt_u8 reg, alt_u8 * buf, alt_u32 len){
   103e8:	3021883a 	mov	r16,r6
	wr_buf[0] = reg;
	memcpy(&wr_buf+sizeof(alt_u8), buf, (len > WR_BUF_LEN ? WR_BUF_LEN : len));
   103ec:	8980012e 	bgeu	r17,r6,103f4 <write_reg_MPU+0x2c>
   103f0:	880d883a 	mov	r6,r17
   103f4:	01000074 	movhi	r4,1
   103f8:	211cd504 	addi	r4,r4,29524
   103fc:	0014e680 	call	14e68 <memcpy>
	return alt_avalon_i2c_master_tx(i2c_dev, wr_buf, (len > WR_BUF_LEN ? WR_BUF_LEN : len+1), ALT_AVALON_I2C_NO_INTERRUPTS);
   10400:	d1208117 	ldw	r4,-32252(gp)
   10404:	8c000236 	bltu	r17,r16,10410 <write_reg_MPU+0x48>
   10408:	81800044 	addi	r6,r16,1
   1040c:	00000106 	br	10414 <write_reg_MPU+0x4c>
   10410:	01800504 	movi	r6,20
   10414:	01400074 	movhi	r5,1
   10418:	000f883a 	mov	r7,zero
   1041c:	295cd004 	addi	r5,r5,29504
}
   10420:	dfc00217 	ldw	ra,8(sp)
   10424:	dc400117 	ldw	r17,4(sp)
   10428:	dc000017 	ldw	r16,0(sp)
   1042c:	dec00304 	addi	sp,sp,12
}

ALT_AVALON_I2C_STATUS_CODE write_reg_MPU(alt_u8 reg, alt_u8 * buf, alt_u32 len){
	wr_buf[0] = reg;
	memcpy(&wr_buf+sizeof(alt_u8), buf, (len > WR_BUF_LEN ? WR_BUF_LEN : len));
	return alt_avalon_i2c_master_tx(i2c_dev, wr_buf, (len > WR_BUF_LEN ? WR_BUF_LEN : len+1), ALT_AVALON_I2C_NO_INTERRUPTS);
   10430:	00167a01 	jmpi	167a0 <alt_avalon_i2c_master_tx>

00010434 <write_byte_MPU>:
}

ALT_AVALON_I2C_STATUS_CODE write_byte_MPU(alt_u8 reg, alt_u8 * byte_in){
	//printf("Sending Byte %d\n", *byte_in);
	return write_reg_MPU(reg, byte_in, 1);
   10434:	01800044 	movi	r6,1
   10438:	21003fcc 	andi	r4,r4,255
   1043c:	00103c81 	jmpi	103c8 <write_reg_MPU>

00010440 <init_MPU>:
}


ALT_AVALON_I2C_STATUS_CODE init_MPU(){
	i2c_dev = alt_avalon_i2c_open("/dev/i2c_0");
   10440:	01000074 	movhi	r4,1
	//printf("Sending Byte %d\n", *byte_in);
	return write_reg_MPU(reg, byte_in, 1);
}


ALT_AVALON_I2C_STATUS_CODE init_MPU(){
   10444:	defffd04 	addi	sp,sp,-12
	i2c_dev = alt_avalon_i2c_open("/dev/i2c_0");
   10448:	211b4e04 	addi	r4,r4,27960
	//printf("Sending Byte %d\n", *byte_in);
	return write_reg_MPU(reg, byte_in, 1);
}


ALT_AVALON_I2C_STATUS_CODE init_MPU(){
   1044c:	dfc00215 	stw	ra,8(sp)
   10450:	dc000115 	stw	r16,4(sp)
	i2c_dev = alt_avalon_i2c_open("/dev/i2c_0");
   10454:	00158900 	call	15890 <alt_avalon_i2c_open>
   10458:	d0a08115 	stw	r2,-32252(gp)
	if (NULL==i2c_dev)
   1045c:	1000051e 	bne	r2,zero,10474 <init_MPU+0x34>
	{
		printf("Error: Cannot find /dev/i2c_0\n");
   10460:	01000074 	movhi	r4,1
   10464:	211b5104 	addi	r4,r4,27972
   10468:	0014f980 	call	14f98 <puts>
		return 1;
   1046c:	00800044 	movi	r2,1
   10470:	00003f06 	br	10570 <init_MPU+0x130>
	}
	alt_avalon_i2c_master_target_set(i2c_dev,MPU_I2C_ADDR);
   10474:	04001a04 	movi	r16,104
   10478:	800b883a 	mov	r5,r16
   1047c:	1009883a 	mov	r4,r2
   10480:	0015b440 	call	15b44 <alt_avalon_i2c_master_target_set>
	alt_u8 buf = 0x00;
   10484:	d8000085 	stb	zero,2(sp)
	if (check_MPU() < 0){
   10488:	001035c0 	call	1035c <check_MPU>
		printf("Device Not Found\n");
		return 1;
	}else{
		printf("Device Found\n");
   1048c:	01000074 	movhi	r4,1
   10490:	211b5904 	addi	r4,r4,28004
   10494:	0014f980 	call	14f98 <puts>
	}
	read_reg_MPU(117, &buf, 1);
   10498:	d9400084 	addi	r5,sp,2
   1049c:	01800044 	movi	r6,1
   104a0:	01001d44 	movi	r4,117
   104a4:	00103880 	call	10388 <read_reg_MPU>

	if (buf == 0x68){
   104a8:	d9400083 	ldbu	r5,2(sp)
   104ac:	2c00041e 	bne	r5,r16,104c0 <init_MPU+0x80>
		printf("WhoAmI Passed\n");
   104b0:	01000074 	movhi	r4,1
   104b4:	211b5d04 	addi	r4,r4,28020
   104b8:	0014f980 	call	14f98 <puts>
   104bc:	00000306 	br	104cc <init_MPU+0x8c>
	}else{
		printf("WhoAmI Failed: %x\n", buf);
   104c0:	01000074 	movhi	r4,1
   104c4:	211b6104 	addi	r4,r4,28036
   104c8:	0014ecc0 	call	14ecc <printf>
	}

	read_reg_MPU(117, &buf, 1);
   104cc:	d9400084 	addi	r5,sp,2
   104d0:	01800044 	movi	r6,1
   104d4:	01001d44 	movi	r4,117
   104d8:	00103880 	call	10388 <read_reg_MPU>
	if (buf == 0x68){
   104dc:	d9400083 	ldbu	r5,2(sp)
   104e0:	00801a04 	movi	r2,104
   104e4:	2880041e 	bne	r5,r2,104f8 <init_MPU+0xb8>
		printf("WhoAmI Passed\n");
   104e8:	01000074 	movhi	r4,1
   104ec:	211b5d04 	addi	r4,r4,28020
   104f0:	0014f980 	call	14f98 <puts>
   104f4:	00000306 	br	10504 <init_MPU+0xc4>
	}else{
		printf("WhoAmI Failed: %x\n", buf);
   104f8:	01000074 	movhi	r4,1
   104fc:	211b6104 	addi	r4,r4,28036
   10500:	0014ecc0 	call	14ecc <printf>
	}


	alt_u8 clear = 0;
	write_byte_MPU(MPU_REG_PWRMGMT_1, &clear);//Turn off sleep mode
   10504:	d9400044 	addi	r5,sp,1
   10508:	01001ac4 	movi	r4,107
	}else{
		printf("WhoAmI Failed: %x\n", buf);
	}


	alt_u8 clear = 0;
   1050c:	d8000045 	stb	zero,1(sp)
	write_byte_MPU(MPU_REG_PWRMGMT_1, &clear);//Turn off sleep mode
   10510:	00104340 	call	10434 <write_byte_MPU>
	alt_u8 sleep;
	read_byte_MPU(MPU_REG_PWRMGMT_1, &sleep);
   10514:	d80b883a 	mov	r5,sp
   10518:	01001ac4 	movi	r4,107
   1051c:	00103bc0 	call	103bc <read_byte_MPU>
	read_byte_MPU(MPU_REG_PWRMGMT_1, &sleep);
   10520:	d80b883a 	mov	r5,sp
   10524:	01001ac4 	movi	r4,107
   10528:	00103bc0 	call	103bc <read_byte_MPU>
	printf("Sleep Status: %x\n", sleep);
   1052c:	d9400003 	ldbu	r5,0(sp)
   10530:	01000074 	movhi	r4,1
   10534:	211b6604 	addi	r4,r4,28056
   10538:	0014ecc0 	call	14ecc <printf>
	if ((sleep & 0x20)!=0){
   1053c:	d8800003 	ldbu	r2,0(sp)
   10540:	1080080c 	andi	r2,r2,32
   10544:	10000326 	beq	r2,zero,10554 <init_MPU+0x114>
		printf("It's Sleeping\n");
   10548:	01000074 	movhi	r4,1
   1054c:	211b6b04 	addi	r4,r4,28076
   10550:	0014f980 	call	14f98 <puts>
	}

	write_byte_MPU(28, &clear);
   10554:	d9400044 	addi	r5,sp,1
   10558:	01000704 	movi	r4,28
   1055c:	00104340 	call	10434 <write_byte_MPU>
	write_byte_MPU(27, &clear);
   10560:	d9400044 	addi	r5,sp,1
   10564:	010006c4 	movi	r4,27
   10568:	00104340 	call	10434 <write_byte_MPU>
	return 0;
   1056c:	0005883a 	mov	r2,zero
}
   10570:	dfc00217 	ldw	ra,8(sp)
   10574:	dc000117 	ldw	r16,4(sp)
   10578:	dec00304 	addi	sp,sp,12
   1057c:	f800283a 	ret

00010580 <get_x_accel_MPU>:

alt_16 get_x_accel_MPU(){
   10580:	defffe04 	addi	sp,sp,-8
	alt_u8 lsb, msb;
	alt_u8 buf[2];
	//read_reg_MPU(MPU_REG_ACCEL_X, &ret, 2);
	read_byte_MPU(MPU_REG_ACCEL_X, &msb);
   10584:	d80b883a 	mov	r5,sp
   10588:	01000ec4 	movi	r4,59
	write_byte_MPU(28, &clear);
	write_byte_MPU(27, &clear);
	return 0;
}

alt_16 get_x_accel_MPU(){
   1058c:	dfc00115 	stw	ra,4(sp)
	alt_u8 lsb, msb;
	alt_u8 buf[2];
	//read_reg_MPU(MPU_REG_ACCEL_X, &ret, 2);
	read_byte_MPU(MPU_REG_ACCEL_X, &msb);
   10590:	00103bc0 	call	103bc <read_byte_MPU>
	read_byte_MPU(MPU_REG_ACCEL_X + 1, &lsb);
   10594:	d9400044 	addi	r5,sp,1
   10598:	01000f04 	movi	r4,60
   1059c:	00103bc0 	call	103bc <read_byte_MPU>
	alt_u16 ret = (msb << 8)|lsb;
   105a0:	d8800003 	ldbu	r2,0(sp)
   105a4:	d8c00043 	ldbu	r3,1(sp)
   105a8:	1004923a 	slli	r2,r2,8
	return *(alt_16 *) &ret;
}
   105ac:	10c4b03a 	or	r2,r2,r3
   105b0:	dfc00117 	ldw	ra,4(sp)
   105b4:	dec00204 	addi	sp,sp,8
   105b8:	f800283a 	ret

000105bc <get_y_accel_MPU>:

alt_16 get_y_accel_MPU(){
   105bc:	defffe04 	addi	sp,sp,-8
	alt_u8 lsb, msb;
	alt_u8 buf[2];
	//read_reg_MPU(MPU_REG_ACCEL_X, &ret, 2);
	read_byte_MPU(MPU_REG_ACCEL_Y, &msb);
   105c0:	d80b883a 	mov	r5,sp
   105c4:	01000f44 	movi	r4,61
	read_byte_MPU(MPU_REG_ACCEL_X + 1, &lsb);
	alt_u16 ret = (msb << 8)|lsb;
	return *(alt_16 *) &ret;
}

alt_16 get_y_accel_MPU(){
   105c8:	dfc00115 	stw	ra,4(sp)
	alt_u8 lsb, msb;
	alt_u8 buf[2];
	//read_reg_MPU(MPU_REG_ACCEL_X, &ret, 2);
	read_byte_MPU(MPU_REG_ACCEL_Y, &msb);
   105cc:	00103bc0 	call	103bc <read_byte_MPU>
	read_byte_MPU(MPU_REG_ACCEL_Y + 1, &lsb);
   105d0:	d9400044 	addi	r5,sp,1
   105d4:	01000f84 	movi	r4,62
   105d8:	00103bc0 	call	103bc <read_byte_MPU>
	alt_u16 ret = (msb << 8)|lsb;
   105dc:	d8800003 	ldbu	r2,0(sp)
   105e0:	d8c00043 	ldbu	r3,1(sp)
   105e4:	1004923a 	slli	r2,r2,8
	return *(alt_16 *) &ret;
}
   105e8:	10c4b03a 	or	r2,r2,r3
   105ec:	dfc00117 	ldw	ra,4(sp)
   105f0:	dec00204 	addi	sp,sp,8
   105f4:	f800283a 	ret

000105f8 <get_z_accel_MPU>:

alt_16 get_z_accel_MPU(){
   105f8:	defffe04 	addi	sp,sp,-8
	alt_u8 lsb, msb;
	alt_u8 buf[2];
	//read_reg_MPU(MPU_REG_ACCEL_X, &ret, 2);
	read_byte_MPU(MPU_REG_ACCEL_Z, &msb);
   105fc:	d80b883a 	mov	r5,sp
   10600:	01000fc4 	movi	r4,63
	read_byte_MPU(MPU_REG_ACCEL_Y + 1, &lsb);
	alt_u16 ret = (msb << 8)|lsb;
	return *(alt_16 *) &ret;
}

alt_16 get_z_accel_MPU(){
   10604:	dfc00115 	stw	ra,4(sp)
	alt_u8 lsb, msb;
	alt_u8 buf[2];
	//read_reg_MPU(MPU_REG_ACCEL_X, &ret, 2);
	read_byte_MPU(MPU_REG_ACCEL_Z, &msb);
   10608:	00103bc0 	call	103bc <read_byte_MPU>
	read_byte_MPU(MPU_REG_ACCEL_Z + 1, &lsb);
   1060c:	d9400044 	addi	r5,sp,1
   10610:	01001004 	movi	r4,64
   10614:	00103bc0 	call	103bc <read_byte_MPU>
	alt_u16 ret = (msb << 8)|lsb;
   10618:	d8800003 	ldbu	r2,0(sp)
   1061c:	d8c00043 	ldbu	r3,1(sp)
   10620:	1004923a 	slli	r2,r2,8
	//printf("msb, lsb = %u , %u \n", msb, lsb);
	return *(alt_16 *) &ret;
}
   10624:	10c4b03a 	or	r2,r2,r3
   10628:	dfc00117 	ldw	ra,4(sp)
   1062c:	dec00204 	addi	sp,sp,8
   10630:	f800283a 	ret

00010634 <get_x_gyro_MPU>:


alt_16 get_x_gyro_MPU(){
   10634:	defffe04 	addi	sp,sp,-8
	alt_u8 lsb, msb;
	alt_u8 buf[2];
	//read_reg_MPU(MPU_REG_ACCEL_X, &ret, 2);
	read_byte_MPU(MPU_REG_GYRO_X, &msb);
   10638:	d80b883a 	mov	r5,sp
   1063c:	010010c4 	movi	r4,67
	//printf("msb, lsb = %u , %u \n", msb, lsb);
	return *(alt_16 *) &ret;
}


alt_16 get_x_gyro_MPU(){
   10640:	dfc00115 	stw	ra,4(sp)
	alt_u8 lsb, msb;
	alt_u8 buf[2];
	//read_reg_MPU(MPU_REG_ACCEL_X, &ret, 2);
	read_byte_MPU(MPU_REG_GYRO_X, &msb);
   10644:	00103bc0 	call	103bc <read_byte_MPU>
	read_byte_MPU(MPU_REG_GYRO_X + 1, &lsb);
   10648:	d9400044 	addi	r5,sp,1
   1064c:	01001104 	movi	r4,68
   10650:	00103bc0 	call	103bc <read_byte_MPU>
	alt_u16 ret = (msb << 8)|lsb;
   10654:	d8800003 	ldbu	r2,0(sp)
   10658:	d8c00043 	ldbu	r3,1(sp)
   1065c:	1004923a 	slli	r2,r2,8
	return *(alt_16 *) &ret;
}
   10660:	10c4b03a 	or	r2,r2,r3
   10664:	dfc00117 	ldw	ra,4(sp)
   10668:	dec00204 	addi	sp,sp,8
   1066c:	f800283a 	ret

00010670 <get_y_gyro_MPU>:

alt_16 get_y_gyro_MPU(){
   10670:	defffe04 	addi	sp,sp,-8
	alt_u8 lsb, msb;
	alt_u8 buf[2];
	//read_reg_MPU(MPU_REG_ACCEL_X, &ret, 2);
	read_byte_MPU(MPU_REG_GYRO_Y, &msb);
   10674:	d80b883a 	mov	r5,sp
   10678:	01001144 	movi	r4,69
	read_byte_MPU(MPU_REG_GYRO_X + 1, &lsb);
	alt_u16 ret = (msb << 8)|lsb;
	return *(alt_16 *) &ret;
}

alt_16 get_y_gyro_MPU(){
   1067c:	dfc00115 	stw	ra,4(sp)
	alt_u8 lsb, msb;
	alt_u8 buf[2];
	//read_reg_MPU(MPU_REG_ACCEL_X, &ret, 2);
	read_byte_MPU(MPU_REG_GYRO_Y, &msb);
   10680:	00103bc0 	call	103bc <read_byte_MPU>
	read_byte_MPU(MPU_REG_GYRO_Y + 1, &lsb);
   10684:	d9400044 	addi	r5,sp,1
   10688:	01001184 	movi	r4,70
   1068c:	00103bc0 	call	103bc <read_byte_MPU>
	alt_u16 ret = (msb << 8)|lsb;
   10690:	d8800003 	ldbu	r2,0(sp)
   10694:	d8c00043 	ldbu	r3,1(sp)
   10698:	1004923a 	slli	r2,r2,8
	return *(alt_16 *) &ret;
}
   1069c:	10c4b03a 	or	r2,r2,r3
   106a0:	dfc00117 	ldw	ra,4(sp)
   106a4:	dec00204 	addi	sp,sp,8
   106a8:	f800283a 	ret

000106ac <get_z_gyro_MPU>:

alt_16 get_z_gyro_MPU(){
   106ac:	defffe04 	addi	sp,sp,-8
	alt_u8 lsb, msb;
	alt_u8 buf[2];
	//read_reg_MPU(MPU_REG_ACCEL_X, &ret, 2);
	read_byte_MPU(MPU_REG_GYRO_Z, &msb);
   106b0:	d80b883a 	mov	r5,sp
   106b4:	010011c4 	movi	r4,71
	read_byte_MPU(MPU_REG_GYRO_Y + 1, &lsb);
	alt_u16 ret = (msb << 8)|lsb;
	return *(alt_16 *) &ret;
}

alt_16 get_z_gyro_MPU(){
   106b8:	dfc00115 	stw	ra,4(sp)
	alt_u8 lsb, msb;
	alt_u8 buf[2];
	//read_reg_MPU(MPU_REG_ACCEL_X, &ret, 2);
	read_byte_MPU(MPU_REG_GYRO_Z, &msb);
   106bc:	00103bc0 	call	103bc <read_byte_MPU>
	read_byte_MPU(MPU_REG_GYRO_Z + 1, &lsb);
   106c0:	d9400044 	addi	r5,sp,1
   106c4:	01001204 	movi	r4,72
   106c8:	00103bc0 	call	103bc <read_byte_MPU>
	alt_u16 ret = (msb << 8)|lsb;
   106cc:	d8800003 	ldbu	r2,0(sp)
   106d0:	d8c00043 	ldbu	r3,1(sp)
   106d4:	1004923a 	slli	r2,r2,8
	return *(alt_16 *) &ret;
}
   106d8:	10c4b03a 	or	r2,r2,r3
   106dc:	dfc00117 	ldw	ra,4(sp)
   106e0:	dec00204 	addi	sp,sp,8
   106e4:	f800283a 	ret

000106e8 <main>:
double accX, accY, accZ;


int main()
{
	alt_putstr("Hello from Nios II!\n");
   106e8:	01000074 	movhi	r4,1
alt_16 AccX, AccY, AccZ;
double accX, accY, accZ;


int main()
{
   106ec:	defff604 	addi	sp,sp,-40
	alt_putstr("Hello from Nios II!\n");
   106f0:	211b6f04 	addi	r4,r4,28092
alt_16 AccX, AccY, AccZ;
double accX, accY, accZ;


int main()
{
   106f4:	dfc00915 	stw	ra,36(sp)
   106f8:	df000815 	stw	fp,32(sp)
   106fc:	dc000015 	stw	r16,0(sp)
   10700:	ddc00715 	stw	r23,28(sp)
   10704:	dd800615 	stw	r22,24(sp)
   10708:	dd400515 	stw	r21,20(sp)
   1070c:	dd000415 	stw	r20,16(sp)
   10710:	dcc00315 	stw	r19,12(sp)
   10714:	dc800215 	stw	r18,8(sp)
   10718:	dc400115 	stw	r17,4(sp)
	alt_putstr("Hello from Nios II!\n");
   1071c:	00157900 	call	15790 <alt_putstr>

	/* Event loop never exits. */
	init_MPU();
   10720:	00104400 	call	10440 <init_MPU>
	KalmanInit();
   10724:	00100ac0 	call	100ac <KalmanInit>
	alt_u32 old = 0;
	usleep(2000000);
   10728:	010007f4 	movhi	r4,31
   1072c:	21212004 	addi	r4,r4,-31616
	while (1){
		int new = IORD_ALTERA_AVALON_PIO_DATA(IN_L_BASE);
   10730:	070000b4 	movhi	fp,2

	/* Event loop never exits. */
	init_MPU();
	KalmanInit();
	alt_u32 old = 0;
	usleep(2000000);
   10734:	00157c80 	call	157c8 <usleep>
	alt_putstr("Hello from Nios II!\n");

	/* Event loop never exits. */
	init_MPU();
	KalmanInit();
	alt_u32 old = 0;
   10738:	0021883a 	mov	r16,zero
	usleep(2000000);
	while (1){
		int new = IORD_ALTERA_AVALON_PIO_DATA(IN_L_BASE);
   1073c:	e7052404 	addi	fp,fp,5264
   10740:	e4400037 	ldwio	r17,0(fp)
		int dt = new - old;
		//printf("%d\n", dt);
		old = new;
		AccZ =  get_z_accel_MPU();
   10744:	00105f80 	call	105f8 <get_z_accel_MPU>
   10748:	d0a0850d 	sth	r2,-32236(gp)
		AccX =  get_x_accel_MPU();
   1074c:	00105800 	call	10580 <get_x_accel_MPU>
   10750:	d0a0858d 	sth	r2,-32234(gp)
		AccY =  get_y_accel_MPU();
   10754:	00105bc0 	call	105bc <get_y_accel_MPU>
		accZ = (double) AccZ;
   10758:	d120850f 	ldh	r4,-32236(gp)
		int dt = new - old;
		//printf("%d\n", dt);
		old = new;
		AccZ =  get_z_accel_MPU();
		AccX =  get_x_accel_MPU();
		AccY =  get_y_accel_MPU();
   1075c:	1025883a 	mov	r18,r2
   10760:	d0a0820d 	sth	r2,-32248(gp)
		accZ = (double) AccZ;
   10764:	00149bc0 	call	149bc <__floatsidf>
		accX = (double) AccX;
   10768:	d120858f 	ldh	r4,-32234(gp)
		//printf("%d\n", dt);
		old = new;
		AccZ =  get_z_accel_MPU();
		AccX =  get_x_accel_MPU();
		AccY =  get_y_accel_MPU();
		accZ = (double) AccZ;
   1076c:	102b883a 	mov	r21,r2
   10770:	1829883a 	mov	r20,r3
   10774:	d0a08315 	stw	r2,-32244(gp)
   10778:	d0e08415 	stw	r3,-32240(gp)
		accX = (double) AccX;
   1077c:	00149bc0 	call	149bc <__floatsidf>
		accY = (double) AccY;
   10780:	913fffcc 	andi	r4,r18,65535
   10784:	2120001c 	xori	r4,r4,32768
   10788:	21200004 	addi	r4,r4,-32768
		old = new;
		AccZ =  get_z_accel_MPU();
		AccX =  get_x_accel_MPU();
		AccY =  get_y_accel_MPU();
		accZ = (double) AccZ;
		accX = (double) AccX;
   1078c:	102f883a 	mov	r23,r2
   10790:	182d883a 	mov	r22,r3
   10794:	d0a08815 	stw	r2,-32224(gp)
   10798:	d0e08915 	stw	r3,-32220(gp)
		accY = (double) AccY;
   1079c:	00149bc0 	call	149bc <__floatsidf>
		double pitch = (atan(accY / sqrt(accX * accX + accZ * accZ)) * 180 / PI) - 0.58;
   107a0:	b80d883a 	mov	r6,r23
   107a4:	b00f883a 	mov	r7,r22
   107a8:	b809883a 	mov	r4,r23
   107ac:	b00b883a 	mov	r5,r22
		AccZ =  get_z_accel_MPU();
		AccX =  get_x_accel_MPU();
		AccY =  get_y_accel_MPU();
		accZ = (double) AccZ;
		accX = (double) AccX;
		accY = (double) AccY;
   107b0:	1027883a 	mov	r19,r2
   107b4:	1825883a 	mov	r18,r3
   107b8:	d0a08615 	stw	r2,-32232(gp)
   107bc:	d0e08715 	stw	r3,-32228(gp)
		double pitch = (atan(accY / sqrt(accX * accX + accZ * accZ)) * 180 / PI) - 0.58;
   107c0:	00139a80 	call	139a8 <__muldf3>
   107c4:	a80d883a 	mov	r6,r21
   107c8:	a00f883a 	mov	r7,r20
   107cc:	a809883a 	mov	r4,r21
   107d0:	a00b883a 	mov	r5,r20
   107d4:	102f883a 	mov	r23,r2
   107d8:	182d883a 	mov	r22,r3
   107dc:	00139a80 	call	139a8 <__muldf3>
   107e0:	100d883a 	mov	r6,r2
   107e4:	180f883a 	mov	r7,r3
   107e8:	b809883a 	mov	r4,r23
   107ec:	b00b883a 	mov	r5,r22
   107f0:	00126440 	call	12644 <__adddf3>
   107f4:	1009883a 	mov	r4,r2
   107f8:	180b883a 	mov	r5,r3
   107fc:	0010e940 	call	10e94 <sqrt>
   10800:	100d883a 	mov	r6,r2
   10804:	180f883a 	mov	r7,r3
   10808:	9809883a 	mov	r4,r19
   1080c:	900b883a 	mov	r5,r18
   10810:	0012ef00 	call	12ef0 <__divdf3>
   10814:	180b883a 	mov	r5,r3
   10818:	1009883a 	mov	r4,r2
   1081c:	00108f80 	call	108f8 <atan>
   10820:	1827883a 	mov	r19,r3
   10824:	1029883a 	mov	r20,r2
		float a = getAngle((float)pitch, (float) get_x_gyro_MPU() * 131.0f, (float)dt/1000000.0f);
   10828:	00106340 	call	10634 <get_x_gyro_MPU>
   1082c:	8c09c83a 	sub	r4,r17,r16
   10830:	102b883a 	mov	r21,r2
   10834:	00125200 	call	12520 <__floatsisf>
   10838:	01525d34 	movhi	r5,18804
   1083c:	29490004 	addi	r5,r5,9216
   10840:	1009883a 	mov	r4,r2
   10844:	00117900 	call	11790 <__divsf3>
   10848:	a93fffcc 	andi	r4,r21,65535
   1084c:	2120001c 	xori	r4,r4,32768
   10850:	21200004 	addi	r4,r4,-32768
   10854:	1025883a 	mov	r18,r2
   10858:	00125200 	call	12520 <__floatsisf>
   1085c:	0150c0f4 	movhi	r5,17155
   10860:	1009883a 	mov	r4,r2
   10864:	0011bd00 	call	11bd0 <__mulsf3>
   10868:	01d019f4 	movhi	r7,16487
   1086c:	000d883a 	mov	r6,zero
   10870:	39e00004 	addi	r7,r7,-32768
   10874:	a009883a 	mov	r4,r20
   10878:	980b883a 	mov	r5,r19
   1087c:	1021883a 	mov	r16,r2
   10880:	00139a80 	call	139a8 <__muldf3>
   10884:	01947b34 	movhi	r6,20972
   10888:	01d00274 	movhi	r7,16393
   1088c:	31a147c4 	addi	r6,r6,-31457
   10890:	39c7ae04 	addi	r7,r7,7864
   10894:	1009883a 	mov	r4,r2
   10898:	180b883a 	mov	r5,r3
   1089c:	0012ef00 	call	12ef0 <__divdf3>
   108a0:	018a3db4 	movhi	r6,10486
   108a4:	01cff8f4 	movhi	r7,16355
   108a8:	39e3d704 	addi	r7,r7,-28836
   108ac:	31b0a3c4 	addi	r6,r6,-15729
   108b0:	1009883a 	mov	r4,r2
   108b4:	180b883a 	mov	r5,r3
   108b8:	00140c00 	call	140c0 <__subdf3>
   108bc:	180b883a 	mov	r5,r3
   108c0:	1009883a 	mov	r4,r2
   108c4:	0014a980 	call	14a98 <__truncdfsf2>
   108c8:	800b883a 	mov	r5,r16
   108cc:	900d883a 	mov	r6,r18
   108d0:	1009883a 	mov	r4,r2
   108d4:	001012c0 	call	1012c <getAngle>
		printf("%d\n",  (int)a);
   108d8:	1009883a 	mov	r4,r2
   108dc:	00124b00 	call	124b0 <__fixsfsi>
   108e0:	01000074 	movhi	r4,1
   108e4:	100b883a 	mov	r5,r2
   108e8:	211b7504 	addi	r4,r4,28116
   108ec:	0014ecc0 	call	14ecc <printf>
	usleep(2000000);
	while (1){
		int new = IORD_ALTERA_AVALON_PIO_DATA(IN_L_BASE);
		int dt = new - old;
		//printf("%d\n", dt);
		old = new;
   108f0:	8821883a 	mov	r16,r17
   108f4:	003f9206 	br	10740 <__alt_data_end+0xffff0740>

000108f8 <atan>:
   108f8:	defff704 	addi	sp,sp,-36
   108fc:	dc400115 	stw	r17,4(sp)
   10900:	04600034 	movhi	r17,32768
   10904:	8c7fffc4 	addi	r17,r17,-1
   10908:	00910434 	movhi	r2,17424
   1090c:	dc800215 	stw	r18,8(sp)
   10910:	dc000015 	stw	r16,0(sp)
   10914:	dfc00815 	stw	ra,32(sp)
   10918:	ddc00715 	stw	r23,28(sp)
   1091c:	dd800615 	stw	r22,24(sp)
   10920:	dd400515 	stw	r21,20(sp)
   10924:	dd000415 	stw	r20,16(sp)
   10928:	dcc00315 	stw	r19,12(sp)
   1092c:	2c62703a 	and	r17,r5,r17
   10930:	10bfffc4 	addi	r2,r2,-1
   10934:	2821883a 	mov	r16,r5
   10938:	2025883a 	mov	r18,r4
   1093c:	1440090e 	bge	r2,r17,10964 <atan+0x6c>
   10940:	009ffc34 	movhi	r2,32752
   10944:	1440bf16 	blt	r2,r17,10c44 <atan+0x34c>
   10948:	8880bd26 	beq	r17,r2,10c40 <atan+0x348>
   1094c:	00951134 	movhi	r2,21572
   10950:	108b4604 	addi	r2,r2,11544
   10954:	0400fc0e 	bge	zero,r16,10d48 <atan+0x450>
   10958:	00cffe74 	movhi	r3,16377
   1095c:	18c87ec4 	addi	r3,r3,8699
   10960:	0000bd06 	br	10c58 <atan+0x360>
   10964:	008ff734 	movhi	r2,16348
   10968:	10bfffc4 	addi	r2,r2,-1
   1096c:	282b883a 	mov	r21,r5
   10970:	1440d216 	blt	r2,r17,10cbc <atan+0x3c4>
   10974:	008f8834 	movhi	r2,15904
   10978:	10bfffc4 	addi	r2,r2,-1
   1097c:	1440c10e 	bge	r2,r17,10c84 <atan+0x38c>
   10980:	053fffc4 	movi	r20,-1
   10984:	900d883a 	mov	r6,r18
   10988:	800f883a 	mov	r7,r16
   1098c:	9009883a 	mov	r4,r18
   10990:	800b883a 	mov	r5,r16
   10994:	00139a80 	call	139a8 <__muldf3>
   10998:	100d883a 	mov	r6,r2
   1099c:	180f883a 	mov	r7,r3
   109a0:	1009883a 	mov	r4,r2
   109a4:	180b883a 	mov	r5,r3
   109a8:	102f883a 	mov	r23,r2
   109ac:	182d883a 	mov	r22,r3
   109b0:	00139a80 	call	139a8 <__muldf3>
   109b4:	01b8c8f4 	movhi	r6,58147
   109b8:	01cfe474 	movhi	r7,16273
   109bc:	31b68444 	addi	r6,r6,-9711
   109c0:	39eb4e84 	addi	r7,r7,-21190
   109c4:	1009883a 	mov	r4,r2
   109c8:	180b883a 	mov	r5,r3
   109cc:	1027883a 	mov	r19,r2
   109d0:	1823883a 	mov	r17,r3
   109d4:	00139a80 	call	139a8 <__muldf3>
   109d8:	01891db4 	movhi	r6,9334
   109dc:	01cfea74 	movhi	r7,16297
   109e0:	31837ac4 	addi	r6,r6,3563
   109e4:	39ded2c4 	addi	r7,r7,31563
   109e8:	1009883a 	mov	r4,r2
   109ec:	180b883a 	mov	r5,r3
   109f0:	00126440 	call	12644 <__adddf3>
   109f4:	980d883a 	mov	r6,r19
   109f8:	880f883a 	mov	r7,r17
   109fc:	1009883a 	mov	r4,r2
   10a00:	180b883a 	mov	r5,r3
   10a04:	00139a80 	call	139a8 <__muldf3>
   10a08:	01a83434 	movhi	r6,41168
   10a0c:	01cfec74 	movhi	r7,16305
   10a10:	318f5444 	addi	r6,r6,15697
   10a14:	39c35984 	addi	r7,r7,3430
   10a18:	1009883a 	mov	r4,r2
   10a1c:	180b883a 	mov	r5,r3
   10a20:	00126440 	call	12644 <__adddf3>
   10a24:	980d883a 	mov	r6,r19
   10a28:	880f883a 	mov	r7,r17
   10a2c:	1009883a 	mov	r4,r2
   10a30:	180b883a 	mov	r5,r3
   10a34:	00139a80 	call	139a8 <__muldf3>
   10a38:	01b15334 	movhi	r6,50508
   10a3c:	01cfedf4 	movhi	r7,16311
   10a40:	31881b84 	addi	r6,r6,8302
   10a44:	39d17344 	addi	r7,r7,17869
   10a48:	1009883a 	mov	r4,r2
   10a4c:	180b883a 	mov	r5,r3
   10a50:	00126440 	call	12644 <__adddf3>
   10a54:	980d883a 	mov	r6,r19
   10a58:	880f883a 	mov	r7,r17
   10a5c:	1009883a 	mov	r4,r2
   10a60:	180b883a 	mov	r5,r3
   10a64:	00139a80 	call	139a8 <__muldf3>
   10a68:	01a48074 	movhi	r6,37377
   10a6c:	01cff0b4 	movhi	r7,16322
   10a70:	31a0ffc4 	addi	r6,r6,-31745
   10a74:	39d24904 	addi	r7,r7,18724
   10a78:	1009883a 	mov	r4,r2
   10a7c:	180b883a 	mov	r5,r3
   10a80:	00126440 	call	12644 <__adddf3>
   10a84:	980d883a 	mov	r6,r19
   10a88:	880f883a 	mov	r7,r17
   10a8c:	1009883a 	mov	r4,r2
   10a90:	180b883a 	mov	r5,r3
   10a94:	00139a80 	call	139a8 <__muldf3>
   10a98:	01955574 	movhi	r6,21845
   10a9c:	01cff574 	movhi	r7,16341
   10aa0:	31954344 	addi	r6,r6,21773
   10aa4:	39d55544 	addi	r7,r7,21845
   10aa8:	1009883a 	mov	r4,r2
   10aac:	180b883a 	mov	r5,r3
   10ab0:	00126440 	call	12644 <__adddf3>
   10ab4:	b80d883a 	mov	r6,r23
   10ab8:	b00f883a 	mov	r7,r22
   10abc:	1009883a 	mov	r4,r2
   10ac0:	180b883a 	mov	r5,r3
   10ac4:	00139a80 	call	139a8 <__muldf3>
   10ac8:	018b1ab4 	movhi	r6,11370
   10acc:	01efe8f4 	movhi	r7,49059
   10ad0:	319b0bc4 	addi	r6,r6,27695
   10ad4:	39ed1104 	addi	r7,r7,-19388
   10ad8:	9809883a 	mov	r4,r19
   10adc:	880b883a 	mov	r5,r17
   10ae0:	102f883a 	mov	r23,r2
   10ae4:	182d883a 	mov	r22,r3
   10ae8:	00139a80 	call	139a8 <__muldf3>
   10aec:	0194b7f4 	movhi	r6,21215
   10af0:	01cfebb4 	movhi	r7,16302
   10af4:	31bf6684 	addi	r6,r6,-614
   10af8:	39f78b44 	addi	r7,r7,-8659
   10afc:	1009883a 	mov	r4,r2
   10b00:	180b883a 	mov	r5,r3
   10b04:	00140c00 	call	140c0 <__subdf3>
   10b08:	980d883a 	mov	r6,r19
   10b0c:	880f883a 	mov	r7,r17
   10b10:	1009883a 	mov	r4,r2
   10b14:	180b883a 	mov	r5,r3
   10b18:	00139a80 	call	139a8 <__muldf3>
   10b1c:	01abdd74 	movhi	r6,44917
   10b20:	01cfed34 	movhi	r7,16308
   10b24:	31a69b44 	addi	r6,r6,-26003
   10b28:	39ec3c84 	addi	r7,r7,-20238
   10b2c:	1009883a 	mov	r4,r2
   10b30:	180b883a 	mov	r5,r3
   10b34:	00140c00 	call	140c0 <__subdf3>
   10b38:	980d883a 	mov	r6,r19
   10b3c:	880f883a 	mov	r7,r17
   10b40:	1009883a 	mov	r4,r2
   10b44:	180b883a 	mov	r5,r3
   10b48:	00139a80 	call	139a8 <__muldf3>
   10b4c:	01bf88f4 	movhi	r6,65059
   10b50:	01cfef34 	movhi	r7,16316
   10b54:	31859c44 	addi	r6,r6,5745
   10b58:	39dc7184 	addi	r7,r7,29126
   10b5c:	1009883a 	mov	r4,r2
   10b60:	180b883a 	mov	r5,r3
   10b64:	00140c00 	call	140c0 <__subdf3>
   10b68:	980d883a 	mov	r6,r19
   10b6c:	880f883a 	mov	r7,r17
   10b70:	1009883a 	mov	r4,r2
   10b74:	180b883a 	mov	r5,r3
   10b78:	00139a80 	call	139a8 <__muldf3>
   10b7c:	01a66674 	movhi	r6,39321
   10b80:	01cff2b4 	movhi	r7,16330
   10b84:	31baf104 	addi	r6,r6,-5180
   10b88:	39e66644 	addi	r7,r7,-26215
   10b8c:	1009883a 	mov	r4,r2
   10b90:	180b883a 	mov	r5,r3
   10b94:	00140c00 	call	140c0 <__subdf3>
   10b98:	1009883a 	mov	r4,r2
   10b9c:	980d883a 	mov	r6,r19
   10ba0:	880f883a 	mov	r7,r17
   10ba4:	180b883a 	mov	r5,r3
   10ba8:	00139a80 	call	139a8 <__muldf3>
   10bac:	013fffc4 	movi	r4,-1
   10bb0:	a1006826 	beq	r20,r4,10d54 <atan+0x45c>
   10bb4:	100d883a 	mov	r6,r2
   10bb8:	180f883a 	mov	r7,r3
   10bbc:	b809883a 	mov	r4,r23
   10bc0:	b00b883a 	mov	r5,r22
   10bc4:	00126440 	call	12644 <__adddf3>
   10bc8:	900d883a 	mov	r6,r18
   10bcc:	800f883a 	mov	r7,r16
   10bd0:	1009883a 	mov	r4,r2
   10bd4:	180b883a 	mov	r5,r3
   10bd8:	00139a80 	call	139a8 <__muldf3>
   10bdc:	a02890fa 	slli	r20,r20,3
   10be0:	1009883a 	mov	r4,r2
   10be4:	04400074 	movhi	r17,1
   10be8:	00800074 	movhi	r2,1
   10bec:	109b7604 	addi	r2,r2,28120
   10bf0:	8c5b7e04 	addi	r17,r17,28152
   10bf4:	8d23883a 	add	r17,r17,r20
   10bf8:	1529883a 	add	r20,r2,r20
   10bfc:	a1800017 	ldw	r6,0(r20)
   10c00:	a1c00117 	ldw	r7,4(r20)
   10c04:	180b883a 	mov	r5,r3
   10c08:	00140c00 	call	140c0 <__subdf3>
   10c0c:	900d883a 	mov	r6,r18
   10c10:	800f883a 	mov	r7,r16
   10c14:	1009883a 	mov	r4,r2
   10c18:	180b883a 	mov	r5,r3
   10c1c:	00140c00 	call	140c0 <__subdf3>
   10c20:	89000017 	ldw	r4,0(r17)
   10c24:	89400117 	ldw	r5,4(r17)
   10c28:	100d883a 	mov	r6,r2
   10c2c:	180f883a 	mov	r7,r3
   10c30:	00140c00 	call	140c0 <__subdf3>
   10c34:	a800080e 	bge	r21,zero,10c58 <atan+0x360>
   10c38:	18e0003c 	xorhi	r3,r3,32768
   10c3c:	00000606 	br	10c58 <atan+0x360>
   10c40:	203f4226 	beq	r4,zero,1094c <__alt_data_end+0xffff094c>
   10c44:	900d883a 	mov	r6,r18
   10c48:	800f883a 	mov	r7,r16
   10c4c:	9009883a 	mov	r4,r18
   10c50:	800b883a 	mov	r5,r16
   10c54:	00126440 	call	12644 <__adddf3>
   10c58:	dfc00817 	ldw	ra,32(sp)
   10c5c:	ddc00717 	ldw	r23,28(sp)
   10c60:	dd800617 	ldw	r22,24(sp)
   10c64:	dd400517 	ldw	r21,20(sp)
   10c68:	dd000417 	ldw	r20,16(sp)
   10c6c:	dcc00317 	ldw	r19,12(sp)
   10c70:	dc800217 	ldw	r18,8(sp)
   10c74:	dc400117 	ldw	r17,4(sp)
   10c78:	dc000017 	ldw	r16,0(sp)
   10c7c:	dec00904 	addi	sp,sp,36
   10c80:	f800283a 	ret
   10c84:	01a20034 	movhi	r6,34816
   10c88:	01df8e34 	movhi	r7,32312
   10c8c:	319d6704 	addi	r6,r6,30108
   10c90:	39f90f04 	addi	r7,r7,-7108
   10c94:	00126440 	call	12644 <__adddf3>
   10c98:	000d883a 	mov	r6,zero
   10c9c:	01cffc34 	movhi	r7,16368
   10ca0:	1009883a 	mov	r4,r2
   10ca4:	180b883a 	mov	r5,r3
   10ca8:	00137d80 	call	137d8 <__gedf2>
   10cac:	00bf340e 	bge	zero,r2,10980 <__alt_data_end+0xffff0980>
   10cb0:	9005883a 	mov	r2,r18
   10cb4:	8007883a 	mov	r3,r16
   10cb8:	003fe706 	br	10c58 <__alt_data_end+0xffff0c58>
   10cbc:	0010e800 	call	10e80 <fabs>
   10cc0:	1025883a 	mov	r18,r2
   10cc4:	008ffcf4 	movhi	r2,16371
   10cc8:	10bfffc4 	addi	r2,r2,-1
   10ccc:	1821883a 	mov	r16,r3
   10cd0:	14403016 	blt	r2,r17,10d94 <atan+0x49c>
   10cd4:	008ff9b4 	movhi	r2,16358
   10cd8:	10bfffc4 	addi	r2,r2,-1
   10cdc:	14405316 	blt	r2,r17,10e2c <atan+0x534>
   10ce0:	900d883a 	mov	r6,r18
   10ce4:	9009883a 	mov	r4,r18
   10ce8:	180f883a 	mov	r7,r3
   10cec:	180b883a 	mov	r5,r3
   10cf0:	00126440 	call	12644 <__adddf3>
   10cf4:	000d883a 	mov	r6,zero
   10cf8:	01cffc34 	movhi	r7,16368
   10cfc:	1009883a 	mov	r4,r2
   10d00:	180b883a 	mov	r5,r3
   10d04:	00140c00 	call	140c0 <__subdf3>
   10d08:	9009883a 	mov	r4,r18
   10d0c:	800b883a 	mov	r5,r16
   10d10:	000d883a 	mov	r6,zero
   10d14:	01d00034 	movhi	r7,16384
   10d18:	1027883a 	mov	r19,r2
   10d1c:	1823883a 	mov	r17,r3
   10d20:	00126440 	call	12644 <__adddf3>
   10d24:	100d883a 	mov	r6,r2
   10d28:	180f883a 	mov	r7,r3
   10d2c:	9809883a 	mov	r4,r19
   10d30:	880b883a 	mov	r5,r17
   10d34:	0012ef00 	call	12ef0 <__divdf3>
   10d38:	1025883a 	mov	r18,r2
   10d3c:	1821883a 	mov	r16,r3
   10d40:	0029883a 	mov	r20,zero
   10d44:	003f0f06 	br	10984 <__alt_data_end+0xffff0984>
   10d48:	00effe74 	movhi	r3,49145
   10d4c:	18c87ec4 	addi	r3,r3,8699
   10d50:	003fc106 	br	10c58 <__alt_data_end+0xffff0c58>
   10d54:	b809883a 	mov	r4,r23
   10d58:	b00b883a 	mov	r5,r22
   10d5c:	100d883a 	mov	r6,r2
   10d60:	180f883a 	mov	r7,r3
   10d64:	00126440 	call	12644 <__adddf3>
   10d68:	900d883a 	mov	r6,r18
   10d6c:	800f883a 	mov	r7,r16
   10d70:	1009883a 	mov	r4,r2
   10d74:	180b883a 	mov	r5,r3
   10d78:	00139a80 	call	139a8 <__muldf3>
   10d7c:	100d883a 	mov	r6,r2
   10d80:	180f883a 	mov	r7,r3
   10d84:	9009883a 	mov	r4,r18
   10d88:	800b883a 	mov	r5,r16
   10d8c:	00140c00 	call	140c0 <__subdf3>
   10d90:	003fb106 	br	10c58 <__alt_data_end+0xffff0c58>
   10d94:	009000f4 	movhi	r2,16387
   10d98:	109fffc4 	addi	r2,r2,32767
   10d9c:	14401a16 	blt	r2,r17,10e08 <atan+0x510>
   10da0:	9009883a 	mov	r4,r18
   10da4:	000d883a 	mov	r6,zero
   10da8:	01cffe34 	movhi	r7,16376
   10dac:	180b883a 	mov	r5,r3
   10db0:	00140c00 	call	140c0 <__subdf3>
   10db4:	9009883a 	mov	r4,r18
   10db8:	800b883a 	mov	r5,r16
   10dbc:	000d883a 	mov	r6,zero
   10dc0:	01cffe34 	movhi	r7,16376
   10dc4:	1027883a 	mov	r19,r2
   10dc8:	1823883a 	mov	r17,r3
   10dcc:	00139a80 	call	139a8 <__muldf3>
   10dd0:	000d883a 	mov	r6,zero
   10dd4:	01cffc34 	movhi	r7,16368
   10dd8:	1009883a 	mov	r4,r2
   10ddc:	180b883a 	mov	r5,r3
   10de0:	00126440 	call	12644 <__adddf3>
   10de4:	100d883a 	mov	r6,r2
   10de8:	180f883a 	mov	r7,r3
   10dec:	9809883a 	mov	r4,r19
   10df0:	880b883a 	mov	r5,r17
   10df4:	0012ef00 	call	12ef0 <__divdf3>
   10df8:	1025883a 	mov	r18,r2
   10dfc:	1821883a 	mov	r16,r3
   10e00:	05000084 	movi	r20,2
   10e04:	003edf06 	br	10984 <__alt_data_end+0xffff0984>
   10e08:	900d883a 	mov	r6,r18
   10e0c:	180f883a 	mov	r7,r3
   10e10:	0009883a 	mov	r4,zero
   10e14:	016ffc34 	movhi	r5,49136
   10e18:	0012ef00 	call	12ef0 <__divdf3>
   10e1c:	1025883a 	mov	r18,r2
   10e20:	1821883a 	mov	r16,r3
   10e24:	050000c4 	movi	r20,3
   10e28:	003ed606 	br	10984 <__alt_data_end+0xffff0984>
   10e2c:	9009883a 	mov	r4,r18
   10e30:	000d883a 	mov	r6,zero
   10e34:	01cffc34 	movhi	r7,16368
   10e38:	180b883a 	mov	r5,r3
   10e3c:	00140c00 	call	140c0 <__subdf3>
   10e40:	9009883a 	mov	r4,r18
   10e44:	800b883a 	mov	r5,r16
   10e48:	000d883a 	mov	r6,zero
   10e4c:	01cffc34 	movhi	r7,16368
   10e50:	1027883a 	mov	r19,r2
   10e54:	1823883a 	mov	r17,r3
   10e58:	00126440 	call	12644 <__adddf3>
   10e5c:	100d883a 	mov	r6,r2
   10e60:	180f883a 	mov	r7,r3
   10e64:	9809883a 	mov	r4,r19
   10e68:	880b883a 	mov	r5,r17
   10e6c:	0012ef00 	call	12ef0 <__divdf3>
   10e70:	1025883a 	mov	r18,r2
   10e74:	1821883a 	mov	r16,r3
   10e78:	05000044 	movi	r20,1
   10e7c:	003ec106 	br	10984 <__alt_data_end+0xffff0984>

00010e80 <fabs>:
   10e80:	00e00034 	movhi	r3,32768
   10e84:	18ffffc4 	addi	r3,r3,-1
   10e88:	2005883a 	mov	r2,r4
   10e8c:	28c6703a 	and	r3,r5,r3
   10e90:	f800283a 	ret

00010e94 <sqrt>:
   10e94:	defff104 	addi	sp,sp,-60
   10e98:	dd000d15 	stw	r20,52(sp)
   10e9c:	05000074 	movhi	r20,1
   10ea0:	dcc00c15 	stw	r19,48(sp)
   10ea4:	dc800b15 	stw	r18,44(sp)
   10ea8:	dc400a15 	stw	r17,40(sp)
   10eac:	dc000915 	stw	r16,36(sp)
   10eb0:	dfc00e15 	stw	ra,56(sp)
   10eb4:	a51c3d04 	addi	r20,r20,28916
   10eb8:	2027883a 	mov	r19,r4
   10ebc:	2825883a 	mov	r18,r5
   10ec0:	0010fc40 	call	10fc4 <__ieee754_sqrt>
   10ec4:	1821883a 	mov	r16,r3
   10ec8:	a0c00017 	ldw	r3,0(r20)
   10ecc:	1023883a 	mov	r17,r2
   10ed0:	00bfffc4 	movi	r2,-1
   10ed4:	18800a26 	beq	r3,r2,10f00 <sqrt+0x6c>
   10ed8:	9809883a 	mov	r4,r19
   10edc:	900b883a 	mov	r5,r18
   10ee0:	001124c0 	call	1124c <__fpclassifyd>
   10ee4:	10000626 	beq	r2,zero,10f00 <sqrt+0x6c>
   10ee8:	000d883a 	mov	r6,zero
   10eec:	000f883a 	mov	r7,zero
   10ef0:	9809883a 	mov	r4,r19
   10ef4:	900b883a 	mov	r5,r18
   10ef8:	00138b40 	call	138b4 <__ledf2>
   10efc:	10000a16 	blt	r2,zero,10f28 <sqrt+0x94>
   10f00:	8805883a 	mov	r2,r17
   10f04:	8007883a 	mov	r3,r16
   10f08:	dfc00e17 	ldw	ra,56(sp)
   10f0c:	dd000d17 	ldw	r20,52(sp)
   10f10:	dcc00c17 	ldw	r19,48(sp)
   10f14:	dc800b17 	ldw	r18,44(sp)
   10f18:	dc400a17 	ldw	r17,40(sp)
   10f1c:	dc000917 	ldw	r16,36(sp)
   10f20:	dec00f04 	addi	sp,sp,60
   10f24:	f800283a 	ret
   10f28:	00800044 	movi	r2,1
   10f2c:	d8800015 	stw	r2,0(sp)
   10f30:	a4000017 	ldw	r16,0(r20)
   10f34:	00800074 	movhi	r2,1
   10f38:	109b8604 	addi	r2,r2,28184
   10f3c:	d8800115 	stw	r2,4(sp)
   10f40:	d8000815 	stw	zero,32(sp)
   10f44:	dcc00415 	stw	r19,16(sp)
   10f48:	dc800515 	stw	r18,20(sp)
   10f4c:	dcc00215 	stw	r19,8(sp)
   10f50:	dc800315 	stw	r18,12(sp)
   10f54:	80000a1e 	bne	r16,zero,10f80 <sqrt+0xec>
   10f58:	d8000615 	stw	zero,24(sp)
   10f5c:	d8000715 	stw	zero,28(sp)
   10f60:	d809883a 	mov	r4,sp
   10f64:	00112c00 	call	112c0 <matherr>
   10f68:	10000e26 	beq	r2,zero,10fa4 <sqrt+0x110>
   10f6c:	d8800817 	ldw	r2,32(sp)
   10f70:	1000101e 	bne	r2,zero,10fb4 <sqrt+0x120>
   10f74:	d8800617 	ldw	r2,24(sp)
   10f78:	d8c00717 	ldw	r3,28(sp)
   10f7c:	003fe206 	br	10f08 <__alt_data_end+0xffff0f08>
   10f80:	000d883a 	mov	r6,zero
   10f84:	000f883a 	mov	r7,zero
   10f88:	0009883a 	mov	r4,zero
   10f8c:	000b883a 	mov	r5,zero
   10f90:	0012ef00 	call	12ef0 <__divdf3>
   10f94:	d8800615 	stw	r2,24(sp)
   10f98:	d8c00715 	stw	r3,28(sp)
   10f9c:	00800084 	movi	r2,2
   10fa0:	80bfef1e 	bne	r16,r2,10f60 <__alt_data_end+0xffff0f60>
   10fa4:	0014e580 	call	14e58 <__errno>
   10fa8:	00c00844 	movi	r3,33
   10fac:	10c00015 	stw	r3,0(r2)
   10fb0:	003fee06 	br	10f6c <__alt_data_end+0xffff0f6c>
   10fb4:	0014e580 	call	14e58 <__errno>
   10fb8:	d8c00817 	ldw	r3,32(sp)
   10fbc:	10c00015 	stw	r3,0(r2)
   10fc0:	003fec06 	br	10f74 <__alt_data_end+0xffff0f74>

00010fc4 <__ieee754_sqrt>:
   10fc4:	defffd04 	addi	sp,sp,-12
   10fc8:	dc400115 	stw	r17,4(sp)
   10fcc:	dc000015 	stw	r16,0(sp)
   10fd0:	dfc00215 	stw	ra,8(sp)
   10fd4:	28dffc2c 	andhi	r3,r5,32752
   10fd8:	009ffc34 	movhi	r2,32752
   10fdc:	2821883a 	mov	r16,r5
   10fe0:	2023883a 	mov	r17,r4
   10fe4:	200d883a 	mov	r6,r4
   10fe8:	18807b26 	beq	r3,r2,111d8 <__ieee754_sqrt+0x214>
   10fec:	01405f0e 	bge	zero,r5,1116c <__ieee754_sqrt+0x1a8>
   10ff0:	2815d53a 	srai	r10,r5,20
   10ff4:	50006a26 	beq	r10,zero,111a0 <__ieee754_sqrt+0x1dc>
   10ff8:	00c00434 	movhi	r3,16
   10ffc:	52bf0044 	addi	r10,r10,-1023
   11000:	18ffffc4 	addi	r3,r3,-1
   11004:	80c6703a 	and	r3,r16,r3
   11008:	5080004c 	andi	r2,r10,1
   1100c:	18c00434 	orhi	r3,r3,16
   11010:	1000511e 	bne	r2,zero,11158 <__ieee754_sqrt+0x194>
   11014:	3004d7fa 	srli	r2,r6,31
   11018:	5015d07a 	srai	r10,r10,1
   1101c:	18c7883a 	add	r3,r3,r3
   11020:	10c5883a 	add	r2,r2,r3
   11024:	01400584 	movi	r5,22
   11028:	3187883a 	add	r3,r6,r6
   1102c:	0013883a 	mov	r9,zero
   11030:	000f883a 	mov	r7,zero
   11034:	01000834 	movhi	r4,32
   11038:	390d883a 	add	r6,r7,r4
   1103c:	1810d7fa 	srli	r8,r3,31
   11040:	297fffc4 	addi	r5,r5,-1
   11044:	11800316 	blt	r2,r6,11054 <__ieee754_sqrt+0x90>
   11048:	1185c83a 	sub	r2,r2,r6
   1104c:	310f883a 	add	r7,r6,r4
   11050:	4913883a 	add	r9,r9,r4
   11054:	1085883a 	add	r2,r2,r2
   11058:	4085883a 	add	r2,r8,r2
   1105c:	18c7883a 	add	r3,r3,r3
   11060:	2008d07a 	srli	r4,r4,1
   11064:	283ff41e 	bne	r5,zero,11038 <__alt_data_end+0xffff1038>
   11068:	01200034 	movhi	r4,32768
   1106c:	01800804 	movi	r6,32
   11070:	0011883a 	mov	r8,zero
   11074:	0019883a 	mov	r12,zero
   11078:	201b883a 	mov	r13,r4
   1107c:	00000806 	br	110a0 <__ieee754_sqrt+0xdc>
   11080:	38801726 	beq	r7,r2,110e0 <__ieee754_sqrt+0x11c>
   11084:	180ad7fa 	srli	r5,r3,31
   11088:	1085883a 	add	r2,r2,r2
   1108c:	31bfffc4 	addi	r6,r6,-1
   11090:	2885883a 	add	r2,r5,r2
   11094:	18c7883a 	add	r3,r3,r3
   11098:	2008d07a 	srli	r4,r4,1
   1109c:	30001726 	beq	r6,zero,110fc <__ieee754_sqrt+0x138>
   110a0:	230b883a 	add	r5,r4,r12
   110a4:	38bff60e 	bge	r7,r2,11080 <__alt_data_end+0xffff1080>
   110a8:	2ae0002c 	andhi	r11,r5,32768
   110ac:	2919883a 	add	r12,r5,r4
   110b0:	5b400826 	beq	r11,r13,110d4 <__ieee754_sqrt+0x110>
   110b4:	3817883a 	mov	r11,r7
   110b8:	11c5c83a 	sub	r2,r2,r7
   110bc:	1940012e 	bgeu	r3,r5,110c4 <__ieee754_sqrt+0x100>
   110c0:	10bfffc4 	addi	r2,r2,-1
   110c4:	1947c83a 	sub	r3,r3,r5
   110c8:	4111883a 	add	r8,r8,r4
   110cc:	580f883a 	mov	r7,r11
   110d0:	003fec06 	br	11084 <__alt_data_end+0xffff1084>
   110d4:	603ff716 	blt	r12,zero,110b4 <__alt_data_end+0xffff10b4>
   110d8:	3ac00044 	addi	r11,r7,1
   110dc:	003ff606 	br	110b8 <__alt_data_end+0xffff10b8>
   110e0:	19401936 	bltu	r3,r5,11148 <__ieee754_sqrt+0x184>
   110e4:	2ae0002c 	andhi	r11,r5,32768
   110e8:	2919883a 	add	r12,r5,r4
   110ec:	5b404526 	beq	r11,r13,11204 <__ieee754_sqrt+0x240>
   110f0:	1017883a 	mov	r11,r2
   110f4:	0005883a 	mov	r2,zero
   110f8:	003ff206 	br	110c4 <__alt_data_end+0xffff10c4>
   110fc:	10c4b03a 	or	r2,r2,r3
   11100:	10000426 	beq	r2,zero,11114 <__ieee754_sqrt+0x150>
   11104:	00bfffc4 	movi	r2,-1
   11108:	40804026 	beq	r8,r2,1120c <__ieee754_sqrt+0x248>
   1110c:	4080004c 	andi	r2,r8,1
   11110:	4091883a 	add	r8,r8,r2
   11114:	4004d07a 	srli	r2,r8,1
   11118:	4807d07a 	srai	r3,r9,1
   1111c:	010ff834 	movhi	r4,16352
   11120:	4a40004c 	andi	r9,r9,1
   11124:	1909883a 	add	r4,r3,r4
   11128:	4800091e 	bne	r9,zero,11150 <__ieee754_sqrt+0x18c>
   1112c:	5006953a 	slli	r3,r10,20
   11130:	1907883a 	add	r3,r3,r4
   11134:	dfc00217 	ldw	ra,8(sp)
   11138:	dc400117 	ldw	r17,4(sp)
   1113c:	dc000017 	ldw	r16,0(sp)
   11140:	dec00304 	addi	sp,sp,12
   11144:	f800283a 	ret
   11148:	3805883a 	mov	r2,r7
   1114c:	003fcd06 	br	11084 <__alt_data_end+0xffff1084>
   11150:	10a00034 	orhi	r2,r2,32768
   11154:	003ff506 	br	1112c <__alt_data_end+0xffff112c>
   11158:	3004d7fa 	srli	r2,r6,31
   1115c:	18c7883a 	add	r3,r3,r3
   11160:	318d883a 	add	r6,r6,r6
   11164:	10c7883a 	add	r3,r2,r3
   11168:	003faa06 	br	11014 <__alt_data_end+0xffff1014>
   1116c:	00a00034 	movhi	r2,32768
   11170:	10bfffc4 	addi	r2,r2,-1
   11174:	2884703a 	and	r2,r5,r2
   11178:	1104b03a 	or	r2,r2,r4
   1117c:	10001e26 	beq	r2,zero,111f8 <__ieee754_sqrt+0x234>
   11180:	2800291e 	bne	r5,zero,11228 <__ieee754_sqrt+0x264>
   11184:	0015883a 	mov	r10,zero
   11188:	3020d2fa 	srli	r16,r6,11
   1118c:	52bffac4 	addi	r10,r10,-21
   11190:	300c957a 	slli	r6,r6,21
   11194:	803ffc26 	beq	r16,zero,11188 <__alt_data_end+0xffff1188>
   11198:	8080042c 	andhi	r2,r16,16
   1119c:	10001e1e 	bne	r2,zero,11218 <__ieee754_sqrt+0x254>
   111a0:	0005883a 	mov	r2,zero
   111a4:	00000106 	br	111ac <__ieee754_sqrt+0x1e8>
   111a8:	1805883a 	mov	r2,r3
   111ac:	8421883a 	add	r16,r16,r16
   111b0:	8100042c 	andhi	r4,r16,16
   111b4:	10c00044 	addi	r3,r2,1
   111b8:	203ffb26 	beq	r4,zero,111a8 <__alt_data_end+0xffff11a8>
   111bc:	01000804 	movi	r4,32
   111c0:	20c9c83a 	sub	r4,r4,r3
   111c4:	3108d83a 	srl	r4,r6,r4
   111c8:	5095c83a 	sub	r10,r10,r2
   111cc:	30cc983a 	sll	r6,r6,r3
   111d0:	2420b03a 	or	r16,r4,r16
   111d4:	003f8806 	br	10ff8 <__alt_data_end+0xffff0ff8>
   111d8:	280f883a 	mov	r7,r5
   111dc:	00139a80 	call	139a8 <__muldf3>
   111e0:	880d883a 	mov	r6,r17
   111e4:	800f883a 	mov	r7,r16
   111e8:	1009883a 	mov	r4,r2
   111ec:	180b883a 	mov	r5,r3
   111f0:	00126440 	call	12644 <__adddf3>
   111f4:	003fcf06 	br	11134 <__alt_data_end+0xffff1134>
   111f8:	2005883a 	mov	r2,r4
   111fc:	2807883a 	mov	r3,r5
   11200:	003fcc06 	br	11134 <__alt_data_end+0xffff1134>
   11204:	603fba16 	blt	r12,zero,110f0 <__alt_data_end+0xffff10f0>
   11208:	003fb306 	br	110d8 <__alt_data_end+0xffff10d8>
   1120c:	4a400044 	addi	r9,r9,1
   11210:	0005883a 	mov	r2,zero
   11214:	003fc006 	br	11118 <__alt_data_end+0xffff1118>
   11218:	01000804 	movi	r4,32
   1121c:	00bfffc4 	movi	r2,-1
   11220:	0007883a 	mov	r3,zero
   11224:	003fe706 	br	111c4 <__alt_data_end+0xffff11c4>
   11228:	200d883a 	mov	r6,r4
   1122c:	280f883a 	mov	r7,r5
   11230:	00140c00 	call	140c0 <__subdf3>
   11234:	100d883a 	mov	r6,r2
   11238:	180f883a 	mov	r7,r3
   1123c:	1009883a 	mov	r4,r2
   11240:	180b883a 	mov	r5,r3
   11244:	0012ef00 	call	12ef0 <__divdf3>
   11248:	003fba06 	br	11134 <__alt_data_end+0xffff1134>

0001124c <__fpclassifyd>:
   1124c:	00a00034 	movhi	r2,32768
   11250:	10bfffc4 	addi	r2,r2,-1
   11254:	2884703a 	and	r2,r5,r2
   11258:	10000726 	beq	r2,zero,11278 <__fpclassifyd+0x2c>
   1125c:	00fffc34 	movhi	r3,65520
   11260:	019ff834 	movhi	r6,32736
   11264:	28c7883a 	add	r3,r5,r3
   11268:	31bfffc4 	addi	r6,r6,-1
   1126c:	30c00536 	bltu	r6,r3,11284 <__fpclassifyd+0x38>
   11270:	00800104 	movi	r2,4
   11274:	f800283a 	ret
   11278:	2000021e 	bne	r4,zero,11284 <__fpclassifyd+0x38>
   1127c:	00800084 	movi	r2,2
   11280:	f800283a 	ret
   11284:	00dffc34 	movhi	r3,32752
   11288:	019ff834 	movhi	r6,32736
   1128c:	28cb883a 	add	r5,r5,r3
   11290:	31bfffc4 	addi	r6,r6,-1
   11294:	317ff62e 	bgeu	r6,r5,11270 <__alt_data_end+0xffff1270>
   11298:	01400434 	movhi	r5,16
   1129c:	297fffc4 	addi	r5,r5,-1
   112a0:	28800236 	bltu	r5,r2,112ac <__fpclassifyd+0x60>
   112a4:	008000c4 	movi	r2,3
   112a8:	f800283a 	ret
   112ac:	10c00226 	beq	r2,r3,112b8 <__fpclassifyd+0x6c>
   112b0:	0005883a 	mov	r2,zero
   112b4:	f800283a 	ret
   112b8:	2005003a 	cmpeq	r2,r4,zero
   112bc:	f800283a 	ret

000112c0 <matherr>:
   112c0:	0005883a 	mov	r2,zero
   112c4:	f800283a 	ret

000112c8 <__addsf3>:
   112c8:	defffc04 	addi	sp,sp,-16
   112cc:	2004d7fa 	srli	r2,r4,31
   112d0:	280cd5fa 	srli	r6,r5,23
   112d4:	dc000015 	stw	r16,0(sp)
   112d8:	00c02034 	movhi	r3,128
   112dc:	2020d5fa 	srli	r16,r4,23
   112e0:	280ed7fa 	srli	r7,r5,31
   112e4:	18ffffc4 	addi	r3,r3,-1
   112e8:	dc400115 	stw	r17,4(sp)
   112ec:	1908703a 	and	r4,r3,r4
   112f0:	194a703a 	and	r5,r3,r5
   112f4:	dfc00315 	stw	ra,12(sp)
   112f8:	dc800215 	stw	r18,8(sp)
   112fc:	14403fcc 	andi	r17,r2,255
   11300:	84003fcc 	andi	r16,r16,255
   11304:	200890fa 	slli	r4,r4,3
   11308:	31803fcc 	andi	r6,r6,255
   1130c:	280a90fa 	slli	r5,r5,3
   11310:	89c05026 	beq	r17,r7,11454 <__addsf3+0x18c>
   11314:	8185c83a 	sub	r2,r16,r6
   11318:	00807a0e 	bge	zero,r2,11504 <__addsf3+0x23c>
   1131c:	30001e1e 	bne	r6,zero,11398 <__addsf3+0xd0>
   11320:	28006d1e 	bne	r5,zero,114d8 <__addsf3+0x210>
   11324:	208001cc 	andi	r2,r4,7
   11328:	10000426 	beq	r2,zero,1133c <__addsf3+0x74>
   1132c:	208003cc 	andi	r2,r4,15
   11330:	00c00104 	movi	r3,4
   11334:	10c00126 	beq	r2,r3,1133c <__addsf3+0x74>
   11338:	20c9883a 	add	r4,r4,r3
   1133c:	2081002c 	andhi	r2,r4,1024
   11340:	10003926 	beq	r2,zero,11428 <__addsf3+0x160>
   11344:	84000044 	addi	r16,r16,1
   11348:	00803fc4 	movi	r2,255
   1134c:	80807826 	beq	r16,r2,11530 <__addsf3+0x268>
   11350:	200891ba 	slli	r4,r4,6
   11354:	8805883a 	mov	r2,r17
   11358:	2008d27a 	srli	r4,r4,9
   1135c:	84003fcc 	andi	r16,r16,255
   11360:	800695fa 	slli	r3,r16,23
   11364:	10803fcc 	andi	r2,r2,255
   11368:	04002034 	movhi	r16,128
   1136c:	843fffc4 	addi	r16,r16,-1
   11370:	100497fa 	slli	r2,r2,31
   11374:	2408703a 	and	r4,r4,r16
   11378:	20e0b03a 	or	r16,r4,r3
   1137c:	8084b03a 	or	r2,r16,r2
   11380:	dfc00317 	ldw	ra,12(sp)
   11384:	dc800217 	ldw	r18,8(sp)
   11388:	dc400117 	ldw	r17,4(sp)
   1138c:	dc000017 	ldw	r16,0(sp)
   11390:	dec00404 	addi	sp,sp,16
   11394:	f800283a 	ret
   11398:	00c03fc4 	movi	r3,255
   1139c:	80ffe126 	beq	r16,r3,11324 <__alt_data_end+0xffff1324>
   113a0:	29410034 	orhi	r5,r5,1024
   113a4:	00c006c4 	movi	r3,27
   113a8:	18807516 	blt	r3,r2,11580 <__addsf3+0x2b8>
   113ac:	00c00804 	movi	r3,32
   113b0:	1887c83a 	sub	r3,r3,r2
   113b4:	28c6983a 	sll	r3,r5,r3
   113b8:	288ad83a 	srl	r5,r5,r2
   113bc:	1804c03a 	cmpne	r2,r3,zero
   113c0:	288ab03a 	or	r5,r5,r2
   113c4:	2149c83a 	sub	r4,r4,r5
   113c8:	2081002c 	andhi	r2,r4,1024
   113cc:	10001426 	beq	r2,zero,11420 <__addsf3+0x158>
   113d0:	04810034 	movhi	r18,1024
   113d4:	94bfffc4 	addi	r18,r18,-1
   113d8:	24a4703a 	and	r18,r4,r18
   113dc:	9009883a 	mov	r4,r18
   113e0:	0014c400 	call	14c40 <__clzsi2>
   113e4:	10bffec4 	addi	r2,r2,-5
   113e8:	90a4983a 	sll	r18,r18,r2
   113ec:	14005416 	blt	r2,r16,11540 <__addsf3+0x278>
   113f0:	1405c83a 	sub	r2,r2,r16
   113f4:	11000044 	addi	r4,r2,1
   113f8:	00800804 	movi	r2,32
   113fc:	1105c83a 	sub	r2,r2,r4
   11400:	9084983a 	sll	r2,r18,r2
   11404:	9124d83a 	srl	r18,r18,r4
   11408:	0021883a 	mov	r16,zero
   1140c:	1008c03a 	cmpne	r4,r2,zero
   11410:	9108b03a 	or	r4,r18,r4
   11414:	003fc306 	br	11324 <__alt_data_end+0xffff1324>
   11418:	1000db26 	beq	r2,zero,11788 <__addsf3+0x4c0>
   1141c:	1009883a 	mov	r4,r2
   11420:	208001cc 	andi	r2,r4,7
   11424:	103fc11e 	bne	r2,zero,1132c <__alt_data_end+0xffff132c>
   11428:	2006d0fa 	srli	r3,r4,3
   1142c:	01003fc4 	movi	r4,255
   11430:	8805883a 	mov	r2,r17
   11434:	8100241e 	bne	r16,r4,114c8 <__addsf3+0x200>
   11438:	18006e26 	beq	r3,zero,115f4 <__addsf3+0x32c>
   1143c:	19001034 	orhi	r4,r3,64
   11440:	00c02034 	movhi	r3,128
   11444:	18ffffc4 	addi	r3,r3,-1
   11448:	043fffc4 	movi	r16,-1
   1144c:	20c8703a 	and	r4,r4,r3
   11450:	003fc206 	br	1135c <__alt_data_end+0xffff135c>
   11454:	8187c83a 	sub	r3,r16,r6
   11458:	00c03e0e 	bge	zero,r3,11554 <__addsf3+0x28c>
   1145c:	30002326 	beq	r6,zero,114ec <__addsf3+0x224>
   11460:	01803fc4 	movi	r6,255
   11464:	81bfaf26 	beq	r16,r6,11324 <__alt_data_end+0xffff1324>
   11468:	29410034 	orhi	r5,r5,1024
   1146c:	018006c4 	movi	r6,27
   11470:	30c07416 	blt	r6,r3,11644 <__addsf3+0x37c>
   11474:	01800804 	movi	r6,32
   11478:	30cdc83a 	sub	r6,r6,r3
   1147c:	298c983a 	sll	r6,r5,r6
   11480:	28cad83a 	srl	r5,r5,r3
   11484:	3006c03a 	cmpne	r3,r6,zero
   11488:	28cab03a 	or	r5,r5,r3
   1148c:	2149883a 	add	r4,r4,r5
   11490:	20c1002c 	andhi	r3,r4,1024
   11494:	183fe226 	beq	r3,zero,11420 <__alt_data_end+0xffff1420>
   11498:	84000044 	addi	r16,r16,1
   1149c:	00c03fc4 	movi	r3,255
   114a0:	80c05426 	beq	r16,r3,115f4 <__addsf3+0x32c>
   114a4:	00bf0034 	movhi	r2,64512
   114a8:	10bfffc4 	addi	r2,r2,-1
   114ac:	20c0004c 	andi	r3,r4,1
   114b0:	2088703a 	and	r4,r4,r2
   114b4:	2008d07a 	srli	r4,r4,1
   114b8:	20c8b03a 	or	r4,r4,r3
   114bc:	003f9906 	br	11324 <__alt_data_end+0xffff1324>
   114c0:	0007883a 	mov	r3,zero
   114c4:	0005883a 	mov	r2,zero
   114c8:	01002034 	movhi	r4,128
   114cc:	213fffc4 	addi	r4,r4,-1
   114d0:	1908703a 	and	r4,r3,r4
   114d4:	003fa106 	br	1135c <__alt_data_end+0xffff135c>
   114d8:	10bfffc4 	addi	r2,r2,-1
   114dc:	103fb926 	beq	r2,zero,113c4 <__alt_data_end+0xffff13c4>
   114e0:	00c03fc4 	movi	r3,255
   114e4:	80ffaf1e 	bne	r16,r3,113a4 <__alt_data_end+0xffff13a4>
   114e8:	003f8e06 	br	11324 <__alt_data_end+0xffff1324>
   114ec:	283f8d26 	beq	r5,zero,11324 <__alt_data_end+0xffff1324>
   114f0:	18ffffc4 	addi	r3,r3,-1
   114f4:	183fe526 	beq	r3,zero,1148c <__alt_data_end+0xffff148c>
   114f8:	01803fc4 	movi	r6,255
   114fc:	81bfdb1e 	bne	r16,r6,1146c <__alt_data_end+0xffff146c>
   11500:	003f8806 	br	11324 <__alt_data_end+0xffff1324>
   11504:	1000201e 	bne	r2,zero,11588 <__addsf3+0x2c0>
   11508:	80800044 	addi	r2,r16,1
   1150c:	10803fcc 	andi	r2,r2,255
   11510:	01800044 	movi	r6,1
   11514:	3080450e 	bge	r6,r2,1162c <__addsf3+0x364>
   11518:	2165c83a 	sub	r18,r4,r5
   1151c:	90c1002c 	andhi	r3,r18,1024
   11520:	18002b26 	beq	r3,zero,115d0 <__addsf3+0x308>
   11524:	2925c83a 	sub	r18,r5,r4
   11528:	3823883a 	mov	r17,r7
   1152c:	003fab06 	br	113dc <__alt_data_end+0xffff13dc>
   11530:	8805883a 	mov	r2,r17
   11534:	043fffc4 	movi	r16,-1
   11538:	0009883a 	mov	r4,zero
   1153c:	003f8706 	br	1135c <__alt_data_end+0xffff135c>
   11540:	013f0034 	movhi	r4,64512
   11544:	213fffc4 	addi	r4,r4,-1
   11548:	80a1c83a 	sub	r16,r16,r2
   1154c:	9108703a 	and	r4,r18,r4
   11550:	003f7406 	br	11324 <__alt_data_end+0xffff1324>
   11554:	1800411e 	bne	r3,zero,1165c <__addsf3+0x394>
   11558:	80c00044 	addi	r3,r16,1
   1155c:	19c03fcc 	andi	r7,r3,255
   11560:	01800044 	movi	r6,1
   11564:	31c0260e 	bge	r6,r7,11600 <__addsf3+0x338>
   11568:	01803fc4 	movi	r6,255
   1156c:	19802126 	beq	r3,r6,115f4 <__addsf3+0x32c>
   11570:	2149883a 	add	r4,r4,r5
   11574:	2008d07a 	srli	r4,r4,1
   11578:	1821883a 	mov	r16,r3
   1157c:	003f6906 	br	11324 <__alt_data_end+0xffff1324>
   11580:	01400044 	movi	r5,1
   11584:	003f8f06 	br	113c4 <__alt_data_end+0xffff13c4>
   11588:	8000151e 	bne	r16,zero,115e0 <__addsf3+0x318>
   1158c:	20002f26 	beq	r4,zero,1164c <__addsf3+0x384>
   11590:	0084303a 	nor	r2,zero,r2
   11594:	10000a26 	beq	r2,zero,115c0 <__addsf3+0x2f8>
   11598:	00c03fc4 	movi	r3,255
   1159c:	30c02b26 	beq	r6,r3,1164c <__addsf3+0x384>
   115a0:	00c006c4 	movi	r3,27
   115a4:	18806d16 	blt	r3,r2,1175c <__addsf3+0x494>
   115a8:	00c00804 	movi	r3,32
   115ac:	1887c83a 	sub	r3,r3,r2
   115b0:	20c6983a 	sll	r3,r4,r3
   115b4:	2084d83a 	srl	r2,r4,r2
   115b8:	1808c03a 	cmpne	r4,r3,zero
   115bc:	1108b03a 	or	r4,r2,r4
   115c0:	2909c83a 	sub	r4,r5,r4
   115c4:	3021883a 	mov	r16,r6
   115c8:	3823883a 	mov	r17,r7
   115cc:	003f7e06 	br	113c8 <__alt_data_end+0xffff13c8>
   115d0:	903f821e 	bne	r18,zero,113dc <__alt_data_end+0xffff13dc>
   115d4:	0005883a 	mov	r2,zero
   115d8:	0021883a 	mov	r16,zero
   115dc:	003fba06 	br	114c8 <__alt_data_end+0xffff14c8>
   115e0:	00c03fc4 	movi	r3,255
   115e4:	30c01926 	beq	r6,r3,1164c <__addsf3+0x384>
   115e8:	0085c83a 	sub	r2,zero,r2
   115ec:	21010034 	orhi	r4,r4,1024
   115f0:	003feb06 	br	115a0 <__alt_data_end+0xffff15a0>
   115f4:	043fffc4 	movi	r16,-1
   115f8:	0009883a 	mov	r4,zero
   115fc:	003f5706 	br	1135c <__alt_data_end+0xffff135c>
   11600:	80004a1e 	bne	r16,zero,1172c <__addsf3+0x464>
   11604:	20005926 	beq	r4,zero,1176c <__addsf3+0x4a4>
   11608:	283f4626 	beq	r5,zero,11324 <__alt_data_end+0xffff1324>
   1160c:	2149883a 	add	r4,r4,r5
   11610:	2081002c 	andhi	r2,r4,1024
   11614:	103f8226 	beq	r2,zero,11420 <__alt_data_end+0xffff1420>
   11618:	00bf0034 	movhi	r2,64512
   1161c:	10bfffc4 	addi	r2,r2,-1
   11620:	3021883a 	mov	r16,r6
   11624:	2088703a 	and	r4,r4,r2
   11628:	003f3e06 	br	11324 <__alt_data_end+0xffff1324>
   1162c:	8000121e 	bne	r16,zero,11678 <__addsf3+0x3b0>
   11630:	2000261e 	bne	r4,zero,116cc <__addsf3+0x404>
   11634:	283fa226 	beq	r5,zero,114c0 <__alt_data_end+0xffff14c0>
   11638:	2809883a 	mov	r4,r5
   1163c:	3823883a 	mov	r17,r7
   11640:	003f3806 	br	11324 <__alt_data_end+0xffff1324>
   11644:	01400044 	movi	r5,1
   11648:	003f9006 	br	1148c <__alt_data_end+0xffff148c>
   1164c:	2809883a 	mov	r4,r5
   11650:	3021883a 	mov	r16,r6
   11654:	3823883a 	mov	r17,r7
   11658:	003f3206 	br	11324 <__alt_data_end+0xffff1324>
   1165c:	80000c1e 	bne	r16,zero,11690 <__addsf3+0x3c8>
   11660:	20002f26 	beq	r4,zero,11720 <__addsf3+0x458>
   11664:	00c6303a 	nor	r3,zero,r3
   11668:	18002b1e 	bne	r3,zero,11718 <__addsf3+0x450>
   1166c:	2149883a 	add	r4,r4,r5
   11670:	3021883a 	mov	r16,r6
   11674:	003f8606 	br	11490 <__alt_data_end+0xffff1490>
   11678:	20001b1e 	bne	r4,zero,116e8 <__addsf3+0x420>
   1167c:	28003926 	beq	r5,zero,11764 <__addsf3+0x49c>
   11680:	2809883a 	mov	r4,r5
   11684:	3823883a 	mov	r17,r7
   11688:	04003fc4 	movi	r16,255
   1168c:	003f2506 	br	11324 <__alt_data_end+0xffff1324>
   11690:	01c03fc4 	movi	r7,255
   11694:	31c02226 	beq	r6,r7,11720 <__addsf3+0x458>
   11698:	00c7c83a 	sub	r3,zero,r3
   1169c:	21010034 	orhi	r4,r4,1024
   116a0:	01c006c4 	movi	r7,27
   116a4:	38c03616 	blt	r7,r3,11780 <__addsf3+0x4b8>
   116a8:	01c00804 	movi	r7,32
   116ac:	38cfc83a 	sub	r7,r7,r3
   116b0:	21ce983a 	sll	r7,r4,r7
   116b4:	20c6d83a 	srl	r3,r4,r3
   116b8:	3808c03a 	cmpne	r4,r7,zero
   116bc:	1906b03a 	or	r3,r3,r4
   116c0:	1949883a 	add	r4,r3,r5
   116c4:	3021883a 	mov	r16,r6
   116c8:	003f7106 	br	11490 <__alt_data_end+0xffff1490>
   116cc:	283f1526 	beq	r5,zero,11324 <__alt_data_end+0xffff1324>
   116d0:	2145c83a 	sub	r2,r4,r5
   116d4:	10c1002c 	andhi	r3,r2,1024
   116d8:	183f4f26 	beq	r3,zero,11418 <__alt_data_end+0xffff1418>
   116dc:	2909c83a 	sub	r4,r5,r4
   116e0:	3823883a 	mov	r17,r7
   116e4:	003f0f06 	br	11324 <__alt_data_end+0xffff1324>
   116e8:	28001a26 	beq	r5,zero,11754 <__addsf3+0x48c>
   116ec:	2008d0fa 	srli	r4,r4,3
   116f0:	2080102c 	andhi	r2,r4,64
   116f4:	10000526 	beq	r2,zero,1170c <__addsf3+0x444>
   116f8:	280ad0fa 	srli	r5,r5,3
   116fc:	2880102c 	andhi	r2,r5,64
   11700:	1000021e 	bne	r2,zero,1170c <__addsf3+0x444>
   11704:	2809883a 	mov	r4,r5
   11708:	3823883a 	mov	r17,r7
   1170c:	200890fa 	slli	r4,r4,3
   11710:	04003fc4 	movi	r16,255
   11714:	003f0306 	br	11324 <__alt_data_end+0xffff1324>
   11718:	01c03fc4 	movi	r7,255
   1171c:	31ffe01e 	bne	r6,r7,116a0 <__alt_data_end+0xffff16a0>
   11720:	2809883a 	mov	r4,r5
   11724:	3021883a 	mov	r16,r6
   11728:	003efe06 	br	11324 <__alt_data_end+0xffff1324>
   1172c:	20001126 	beq	r4,zero,11774 <__addsf3+0x4ac>
   11730:	28000826 	beq	r5,zero,11754 <__addsf3+0x48c>
   11734:	2008d0fa 	srli	r4,r4,3
   11738:	2080102c 	andhi	r2,r4,64
   1173c:	103ff326 	beq	r2,zero,1170c <__alt_data_end+0xffff170c>
   11740:	280ad0fa 	srli	r5,r5,3
   11744:	2880102c 	andhi	r2,r5,64
   11748:	103ff01e 	bne	r2,zero,1170c <__alt_data_end+0xffff170c>
   1174c:	2809883a 	mov	r4,r5
   11750:	003fee06 	br	1170c <__alt_data_end+0xffff170c>
   11754:	04003fc4 	movi	r16,255
   11758:	003ef206 	br	11324 <__alt_data_end+0xffff1324>
   1175c:	01000044 	movi	r4,1
   11760:	003f9706 	br	115c0 <__alt_data_end+0xffff15c0>
   11764:	0005883a 	mov	r2,zero
   11768:	003f3406 	br	1143c <__alt_data_end+0xffff143c>
   1176c:	2809883a 	mov	r4,r5
   11770:	003eec06 	br	11324 <__alt_data_end+0xffff1324>
   11774:	2809883a 	mov	r4,r5
   11778:	04003fc4 	movi	r16,255
   1177c:	003ee906 	br	11324 <__alt_data_end+0xffff1324>
   11780:	00c00044 	movi	r3,1
   11784:	003fce06 	br	116c0 <__alt_data_end+0xffff16c0>
   11788:	0005883a 	mov	r2,zero
   1178c:	003f4e06 	br	114c8 <__alt_data_end+0xffff14c8>

00011790 <__divsf3>:
   11790:	defff504 	addi	sp,sp,-44
   11794:	200cd5fa 	srli	r6,r4,23
   11798:	dcc00415 	stw	r19,16(sp)
   1179c:	2026d7fa 	srli	r19,r4,31
   117a0:	00c02034 	movhi	r3,128
   117a4:	dd800715 	stw	r22,28(sp)
   117a8:	dd000515 	stw	r20,20(sp)
   117ac:	dc800315 	stw	r18,12(sp)
   117b0:	18ffffc4 	addi	r3,r3,-1
   117b4:	dfc00a15 	stw	ra,40(sp)
   117b8:	df000915 	stw	fp,36(sp)
   117bc:	ddc00815 	stw	r23,32(sp)
   117c0:	dd400615 	stw	r21,24(sp)
   117c4:	dc400215 	stw	r17,8(sp)
   117c8:	dc000115 	stw	r16,4(sp)
   117cc:	35003fcc 	andi	r20,r6,255
   117d0:	1924703a 	and	r18,r3,r4
   117d4:	9d803fcc 	andi	r22,r19,255
   117d8:	a0005226 	beq	r20,zero,11924 <__divsf3+0x194>
   117dc:	00803fc4 	movi	r2,255
   117e0:	a0802e26 	beq	r20,r2,1189c <__divsf3+0x10c>
   117e4:	91002034 	orhi	r4,r18,128
   117e8:	202490fa 	slli	r18,r4,3
   117ec:	a53fe044 	addi	r20,r20,-127
   117f0:	0021883a 	mov	r16,zero
   117f4:	002f883a 	mov	r23,zero
   117f8:	280cd5fa 	srli	r6,r5,23
   117fc:	282ad7fa 	srli	r21,r5,31
   11800:	00c02034 	movhi	r3,128
   11804:	18ffffc4 	addi	r3,r3,-1
   11808:	31803fcc 	andi	r6,r6,255
   1180c:	1962703a 	and	r17,r3,r5
   11810:	af003fcc 	andi	fp,r21,255
   11814:	30004a26 	beq	r6,zero,11940 <__divsf3+0x1b0>
   11818:	00803fc4 	movi	r2,255
   1181c:	30804526 	beq	r6,r2,11934 <__divsf3+0x1a4>
   11820:	89402034 	orhi	r5,r17,128
   11824:	282290fa 	slli	r17,r5,3
   11828:	31bfe044 	addi	r6,r6,-127
   1182c:	000b883a 	mov	r5,zero
   11830:	2c20b03a 	or	r16,r5,r16
   11834:	802090ba 	slli	r16,r16,2
   11838:	00800074 	movhi	r2,1
   1183c:	10861704 	addi	r2,r2,6236
   11840:	80a1883a 	add	r16,r16,r2
   11844:	81000017 	ldw	r4,0(r16)
   11848:	9d46f03a 	xor	r3,r19,r21
   1184c:	180f883a 	mov	r7,r3
   11850:	18803fcc 	andi	r2,r3,255
   11854:	a18dc83a 	sub	r6,r20,r6
   11858:	2000683a 	jmp	r4
   1185c:	00011a40 	call	11a4 <__alt_mem_onchip_memory-0xee5c>
   11860:	000118c4 	movi	zero,1123
   11864:	00011a34 	movhi	zero,1128
   11868:	000118b0 	cmpltui	zero,zero,1122
   1186c:	00011a34 	movhi	zero,1128
   11870:	00011a0c 	andi	zero,zero,1128
   11874:	00011a34 	movhi	zero,1128
   11878:	000118b0 	cmpltui	zero,zero,1122
   1187c:	000118c4 	movi	zero,1123
   11880:	000118c4 	movi	zero,1123
   11884:	00011a0c 	andi	zero,zero,1128
   11888:	000118b0 	cmpltui	zero,zero,1122
   1188c:	00011b20 	cmpeqi	zero,zero,1132
   11890:	00011b20 	cmpeqi	zero,zero,1132
   11894:	00011b20 	cmpeqi	zero,zero,1132
   11898:	00011ad4 	movui	zero,1131
   1189c:	9000581e 	bne	r18,zero,11a00 <__divsf3+0x270>
   118a0:	04000204 	movi	r16,8
   118a4:	05c00084 	movi	r23,2
   118a8:	003fd306 	br	117f8 <__alt_data_end+0xffff17f8>
   118ac:	0023883a 	mov	r17,zero
   118b0:	e02d883a 	mov	r22,fp
   118b4:	282f883a 	mov	r23,r5
   118b8:	00800084 	movi	r2,2
   118bc:	b8808f1e 	bne	r23,r2,11afc <__divsf3+0x36c>
   118c0:	b005883a 	mov	r2,r22
   118c4:	11c0004c 	andi	r7,r2,1
   118c8:	013fffc4 	movi	r4,-1
   118cc:	000d883a 	mov	r6,zero
   118d0:	21003fcc 	andi	r4,r4,255
   118d4:	200895fa 	slli	r4,r4,23
   118d8:	38803fcc 	andi	r2,r7,255
   118dc:	00c02034 	movhi	r3,128
   118e0:	100497fa 	slli	r2,r2,31
   118e4:	18ffffc4 	addi	r3,r3,-1
   118e8:	30c6703a 	and	r3,r6,r3
   118ec:	1906b03a 	or	r3,r3,r4
   118f0:	1884b03a 	or	r2,r3,r2
   118f4:	dfc00a17 	ldw	ra,40(sp)
   118f8:	df000917 	ldw	fp,36(sp)
   118fc:	ddc00817 	ldw	r23,32(sp)
   11900:	dd800717 	ldw	r22,28(sp)
   11904:	dd400617 	ldw	r21,24(sp)
   11908:	dd000517 	ldw	r20,20(sp)
   1190c:	dcc00417 	ldw	r19,16(sp)
   11910:	dc800317 	ldw	r18,12(sp)
   11914:	dc400217 	ldw	r17,8(sp)
   11918:	dc000117 	ldw	r16,4(sp)
   1191c:	dec00b04 	addi	sp,sp,44
   11920:	f800283a 	ret
   11924:	90002b1e 	bne	r18,zero,119d4 <__divsf3+0x244>
   11928:	04000104 	movi	r16,4
   1192c:	05c00044 	movi	r23,1
   11930:	003fb106 	br	117f8 <__alt_data_end+0xffff17f8>
   11934:	8800251e 	bne	r17,zero,119cc <__divsf3+0x23c>
   11938:	01400084 	movi	r5,2
   1193c:	00000206 	br	11948 <__divsf3+0x1b8>
   11940:	88001a1e 	bne	r17,zero,119ac <__divsf3+0x21c>
   11944:	01400044 	movi	r5,1
   11948:	8160b03a 	or	r16,r16,r5
   1194c:	802090ba 	slli	r16,r16,2
   11950:	00c00074 	movhi	r3,1
   11954:	18c65b04 	addi	r3,r3,6508
   11958:	80e1883a 	add	r16,r16,r3
   1195c:	80c00017 	ldw	r3,0(r16)
   11960:	9d44f03a 	xor	r2,r19,r21
   11964:	a18dc83a 	sub	r6,r20,r6
   11968:	1800683a 	jmp	r3
   1196c:	000118c4 	movi	zero,1123
   11970:	000118c4 	movi	zero,1123
   11974:	00011b10 	cmplti	zero,zero,1132
   11978:	000118ac 	andhi	zero,zero,1122
   1197c:	00011b10 	cmplti	zero,zero,1132
   11980:	00011a0c 	andi	zero,zero,1128
   11984:	00011b10 	cmplti	zero,zero,1132
   11988:	000118ac 	andhi	zero,zero,1122
   1198c:	000118c4 	movi	zero,1123
   11990:	000118c4 	movi	zero,1123
   11994:	00011a0c 	andi	zero,zero,1128
   11998:	000118ac 	andhi	zero,zero,1122
   1199c:	00011b20 	cmpeqi	zero,zero,1132
   119a0:	00011b20 	cmpeqi	zero,zero,1132
   119a4:	00011b20 	cmpeqi	zero,zero,1132
   119a8:	00011b38 	rdprs	zero,zero,1132
   119ac:	8809883a 	mov	r4,r17
   119b0:	0014c400 	call	14c40 <__clzsi2>
   119b4:	10fffec4 	addi	r3,r2,-5
   119b8:	10801d84 	addi	r2,r2,118
   119bc:	88e2983a 	sll	r17,r17,r3
   119c0:	008dc83a 	sub	r6,zero,r2
   119c4:	000b883a 	mov	r5,zero
   119c8:	003f9906 	br	11830 <__alt_data_end+0xffff1830>
   119cc:	014000c4 	movi	r5,3
   119d0:	003f9706 	br	11830 <__alt_data_end+0xffff1830>
   119d4:	9009883a 	mov	r4,r18
   119d8:	d9400015 	stw	r5,0(sp)
   119dc:	0014c400 	call	14c40 <__clzsi2>
   119e0:	10fffec4 	addi	r3,r2,-5
   119e4:	11801d84 	addi	r6,r2,118
   119e8:	90e4983a 	sll	r18,r18,r3
   119ec:	01a9c83a 	sub	r20,zero,r6
   119f0:	0021883a 	mov	r16,zero
   119f4:	002f883a 	mov	r23,zero
   119f8:	d9400017 	ldw	r5,0(sp)
   119fc:	003f7e06 	br	117f8 <__alt_data_end+0xffff17f8>
   11a00:	04000304 	movi	r16,12
   11a04:	05c000c4 	movi	r23,3
   11a08:	003f7b06 	br	117f8 <__alt_data_end+0xffff17f8>
   11a0c:	01802034 	movhi	r6,128
   11a10:	000f883a 	mov	r7,zero
   11a14:	31bfffc4 	addi	r6,r6,-1
   11a18:	013fffc4 	movi	r4,-1
   11a1c:	003fac06 	br	118d0 <__alt_data_end+0xffff18d0>
   11a20:	01400044 	movi	r5,1
   11a24:	2909c83a 	sub	r4,r5,r4
   11a28:	00c006c4 	movi	r3,27
   11a2c:	19004b0e 	bge	r3,r4,11b5c <__divsf3+0x3cc>
   11a30:	114e703a 	and	r7,r2,r5
   11a34:	0009883a 	mov	r4,zero
   11a38:	000d883a 	mov	r6,zero
   11a3c:	003fa406 	br	118d0 <__alt_data_end+0xffff18d0>
   11a40:	9006917a 	slli	r3,r18,5
   11a44:	8822917a 	slli	r17,r17,5
   11a48:	1c40372e 	bgeu	r3,r17,11b28 <__divsf3+0x398>
   11a4c:	31bfffc4 	addi	r6,r6,-1
   11a50:	010006c4 	movi	r4,27
   11a54:	000b883a 	mov	r5,zero
   11a58:	180f883a 	mov	r7,r3
   11a5c:	294b883a 	add	r5,r5,r5
   11a60:	18c7883a 	add	r3,r3,r3
   11a64:	38000116 	blt	r7,zero,11a6c <__divsf3+0x2dc>
   11a68:	1c400236 	bltu	r3,r17,11a74 <__divsf3+0x2e4>
   11a6c:	1c47c83a 	sub	r3,r3,r17
   11a70:	29400054 	ori	r5,r5,1
   11a74:	213fffc4 	addi	r4,r4,-1
   11a78:	203ff71e 	bne	r4,zero,11a58 <__alt_data_end+0xffff1a58>
   11a7c:	1806c03a 	cmpne	r3,r3,zero
   11a80:	1962b03a 	or	r17,r3,r5
   11a84:	31001fc4 	addi	r4,r6,127
   11a88:	013fe50e 	bge	zero,r4,11a20 <__alt_data_end+0xffff1a20>
   11a8c:	88c001cc 	andi	r3,r17,7
   11a90:	18000426 	beq	r3,zero,11aa4 <__divsf3+0x314>
   11a94:	88c003cc 	andi	r3,r17,15
   11a98:	01400104 	movi	r5,4
   11a9c:	19400126 	beq	r3,r5,11aa4 <__divsf3+0x314>
   11aa0:	8963883a 	add	r17,r17,r5
   11aa4:	88c2002c 	andhi	r3,r17,2048
   11aa8:	18000426 	beq	r3,zero,11abc <__divsf3+0x32c>
   11aac:	00fe0034 	movhi	r3,63488
   11ab0:	18ffffc4 	addi	r3,r3,-1
   11ab4:	31002004 	addi	r4,r6,128
   11ab8:	88e2703a 	and	r17,r17,r3
   11abc:	00c03f84 	movi	r3,254
   11ac0:	193f8016 	blt	r3,r4,118c4 <__alt_data_end+0xffff18c4>
   11ac4:	880c91ba 	slli	r6,r17,6
   11ac8:	11c0004c 	andi	r7,r2,1
   11acc:	300cd27a 	srli	r6,r6,9
   11ad0:	003f7f06 	br	118d0 <__alt_data_end+0xffff18d0>
   11ad4:	9080102c 	andhi	r2,r18,64
   11ad8:	10000226 	beq	r2,zero,11ae4 <__divsf3+0x354>
   11adc:	8880102c 	andhi	r2,r17,64
   11ae0:	10001826 	beq	r2,zero,11b44 <__divsf3+0x3b4>
   11ae4:	00802034 	movhi	r2,128
   11ae8:	91801034 	orhi	r6,r18,64
   11aec:	10bfffc4 	addi	r2,r2,-1
   11af0:	980f883a 	mov	r7,r19
   11af4:	308c703a 	and	r6,r6,r2
   11af8:	003fc706 	br	11a18 <__alt_data_end+0xffff1a18>
   11afc:	008000c4 	movi	r2,3
   11b00:	b8802d26 	beq	r23,r2,11bb8 <__divsf3+0x428>
   11b04:	00c00044 	movi	r3,1
   11b08:	b005883a 	mov	r2,r22
   11b0c:	b8ffdd1e 	bne	r23,r3,11a84 <__alt_data_end+0xffff1a84>
   11b10:	11c0004c 	andi	r7,r2,1
   11b14:	0009883a 	mov	r4,zero
   11b18:	000d883a 	mov	r6,zero
   11b1c:	003f6c06 	br	118d0 <__alt_data_end+0xffff18d0>
   11b20:	9023883a 	mov	r17,r18
   11b24:	003f6406 	br	118b8 <__alt_data_end+0xffff18b8>
   11b28:	1c47c83a 	sub	r3,r3,r17
   11b2c:	01000684 	movi	r4,26
   11b30:	01400044 	movi	r5,1
   11b34:	003fc806 	br	11a58 <__alt_data_end+0xffff1a58>
   11b38:	9080102c 	andhi	r2,r18,64
   11b3c:	103fe926 	beq	r2,zero,11ae4 <__alt_data_end+0xffff1ae4>
   11b40:	0023883a 	mov	r17,zero
   11b44:	00802034 	movhi	r2,128
   11b48:	89801034 	orhi	r6,r17,64
   11b4c:	10bfffc4 	addi	r2,r2,-1
   11b50:	a80f883a 	mov	r7,r21
   11b54:	308c703a 	and	r6,r6,r2
   11b58:	003faf06 	br	11a18 <__alt_data_end+0xffff1a18>
   11b5c:	01c00804 	movi	r7,32
   11b60:	390fc83a 	sub	r7,r7,r4
   11b64:	89ce983a 	sll	r7,r17,r7
   11b68:	890ad83a 	srl	r5,r17,r4
   11b6c:	380ec03a 	cmpne	r7,r7,zero
   11b70:	29cab03a 	or	r5,r5,r7
   11b74:	28c001cc 	andi	r3,r5,7
   11b78:	18000426 	beq	r3,zero,11b8c <__divsf3+0x3fc>
   11b7c:	28c003cc 	andi	r3,r5,15
   11b80:	01000104 	movi	r4,4
   11b84:	19000126 	beq	r3,r4,11b8c <__divsf3+0x3fc>
   11b88:	290b883a 	add	r5,r5,r4
   11b8c:	28c1002c 	andhi	r3,r5,1024
   11b90:	18000426 	beq	r3,zero,11ba4 <__divsf3+0x414>
   11b94:	11c0004c 	andi	r7,r2,1
   11b98:	01000044 	movi	r4,1
   11b9c:	000d883a 	mov	r6,zero
   11ba0:	003f4b06 	br	118d0 <__alt_data_end+0xffff18d0>
   11ba4:	280a91ba 	slli	r5,r5,6
   11ba8:	11c0004c 	andi	r7,r2,1
   11bac:	0009883a 	mov	r4,zero
   11bb0:	280cd27a 	srli	r6,r5,9
   11bb4:	003f4606 	br	118d0 <__alt_data_end+0xffff18d0>
   11bb8:	00802034 	movhi	r2,128
   11bbc:	89801034 	orhi	r6,r17,64
   11bc0:	10bfffc4 	addi	r2,r2,-1
   11bc4:	b00f883a 	mov	r7,r22
   11bc8:	308c703a 	and	r6,r6,r2
   11bcc:	003f9206 	br	11a18 <__alt_data_end+0xffff1a18>

00011bd0 <__mulsf3>:
   11bd0:	defff504 	addi	sp,sp,-44
   11bd4:	dc000115 	stw	r16,4(sp)
   11bd8:	2020d5fa 	srli	r16,r4,23
   11bdc:	dd400615 	stw	r21,24(sp)
   11be0:	202ad7fa 	srli	r21,r4,31
   11be4:	dc800315 	stw	r18,12(sp)
   11be8:	04802034 	movhi	r18,128
   11bec:	df000915 	stw	fp,36(sp)
   11bf0:	dd000515 	stw	r20,20(sp)
   11bf4:	94bfffc4 	addi	r18,r18,-1
   11bf8:	dfc00a15 	stw	ra,40(sp)
   11bfc:	ddc00815 	stw	r23,32(sp)
   11c00:	dd800715 	stw	r22,28(sp)
   11c04:	dcc00415 	stw	r19,16(sp)
   11c08:	dc400215 	stw	r17,8(sp)
   11c0c:	84003fcc 	andi	r16,r16,255
   11c10:	9124703a 	and	r18,r18,r4
   11c14:	a829883a 	mov	r20,r21
   11c18:	af003fcc 	andi	fp,r21,255
   11c1c:	80005426 	beq	r16,zero,11d70 <__mulsf3+0x1a0>
   11c20:	00803fc4 	movi	r2,255
   11c24:	80802f26 	beq	r16,r2,11ce4 <__mulsf3+0x114>
   11c28:	91002034 	orhi	r4,r18,128
   11c2c:	202490fa 	slli	r18,r4,3
   11c30:	843fe044 	addi	r16,r16,-127
   11c34:	0023883a 	mov	r17,zero
   11c38:	002f883a 	mov	r23,zero
   11c3c:	2804d5fa 	srli	r2,r5,23
   11c40:	282cd7fa 	srli	r22,r5,31
   11c44:	01002034 	movhi	r4,128
   11c48:	213fffc4 	addi	r4,r4,-1
   11c4c:	10803fcc 	andi	r2,r2,255
   11c50:	2166703a 	and	r19,r4,r5
   11c54:	b1803fcc 	andi	r6,r22,255
   11c58:	10004c26 	beq	r2,zero,11d8c <__mulsf3+0x1bc>
   11c5c:	00c03fc4 	movi	r3,255
   11c60:	10c04726 	beq	r2,r3,11d80 <__mulsf3+0x1b0>
   11c64:	99002034 	orhi	r4,r19,128
   11c68:	202690fa 	slli	r19,r4,3
   11c6c:	10bfe044 	addi	r2,r2,-127
   11c70:	0007883a 	mov	r3,zero
   11c74:	80a1883a 	add	r16,r16,r2
   11c78:	010003c4 	movi	r4,15
   11c7c:	1c44b03a 	or	r2,r3,r17
   11c80:	b56af03a 	xor	r21,r22,r21
   11c84:	81c00044 	addi	r7,r16,1
   11c88:	20806b36 	bltu	r4,r2,11e38 <__mulsf3+0x268>
   11c8c:	100490ba 	slli	r2,r2,2
   11c90:	01000074 	movhi	r4,1
   11c94:	21072904 	addi	r4,r4,7332
   11c98:	1105883a 	add	r2,r2,r4
   11c9c:	10800017 	ldw	r2,0(r2)
   11ca0:	1000683a 	jmp	r2
   11ca4:	00011e38 	rdprs	zero,zero,1144
   11ca8:	00011cf8 	rdprs	zero,zero,1139
   11cac:	00011cf8 	rdprs	zero,zero,1139
   11cb0:	00011cf4 	movhi	zero,1139
   11cb4:	00011e1c 	xori	zero,zero,1144
   11cb8:	00011e1c 	xori	zero,zero,1144
   11cbc:	00011e08 	cmpgei	zero,zero,1144
   11cc0:	00011cf4 	movhi	zero,1139
   11cc4:	00011e1c 	xori	zero,zero,1144
   11cc8:	00011e08 	cmpgei	zero,zero,1144
   11ccc:	00011e1c 	xori	zero,zero,1144
   11cd0:	00011cf4 	movhi	zero,1139
   11cd4:	00011e28 	cmpgeui	zero,zero,1144
   11cd8:	00011e28 	cmpgeui	zero,zero,1144
   11cdc:	00011e28 	cmpgeui	zero,zero,1144
   11ce0:	00011f04 	movi	zero,1148
   11ce4:	90003b1e 	bne	r18,zero,11dd4 <__mulsf3+0x204>
   11ce8:	04400204 	movi	r17,8
   11cec:	05c00084 	movi	r23,2
   11cf0:	003fd206 	br	11c3c <__alt_data_end+0xffff1c3c>
   11cf4:	302b883a 	mov	r21,r6
   11cf8:	00800084 	movi	r2,2
   11cfc:	18802626 	beq	r3,r2,11d98 <__mulsf3+0x1c8>
   11d00:	008000c4 	movi	r2,3
   11d04:	1880ab26 	beq	r3,r2,11fb4 <__mulsf3+0x3e4>
   11d08:	00800044 	movi	r2,1
   11d0c:	1880a21e 	bne	r3,r2,11f98 <__mulsf3+0x3c8>
   11d10:	a829883a 	mov	r20,r21
   11d14:	0007883a 	mov	r3,zero
   11d18:	0009883a 	mov	r4,zero
   11d1c:	18803fcc 	andi	r2,r3,255
   11d20:	100695fa 	slli	r3,r2,23
   11d24:	a0803fcc 	andi	r2,r20,255
   11d28:	100a97fa 	slli	r5,r2,31
   11d2c:	00802034 	movhi	r2,128
   11d30:	10bfffc4 	addi	r2,r2,-1
   11d34:	2084703a 	and	r2,r4,r2
   11d38:	10c4b03a 	or	r2,r2,r3
   11d3c:	1144b03a 	or	r2,r2,r5
   11d40:	dfc00a17 	ldw	ra,40(sp)
   11d44:	df000917 	ldw	fp,36(sp)
   11d48:	ddc00817 	ldw	r23,32(sp)
   11d4c:	dd800717 	ldw	r22,28(sp)
   11d50:	dd400617 	ldw	r21,24(sp)
   11d54:	dd000517 	ldw	r20,20(sp)
   11d58:	dcc00417 	ldw	r19,16(sp)
   11d5c:	dc800317 	ldw	r18,12(sp)
   11d60:	dc400217 	ldw	r17,8(sp)
   11d64:	dc000117 	ldw	r16,4(sp)
   11d68:	dec00b04 	addi	sp,sp,44
   11d6c:	f800283a 	ret
   11d70:	90000d1e 	bne	r18,zero,11da8 <__mulsf3+0x1d8>
   11d74:	04400104 	movi	r17,4
   11d78:	05c00044 	movi	r23,1
   11d7c:	003faf06 	br	11c3c <__alt_data_end+0xffff1c3c>
   11d80:	9806c03a 	cmpne	r3,r19,zero
   11d84:	18c00084 	addi	r3,r3,2
   11d88:	003fba06 	br	11c74 <__alt_data_end+0xffff1c74>
   11d8c:	9800141e 	bne	r19,zero,11de0 <__mulsf3+0x210>
   11d90:	00c00044 	movi	r3,1
   11d94:	003fb706 	br	11c74 <__alt_data_end+0xffff1c74>
   11d98:	a829883a 	mov	r20,r21
   11d9c:	00ffffc4 	movi	r3,-1
   11da0:	0009883a 	mov	r4,zero
   11da4:	003fdd06 	br	11d1c <__alt_data_end+0xffff1d1c>
   11da8:	9009883a 	mov	r4,r18
   11dac:	d9400015 	stw	r5,0(sp)
   11db0:	0014c400 	call	14c40 <__clzsi2>
   11db4:	10fffec4 	addi	r3,r2,-5
   11db8:	10801d84 	addi	r2,r2,118
   11dbc:	90e4983a 	sll	r18,r18,r3
   11dc0:	00a1c83a 	sub	r16,zero,r2
   11dc4:	0023883a 	mov	r17,zero
   11dc8:	002f883a 	mov	r23,zero
   11dcc:	d9400017 	ldw	r5,0(sp)
   11dd0:	003f9a06 	br	11c3c <__alt_data_end+0xffff1c3c>
   11dd4:	04400304 	movi	r17,12
   11dd8:	05c000c4 	movi	r23,3
   11ddc:	003f9706 	br	11c3c <__alt_data_end+0xffff1c3c>
   11de0:	9809883a 	mov	r4,r19
   11de4:	d9800015 	stw	r6,0(sp)
   11de8:	0014c400 	call	14c40 <__clzsi2>
   11dec:	10fffec4 	addi	r3,r2,-5
   11df0:	10801d84 	addi	r2,r2,118
   11df4:	98e6983a 	sll	r19,r19,r3
   11df8:	0085c83a 	sub	r2,zero,r2
   11dfc:	0007883a 	mov	r3,zero
   11e00:	d9800017 	ldw	r6,0(sp)
   11e04:	003f9b06 	br	11c74 <__alt_data_end+0xffff1c74>
   11e08:	01002034 	movhi	r4,128
   11e0c:	0029883a 	mov	r20,zero
   11e10:	213fffc4 	addi	r4,r4,-1
   11e14:	00ffffc4 	movi	r3,-1
   11e18:	003fc006 	br	11d1c <__alt_data_end+0xffff1d1c>
   11e1c:	9027883a 	mov	r19,r18
   11e20:	b807883a 	mov	r3,r23
   11e24:	003fb406 	br	11cf8 <__alt_data_end+0xffff1cf8>
   11e28:	9027883a 	mov	r19,r18
   11e2c:	e02b883a 	mov	r21,fp
   11e30:	b807883a 	mov	r3,r23
   11e34:	003fb006 	br	11cf8 <__alt_data_end+0xffff1cf8>
   11e38:	9004d43a 	srli	r2,r18,16
   11e3c:	9810d43a 	srli	r8,r19,16
   11e40:	94bfffcc 	andi	r18,r18,65535
   11e44:	993fffcc 	andi	r4,r19,65535
   11e48:	910d383a 	mul	r6,r18,r4
   11e4c:	20a7383a 	mul	r19,r4,r2
   11e50:	9225383a 	mul	r18,r18,r8
   11e54:	3006d43a 	srli	r3,r6,16
   11e58:	1211383a 	mul	r8,r2,r8
   11e5c:	94e5883a 	add	r18,r18,r19
   11e60:	1c87883a 	add	r3,r3,r18
   11e64:	1cc0022e 	bgeu	r3,r19,11e70 <__mulsf3+0x2a0>
   11e68:	00800074 	movhi	r2,1
   11e6c:	4091883a 	add	r8,r8,r2
   11e70:	1804943a 	slli	r2,r3,16
   11e74:	31bfffcc 	andi	r6,r6,65535
   11e78:	1806d43a 	srli	r3,r3,16
   11e7c:	1185883a 	add	r2,r2,r6
   11e80:	102691ba 	slli	r19,r2,6
   11e84:	1a07883a 	add	r3,r3,r8
   11e88:	1004d6ba 	srli	r2,r2,26
   11e8c:	180891ba 	slli	r4,r3,6
   11e90:	9826c03a 	cmpne	r19,r19,zero
   11e94:	9884b03a 	or	r2,r19,r2
   11e98:	1126b03a 	or	r19,r2,r4
   11e9c:	9882002c 	andhi	r2,r19,2048
   11ea0:	10000426 	beq	r2,zero,11eb4 <__mulsf3+0x2e4>
   11ea4:	9804d07a 	srli	r2,r19,1
   11ea8:	9900004c 	andi	r4,r19,1
   11eac:	3821883a 	mov	r16,r7
   11eb0:	1126b03a 	or	r19,r2,r4
   11eb4:	80c01fc4 	addi	r3,r16,127
   11eb8:	00c0210e 	bge	zero,r3,11f40 <__mulsf3+0x370>
   11ebc:	988001cc 	andi	r2,r19,7
   11ec0:	10000426 	beq	r2,zero,11ed4 <__mulsf3+0x304>
   11ec4:	988003cc 	andi	r2,r19,15
   11ec8:	01000104 	movi	r4,4
   11ecc:	11000126 	beq	r2,r4,11ed4 <__mulsf3+0x304>
   11ed0:	9927883a 	add	r19,r19,r4
   11ed4:	9882002c 	andhi	r2,r19,2048
   11ed8:	10000426 	beq	r2,zero,11eec <__mulsf3+0x31c>
   11edc:	00be0034 	movhi	r2,63488
   11ee0:	10bfffc4 	addi	r2,r2,-1
   11ee4:	80c02004 	addi	r3,r16,128
   11ee8:	98a6703a 	and	r19,r19,r2
   11eec:	00803f84 	movi	r2,254
   11ef0:	10ffa916 	blt	r2,r3,11d98 <__alt_data_end+0xffff1d98>
   11ef4:	980891ba 	slli	r4,r19,6
   11ef8:	a829883a 	mov	r20,r21
   11efc:	2008d27a 	srli	r4,r4,9
   11f00:	003f8606 	br	11d1c <__alt_data_end+0xffff1d1c>
   11f04:	9080102c 	andhi	r2,r18,64
   11f08:	10000826 	beq	r2,zero,11f2c <__mulsf3+0x35c>
   11f0c:	9880102c 	andhi	r2,r19,64
   11f10:	1000061e 	bne	r2,zero,11f2c <__mulsf3+0x35c>
   11f14:	00802034 	movhi	r2,128
   11f18:	99001034 	orhi	r4,r19,64
   11f1c:	10bfffc4 	addi	r2,r2,-1
   11f20:	b029883a 	mov	r20,r22
   11f24:	2088703a 	and	r4,r4,r2
   11f28:	003fba06 	br	11e14 <__alt_data_end+0xffff1e14>
   11f2c:	00802034 	movhi	r2,128
   11f30:	91001034 	orhi	r4,r18,64
   11f34:	10bfffc4 	addi	r2,r2,-1
   11f38:	2088703a 	and	r4,r4,r2
   11f3c:	003fb506 	br	11e14 <__alt_data_end+0xffff1e14>
   11f40:	00800044 	movi	r2,1
   11f44:	10c7c83a 	sub	r3,r2,r3
   11f48:	008006c4 	movi	r2,27
   11f4c:	10ff7016 	blt	r2,r3,11d10 <__alt_data_end+0xffff1d10>
   11f50:	00800804 	movi	r2,32
   11f54:	10c5c83a 	sub	r2,r2,r3
   11f58:	9884983a 	sll	r2,r19,r2
   11f5c:	98c6d83a 	srl	r3,r19,r3
   11f60:	1004c03a 	cmpne	r2,r2,zero
   11f64:	1884b03a 	or	r2,r3,r2
   11f68:	10c001cc 	andi	r3,r2,7
   11f6c:	18000426 	beq	r3,zero,11f80 <__mulsf3+0x3b0>
   11f70:	10c003cc 	andi	r3,r2,15
   11f74:	01000104 	movi	r4,4
   11f78:	19000126 	beq	r3,r4,11f80 <__mulsf3+0x3b0>
   11f7c:	1105883a 	add	r2,r2,r4
   11f80:	10c1002c 	andhi	r3,r2,1024
   11f84:	18000626 	beq	r3,zero,11fa0 <__mulsf3+0x3d0>
   11f88:	a829883a 	mov	r20,r21
   11f8c:	00c00044 	movi	r3,1
   11f90:	0009883a 	mov	r4,zero
   11f94:	003f6106 	br	11d1c <__alt_data_end+0xffff1d1c>
   11f98:	3821883a 	mov	r16,r7
   11f9c:	003fc506 	br	11eb4 <__alt_data_end+0xffff1eb4>
   11fa0:	100491ba 	slli	r2,r2,6
   11fa4:	a829883a 	mov	r20,r21
   11fa8:	0007883a 	mov	r3,zero
   11fac:	1008d27a 	srli	r4,r2,9
   11fb0:	003f5a06 	br	11d1c <__alt_data_end+0xffff1d1c>
   11fb4:	00802034 	movhi	r2,128
   11fb8:	99001034 	orhi	r4,r19,64
   11fbc:	10bfffc4 	addi	r2,r2,-1
   11fc0:	a829883a 	mov	r20,r21
   11fc4:	2088703a 	and	r4,r4,r2
   11fc8:	003f9206 	br	11e14 <__alt_data_end+0xffff1e14>

00011fcc <__subsf3>:
   11fcc:	defffc04 	addi	sp,sp,-16
   11fd0:	280cd5fa 	srli	r6,r5,23
   11fd4:	dc000015 	stw	r16,0(sp)
   11fd8:	01c02034 	movhi	r7,128
   11fdc:	2020d5fa 	srli	r16,r4,23
   11fe0:	39ffffc4 	addi	r7,r7,-1
   11fe4:	3906703a 	and	r3,r7,r4
   11fe8:	dc400115 	stw	r17,4(sp)
   11fec:	394e703a 	and	r7,r7,r5
   11ff0:	2022d7fa 	srli	r17,r4,31
   11ff4:	dfc00315 	stw	ra,12(sp)
   11ff8:	dc800215 	stw	r18,8(sp)
   11ffc:	31803fcc 	andi	r6,r6,255
   12000:	01003fc4 	movi	r4,255
   12004:	84003fcc 	andi	r16,r16,255
   12008:	180690fa 	slli	r3,r3,3
   1200c:	2804d7fa 	srli	r2,r5,31
   12010:	380e90fa 	slli	r7,r7,3
   12014:	31006d26 	beq	r6,r4,121cc <__subsf3+0x200>
   12018:	1080005c 	xori	r2,r2,1
   1201c:	8189c83a 	sub	r4,r16,r6
   12020:	14404f26 	beq	r2,r17,12160 <__subsf3+0x194>
   12024:	0100770e 	bge	zero,r4,12204 <__subsf3+0x238>
   12028:	30001e1e 	bne	r6,zero,120a4 <__subsf3+0xd8>
   1202c:	38006a1e 	bne	r7,zero,121d8 <__subsf3+0x20c>
   12030:	188001cc 	andi	r2,r3,7
   12034:	10000426 	beq	r2,zero,12048 <__subsf3+0x7c>
   12038:	188003cc 	andi	r2,r3,15
   1203c:	01000104 	movi	r4,4
   12040:	11000126 	beq	r2,r4,12048 <__subsf3+0x7c>
   12044:	1907883a 	add	r3,r3,r4
   12048:	1881002c 	andhi	r2,r3,1024
   1204c:	10003926 	beq	r2,zero,12134 <__subsf3+0x168>
   12050:	84000044 	addi	r16,r16,1
   12054:	00803fc4 	movi	r2,255
   12058:	80807526 	beq	r16,r2,12230 <__subsf3+0x264>
   1205c:	180691ba 	slli	r3,r3,6
   12060:	8880004c 	andi	r2,r17,1
   12064:	180ad27a 	srli	r5,r3,9
   12068:	84003fcc 	andi	r16,r16,255
   1206c:	800695fa 	slli	r3,r16,23
   12070:	10803fcc 	andi	r2,r2,255
   12074:	01002034 	movhi	r4,128
   12078:	213fffc4 	addi	r4,r4,-1
   1207c:	100497fa 	slli	r2,r2,31
   12080:	2920703a 	and	r16,r5,r4
   12084:	80e0b03a 	or	r16,r16,r3
   12088:	8084b03a 	or	r2,r16,r2
   1208c:	dfc00317 	ldw	ra,12(sp)
   12090:	dc800217 	ldw	r18,8(sp)
   12094:	dc400117 	ldw	r17,4(sp)
   12098:	dc000017 	ldw	r16,0(sp)
   1209c:	dec00404 	addi	sp,sp,16
   120a0:	f800283a 	ret
   120a4:	00803fc4 	movi	r2,255
   120a8:	80bfe126 	beq	r16,r2,12030 <__alt_data_end+0xffff2030>
   120ac:	39c10034 	orhi	r7,r7,1024
   120b0:	008006c4 	movi	r2,27
   120b4:	11007416 	blt	r2,r4,12288 <__subsf3+0x2bc>
   120b8:	00800804 	movi	r2,32
   120bc:	1105c83a 	sub	r2,r2,r4
   120c0:	3884983a 	sll	r2,r7,r2
   120c4:	390ed83a 	srl	r7,r7,r4
   120c8:	1008c03a 	cmpne	r4,r2,zero
   120cc:	390eb03a 	or	r7,r7,r4
   120d0:	19c7c83a 	sub	r3,r3,r7
   120d4:	1881002c 	andhi	r2,r3,1024
   120d8:	10001426 	beq	r2,zero,1212c <__subsf3+0x160>
   120dc:	04810034 	movhi	r18,1024
   120e0:	94bfffc4 	addi	r18,r18,-1
   120e4:	1ca4703a 	and	r18,r3,r18
   120e8:	9009883a 	mov	r4,r18
   120ec:	0014c400 	call	14c40 <__clzsi2>
   120f0:	10bffec4 	addi	r2,r2,-5
   120f4:	90a4983a 	sll	r18,r18,r2
   120f8:	14005116 	blt	r2,r16,12240 <__subsf3+0x274>
   120fc:	1405c83a 	sub	r2,r2,r16
   12100:	10c00044 	addi	r3,r2,1
   12104:	00800804 	movi	r2,32
   12108:	10c5c83a 	sub	r2,r2,r3
   1210c:	9084983a 	sll	r2,r18,r2
   12110:	90e4d83a 	srl	r18,r18,r3
   12114:	0021883a 	mov	r16,zero
   12118:	1006c03a 	cmpne	r3,r2,zero
   1211c:	90c6b03a 	or	r3,r18,r3
   12120:	003fc306 	br	12030 <__alt_data_end+0xffff2030>
   12124:	2000e026 	beq	r4,zero,124a8 <__subsf3+0x4dc>
   12128:	2007883a 	mov	r3,r4
   1212c:	188001cc 	andi	r2,r3,7
   12130:	103fc11e 	bne	r2,zero,12038 <__alt_data_end+0xffff2038>
   12134:	180ad0fa 	srli	r5,r3,3
   12138:	00c03fc4 	movi	r3,255
   1213c:	8880004c 	andi	r2,r17,1
   12140:	80c0031e 	bne	r16,r3,12150 <__subsf3+0x184>
   12144:	28006d26 	beq	r5,zero,122fc <__subsf3+0x330>
   12148:	29401034 	orhi	r5,r5,64
   1214c:	043fffc4 	movi	r16,-1
   12150:	00c02034 	movhi	r3,128
   12154:	18ffffc4 	addi	r3,r3,-1
   12158:	28ca703a 	and	r5,r5,r3
   1215c:	003fc206 	br	12068 <__alt_data_end+0xffff2068>
   12160:	01003c0e 	bge	zero,r4,12254 <__subsf3+0x288>
   12164:	30002126 	beq	r6,zero,121ec <__subsf3+0x220>
   12168:	01403fc4 	movi	r5,255
   1216c:	817fb026 	beq	r16,r5,12030 <__alt_data_end+0xffff2030>
   12170:	39c10034 	orhi	r7,r7,1024
   12174:	014006c4 	movi	r5,27
   12178:	29007416 	blt	r5,r4,1234c <__subsf3+0x380>
   1217c:	01400804 	movi	r5,32
   12180:	290bc83a 	sub	r5,r5,r4
   12184:	394a983a 	sll	r5,r7,r5
   12188:	390ed83a 	srl	r7,r7,r4
   1218c:	2808c03a 	cmpne	r4,r5,zero
   12190:	390eb03a 	or	r7,r7,r4
   12194:	19c7883a 	add	r3,r3,r7
   12198:	1901002c 	andhi	r4,r3,1024
   1219c:	20003826 	beq	r4,zero,12280 <__subsf3+0x2b4>
   121a0:	84000044 	addi	r16,r16,1
   121a4:	01003fc4 	movi	r4,255
   121a8:	81005426 	beq	r16,r4,122fc <__subsf3+0x330>
   121ac:	1023883a 	mov	r17,r2
   121b0:	00bf0034 	movhi	r2,64512
   121b4:	10bfffc4 	addi	r2,r2,-1
   121b8:	1900004c 	andi	r4,r3,1
   121bc:	1886703a 	and	r3,r3,r2
   121c0:	1806d07a 	srli	r3,r3,1
   121c4:	1906b03a 	or	r3,r3,r4
   121c8:	003f9906 	br	12030 <__alt_data_end+0xffff2030>
   121cc:	383f9226 	beq	r7,zero,12018 <__alt_data_end+0xffff2018>
   121d0:	10803fcc 	andi	r2,r2,255
   121d4:	003f9106 	br	1201c <__alt_data_end+0xffff201c>
   121d8:	213fffc4 	addi	r4,r4,-1
   121dc:	203fbc26 	beq	r4,zero,120d0 <__alt_data_end+0xffff20d0>
   121e0:	00803fc4 	movi	r2,255
   121e4:	80bfb21e 	bne	r16,r2,120b0 <__alt_data_end+0xffff20b0>
   121e8:	003f9106 	br	12030 <__alt_data_end+0xffff2030>
   121ec:	383f9026 	beq	r7,zero,12030 <__alt_data_end+0xffff2030>
   121f0:	213fffc4 	addi	r4,r4,-1
   121f4:	203fe726 	beq	r4,zero,12194 <__alt_data_end+0xffff2194>
   121f8:	01403fc4 	movi	r5,255
   121fc:	817fdd1e 	bne	r16,r5,12174 <__alt_data_end+0xffff2174>
   12200:	003f8b06 	br	12030 <__alt_data_end+0xffff2030>
   12204:	2000221e 	bne	r4,zero,12290 <__subsf3+0x2c4>
   12208:	81000044 	addi	r4,r16,1
   1220c:	21003fcc 	andi	r4,r4,255
   12210:	01400044 	movi	r5,1
   12214:	2900470e 	bge	r5,r4,12334 <__subsf3+0x368>
   12218:	19e5c83a 	sub	r18,r3,r7
   1221c:	9141002c 	andhi	r5,r18,1024
   12220:	28002d26 	beq	r5,zero,122d8 <__subsf3+0x30c>
   12224:	38e5c83a 	sub	r18,r7,r3
   12228:	1023883a 	mov	r17,r2
   1222c:	003fae06 	br	120e8 <__alt_data_end+0xffff20e8>
   12230:	8880004c 	andi	r2,r17,1
   12234:	043fffc4 	movi	r16,-1
   12238:	000b883a 	mov	r5,zero
   1223c:	003f8a06 	br	12068 <__alt_data_end+0xffff2068>
   12240:	00ff0034 	movhi	r3,64512
   12244:	18ffffc4 	addi	r3,r3,-1
   12248:	80a1c83a 	sub	r16,r16,r2
   1224c:	90c6703a 	and	r3,r18,r3
   12250:	003f7706 	br	12030 <__alt_data_end+0xffff2030>
   12254:	2000431e 	bne	r4,zero,12364 <__subsf3+0x398>
   12258:	81000044 	addi	r4,r16,1
   1225c:	21803fcc 	andi	r6,r4,255
   12260:	01400044 	movi	r5,1
   12264:	2980280e 	bge	r5,r6,12308 <__subsf3+0x33c>
   12268:	01403fc4 	movi	r5,255
   1226c:	21402326 	beq	r4,r5,122fc <__subsf3+0x330>
   12270:	19c7883a 	add	r3,r3,r7
   12274:	1806d07a 	srli	r3,r3,1
   12278:	2021883a 	mov	r16,r4
   1227c:	003f6c06 	br	12030 <__alt_data_end+0xffff2030>
   12280:	1023883a 	mov	r17,r2
   12284:	003fa906 	br	1212c <__alt_data_end+0xffff212c>
   12288:	01c00044 	movi	r7,1
   1228c:	003f9006 	br	120d0 <__alt_data_end+0xffff20d0>
   12290:	8000151e 	bne	r16,zero,122e8 <__subsf3+0x31c>
   12294:	18002f26 	beq	r3,zero,12354 <__subsf3+0x388>
   12298:	0108303a 	nor	r4,zero,r4
   1229c:	20000a26 	beq	r4,zero,122c8 <__subsf3+0x2fc>
   122a0:	01403fc4 	movi	r5,255
   122a4:	31402b26 	beq	r6,r5,12354 <__subsf3+0x388>
   122a8:	014006c4 	movi	r5,27
   122ac:	29006e16 	blt	r5,r4,12468 <__subsf3+0x49c>
   122b0:	01400804 	movi	r5,32
   122b4:	290bc83a 	sub	r5,r5,r4
   122b8:	194a983a 	sll	r5,r3,r5
   122bc:	1908d83a 	srl	r4,r3,r4
   122c0:	2806c03a 	cmpne	r3,r5,zero
   122c4:	20c6b03a 	or	r3,r4,r3
   122c8:	38c7c83a 	sub	r3,r7,r3
   122cc:	3021883a 	mov	r16,r6
   122d0:	1023883a 	mov	r17,r2
   122d4:	003f7f06 	br	120d4 <__alt_data_end+0xffff20d4>
   122d8:	903f831e 	bne	r18,zero,120e8 <__alt_data_end+0xffff20e8>
   122dc:	0005883a 	mov	r2,zero
   122e0:	0021883a 	mov	r16,zero
   122e4:	003f9a06 	br	12150 <__alt_data_end+0xffff2150>
   122e8:	01403fc4 	movi	r5,255
   122ec:	31401926 	beq	r6,r5,12354 <__subsf3+0x388>
   122f0:	0109c83a 	sub	r4,zero,r4
   122f4:	18c10034 	orhi	r3,r3,1024
   122f8:	003feb06 	br	122a8 <__alt_data_end+0xffff22a8>
   122fc:	043fffc4 	movi	r16,-1
   12300:	000b883a 	mov	r5,zero
   12304:	003f5806 	br	12068 <__alt_data_end+0xffff2068>
   12308:	8000481e 	bne	r16,zero,1242c <__subsf3+0x460>
   1230c:	18006226 	beq	r3,zero,12498 <__subsf3+0x4cc>
   12310:	383f4726 	beq	r7,zero,12030 <__alt_data_end+0xffff2030>
   12314:	19c7883a 	add	r3,r3,r7
   12318:	1881002c 	andhi	r2,r3,1024
   1231c:	103f8326 	beq	r2,zero,1212c <__alt_data_end+0xffff212c>
   12320:	00bf0034 	movhi	r2,64512
   12324:	10bfffc4 	addi	r2,r2,-1
   12328:	2821883a 	mov	r16,r5
   1232c:	1886703a 	and	r3,r3,r2
   12330:	003f3f06 	br	12030 <__alt_data_end+0xffff2030>
   12334:	80001c1e 	bne	r16,zero,123a8 <__subsf3+0x3dc>
   12338:	1800261e 	bne	r3,zero,123d4 <__subsf3+0x408>
   1233c:	38004c26 	beq	r7,zero,12470 <__subsf3+0x4a4>
   12340:	3807883a 	mov	r3,r7
   12344:	1023883a 	mov	r17,r2
   12348:	003f3906 	br	12030 <__alt_data_end+0xffff2030>
   1234c:	01c00044 	movi	r7,1
   12350:	003f9006 	br	12194 <__alt_data_end+0xffff2194>
   12354:	3807883a 	mov	r3,r7
   12358:	3021883a 	mov	r16,r6
   1235c:	1023883a 	mov	r17,r2
   12360:	003f3306 	br	12030 <__alt_data_end+0xffff2030>
   12364:	8000161e 	bne	r16,zero,123c0 <__subsf3+0x3f4>
   12368:	18002d26 	beq	r3,zero,12420 <__subsf3+0x454>
   1236c:	0108303a 	nor	r4,zero,r4
   12370:	20000a26 	beq	r4,zero,1239c <__subsf3+0x3d0>
   12374:	01403fc4 	movi	r5,255
   12378:	31402926 	beq	r6,r5,12420 <__subsf3+0x454>
   1237c:	014006c4 	movi	r5,27
   12380:	29004716 	blt	r5,r4,124a0 <__subsf3+0x4d4>
   12384:	01400804 	movi	r5,32
   12388:	290bc83a 	sub	r5,r5,r4
   1238c:	194a983a 	sll	r5,r3,r5
   12390:	1908d83a 	srl	r4,r3,r4
   12394:	2806c03a 	cmpne	r3,r5,zero
   12398:	20c6b03a 	or	r3,r4,r3
   1239c:	19c7883a 	add	r3,r3,r7
   123a0:	3021883a 	mov	r16,r6
   123a4:	003f7c06 	br	12198 <__alt_data_end+0xffff2198>
   123a8:	1800111e 	bne	r3,zero,123f0 <__subsf3+0x424>
   123ac:	38003326 	beq	r7,zero,1247c <__subsf3+0x4b0>
   123b0:	3807883a 	mov	r3,r7
   123b4:	1023883a 	mov	r17,r2
   123b8:	04003fc4 	movi	r16,255
   123bc:	003f1c06 	br	12030 <__alt_data_end+0xffff2030>
   123c0:	01403fc4 	movi	r5,255
   123c4:	31401626 	beq	r6,r5,12420 <__subsf3+0x454>
   123c8:	0109c83a 	sub	r4,zero,r4
   123cc:	18c10034 	orhi	r3,r3,1024
   123d0:	003fea06 	br	1237c <__alt_data_end+0xffff237c>
   123d4:	383f1626 	beq	r7,zero,12030 <__alt_data_end+0xffff2030>
   123d8:	19c9c83a 	sub	r4,r3,r7
   123dc:	2141002c 	andhi	r5,r4,1024
   123e0:	283f5026 	beq	r5,zero,12124 <__alt_data_end+0xffff2124>
   123e4:	38c7c83a 	sub	r3,r7,r3
   123e8:	1023883a 	mov	r17,r2
   123ec:	003f1006 	br	12030 <__alt_data_end+0xffff2030>
   123f0:	38001b26 	beq	r7,zero,12460 <__subsf3+0x494>
   123f4:	1806d0fa 	srli	r3,r3,3
   123f8:	1900102c 	andhi	r4,r3,64
   123fc:	20000526 	beq	r4,zero,12414 <__subsf3+0x448>
   12400:	380ed0fa 	srli	r7,r7,3
   12404:	3900102c 	andhi	r4,r7,64
   12408:	2000021e 	bne	r4,zero,12414 <__subsf3+0x448>
   1240c:	3807883a 	mov	r3,r7
   12410:	1023883a 	mov	r17,r2
   12414:	180690fa 	slli	r3,r3,3
   12418:	04003fc4 	movi	r16,255
   1241c:	003f0406 	br	12030 <__alt_data_end+0xffff2030>
   12420:	3807883a 	mov	r3,r7
   12424:	3021883a 	mov	r16,r6
   12428:	003f0106 	br	12030 <__alt_data_end+0xffff2030>
   1242c:	18001726 	beq	r3,zero,1248c <__subsf3+0x4c0>
   12430:	38000b26 	beq	r7,zero,12460 <__subsf3+0x494>
   12434:	1806d0fa 	srli	r3,r3,3
   12438:	1900102c 	andhi	r4,r3,64
   1243c:	20000426 	beq	r4,zero,12450 <__subsf3+0x484>
   12440:	380ed0fa 	srli	r7,r7,3
   12444:	3900102c 	andhi	r4,r7,64
   12448:	2000011e 	bne	r4,zero,12450 <__subsf3+0x484>
   1244c:	3807883a 	mov	r3,r7
   12450:	180690fa 	slli	r3,r3,3
   12454:	1023883a 	mov	r17,r2
   12458:	04003fc4 	movi	r16,255
   1245c:	003ef406 	br	12030 <__alt_data_end+0xffff2030>
   12460:	04003fc4 	movi	r16,255
   12464:	003ef206 	br	12030 <__alt_data_end+0xffff2030>
   12468:	00c00044 	movi	r3,1
   1246c:	003f9606 	br	122c8 <__alt_data_end+0xffff22c8>
   12470:	000b883a 	mov	r5,zero
   12474:	0005883a 	mov	r2,zero
   12478:	003f3506 	br	12150 <__alt_data_end+0xffff2150>
   1247c:	01402034 	movhi	r5,128
   12480:	297fffc4 	addi	r5,r5,-1
   12484:	0005883a 	mov	r2,zero
   12488:	003f2f06 	br	12148 <__alt_data_end+0xffff2148>
   1248c:	3807883a 	mov	r3,r7
   12490:	04003fc4 	movi	r16,255
   12494:	003ee606 	br	12030 <__alt_data_end+0xffff2030>
   12498:	3807883a 	mov	r3,r7
   1249c:	003ee406 	br	12030 <__alt_data_end+0xffff2030>
   124a0:	00c00044 	movi	r3,1
   124a4:	003fbd06 	br	1239c <__alt_data_end+0xffff239c>
   124a8:	0005883a 	mov	r2,zero
   124ac:	003f2806 	br	12150 <__alt_data_end+0xffff2150>

000124b0 <__fixsfsi>:
   124b0:	200ad5fa 	srli	r5,r4,23
   124b4:	00c02034 	movhi	r3,128
   124b8:	18ffffc4 	addi	r3,r3,-1
   124bc:	29403fcc 	andi	r5,r5,255
   124c0:	00801f84 	movi	r2,126
   124c4:	1906703a 	and	r3,r3,r4
   124c8:	2008d7fa 	srli	r4,r4,31
   124cc:	11400e0e 	bge	r2,r5,12508 <__fixsfsi+0x58>
   124d0:	00802744 	movi	r2,157
   124d4:	11400816 	blt	r2,r5,124f8 <__fixsfsi+0x48>
   124d8:	00802544 	movi	r2,149
   124dc:	18c02034 	orhi	r3,r3,128
   124e0:	11400b0e 	bge	r2,r5,12510 <__fixsfsi+0x60>
   124e4:	28bfda84 	addi	r2,r5,-150
   124e8:	1884983a 	sll	r2,r3,r2
   124ec:	20000726 	beq	r4,zero,1250c <__fixsfsi+0x5c>
   124f0:	0085c83a 	sub	r2,zero,r2
   124f4:	f800283a 	ret
   124f8:	00a00034 	movhi	r2,32768
   124fc:	10bfffc4 	addi	r2,r2,-1
   12500:	2085883a 	add	r2,r4,r2
   12504:	f800283a 	ret
   12508:	0005883a 	mov	r2,zero
   1250c:	f800283a 	ret
   12510:	00802584 	movi	r2,150
   12514:	1145c83a 	sub	r2,r2,r5
   12518:	1884d83a 	srl	r2,r3,r2
   1251c:	003ff306 	br	124ec <__alt_data_end+0xffff24ec>

00012520 <__floatsisf>:
   12520:	defffd04 	addi	sp,sp,-12
   12524:	dfc00215 	stw	ra,8(sp)
   12528:	dc400115 	stw	r17,4(sp)
   1252c:	dc000015 	stw	r16,0(sp)
   12530:	20003526 	beq	r4,zero,12608 <__floatsisf+0xe8>
   12534:	2021883a 	mov	r16,r4
   12538:	2022d7fa 	srli	r17,r4,31
   1253c:	20003616 	blt	r4,zero,12618 <__floatsisf+0xf8>
   12540:	8009883a 	mov	r4,r16
   12544:	0014c400 	call	14c40 <__clzsi2>
   12548:	00c02784 	movi	r3,158
   1254c:	1887c83a 	sub	r3,r3,r2
   12550:	01002584 	movi	r4,150
   12554:	20c01416 	blt	r4,r3,125a8 <__floatsisf+0x88>
   12558:	20c9c83a 	sub	r4,r4,r3
   1255c:	8120983a 	sll	r16,r16,r4
   12560:	00802034 	movhi	r2,128
   12564:	10bfffc4 	addi	r2,r2,-1
   12568:	8809883a 	mov	r4,r17
   1256c:	80a0703a 	and	r16,r16,r2
   12570:	18803fcc 	andi	r2,r3,255
   12574:	100695fa 	slli	r3,r2,23
   12578:	20803fcc 	andi	r2,r4,255
   1257c:	100897fa 	slli	r4,r2,31
   12580:	00802034 	movhi	r2,128
   12584:	10bfffc4 	addi	r2,r2,-1
   12588:	8084703a 	and	r2,r16,r2
   1258c:	10c4b03a 	or	r2,r2,r3
   12590:	1104b03a 	or	r2,r2,r4
   12594:	dfc00217 	ldw	ra,8(sp)
   12598:	dc400117 	ldw	r17,4(sp)
   1259c:	dc000017 	ldw	r16,0(sp)
   125a0:	dec00304 	addi	sp,sp,12
   125a4:	f800283a 	ret
   125a8:	01002644 	movi	r4,153
   125ac:	20c01c16 	blt	r4,r3,12620 <__floatsisf+0x100>
   125b0:	20c9c83a 	sub	r4,r4,r3
   125b4:	8120983a 	sll	r16,r16,r4
   125b8:	013f0034 	movhi	r4,64512
   125bc:	213fffc4 	addi	r4,r4,-1
   125c0:	814001cc 	andi	r5,r16,7
   125c4:	8108703a 	and	r4,r16,r4
   125c8:	28000426 	beq	r5,zero,125dc <__floatsisf+0xbc>
   125cc:	840003cc 	andi	r16,r16,15
   125d0:	01400104 	movi	r5,4
   125d4:	81400126 	beq	r16,r5,125dc <__floatsisf+0xbc>
   125d8:	2149883a 	add	r4,r4,r5
   125dc:	2141002c 	andhi	r5,r4,1024
   125e0:	28000526 	beq	r5,zero,125f8 <__floatsisf+0xd8>
   125e4:	00c027c4 	movi	r3,159
   125e8:	1887c83a 	sub	r3,r3,r2
   125ec:	00bf0034 	movhi	r2,64512
   125f0:	10bfffc4 	addi	r2,r2,-1
   125f4:	2088703a 	and	r4,r4,r2
   125f8:	202091ba 	slli	r16,r4,6
   125fc:	8809883a 	mov	r4,r17
   12600:	8020d27a 	srli	r16,r16,9
   12604:	003fda06 	br	12570 <__alt_data_end+0xffff2570>
   12608:	0009883a 	mov	r4,zero
   1260c:	0007883a 	mov	r3,zero
   12610:	0021883a 	mov	r16,zero
   12614:	003fd606 	br	12570 <__alt_data_end+0xffff2570>
   12618:	0121c83a 	sub	r16,zero,r4
   1261c:	003fc806 	br	12540 <__alt_data_end+0xffff2540>
   12620:	01002e44 	movi	r4,185
   12624:	20c9c83a 	sub	r4,r4,r3
   12628:	01400144 	movi	r5,5
   1262c:	8108983a 	sll	r4,r16,r4
   12630:	288bc83a 	sub	r5,r5,r2
   12634:	8160d83a 	srl	r16,r16,r5
   12638:	2008c03a 	cmpne	r4,r4,zero
   1263c:	8120b03a 	or	r16,r16,r4
   12640:	003fdd06 	br	125b8 <__alt_data_end+0xffff25b8>

00012644 <__adddf3>:
   12644:	02c00434 	movhi	r11,16
   12648:	5affffc4 	addi	r11,r11,-1
   1264c:	2806d7fa 	srli	r3,r5,31
   12650:	2ad4703a 	and	r10,r5,r11
   12654:	3ad2703a 	and	r9,r7,r11
   12658:	3804d53a 	srli	r2,r7,20
   1265c:	3018d77a 	srli	r12,r6,29
   12660:	280ad53a 	srli	r5,r5,20
   12664:	501490fa 	slli	r10,r10,3
   12668:	2010d77a 	srli	r8,r4,29
   1266c:	481290fa 	slli	r9,r9,3
   12670:	380ed7fa 	srli	r7,r7,31
   12674:	defffb04 	addi	sp,sp,-20
   12678:	dc800215 	stw	r18,8(sp)
   1267c:	dc400115 	stw	r17,4(sp)
   12680:	dc000015 	stw	r16,0(sp)
   12684:	dfc00415 	stw	ra,16(sp)
   12688:	dcc00315 	stw	r19,12(sp)
   1268c:	1c803fcc 	andi	r18,r3,255
   12690:	2c01ffcc 	andi	r16,r5,2047
   12694:	5210b03a 	or	r8,r10,r8
   12698:	202290fa 	slli	r17,r4,3
   1269c:	1081ffcc 	andi	r2,r2,2047
   126a0:	4b12b03a 	or	r9,r9,r12
   126a4:	300c90fa 	slli	r6,r6,3
   126a8:	91c07526 	beq	r18,r7,12880 <__adddf3+0x23c>
   126ac:	8087c83a 	sub	r3,r16,r2
   126b0:	00c0ab0e 	bge	zero,r3,12960 <__adddf3+0x31c>
   126b4:	10002a1e 	bne	r2,zero,12760 <__adddf3+0x11c>
   126b8:	4984b03a 	or	r2,r9,r6
   126bc:	1000961e 	bne	r2,zero,12918 <__adddf3+0x2d4>
   126c0:	888001cc 	andi	r2,r17,7
   126c4:	10000726 	beq	r2,zero,126e4 <__adddf3+0xa0>
   126c8:	888003cc 	andi	r2,r17,15
   126cc:	00c00104 	movi	r3,4
   126d0:	10c00426 	beq	r2,r3,126e4 <__adddf3+0xa0>
   126d4:	88c7883a 	add	r3,r17,r3
   126d8:	1c63803a 	cmpltu	r17,r3,r17
   126dc:	4451883a 	add	r8,r8,r17
   126e0:	1823883a 	mov	r17,r3
   126e4:	4080202c 	andhi	r2,r8,128
   126e8:	10005926 	beq	r2,zero,12850 <__adddf3+0x20c>
   126ec:	84000044 	addi	r16,r16,1
   126f0:	0081ffc4 	movi	r2,2047
   126f4:	8080ba26 	beq	r16,r2,129e0 <__adddf3+0x39c>
   126f8:	00bfe034 	movhi	r2,65408
   126fc:	10bfffc4 	addi	r2,r2,-1
   12700:	4090703a 	and	r8,r8,r2
   12704:	4004977a 	slli	r2,r8,29
   12708:	4010927a 	slli	r8,r8,9
   1270c:	8822d0fa 	srli	r17,r17,3
   12710:	8401ffcc 	andi	r16,r16,2047
   12714:	4010d33a 	srli	r8,r8,12
   12718:	9007883a 	mov	r3,r18
   1271c:	1444b03a 	or	r2,r2,r17
   12720:	8401ffcc 	andi	r16,r16,2047
   12724:	8020953a 	slli	r16,r16,20
   12728:	18c03fcc 	andi	r3,r3,255
   1272c:	01000434 	movhi	r4,16
   12730:	213fffc4 	addi	r4,r4,-1
   12734:	180697fa 	slli	r3,r3,31
   12738:	4110703a 	and	r8,r8,r4
   1273c:	4410b03a 	or	r8,r8,r16
   12740:	40c6b03a 	or	r3,r8,r3
   12744:	dfc00417 	ldw	ra,16(sp)
   12748:	dcc00317 	ldw	r19,12(sp)
   1274c:	dc800217 	ldw	r18,8(sp)
   12750:	dc400117 	ldw	r17,4(sp)
   12754:	dc000017 	ldw	r16,0(sp)
   12758:	dec00504 	addi	sp,sp,20
   1275c:	f800283a 	ret
   12760:	0081ffc4 	movi	r2,2047
   12764:	80bfd626 	beq	r16,r2,126c0 <__alt_data_end+0xffff26c0>
   12768:	4a402034 	orhi	r9,r9,128
   1276c:	00800e04 	movi	r2,56
   12770:	10c09f16 	blt	r2,r3,129f0 <__adddf3+0x3ac>
   12774:	008007c4 	movi	r2,31
   12778:	10c0c216 	blt	r2,r3,12a84 <__adddf3+0x440>
   1277c:	00800804 	movi	r2,32
   12780:	10c5c83a 	sub	r2,r2,r3
   12784:	488a983a 	sll	r5,r9,r2
   12788:	30c8d83a 	srl	r4,r6,r3
   1278c:	3084983a 	sll	r2,r6,r2
   12790:	48c6d83a 	srl	r3,r9,r3
   12794:	290cb03a 	or	r6,r5,r4
   12798:	1004c03a 	cmpne	r2,r2,zero
   1279c:	308cb03a 	or	r6,r6,r2
   127a0:	898dc83a 	sub	r6,r17,r6
   127a4:	89a3803a 	cmpltu	r17,r17,r6
   127a8:	40d1c83a 	sub	r8,r8,r3
   127ac:	4451c83a 	sub	r8,r8,r17
   127b0:	3023883a 	mov	r17,r6
   127b4:	4080202c 	andhi	r2,r8,128
   127b8:	10002326 	beq	r2,zero,12848 <__adddf3+0x204>
   127bc:	04c02034 	movhi	r19,128
   127c0:	9cffffc4 	addi	r19,r19,-1
   127c4:	44e6703a 	and	r19,r8,r19
   127c8:	98007626 	beq	r19,zero,129a4 <__adddf3+0x360>
   127cc:	9809883a 	mov	r4,r19
   127d0:	0014c400 	call	14c40 <__clzsi2>
   127d4:	10fffe04 	addi	r3,r2,-8
   127d8:	010007c4 	movi	r4,31
   127dc:	20c07716 	blt	r4,r3,129bc <__adddf3+0x378>
   127e0:	00800804 	movi	r2,32
   127e4:	10c5c83a 	sub	r2,r2,r3
   127e8:	8884d83a 	srl	r2,r17,r2
   127ec:	98d0983a 	sll	r8,r19,r3
   127f0:	88e2983a 	sll	r17,r17,r3
   127f4:	1204b03a 	or	r2,r2,r8
   127f8:	1c007416 	blt	r3,r16,129cc <__adddf3+0x388>
   127fc:	1c21c83a 	sub	r16,r3,r16
   12800:	82000044 	addi	r8,r16,1
   12804:	00c007c4 	movi	r3,31
   12808:	1a009116 	blt	r3,r8,12a50 <__adddf3+0x40c>
   1280c:	00c00804 	movi	r3,32
   12810:	1a07c83a 	sub	r3,r3,r8
   12814:	8a08d83a 	srl	r4,r17,r8
   12818:	88e2983a 	sll	r17,r17,r3
   1281c:	10c6983a 	sll	r3,r2,r3
   12820:	1210d83a 	srl	r8,r2,r8
   12824:	8804c03a 	cmpne	r2,r17,zero
   12828:	1906b03a 	or	r3,r3,r4
   1282c:	18a2b03a 	or	r17,r3,r2
   12830:	0021883a 	mov	r16,zero
   12834:	003fa206 	br	126c0 <__alt_data_end+0xffff26c0>
   12838:	1890b03a 	or	r8,r3,r2
   1283c:	40017d26 	beq	r8,zero,12e34 <__adddf3+0x7f0>
   12840:	1011883a 	mov	r8,r2
   12844:	1823883a 	mov	r17,r3
   12848:	888001cc 	andi	r2,r17,7
   1284c:	103f9e1e 	bne	r2,zero,126c8 <__alt_data_end+0xffff26c8>
   12850:	4004977a 	slli	r2,r8,29
   12854:	8822d0fa 	srli	r17,r17,3
   12858:	4010d0fa 	srli	r8,r8,3
   1285c:	9007883a 	mov	r3,r18
   12860:	1444b03a 	or	r2,r2,r17
   12864:	0101ffc4 	movi	r4,2047
   12868:	81002426 	beq	r16,r4,128fc <__adddf3+0x2b8>
   1286c:	8120703a 	and	r16,r16,r4
   12870:	01000434 	movhi	r4,16
   12874:	213fffc4 	addi	r4,r4,-1
   12878:	4110703a 	and	r8,r8,r4
   1287c:	003fa806 	br	12720 <__alt_data_end+0xffff2720>
   12880:	8089c83a 	sub	r4,r16,r2
   12884:	01005e0e 	bge	zero,r4,12a00 <__adddf3+0x3bc>
   12888:	10002b26 	beq	r2,zero,12938 <__adddf3+0x2f4>
   1288c:	0081ffc4 	movi	r2,2047
   12890:	80bf8b26 	beq	r16,r2,126c0 <__alt_data_end+0xffff26c0>
   12894:	4a402034 	orhi	r9,r9,128
   12898:	00800e04 	movi	r2,56
   1289c:	1100a40e 	bge	r2,r4,12b30 <__adddf3+0x4ec>
   128a0:	498cb03a 	or	r6,r9,r6
   128a4:	300ac03a 	cmpne	r5,r6,zero
   128a8:	0013883a 	mov	r9,zero
   128ac:	2c4b883a 	add	r5,r5,r17
   128b0:	2c63803a 	cmpltu	r17,r5,r17
   128b4:	4a11883a 	add	r8,r9,r8
   128b8:	8a11883a 	add	r8,r17,r8
   128bc:	2823883a 	mov	r17,r5
   128c0:	4080202c 	andhi	r2,r8,128
   128c4:	103fe026 	beq	r2,zero,12848 <__alt_data_end+0xffff2848>
   128c8:	84000044 	addi	r16,r16,1
   128cc:	0081ffc4 	movi	r2,2047
   128d0:	8080d226 	beq	r16,r2,12c1c <__adddf3+0x5d8>
   128d4:	00bfe034 	movhi	r2,65408
   128d8:	10bfffc4 	addi	r2,r2,-1
   128dc:	4090703a 	and	r8,r8,r2
   128e0:	880ad07a 	srli	r5,r17,1
   128e4:	400897fa 	slli	r4,r8,31
   128e8:	88c0004c 	andi	r3,r17,1
   128ec:	28e2b03a 	or	r17,r5,r3
   128f0:	4010d07a 	srli	r8,r8,1
   128f4:	2462b03a 	or	r17,r4,r17
   128f8:	003f7106 	br	126c0 <__alt_data_end+0xffff26c0>
   128fc:	4088b03a 	or	r4,r8,r2
   12900:	20014526 	beq	r4,zero,12e18 <__adddf3+0x7d4>
   12904:	01000434 	movhi	r4,16
   12908:	42000234 	orhi	r8,r8,8
   1290c:	213fffc4 	addi	r4,r4,-1
   12910:	4110703a 	and	r8,r8,r4
   12914:	003f8206 	br	12720 <__alt_data_end+0xffff2720>
   12918:	18ffffc4 	addi	r3,r3,-1
   1291c:	1800491e 	bne	r3,zero,12a44 <__adddf3+0x400>
   12920:	898bc83a 	sub	r5,r17,r6
   12924:	8963803a 	cmpltu	r17,r17,r5
   12928:	4251c83a 	sub	r8,r8,r9
   1292c:	4451c83a 	sub	r8,r8,r17
   12930:	2823883a 	mov	r17,r5
   12934:	003f9f06 	br	127b4 <__alt_data_end+0xffff27b4>
   12938:	4984b03a 	or	r2,r9,r6
   1293c:	103f6026 	beq	r2,zero,126c0 <__alt_data_end+0xffff26c0>
   12940:	213fffc4 	addi	r4,r4,-1
   12944:	2000931e 	bne	r4,zero,12b94 <__adddf3+0x550>
   12948:	898d883a 	add	r6,r17,r6
   1294c:	3463803a 	cmpltu	r17,r6,r17
   12950:	4251883a 	add	r8,r8,r9
   12954:	8a11883a 	add	r8,r17,r8
   12958:	3023883a 	mov	r17,r6
   1295c:	003fd806 	br	128c0 <__alt_data_end+0xffff28c0>
   12960:	1800541e 	bne	r3,zero,12ab4 <__adddf3+0x470>
   12964:	80800044 	addi	r2,r16,1
   12968:	1081ffcc 	andi	r2,r2,2047
   1296c:	00c00044 	movi	r3,1
   12970:	1880a00e 	bge	r3,r2,12bf4 <__adddf3+0x5b0>
   12974:	8989c83a 	sub	r4,r17,r6
   12978:	8905803a 	cmpltu	r2,r17,r4
   1297c:	4267c83a 	sub	r19,r8,r9
   12980:	98a7c83a 	sub	r19,r19,r2
   12984:	9880202c 	andhi	r2,r19,128
   12988:	10006326 	beq	r2,zero,12b18 <__adddf3+0x4d4>
   1298c:	3463c83a 	sub	r17,r6,r17
   12990:	4a07c83a 	sub	r3,r9,r8
   12994:	344d803a 	cmpltu	r6,r6,r17
   12998:	19a7c83a 	sub	r19,r3,r6
   1299c:	3825883a 	mov	r18,r7
   129a0:	983f8a1e 	bne	r19,zero,127cc <__alt_data_end+0xffff27cc>
   129a4:	8809883a 	mov	r4,r17
   129a8:	0014c400 	call	14c40 <__clzsi2>
   129ac:	10800804 	addi	r2,r2,32
   129b0:	10fffe04 	addi	r3,r2,-8
   129b4:	010007c4 	movi	r4,31
   129b8:	20ff890e 	bge	r4,r3,127e0 <__alt_data_end+0xffff27e0>
   129bc:	10bff604 	addi	r2,r2,-40
   129c0:	8884983a 	sll	r2,r17,r2
   129c4:	0023883a 	mov	r17,zero
   129c8:	1c3f8c0e 	bge	r3,r16,127fc <__alt_data_end+0xffff27fc>
   129cc:	023fe034 	movhi	r8,65408
   129d0:	423fffc4 	addi	r8,r8,-1
   129d4:	80e1c83a 	sub	r16,r16,r3
   129d8:	1210703a 	and	r8,r2,r8
   129dc:	003f3806 	br	126c0 <__alt_data_end+0xffff26c0>
   129e0:	9007883a 	mov	r3,r18
   129e4:	0011883a 	mov	r8,zero
   129e8:	0005883a 	mov	r2,zero
   129ec:	003f4c06 	br	12720 <__alt_data_end+0xffff2720>
   129f0:	498cb03a 	or	r6,r9,r6
   129f4:	300cc03a 	cmpne	r6,r6,zero
   129f8:	0007883a 	mov	r3,zero
   129fc:	003f6806 	br	127a0 <__alt_data_end+0xffff27a0>
   12a00:	20009c1e 	bne	r4,zero,12c74 <__adddf3+0x630>
   12a04:	80800044 	addi	r2,r16,1
   12a08:	1141ffcc 	andi	r5,r2,2047
   12a0c:	01000044 	movi	r4,1
   12a10:	2140670e 	bge	r4,r5,12bb0 <__adddf3+0x56c>
   12a14:	0101ffc4 	movi	r4,2047
   12a18:	11007f26 	beq	r2,r4,12c18 <__adddf3+0x5d4>
   12a1c:	898d883a 	add	r6,r17,r6
   12a20:	4247883a 	add	r3,r8,r9
   12a24:	3451803a 	cmpltu	r8,r6,r17
   12a28:	40d1883a 	add	r8,r8,r3
   12a2c:	402297fa 	slli	r17,r8,31
   12a30:	300cd07a 	srli	r6,r6,1
   12a34:	4010d07a 	srli	r8,r8,1
   12a38:	1021883a 	mov	r16,r2
   12a3c:	89a2b03a 	or	r17,r17,r6
   12a40:	003f1f06 	br	126c0 <__alt_data_end+0xffff26c0>
   12a44:	0081ffc4 	movi	r2,2047
   12a48:	80bf481e 	bne	r16,r2,1276c <__alt_data_end+0xffff276c>
   12a4c:	003f1c06 	br	126c0 <__alt_data_end+0xffff26c0>
   12a50:	843ff844 	addi	r16,r16,-31
   12a54:	01000804 	movi	r4,32
   12a58:	1406d83a 	srl	r3,r2,r16
   12a5c:	41005026 	beq	r8,r4,12ba0 <__adddf3+0x55c>
   12a60:	01001004 	movi	r4,64
   12a64:	2211c83a 	sub	r8,r4,r8
   12a68:	1204983a 	sll	r2,r2,r8
   12a6c:	88a2b03a 	or	r17,r17,r2
   12a70:	8822c03a 	cmpne	r17,r17,zero
   12a74:	1c62b03a 	or	r17,r3,r17
   12a78:	0011883a 	mov	r8,zero
   12a7c:	0021883a 	mov	r16,zero
   12a80:	003f7106 	br	12848 <__alt_data_end+0xffff2848>
   12a84:	193ff804 	addi	r4,r3,-32
   12a88:	00800804 	movi	r2,32
   12a8c:	4908d83a 	srl	r4,r9,r4
   12a90:	18804526 	beq	r3,r2,12ba8 <__adddf3+0x564>
   12a94:	00801004 	movi	r2,64
   12a98:	10c5c83a 	sub	r2,r2,r3
   12a9c:	4886983a 	sll	r3,r9,r2
   12aa0:	198cb03a 	or	r6,r3,r6
   12aa4:	300cc03a 	cmpne	r6,r6,zero
   12aa8:	218cb03a 	or	r6,r4,r6
   12aac:	0007883a 	mov	r3,zero
   12ab0:	003f3b06 	br	127a0 <__alt_data_end+0xffff27a0>
   12ab4:	80002a26 	beq	r16,zero,12b60 <__adddf3+0x51c>
   12ab8:	0101ffc4 	movi	r4,2047
   12abc:	11006826 	beq	r2,r4,12c60 <__adddf3+0x61c>
   12ac0:	00c7c83a 	sub	r3,zero,r3
   12ac4:	42002034 	orhi	r8,r8,128
   12ac8:	01000e04 	movi	r4,56
   12acc:	20c07c16 	blt	r4,r3,12cc0 <__adddf3+0x67c>
   12ad0:	010007c4 	movi	r4,31
   12ad4:	20c0da16 	blt	r4,r3,12e40 <__adddf3+0x7fc>
   12ad8:	01000804 	movi	r4,32
   12adc:	20c9c83a 	sub	r4,r4,r3
   12ae0:	4114983a 	sll	r10,r8,r4
   12ae4:	88cad83a 	srl	r5,r17,r3
   12ae8:	8908983a 	sll	r4,r17,r4
   12aec:	40c6d83a 	srl	r3,r8,r3
   12af0:	5162b03a 	or	r17,r10,r5
   12af4:	2008c03a 	cmpne	r4,r4,zero
   12af8:	8922b03a 	or	r17,r17,r4
   12afc:	3463c83a 	sub	r17,r6,r17
   12b00:	48c7c83a 	sub	r3,r9,r3
   12b04:	344d803a 	cmpltu	r6,r6,r17
   12b08:	1991c83a 	sub	r8,r3,r6
   12b0c:	1021883a 	mov	r16,r2
   12b10:	3825883a 	mov	r18,r7
   12b14:	003f2706 	br	127b4 <__alt_data_end+0xffff27b4>
   12b18:	24d0b03a 	or	r8,r4,r19
   12b1c:	40001b1e 	bne	r8,zero,12b8c <__adddf3+0x548>
   12b20:	0005883a 	mov	r2,zero
   12b24:	0007883a 	mov	r3,zero
   12b28:	0021883a 	mov	r16,zero
   12b2c:	003f4d06 	br	12864 <__alt_data_end+0xffff2864>
   12b30:	008007c4 	movi	r2,31
   12b34:	11003c16 	blt	r2,r4,12c28 <__adddf3+0x5e4>
   12b38:	00800804 	movi	r2,32
   12b3c:	1105c83a 	sub	r2,r2,r4
   12b40:	488e983a 	sll	r7,r9,r2
   12b44:	310ad83a 	srl	r5,r6,r4
   12b48:	3084983a 	sll	r2,r6,r2
   12b4c:	4912d83a 	srl	r9,r9,r4
   12b50:	394ab03a 	or	r5,r7,r5
   12b54:	1004c03a 	cmpne	r2,r2,zero
   12b58:	288ab03a 	or	r5,r5,r2
   12b5c:	003f5306 	br	128ac <__alt_data_end+0xffff28ac>
   12b60:	4448b03a 	or	r4,r8,r17
   12b64:	20003e26 	beq	r4,zero,12c60 <__adddf3+0x61c>
   12b68:	00c6303a 	nor	r3,zero,r3
   12b6c:	18003a1e 	bne	r3,zero,12c58 <__adddf3+0x614>
   12b70:	3463c83a 	sub	r17,r6,r17
   12b74:	4a07c83a 	sub	r3,r9,r8
   12b78:	344d803a 	cmpltu	r6,r6,r17
   12b7c:	1991c83a 	sub	r8,r3,r6
   12b80:	1021883a 	mov	r16,r2
   12b84:	3825883a 	mov	r18,r7
   12b88:	003f0a06 	br	127b4 <__alt_data_end+0xffff27b4>
   12b8c:	2023883a 	mov	r17,r4
   12b90:	003f0d06 	br	127c8 <__alt_data_end+0xffff27c8>
   12b94:	0081ffc4 	movi	r2,2047
   12b98:	80bf3f1e 	bne	r16,r2,12898 <__alt_data_end+0xffff2898>
   12b9c:	003ec806 	br	126c0 <__alt_data_end+0xffff26c0>
   12ba0:	0005883a 	mov	r2,zero
   12ba4:	003fb106 	br	12a6c <__alt_data_end+0xffff2a6c>
   12ba8:	0007883a 	mov	r3,zero
   12bac:	003fbc06 	br	12aa0 <__alt_data_end+0xffff2aa0>
   12bb0:	4444b03a 	or	r2,r8,r17
   12bb4:	8000871e 	bne	r16,zero,12dd4 <__adddf3+0x790>
   12bb8:	1000ba26 	beq	r2,zero,12ea4 <__adddf3+0x860>
   12bbc:	4984b03a 	or	r2,r9,r6
   12bc0:	103ebf26 	beq	r2,zero,126c0 <__alt_data_end+0xffff26c0>
   12bc4:	8985883a 	add	r2,r17,r6
   12bc8:	4247883a 	add	r3,r8,r9
   12bcc:	1451803a 	cmpltu	r8,r2,r17
   12bd0:	40d1883a 	add	r8,r8,r3
   12bd4:	40c0202c 	andhi	r3,r8,128
   12bd8:	1023883a 	mov	r17,r2
   12bdc:	183f1a26 	beq	r3,zero,12848 <__alt_data_end+0xffff2848>
   12be0:	00bfe034 	movhi	r2,65408
   12be4:	10bfffc4 	addi	r2,r2,-1
   12be8:	2021883a 	mov	r16,r4
   12bec:	4090703a 	and	r8,r8,r2
   12bf0:	003eb306 	br	126c0 <__alt_data_end+0xffff26c0>
   12bf4:	4444b03a 	or	r2,r8,r17
   12bf8:	8000291e 	bne	r16,zero,12ca0 <__adddf3+0x65c>
   12bfc:	10004b1e 	bne	r2,zero,12d2c <__adddf3+0x6e8>
   12c00:	4990b03a 	or	r8,r9,r6
   12c04:	40008b26 	beq	r8,zero,12e34 <__adddf3+0x7f0>
   12c08:	4811883a 	mov	r8,r9
   12c0c:	3023883a 	mov	r17,r6
   12c10:	3825883a 	mov	r18,r7
   12c14:	003eaa06 	br	126c0 <__alt_data_end+0xffff26c0>
   12c18:	1021883a 	mov	r16,r2
   12c1c:	0011883a 	mov	r8,zero
   12c20:	0005883a 	mov	r2,zero
   12c24:	003f0f06 	br	12864 <__alt_data_end+0xffff2864>
   12c28:	217ff804 	addi	r5,r4,-32
   12c2c:	00800804 	movi	r2,32
   12c30:	494ad83a 	srl	r5,r9,r5
   12c34:	20807d26 	beq	r4,r2,12e2c <__adddf3+0x7e8>
   12c38:	00801004 	movi	r2,64
   12c3c:	1109c83a 	sub	r4,r2,r4
   12c40:	4912983a 	sll	r9,r9,r4
   12c44:	498cb03a 	or	r6,r9,r6
   12c48:	300cc03a 	cmpne	r6,r6,zero
   12c4c:	298ab03a 	or	r5,r5,r6
   12c50:	0013883a 	mov	r9,zero
   12c54:	003f1506 	br	128ac <__alt_data_end+0xffff28ac>
   12c58:	0101ffc4 	movi	r4,2047
   12c5c:	113f9a1e 	bne	r2,r4,12ac8 <__alt_data_end+0xffff2ac8>
   12c60:	4811883a 	mov	r8,r9
   12c64:	3023883a 	mov	r17,r6
   12c68:	1021883a 	mov	r16,r2
   12c6c:	3825883a 	mov	r18,r7
   12c70:	003e9306 	br	126c0 <__alt_data_end+0xffff26c0>
   12c74:	8000161e 	bne	r16,zero,12cd0 <__adddf3+0x68c>
   12c78:	444ab03a 	or	r5,r8,r17
   12c7c:	28005126 	beq	r5,zero,12dc4 <__adddf3+0x780>
   12c80:	0108303a 	nor	r4,zero,r4
   12c84:	20004d1e 	bne	r4,zero,12dbc <__adddf3+0x778>
   12c88:	89a3883a 	add	r17,r17,r6
   12c8c:	4253883a 	add	r9,r8,r9
   12c90:	898d803a 	cmpltu	r6,r17,r6
   12c94:	3251883a 	add	r8,r6,r9
   12c98:	1021883a 	mov	r16,r2
   12c9c:	003f0806 	br	128c0 <__alt_data_end+0xffff28c0>
   12ca0:	1000301e 	bne	r2,zero,12d64 <__adddf3+0x720>
   12ca4:	4984b03a 	or	r2,r9,r6
   12ca8:	10007126 	beq	r2,zero,12e70 <__adddf3+0x82c>
   12cac:	4811883a 	mov	r8,r9
   12cb0:	3023883a 	mov	r17,r6
   12cb4:	3825883a 	mov	r18,r7
   12cb8:	0401ffc4 	movi	r16,2047
   12cbc:	003e8006 	br	126c0 <__alt_data_end+0xffff26c0>
   12cc0:	4462b03a 	or	r17,r8,r17
   12cc4:	8822c03a 	cmpne	r17,r17,zero
   12cc8:	0007883a 	mov	r3,zero
   12ccc:	003f8b06 	br	12afc <__alt_data_end+0xffff2afc>
   12cd0:	0141ffc4 	movi	r5,2047
   12cd4:	11403b26 	beq	r2,r5,12dc4 <__adddf3+0x780>
   12cd8:	0109c83a 	sub	r4,zero,r4
   12cdc:	42002034 	orhi	r8,r8,128
   12ce0:	01400e04 	movi	r5,56
   12ce4:	29006716 	blt	r5,r4,12e84 <__adddf3+0x840>
   12ce8:	014007c4 	movi	r5,31
   12cec:	29007016 	blt	r5,r4,12eb0 <__adddf3+0x86c>
   12cf0:	01400804 	movi	r5,32
   12cf4:	290bc83a 	sub	r5,r5,r4
   12cf8:	4154983a 	sll	r10,r8,r5
   12cfc:	890ed83a 	srl	r7,r17,r4
   12d00:	894a983a 	sll	r5,r17,r5
   12d04:	4108d83a 	srl	r4,r8,r4
   12d08:	51e2b03a 	or	r17,r10,r7
   12d0c:	280ac03a 	cmpne	r5,r5,zero
   12d10:	8962b03a 	or	r17,r17,r5
   12d14:	89a3883a 	add	r17,r17,r6
   12d18:	2253883a 	add	r9,r4,r9
   12d1c:	898d803a 	cmpltu	r6,r17,r6
   12d20:	3251883a 	add	r8,r6,r9
   12d24:	1021883a 	mov	r16,r2
   12d28:	003ee506 	br	128c0 <__alt_data_end+0xffff28c0>
   12d2c:	4984b03a 	or	r2,r9,r6
   12d30:	103e6326 	beq	r2,zero,126c0 <__alt_data_end+0xffff26c0>
   12d34:	8987c83a 	sub	r3,r17,r6
   12d38:	88c9803a 	cmpltu	r4,r17,r3
   12d3c:	4245c83a 	sub	r2,r8,r9
   12d40:	1105c83a 	sub	r2,r2,r4
   12d44:	1100202c 	andhi	r4,r2,128
   12d48:	203ebb26 	beq	r4,zero,12838 <__alt_data_end+0xffff2838>
   12d4c:	3463c83a 	sub	r17,r6,r17
   12d50:	4a07c83a 	sub	r3,r9,r8
   12d54:	344d803a 	cmpltu	r6,r6,r17
   12d58:	1991c83a 	sub	r8,r3,r6
   12d5c:	3825883a 	mov	r18,r7
   12d60:	003e5706 	br	126c0 <__alt_data_end+0xffff26c0>
   12d64:	4984b03a 	or	r2,r9,r6
   12d68:	10002e26 	beq	r2,zero,12e24 <__adddf3+0x7e0>
   12d6c:	4004d0fa 	srli	r2,r8,3
   12d70:	8822d0fa 	srli	r17,r17,3
   12d74:	4010977a 	slli	r8,r8,29
   12d78:	10c0022c 	andhi	r3,r2,8
   12d7c:	4462b03a 	or	r17,r8,r17
   12d80:	18000826 	beq	r3,zero,12da4 <__adddf3+0x760>
   12d84:	4808d0fa 	srli	r4,r9,3
   12d88:	20c0022c 	andhi	r3,r4,8
   12d8c:	1800051e 	bne	r3,zero,12da4 <__adddf3+0x760>
   12d90:	300cd0fa 	srli	r6,r6,3
   12d94:	4806977a 	slli	r3,r9,29
   12d98:	2005883a 	mov	r2,r4
   12d9c:	3825883a 	mov	r18,r7
   12da0:	19a2b03a 	or	r17,r3,r6
   12da4:	8810d77a 	srli	r8,r17,29
   12da8:	100490fa 	slli	r2,r2,3
   12dac:	882290fa 	slli	r17,r17,3
   12db0:	0401ffc4 	movi	r16,2047
   12db4:	4090b03a 	or	r8,r8,r2
   12db8:	003e4106 	br	126c0 <__alt_data_end+0xffff26c0>
   12dbc:	0141ffc4 	movi	r5,2047
   12dc0:	117fc71e 	bne	r2,r5,12ce0 <__alt_data_end+0xffff2ce0>
   12dc4:	4811883a 	mov	r8,r9
   12dc8:	3023883a 	mov	r17,r6
   12dcc:	1021883a 	mov	r16,r2
   12dd0:	003e3b06 	br	126c0 <__alt_data_end+0xffff26c0>
   12dd4:	10002f26 	beq	r2,zero,12e94 <__adddf3+0x850>
   12dd8:	4984b03a 	or	r2,r9,r6
   12ddc:	10001126 	beq	r2,zero,12e24 <__adddf3+0x7e0>
   12de0:	4004d0fa 	srli	r2,r8,3
   12de4:	8822d0fa 	srli	r17,r17,3
   12de8:	4010977a 	slli	r8,r8,29
   12dec:	10c0022c 	andhi	r3,r2,8
   12df0:	4462b03a 	or	r17,r8,r17
   12df4:	183feb26 	beq	r3,zero,12da4 <__alt_data_end+0xffff2da4>
   12df8:	4808d0fa 	srli	r4,r9,3
   12dfc:	20c0022c 	andhi	r3,r4,8
   12e00:	183fe81e 	bne	r3,zero,12da4 <__alt_data_end+0xffff2da4>
   12e04:	300cd0fa 	srli	r6,r6,3
   12e08:	4806977a 	slli	r3,r9,29
   12e0c:	2005883a 	mov	r2,r4
   12e10:	19a2b03a 	or	r17,r3,r6
   12e14:	003fe306 	br	12da4 <__alt_data_end+0xffff2da4>
   12e18:	0011883a 	mov	r8,zero
   12e1c:	0005883a 	mov	r2,zero
   12e20:	003e3f06 	br	12720 <__alt_data_end+0xffff2720>
   12e24:	0401ffc4 	movi	r16,2047
   12e28:	003e2506 	br	126c0 <__alt_data_end+0xffff26c0>
   12e2c:	0013883a 	mov	r9,zero
   12e30:	003f8406 	br	12c44 <__alt_data_end+0xffff2c44>
   12e34:	0005883a 	mov	r2,zero
   12e38:	0007883a 	mov	r3,zero
   12e3c:	003e8906 	br	12864 <__alt_data_end+0xffff2864>
   12e40:	197ff804 	addi	r5,r3,-32
   12e44:	01000804 	movi	r4,32
   12e48:	414ad83a 	srl	r5,r8,r5
   12e4c:	19002426 	beq	r3,r4,12ee0 <__adddf3+0x89c>
   12e50:	01001004 	movi	r4,64
   12e54:	20c7c83a 	sub	r3,r4,r3
   12e58:	40c6983a 	sll	r3,r8,r3
   12e5c:	1c46b03a 	or	r3,r3,r17
   12e60:	1806c03a 	cmpne	r3,r3,zero
   12e64:	28e2b03a 	or	r17,r5,r3
   12e68:	0007883a 	mov	r3,zero
   12e6c:	003f2306 	br	12afc <__alt_data_end+0xffff2afc>
   12e70:	0007883a 	mov	r3,zero
   12e74:	5811883a 	mov	r8,r11
   12e78:	00bfffc4 	movi	r2,-1
   12e7c:	0401ffc4 	movi	r16,2047
   12e80:	003e7806 	br	12864 <__alt_data_end+0xffff2864>
   12e84:	4462b03a 	or	r17,r8,r17
   12e88:	8822c03a 	cmpne	r17,r17,zero
   12e8c:	0009883a 	mov	r4,zero
   12e90:	003fa006 	br	12d14 <__alt_data_end+0xffff2d14>
   12e94:	4811883a 	mov	r8,r9
   12e98:	3023883a 	mov	r17,r6
   12e9c:	0401ffc4 	movi	r16,2047
   12ea0:	003e0706 	br	126c0 <__alt_data_end+0xffff26c0>
   12ea4:	4811883a 	mov	r8,r9
   12ea8:	3023883a 	mov	r17,r6
   12eac:	003e0406 	br	126c0 <__alt_data_end+0xffff26c0>
   12eb0:	21fff804 	addi	r7,r4,-32
   12eb4:	01400804 	movi	r5,32
   12eb8:	41ced83a 	srl	r7,r8,r7
   12ebc:	21400a26 	beq	r4,r5,12ee8 <__adddf3+0x8a4>
   12ec0:	01401004 	movi	r5,64
   12ec4:	2909c83a 	sub	r4,r5,r4
   12ec8:	4108983a 	sll	r4,r8,r4
   12ecc:	2448b03a 	or	r4,r4,r17
   12ed0:	2008c03a 	cmpne	r4,r4,zero
   12ed4:	3922b03a 	or	r17,r7,r4
   12ed8:	0009883a 	mov	r4,zero
   12edc:	003f8d06 	br	12d14 <__alt_data_end+0xffff2d14>
   12ee0:	0007883a 	mov	r3,zero
   12ee4:	003fdd06 	br	12e5c <__alt_data_end+0xffff2e5c>
   12ee8:	0009883a 	mov	r4,zero
   12eec:	003ff706 	br	12ecc <__alt_data_end+0xffff2ecc>

00012ef0 <__divdf3>:
   12ef0:	defff204 	addi	sp,sp,-56
   12ef4:	dd400915 	stw	r21,36(sp)
   12ef8:	282ad53a 	srli	r21,r5,20
   12efc:	dd000815 	stw	r20,32(sp)
   12f00:	2828d7fa 	srli	r20,r5,31
   12f04:	dc000415 	stw	r16,16(sp)
   12f08:	04000434 	movhi	r16,16
   12f0c:	df000c15 	stw	fp,48(sp)
   12f10:	843fffc4 	addi	r16,r16,-1
   12f14:	dfc00d15 	stw	ra,52(sp)
   12f18:	ddc00b15 	stw	r23,44(sp)
   12f1c:	dd800a15 	stw	r22,40(sp)
   12f20:	dcc00715 	stw	r19,28(sp)
   12f24:	dc800615 	stw	r18,24(sp)
   12f28:	dc400515 	stw	r17,20(sp)
   12f2c:	ad41ffcc 	andi	r21,r21,2047
   12f30:	2c20703a 	and	r16,r5,r16
   12f34:	a7003fcc 	andi	fp,r20,255
   12f38:	a8006126 	beq	r21,zero,130c0 <__divdf3+0x1d0>
   12f3c:	0081ffc4 	movi	r2,2047
   12f40:	2025883a 	mov	r18,r4
   12f44:	a8803726 	beq	r21,r2,13024 <__divdf3+0x134>
   12f48:	80800434 	orhi	r2,r16,16
   12f4c:	100490fa 	slli	r2,r2,3
   12f50:	2020d77a 	srli	r16,r4,29
   12f54:	202490fa 	slli	r18,r4,3
   12f58:	ad7f0044 	addi	r21,r21,-1023
   12f5c:	80a0b03a 	or	r16,r16,r2
   12f60:	0027883a 	mov	r19,zero
   12f64:	0013883a 	mov	r9,zero
   12f68:	3804d53a 	srli	r2,r7,20
   12f6c:	382cd7fa 	srli	r22,r7,31
   12f70:	04400434 	movhi	r17,16
   12f74:	8c7fffc4 	addi	r17,r17,-1
   12f78:	1081ffcc 	andi	r2,r2,2047
   12f7c:	3011883a 	mov	r8,r6
   12f80:	3c62703a 	and	r17,r7,r17
   12f84:	b5c03fcc 	andi	r23,r22,255
   12f88:	10006c26 	beq	r2,zero,1313c <__divdf3+0x24c>
   12f8c:	00c1ffc4 	movi	r3,2047
   12f90:	10c06426 	beq	r2,r3,13124 <__divdf3+0x234>
   12f94:	88c00434 	orhi	r3,r17,16
   12f98:	180690fa 	slli	r3,r3,3
   12f9c:	3022d77a 	srli	r17,r6,29
   12fa0:	301090fa 	slli	r8,r6,3
   12fa4:	10bf0044 	addi	r2,r2,-1023
   12fa8:	88e2b03a 	or	r17,r17,r3
   12fac:	000f883a 	mov	r7,zero
   12fb0:	a58cf03a 	xor	r6,r20,r22
   12fb4:	3cc8b03a 	or	r4,r7,r19
   12fb8:	a8abc83a 	sub	r21,r21,r2
   12fbc:	008003c4 	movi	r2,15
   12fc0:	3007883a 	mov	r3,r6
   12fc4:	34c03fcc 	andi	r19,r6,255
   12fc8:	11009036 	bltu	r2,r4,1320c <__divdf3+0x31c>
   12fcc:	200890ba 	slli	r4,r4,2
   12fd0:	00800074 	movhi	r2,1
   12fd4:	108bf904 	addi	r2,r2,12260
   12fd8:	2089883a 	add	r4,r4,r2
   12fdc:	20800017 	ldw	r2,0(r4)
   12fe0:	1000683a 	jmp	r2
   12fe4:	0001320c 	andi	zero,zero,1224
   12fe8:	0001305c 	xori	zero,zero,1217
   12fec:	000131fc 	xorhi	zero,zero,1223
   12ff0:	00013050 	cmplti	zero,zero,1217
   12ff4:	000131fc 	xorhi	zero,zero,1223
   12ff8:	000131d0 	cmplti	zero,zero,1223
   12ffc:	000131fc 	xorhi	zero,zero,1223
   13000:	00013050 	cmplti	zero,zero,1217
   13004:	0001305c 	xori	zero,zero,1217
   13008:	0001305c 	xori	zero,zero,1217
   1300c:	000131d0 	cmplti	zero,zero,1223
   13010:	00013050 	cmplti	zero,zero,1217
   13014:	00013040 	call	1304 <__alt_mem_onchip_memory-0xecfc>
   13018:	00013040 	call	1304 <__alt_mem_onchip_memory-0xecfc>
   1301c:	00013040 	call	1304 <__alt_mem_onchip_memory-0xecfc>
   13020:	000134f0 	cmpltui	zero,zero,1235
   13024:	2404b03a 	or	r2,r4,r16
   13028:	1000661e 	bne	r2,zero,131c4 <__divdf3+0x2d4>
   1302c:	04c00204 	movi	r19,8
   13030:	0021883a 	mov	r16,zero
   13034:	0025883a 	mov	r18,zero
   13038:	02400084 	movi	r9,2
   1303c:	003fca06 	br	12f68 <__alt_data_end+0xffff2f68>
   13040:	8023883a 	mov	r17,r16
   13044:	9011883a 	mov	r8,r18
   13048:	e02f883a 	mov	r23,fp
   1304c:	480f883a 	mov	r7,r9
   13050:	00800084 	movi	r2,2
   13054:	3881311e 	bne	r7,r2,1351c <__divdf3+0x62c>
   13058:	b827883a 	mov	r19,r23
   1305c:	98c0004c 	andi	r3,r19,1
   13060:	0081ffc4 	movi	r2,2047
   13064:	000b883a 	mov	r5,zero
   13068:	0025883a 	mov	r18,zero
   1306c:	1004953a 	slli	r2,r2,20
   13070:	18c03fcc 	andi	r3,r3,255
   13074:	04400434 	movhi	r17,16
   13078:	8c7fffc4 	addi	r17,r17,-1
   1307c:	180697fa 	slli	r3,r3,31
   13080:	2c4a703a 	and	r5,r5,r17
   13084:	288ab03a 	or	r5,r5,r2
   13088:	28c6b03a 	or	r3,r5,r3
   1308c:	9005883a 	mov	r2,r18
   13090:	dfc00d17 	ldw	ra,52(sp)
   13094:	df000c17 	ldw	fp,48(sp)
   13098:	ddc00b17 	ldw	r23,44(sp)
   1309c:	dd800a17 	ldw	r22,40(sp)
   130a0:	dd400917 	ldw	r21,36(sp)
   130a4:	dd000817 	ldw	r20,32(sp)
   130a8:	dcc00717 	ldw	r19,28(sp)
   130ac:	dc800617 	ldw	r18,24(sp)
   130b0:	dc400517 	ldw	r17,20(sp)
   130b4:	dc000417 	ldw	r16,16(sp)
   130b8:	dec00e04 	addi	sp,sp,56
   130bc:	f800283a 	ret
   130c0:	2404b03a 	or	r2,r4,r16
   130c4:	2027883a 	mov	r19,r4
   130c8:	10003926 	beq	r2,zero,131b0 <__divdf3+0x2c0>
   130cc:	80012e26 	beq	r16,zero,13588 <__divdf3+0x698>
   130d0:	8009883a 	mov	r4,r16
   130d4:	d9800315 	stw	r6,12(sp)
   130d8:	d9c00215 	stw	r7,8(sp)
   130dc:	0014c400 	call	14c40 <__clzsi2>
   130e0:	d9800317 	ldw	r6,12(sp)
   130e4:	d9c00217 	ldw	r7,8(sp)
   130e8:	113ffd44 	addi	r4,r2,-11
   130ec:	00c00704 	movi	r3,28
   130f0:	19012116 	blt	r3,r4,13578 <__divdf3+0x688>
   130f4:	00c00744 	movi	r3,29
   130f8:	147ffe04 	addi	r17,r2,-8
   130fc:	1907c83a 	sub	r3,r3,r4
   13100:	8460983a 	sll	r16,r16,r17
   13104:	98c6d83a 	srl	r3,r19,r3
   13108:	9c64983a 	sll	r18,r19,r17
   1310c:	1c20b03a 	or	r16,r3,r16
   13110:	1080fcc4 	addi	r2,r2,1011
   13114:	00abc83a 	sub	r21,zero,r2
   13118:	0027883a 	mov	r19,zero
   1311c:	0013883a 	mov	r9,zero
   13120:	003f9106 	br	12f68 <__alt_data_end+0xffff2f68>
   13124:	3446b03a 	or	r3,r6,r17
   13128:	18001f1e 	bne	r3,zero,131a8 <__divdf3+0x2b8>
   1312c:	0023883a 	mov	r17,zero
   13130:	0011883a 	mov	r8,zero
   13134:	01c00084 	movi	r7,2
   13138:	003f9d06 	br	12fb0 <__alt_data_end+0xffff2fb0>
   1313c:	3446b03a 	or	r3,r6,r17
   13140:	18001526 	beq	r3,zero,13198 <__divdf3+0x2a8>
   13144:	88011b26 	beq	r17,zero,135b4 <__divdf3+0x6c4>
   13148:	8809883a 	mov	r4,r17
   1314c:	d9800315 	stw	r6,12(sp)
   13150:	da400115 	stw	r9,4(sp)
   13154:	0014c400 	call	14c40 <__clzsi2>
   13158:	d9800317 	ldw	r6,12(sp)
   1315c:	da400117 	ldw	r9,4(sp)
   13160:	113ffd44 	addi	r4,r2,-11
   13164:	00c00704 	movi	r3,28
   13168:	19010e16 	blt	r3,r4,135a4 <__divdf3+0x6b4>
   1316c:	00c00744 	movi	r3,29
   13170:	123ffe04 	addi	r8,r2,-8
   13174:	1907c83a 	sub	r3,r3,r4
   13178:	8a22983a 	sll	r17,r17,r8
   1317c:	30c6d83a 	srl	r3,r6,r3
   13180:	3210983a 	sll	r8,r6,r8
   13184:	1c62b03a 	or	r17,r3,r17
   13188:	1080fcc4 	addi	r2,r2,1011
   1318c:	0085c83a 	sub	r2,zero,r2
   13190:	000f883a 	mov	r7,zero
   13194:	003f8606 	br	12fb0 <__alt_data_end+0xffff2fb0>
   13198:	0023883a 	mov	r17,zero
   1319c:	0011883a 	mov	r8,zero
   131a0:	01c00044 	movi	r7,1
   131a4:	003f8206 	br	12fb0 <__alt_data_end+0xffff2fb0>
   131a8:	01c000c4 	movi	r7,3
   131ac:	003f8006 	br	12fb0 <__alt_data_end+0xffff2fb0>
   131b0:	04c00104 	movi	r19,4
   131b4:	0021883a 	mov	r16,zero
   131b8:	0025883a 	mov	r18,zero
   131bc:	02400044 	movi	r9,1
   131c0:	003f6906 	br	12f68 <__alt_data_end+0xffff2f68>
   131c4:	04c00304 	movi	r19,12
   131c8:	024000c4 	movi	r9,3
   131cc:	003f6606 	br	12f68 <__alt_data_end+0xffff2f68>
   131d0:	01400434 	movhi	r5,16
   131d4:	0007883a 	mov	r3,zero
   131d8:	297fffc4 	addi	r5,r5,-1
   131dc:	04bfffc4 	movi	r18,-1
   131e0:	0081ffc4 	movi	r2,2047
   131e4:	003fa106 	br	1306c <__alt_data_end+0xffff306c>
   131e8:	00c00044 	movi	r3,1
   131ec:	1887c83a 	sub	r3,r3,r2
   131f0:	01000e04 	movi	r4,56
   131f4:	20c1210e 	bge	r4,r3,1367c <__divdf3+0x78c>
   131f8:	98c0004c 	andi	r3,r19,1
   131fc:	0005883a 	mov	r2,zero
   13200:	000b883a 	mov	r5,zero
   13204:	0025883a 	mov	r18,zero
   13208:	003f9806 	br	1306c <__alt_data_end+0xffff306c>
   1320c:	8c00fd36 	bltu	r17,r16,13604 <__divdf3+0x714>
   13210:	8440fb26 	beq	r16,r17,13600 <__divdf3+0x710>
   13214:	8007883a 	mov	r3,r16
   13218:	ad7fffc4 	addi	r21,r21,-1
   1321c:	0021883a 	mov	r16,zero
   13220:	4004d63a 	srli	r2,r8,24
   13224:	8822923a 	slli	r17,r17,8
   13228:	1809883a 	mov	r4,r3
   1322c:	402c923a 	slli	r22,r8,8
   13230:	88b8b03a 	or	fp,r17,r2
   13234:	e028d43a 	srli	r20,fp,16
   13238:	d8c00015 	stw	r3,0(sp)
   1323c:	e5ffffcc 	andi	r23,fp,65535
   13240:	a00b883a 	mov	r5,r20
   13244:	0014d9c0 	call	14d9c <__udivsi3>
   13248:	d8c00017 	ldw	r3,0(sp)
   1324c:	a00b883a 	mov	r5,r20
   13250:	d8800315 	stw	r2,12(sp)
   13254:	1809883a 	mov	r4,r3
   13258:	0014e000 	call	14e00 <__umodsi3>
   1325c:	d9800317 	ldw	r6,12(sp)
   13260:	1006943a 	slli	r3,r2,16
   13264:	9004d43a 	srli	r2,r18,16
   13268:	b9a3383a 	mul	r17,r23,r6
   1326c:	10c4b03a 	or	r2,r2,r3
   13270:	1440062e 	bgeu	r2,r17,1328c <__divdf3+0x39c>
   13274:	1705883a 	add	r2,r2,fp
   13278:	30ffffc4 	addi	r3,r6,-1
   1327c:	1700ee36 	bltu	r2,fp,13638 <__divdf3+0x748>
   13280:	1440ed2e 	bgeu	r2,r17,13638 <__divdf3+0x748>
   13284:	31bfff84 	addi	r6,r6,-2
   13288:	1705883a 	add	r2,r2,fp
   1328c:	1463c83a 	sub	r17,r2,r17
   13290:	a00b883a 	mov	r5,r20
   13294:	8809883a 	mov	r4,r17
   13298:	d9800315 	stw	r6,12(sp)
   1329c:	0014d9c0 	call	14d9c <__udivsi3>
   132a0:	a00b883a 	mov	r5,r20
   132a4:	8809883a 	mov	r4,r17
   132a8:	d8800215 	stw	r2,8(sp)
   132ac:	0014e000 	call	14e00 <__umodsi3>
   132b0:	d9c00217 	ldw	r7,8(sp)
   132b4:	1004943a 	slli	r2,r2,16
   132b8:	94bfffcc 	andi	r18,r18,65535
   132bc:	b9d1383a 	mul	r8,r23,r7
   132c0:	90a4b03a 	or	r18,r18,r2
   132c4:	d9800317 	ldw	r6,12(sp)
   132c8:	9200062e 	bgeu	r18,r8,132e4 <__divdf3+0x3f4>
   132cc:	9725883a 	add	r18,r18,fp
   132d0:	38bfffc4 	addi	r2,r7,-1
   132d4:	9700d636 	bltu	r18,fp,13630 <__divdf3+0x740>
   132d8:	9200d52e 	bgeu	r18,r8,13630 <__divdf3+0x740>
   132dc:	39ffff84 	addi	r7,r7,-2
   132e0:	9725883a 	add	r18,r18,fp
   132e4:	3004943a 	slli	r2,r6,16
   132e8:	b012d43a 	srli	r9,r22,16
   132ec:	b1bfffcc 	andi	r6,r22,65535
   132f0:	11e2b03a 	or	r17,r2,r7
   132f4:	8806d43a 	srli	r3,r17,16
   132f8:	893fffcc 	andi	r4,r17,65535
   132fc:	218b383a 	mul	r5,r4,r6
   13300:	30c5383a 	mul	r2,r6,r3
   13304:	2249383a 	mul	r4,r4,r9
   13308:	280ed43a 	srli	r7,r5,16
   1330c:	9225c83a 	sub	r18,r18,r8
   13310:	2089883a 	add	r4,r4,r2
   13314:	3909883a 	add	r4,r7,r4
   13318:	1a47383a 	mul	r3,r3,r9
   1331c:	2080022e 	bgeu	r4,r2,13328 <__divdf3+0x438>
   13320:	00800074 	movhi	r2,1
   13324:	1887883a 	add	r3,r3,r2
   13328:	2004d43a 	srli	r2,r4,16
   1332c:	2008943a 	slli	r4,r4,16
   13330:	297fffcc 	andi	r5,r5,65535
   13334:	10c7883a 	add	r3,r2,r3
   13338:	2149883a 	add	r4,r4,r5
   1333c:	90c0a536 	bltu	r18,r3,135d4 <__divdf3+0x6e4>
   13340:	90c0bf26 	beq	r18,r3,13640 <__divdf3+0x750>
   13344:	90c7c83a 	sub	r3,r18,r3
   13348:	810fc83a 	sub	r7,r16,r4
   1334c:	81e5803a 	cmpltu	r18,r16,r7
   13350:	1ca5c83a 	sub	r18,r3,r18
   13354:	e480c126 	beq	fp,r18,1365c <__divdf3+0x76c>
   13358:	a00b883a 	mov	r5,r20
   1335c:	9009883a 	mov	r4,r18
   13360:	d9800315 	stw	r6,12(sp)
   13364:	d9c00215 	stw	r7,8(sp)
   13368:	da400115 	stw	r9,4(sp)
   1336c:	0014d9c0 	call	14d9c <__udivsi3>
   13370:	a00b883a 	mov	r5,r20
   13374:	9009883a 	mov	r4,r18
   13378:	d8800015 	stw	r2,0(sp)
   1337c:	0014e000 	call	14e00 <__umodsi3>
   13380:	d9c00217 	ldw	r7,8(sp)
   13384:	da000017 	ldw	r8,0(sp)
   13388:	1006943a 	slli	r3,r2,16
   1338c:	3804d43a 	srli	r2,r7,16
   13390:	ba21383a 	mul	r16,r23,r8
   13394:	d9800317 	ldw	r6,12(sp)
   13398:	10c4b03a 	or	r2,r2,r3
   1339c:	da400117 	ldw	r9,4(sp)
   133a0:	1400062e 	bgeu	r2,r16,133bc <__divdf3+0x4cc>
   133a4:	1705883a 	add	r2,r2,fp
   133a8:	40ffffc4 	addi	r3,r8,-1
   133ac:	1700ad36 	bltu	r2,fp,13664 <__divdf3+0x774>
   133b0:	1400ac2e 	bgeu	r2,r16,13664 <__divdf3+0x774>
   133b4:	423fff84 	addi	r8,r8,-2
   133b8:	1705883a 	add	r2,r2,fp
   133bc:	1421c83a 	sub	r16,r2,r16
   133c0:	a00b883a 	mov	r5,r20
   133c4:	8009883a 	mov	r4,r16
   133c8:	d9800315 	stw	r6,12(sp)
   133cc:	d9c00215 	stw	r7,8(sp)
   133d0:	da000015 	stw	r8,0(sp)
   133d4:	da400115 	stw	r9,4(sp)
   133d8:	0014d9c0 	call	14d9c <__udivsi3>
   133dc:	8009883a 	mov	r4,r16
   133e0:	a00b883a 	mov	r5,r20
   133e4:	1025883a 	mov	r18,r2
   133e8:	0014e000 	call	14e00 <__umodsi3>
   133ec:	d9c00217 	ldw	r7,8(sp)
   133f0:	1004943a 	slli	r2,r2,16
   133f4:	bcaf383a 	mul	r23,r23,r18
   133f8:	393fffcc 	andi	r4,r7,65535
   133fc:	2088b03a 	or	r4,r4,r2
   13400:	d9800317 	ldw	r6,12(sp)
   13404:	da000017 	ldw	r8,0(sp)
   13408:	da400117 	ldw	r9,4(sp)
   1340c:	25c0062e 	bgeu	r4,r23,13428 <__divdf3+0x538>
   13410:	2709883a 	add	r4,r4,fp
   13414:	90bfffc4 	addi	r2,r18,-1
   13418:	27009436 	bltu	r4,fp,1366c <__divdf3+0x77c>
   1341c:	25c0932e 	bgeu	r4,r23,1366c <__divdf3+0x77c>
   13420:	94bfff84 	addi	r18,r18,-2
   13424:	2709883a 	add	r4,r4,fp
   13428:	4004943a 	slli	r2,r8,16
   1342c:	25efc83a 	sub	r23,r4,r23
   13430:	1490b03a 	or	r8,r2,r18
   13434:	4008d43a 	srli	r4,r8,16
   13438:	40ffffcc 	andi	r3,r8,65535
   1343c:	30c5383a 	mul	r2,r6,r3
   13440:	1a47383a 	mul	r3,r3,r9
   13444:	310d383a 	mul	r6,r6,r4
   13448:	100ad43a 	srli	r5,r2,16
   1344c:	4913383a 	mul	r9,r9,r4
   13450:	1987883a 	add	r3,r3,r6
   13454:	28c7883a 	add	r3,r5,r3
   13458:	1980022e 	bgeu	r3,r6,13464 <__divdf3+0x574>
   1345c:	01000074 	movhi	r4,1
   13460:	4913883a 	add	r9,r9,r4
   13464:	1808d43a 	srli	r4,r3,16
   13468:	1806943a 	slli	r3,r3,16
   1346c:	10bfffcc 	andi	r2,r2,65535
   13470:	2253883a 	add	r9,r4,r9
   13474:	1887883a 	add	r3,r3,r2
   13478:	ba403836 	bltu	r23,r9,1355c <__divdf3+0x66c>
   1347c:	ba403626 	beq	r23,r9,13558 <__divdf3+0x668>
   13480:	42000054 	ori	r8,r8,1
   13484:	a880ffc4 	addi	r2,r21,1023
   13488:	00bf570e 	bge	zero,r2,131e8 <__alt_data_end+0xffff31e8>
   1348c:	40c001cc 	andi	r3,r8,7
   13490:	18000726 	beq	r3,zero,134b0 <__divdf3+0x5c0>
   13494:	40c003cc 	andi	r3,r8,15
   13498:	01000104 	movi	r4,4
   1349c:	19000426 	beq	r3,r4,134b0 <__divdf3+0x5c0>
   134a0:	4107883a 	add	r3,r8,r4
   134a4:	1a11803a 	cmpltu	r8,r3,r8
   134a8:	8a23883a 	add	r17,r17,r8
   134ac:	1811883a 	mov	r8,r3
   134b0:	88c0402c 	andhi	r3,r17,256
   134b4:	18000426 	beq	r3,zero,134c8 <__divdf3+0x5d8>
   134b8:	00ffc034 	movhi	r3,65280
   134bc:	18ffffc4 	addi	r3,r3,-1
   134c0:	a8810004 	addi	r2,r21,1024
   134c4:	88e2703a 	and	r17,r17,r3
   134c8:	00c1ff84 	movi	r3,2046
   134cc:	18bee316 	blt	r3,r2,1305c <__alt_data_end+0xffff305c>
   134d0:	8824977a 	slli	r18,r17,29
   134d4:	4010d0fa 	srli	r8,r8,3
   134d8:	8822927a 	slli	r17,r17,9
   134dc:	1081ffcc 	andi	r2,r2,2047
   134e0:	9224b03a 	or	r18,r18,r8
   134e4:	880ad33a 	srli	r5,r17,12
   134e8:	98c0004c 	andi	r3,r19,1
   134ec:	003edf06 	br	1306c <__alt_data_end+0xffff306c>
   134f0:	8080022c 	andhi	r2,r16,8
   134f4:	10001226 	beq	r2,zero,13540 <__divdf3+0x650>
   134f8:	8880022c 	andhi	r2,r17,8
   134fc:	1000101e 	bne	r2,zero,13540 <__divdf3+0x650>
   13500:	00800434 	movhi	r2,16
   13504:	89400234 	orhi	r5,r17,8
   13508:	10bfffc4 	addi	r2,r2,-1
   1350c:	b007883a 	mov	r3,r22
   13510:	288a703a 	and	r5,r5,r2
   13514:	4025883a 	mov	r18,r8
   13518:	003f3106 	br	131e0 <__alt_data_end+0xffff31e0>
   1351c:	008000c4 	movi	r2,3
   13520:	3880a626 	beq	r7,r2,137bc <__divdf3+0x8cc>
   13524:	00800044 	movi	r2,1
   13528:	3880521e 	bne	r7,r2,13674 <__divdf3+0x784>
   1352c:	b807883a 	mov	r3,r23
   13530:	0005883a 	mov	r2,zero
   13534:	000b883a 	mov	r5,zero
   13538:	0025883a 	mov	r18,zero
   1353c:	003ecb06 	br	1306c <__alt_data_end+0xffff306c>
   13540:	00800434 	movhi	r2,16
   13544:	81400234 	orhi	r5,r16,8
   13548:	10bfffc4 	addi	r2,r2,-1
   1354c:	a007883a 	mov	r3,r20
   13550:	288a703a 	and	r5,r5,r2
   13554:	003f2206 	br	131e0 <__alt_data_end+0xffff31e0>
   13558:	183fca26 	beq	r3,zero,13484 <__alt_data_end+0xffff3484>
   1355c:	e5ef883a 	add	r23,fp,r23
   13560:	40bfffc4 	addi	r2,r8,-1
   13564:	bf00392e 	bgeu	r23,fp,1364c <__divdf3+0x75c>
   13568:	1011883a 	mov	r8,r2
   1356c:	ba7fc41e 	bne	r23,r9,13480 <__alt_data_end+0xffff3480>
   13570:	b0ffc31e 	bne	r22,r3,13480 <__alt_data_end+0xffff3480>
   13574:	003fc306 	br	13484 <__alt_data_end+0xffff3484>
   13578:	143ff604 	addi	r16,r2,-40
   1357c:	9c20983a 	sll	r16,r19,r16
   13580:	0025883a 	mov	r18,zero
   13584:	003ee206 	br	13110 <__alt_data_end+0xffff3110>
   13588:	d9800315 	stw	r6,12(sp)
   1358c:	d9c00215 	stw	r7,8(sp)
   13590:	0014c400 	call	14c40 <__clzsi2>
   13594:	10800804 	addi	r2,r2,32
   13598:	d9c00217 	ldw	r7,8(sp)
   1359c:	d9800317 	ldw	r6,12(sp)
   135a0:	003ed106 	br	130e8 <__alt_data_end+0xffff30e8>
   135a4:	147ff604 	addi	r17,r2,-40
   135a8:	3462983a 	sll	r17,r6,r17
   135ac:	0011883a 	mov	r8,zero
   135b0:	003ef506 	br	13188 <__alt_data_end+0xffff3188>
   135b4:	3009883a 	mov	r4,r6
   135b8:	d9800315 	stw	r6,12(sp)
   135bc:	da400115 	stw	r9,4(sp)
   135c0:	0014c400 	call	14c40 <__clzsi2>
   135c4:	10800804 	addi	r2,r2,32
   135c8:	da400117 	ldw	r9,4(sp)
   135cc:	d9800317 	ldw	r6,12(sp)
   135d0:	003ee306 	br	13160 <__alt_data_end+0xffff3160>
   135d4:	85a1883a 	add	r16,r16,r22
   135d8:	8585803a 	cmpltu	r2,r16,r22
   135dc:	1705883a 	add	r2,r2,fp
   135e0:	14a5883a 	add	r18,r2,r18
   135e4:	88bfffc4 	addi	r2,r17,-1
   135e8:	e4800c2e 	bgeu	fp,r18,1361c <__divdf3+0x72c>
   135ec:	90c03e36 	bltu	r18,r3,136e8 <__divdf3+0x7f8>
   135f0:	1c806926 	beq	r3,r18,13798 <__divdf3+0x8a8>
   135f4:	90c7c83a 	sub	r3,r18,r3
   135f8:	1023883a 	mov	r17,r2
   135fc:	003f5206 	br	13348 <__alt_data_end+0xffff3348>
   13600:	923f0436 	bltu	r18,r8,13214 <__alt_data_end+0xffff3214>
   13604:	800897fa 	slli	r4,r16,31
   13608:	9004d07a 	srli	r2,r18,1
   1360c:	8006d07a 	srli	r3,r16,1
   13610:	902097fa 	slli	r16,r18,31
   13614:	20a4b03a 	or	r18,r4,r2
   13618:	003f0106 	br	13220 <__alt_data_end+0xffff3220>
   1361c:	e4bff51e 	bne	fp,r18,135f4 <__alt_data_end+0xffff35f4>
   13620:	85bff22e 	bgeu	r16,r22,135ec <__alt_data_end+0xffff35ec>
   13624:	e0c7c83a 	sub	r3,fp,r3
   13628:	1023883a 	mov	r17,r2
   1362c:	003f4606 	br	13348 <__alt_data_end+0xffff3348>
   13630:	100f883a 	mov	r7,r2
   13634:	003f2b06 	br	132e4 <__alt_data_end+0xffff32e4>
   13638:	180d883a 	mov	r6,r3
   1363c:	003f1306 	br	1328c <__alt_data_end+0xffff328c>
   13640:	813fe436 	bltu	r16,r4,135d4 <__alt_data_end+0xffff35d4>
   13644:	0007883a 	mov	r3,zero
   13648:	003f3f06 	br	13348 <__alt_data_end+0xffff3348>
   1364c:	ba402c36 	bltu	r23,r9,13700 <__divdf3+0x810>
   13650:	4dc05426 	beq	r9,r23,137a4 <__divdf3+0x8b4>
   13654:	1011883a 	mov	r8,r2
   13658:	003f8906 	br	13480 <__alt_data_end+0xffff3480>
   1365c:	023fffc4 	movi	r8,-1
   13660:	003f8806 	br	13484 <__alt_data_end+0xffff3484>
   13664:	1811883a 	mov	r8,r3
   13668:	003f5406 	br	133bc <__alt_data_end+0xffff33bc>
   1366c:	1025883a 	mov	r18,r2
   13670:	003f6d06 	br	13428 <__alt_data_end+0xffff3428>
   13674:	b827883a 	mov	r19,r23
   13678:	003f8206 	br	13484 <__alt_data_end+0xffff3484>
   1367c:	010007c4 	movi	r4,31
   13680:	20c02616 	blt	r4,r3,1371c <__divdf3+0x82c>
   13684:	00800804 	movi	r2,32
   13688:	10c5c83a 	sub	r2,r2,r3
   1368c:	888a983a 	sll	r5,r17,r2
   13690:	40c8d83a 	srl	r4,r8,r3
   13694:	4084983a 	sll	r2,r8,r2
   13698:	88e2d83a 	srl	r17,r17,r3
   1369c:	2906b03a 	or	r3,r5,r4
   136a0:	1004c03a 	cmpne	r2,r2,zero
   136a4:	1886b03a 	or	r3,r3,r2
   136a8:	188001cc 	andi	r2,r3,7
   136ac:	10000726 	beq	r2,zero,136cc <__divdf3+0x7dc>
   136b0:	188003cc 	andi	r2,r3,15
   136b4:	01000104 	movi	r4,4
   136b8:	11000426 	beq	r2,r4,136cc <__divdf3+0x7dc>
   136bc:	1805883a 	mov	r2,r3
   136c0:	10c00104 	addi	r3,r2,4
   136c4:	1885803a 	cmpltu	r2,r3,r2
   136c8:	88a3883a 	add	r17,r17,r2
   136cc:	8880202c 	andhi	r2,r17,128
   136d0:	10002726 	beq	r2,zero,13770 <__divdf3+0x880>
   136d4:	98c0004c 	andi	r3,r19,1
   136d8:	00800044 	movi	r2,1
   136dc:	000b883a 	mov	r5,zero
   136e0:	0025883a 	mov	r18,zero
   136e4:	003e6106 	br	1306c <__alt_data_end+0xffff306c>
   136e8:	85a1883a 	add	r16,r16,r22
   136ec:	8585803a 	cmpltu	r2,r16,r22
   136f0:	1705883a 	add	r2,r2,fp
   136f4:	14a5883a 	add	r18,r2,r18
   136f8:	8c7fff84 	addi	r17,r17,-2
   136fc:	003f1106 	br	13344 <__alt_data_end+0xffff3344>
   13700:	b589883a 	add	r4,r22,r22
   13704:	25ad803a 	cmpltu	r22,r4,r22
   13708:	b739883a 	add	fp,r22,fp
   1370c:	40bfff84 	addi	r2,r8,-2
   13710:	bf2f883a 	add	r23,r23,fp
   13714:	202d883a 	mov	r22,r4
   13718:	003f9306 	br	13568 <__alt_data_end+0xffff3568>
   1371c:	013ff844 	movi	r4,-31
   13720:	2085c83a 	sub	r2,r4,r2
   13724:	8888d83a 	srl	r4,r17,r2
   13728:	00800804 	movi	r2,32
   1372c:	18802126 	beq	r3,r2,137b4 <__divdf3+0x8c4>
   13730:	00801004 	movi	r2,64
   13734:	10c5c83a 	sub	r2,r2,r3
   13738:	8884983a 	sll	r2,r17,r2
   1373c:	1204b03a 	or	r2,r2,r8
   13740:	1004c03a 	cmpne	r2,r2,zero
   13744:	2084b03a 	or	r2,r4,r2
   13748:	144001cc 	andi	r17,r2,7
   1374c:	88000d1e 	bne	r17,zero,13784 <__divdf3+0x894>
   13750:	000b883a 	mov	r5,zero
   13754:	1024d0fa 	srli	r18,r2,3
   13758:	98c0004c 	andi	r3,r19,1
   1375c:	0005883a 	mov	r2,zero
   13760:	9464b03a 	or	r18,r18,r17
   13764:	003e4106 	br	1306c <__alt_data_end+0xffff306c>
   13768:	1007883a 	mov	r3,r2
   1376c:	0023883a 	mov	r17,zero
   13770:	880a927a 	slli	r5,r17,9
   13774:	1805883a 	mov	r2,r3
   13778:	8822977a 	slli	r17,r17,29
   1377c:	280ad33a 	srli	r5,r5,12
   13780:	003ff406 	br	13754 <__alt_data_end+0xffff3754>
   13784:	10c003cc 	andi	r3,r2,15
   13788:	01000104 	movi	r4,4
   1378c:	193ff626 	beq	r3,r4,13768 <__alt_data_end+0xffff3768>
   13790:	0023883a 	mov	r17,zero
   13794:	003fca06 	br	136c0 <__alt_data_end+0xffff36c0>
   13798:	813fd336 	bltu	r16,r4,136e8 <__alt_data_end+0xffff36e8>
   1379c:	1023883a 	mov	r17,r2
   137a0:	003fa806 	br	13644 <__alt_data_end+0xffff3644>
   137a4:	b0ffd636 	bltu	r22,r3,13700 <__alt_data_end+0xffff3700>
   137a8:	1011883a 	mov	r8,r2
   137ac:	b0ff341e 	bne	r22,r3,13480 <__alt_data_end+0xffff3480>
   137b0:	003f3406 	br	13484 <__alt_data_end+0xffff3484>
   137b4:	0005883a 	mov	r2,zero
   137b8:	003fe006 	br	1373c <__alt_data_end+0xffff373c>
   137bc:	00800434 	movhi	r2,16
   137c0:	89400234 	orhi	r5,r17,8
   137c4:	10bfffc4 	addi	r2,r2,-1
   137c8:	b807883a 	mov	r3,r23
   137cc:	288a703a 	and	r5,r5,r2
   137d0:	4025883a 	mov	r18,r8
   137d4:	003e8206 	br	131e0 <__alt_data_end+0xffff31e0>

000137d8 <__gedf2>:
   137d8:	2804d53a 	srli	r2,r5,20
   137dc:	3806d53a 	srli	r3,r7,20
   137e0:	02000434 	movhi	r8,16
   137e4:	423fffc4 	addi	r8,r8,-1
   137e8:	1081ffcc 	andi	r2,r2,2047
   137ec:	0241ffc4 	movi	r9,2047
   137f0:	2a14703a 	and	r10,r5,r8
   137f4:	18c1ffcc 	andi	r3,r3,2047
   137f8:	3a10703a 	and	r8,r7,r8
   137fc:	280ad7fa 	srli	r5,r5,31
   13800:	380ed7fa 	srli	r7,r7,31
   13804:	12401d26 	beq	r2,r9,1387c <__gedf2+0xa4>
   13808:	0241ffc4 	movi	r9,2047
   1380c:	1a401226 	beq	r3,r9,13858 <__gedf2+0x80>
   13810:	1000081e 	bne	r2,zero,13834 <__gedf2+0x5c>
   13814:	2296b03a 	or	r11,r4,r10
   13818:	5813003a 	cmpeq	r9,r11,zero
   1381c:	1800091e 	bne	r3,zero,13844 <__gedf2+0x6c>
   13820:	3218b03a 	or	r12,r6,r8
   13824:	6000071e 	bne	r12,zero,13844 <__gedf2+0x6c>
   13828:	0005883a 	mov	r2,zero
   1382c:	5800101e 	bne	r11,zero,13870 <__gedf2+0x98>
   13830:	f800283a 	ret
   13834:	18000c1e 	bne	r3,zero,13868 <__gedf2+0x90>
   13838:	3212b03a 	or	r9,r6,r8
   1383c:	48000c26 	beq	r9,zero,13870 <__gedf2+0x98>
   13840:	0013883a 	mov	r9,zero
   13844:	39c03fcc 	andi	r7,r7,255
   13848:	48000826 	beq	r9,zero,1386c <__gedf2+0x94>
   1384c:	38000926 	beq	r7,zero,13874 <__gedf2+0x9c>
   13850:	00800044 	movi	r2,1
   13854:	f800283a 	ret
   13858:	3212b03a 	or	r9,r6,r8
   1385c:	483fec26 	beq	r9,zero,13810 <__alt_data_end+0xffff3810>
   13860:	00bfff84 	movi	r2,-2
   13864:	f800283a 	ret
   13868:	39c03fcc 	andi	r7,r7,255
   1386c:	29c00626 	beq	r5,r7,13888 <__gedf2+0xb0>
   13870:	283ff726 	beq	r5,zero,13850 <__alt_data_end+0xffff3850>
   13874:	00bfffc4 	movi	r2,-1
   13878:	f800283a 	ret
   1387c:	2292b03a 	or	r9,r4,r10
   13880:	483fe126 	beq	r9,zero,13808 <__alt_data_end+0xffff3808>
   13884:	003ff606 	br	13860 <__alt_data_end+0xffff3860>
   13888:	18bff916 	blt	r3,r2,13870 <__alt_data_end+0xffff3870>
   1388c:	10c00316 	blt	r2,r3,1389c <__gedf2+0xc4>
   13890:	42bff736 	bltu	r8,r10,13870 <__alt_data_end+0xffff3870>
   13894:	52000326 	beq	r10,r8,138a4 <__gedf2+0xcc>
   13898:	5200042e 	bgeu	r10,r8,138ac <__gedf2+0xd4>
   1389c:	283fec1e 	bne	r5,zero,13850 <__alt_data_end+0xffff3850>
   138a0:	003ff406 	br	13874 <__alt_data_end+0xffff3874>
   138a4:	313ff236 	bltu	r6,r4,13870 <__alt_data_end+0xffff3870>
   138a8:	21bffc36 	bltu	r4,r6,1389c <__alt_data_end+0xffff389c>
   138ac:	0005883a 	mov	r2,zero
   138b0:	f800283a 	ret

000138b4 <__ledf2>:
   138b4:	2804d53a 	srli	r2,r5,20
   138b8:	3810d53a 	srli	r8,r7,20
   138bc:	00c00434 	movhi	r3,16
   138c0:	18ffffc4 	addi	r3,r3,-1
   138c4:	1081ffcc 	andi	r2,r2,2047
   138c8:	0241ffc4 	movi	r9,2047
   138cc:	28d4703a 	and	r10,r5,r3
   138d0:	4201ffcc 	andi	r8,r8,2047
   138d4:	38c6703a 	and	r3,r7,r3
   138d8:	280ad7fa 	srli	r5,r5,31
   138dc:	380ed7fa 	srli	r7,r7,31
   138e0:	12401f26 	beq	r2,r9,13960 <__ledf2+0xac>
   138e4:	0241ffc4 	movi	r9,2047
   138e8:	42401426 	beq	r8,r9,1393c <__ledf2+0x88>
   138ec:	1000091e 	bne	r2,zero,13914 <__ledf2+0x60>
   138f0:	2296b03a 	or	r11,r4,r10
   138f4:	5813003a 	cmpeq	r9,r11,zero
   138f8:	29403fcc 	andi	r5,r5,255
   138fc:	40000a1e 	bne	r8,zero,13928 <__ledf2+0x74>
   13900:	30d8b03a 	or	r12,r6,r3
   13904:	6000081e 	bne	r12,zero,13928 <__ledf2+0x74>
   13908:	0005883a 	mov	r2,zero
   1390c:	5800111e 	bne	r11,zero,13954 <__ledf2+0xa0>
   13910:	f800283a 	ret
   13914:	29403fcc 	andi	r5,r5,255
   13918:	40000c1e 	bne	r8,zero,1394c <__ledf2+0x98>
   1391c:	30d2b03a 	or	r9,r6,r3
   13920:	48000c26 	beq	r9,zero,13954 <__ledf2+0xa0>
   13924:	0013883a 	mov	r9,zero
   13928:	39c03fcc 	andi	r7,r7,255
   1392c:	48000826 	beq	r9,zero,13950 <__ledf2+0x9c>
   13930:	38001126 	beq	r7,zero,13978 <__ledf2+0xc4>
   13934:	00800044 	movi	r2,1
   13938:	f800283a 	ret
   1393c:	30d2b03a 	or	r9,r6,r3
   13940:	483fea26 	beq	r9,zero,138ec <__alt_data_end+0xffff38ec>
   13944:	00800084 	movi	r2,2
   13948:	f800283a 	ret
   1394c:	39c03fcc 	andi	r7,r7,255
   13950:	39400726 	beq	r7,r5,13970 <__ledf2+0xbc>
   13954:	2800081e 	bne	r5,zero,13978 <__ledf2+0xc4>
   13958:	00800044 	movi	r2,1
   1395c:	f800283a 	ret
   13960:	2292b03a 	or	r9,r4,r10
   13964:	483fdf26 	beq	r9,zero,138e4 <__alt_data_end+0xffff38e4>
   13968:	00800084 	movi	r2,2
   1396c:	f800283a 	ret
   13970:	4080030e 	bge	r8,r2,13980 <__ledf2+0xcc>
   13974:	383fef26 	beq	r7,zero,13934 <__alt_data_end+0xffff3934>
   13978:	00bfffc4 	movi	r2,-1
   1397c:	f800283a 	ret
   13980:	123feb16 	blt	r2,r8,13930 <__alt_data_end+0xffff3930>
   13984:	1abff336 	bltu	r3,r10,13954 <__alt_data_end+0xffff3954>
   13988:	50c00326 	beq	r10,r3,13998 <__ledf2+0xe4>
   1398c:	50c0042e 	bgeu	r10,r3,139a0 <__ledf2+0xec>
   13990:	283fe81e 	bne	r5,zero,13934 <__alt_data_end+0xffff3934>
   13994:	003ff806 	br	13978 <__alt_data_end+0xffff3978>
   13998:	313fee36 	bltu	r6,r4,13954 <__alt_data_end+0xffff3954>
   1399c:	21bffc36 	bltu	r4,r6,13990 <__alt_data_end+0xffff3990>
   139a0:	0005883a 	mov	r2,zero
   139a4:	f800283a 	ret

000139a8 <__muldf3>:
   139a8:	defff304 	addi	sp,sp,-52
   139ac:	2804d53a 	srli	r2,r5,20
   139b0:	dd800915 	stw	r22,36(sp)
   139b4:	282cd7fa 	srli	r22,r5,31
   139b8:	dc000315 	stw	r16,12(sp)
   139bc:	04000434 	movhi	r16,16
   139c0:	dd400815 	stw	r21,32(sp)
   139c4:	dc800515 	stw	r18,20(sp)
   139c8:	843fffc4 	addi	r16,r16,-1
   139cc:	dfc00c15 	stw	ra,48(sp)
   139d0:	df000b15 	stw	fp,44(sp)
   139d4:	ddc00a15 	stw	r23,40(sp)
   139d8:	dd000715 	stw	r20,28(sp)
   139dc:	dcc00615 	stw	r19,24(sp)
   139e0:	dc400415 	stw	r17,16(sp)
   139e4:	1481ffcc 	andi	r18,r2,2047
   139e8:	2c20703a 	and	r16,r5,r16
   139ec:	b02b883a 	mov	r21,r22
   139f0:	b2403fcc 	andi	r9,r22,255
   139f4:	90006026 	beq	r18,zero,13b78 <__muldf3+0x1d0>
   139f8:	0081ffc4 	movi	r2,2047
   139fc:	2029883a 	mov	r20,r4
   13a00:	90803626 	beq	r18,r2,13adc <__muldf3+0x134>
   13a04:	80800434 	orhi	r2,r16,16
   13a08:	100490fa 	slli	r2,r2,3
   13a0c:	2020d77a 	srli	r16,r4,29
   13a10:	202890fa 	slli	r20,r4,3
   13a14:	94bf0044 	addi	r18,r18,-1023
   13a18:	80a0b03a 	or	r16,r16,r2
   13a1c:	0027883a 	mov	r19,zero
   13a20:	0039883a 	mov	fp,zero
   13a24:	3804d53a 	srli	r2,r7,20
   13a28:	382ed7fa 	srli	r23,r7,31
   13a2c:	04400434 	movhi	r17,16
   13a30:	8c7fffc4 	addi	r17,r17,-1
   13a34:	1081ffcc 	andi	r2,r2,2047
   13a38:	3011883a 	mov	r8,r6
   13a3c:	3c62703a 	and	r17,r7,r17
   13a40:	ba803fcc 	andi	r10,r23,255
   13a44:	10006d26 	beq	r2,zero,13bfc <__muldf3+0x254>
   13a48:	00c1ffc4 	movi	r3,2047
   13a4c:	10c06526 	beq	r2,r3,13be4 <__muldf3+0x23c>
   13a50:	88c00434 	orhi	r3,r17,16
   13a54:	180690fa 	slli	r3,r3,3
   13a58:	3022d77a 	srli	r17,r6,29
   13a5c:	301090fa 	slli	r8,r6,3
   13a60:	10bf0044 	addi	r2,r2,-1023
   13a64:	88e2b03a 	or	r17,r17,r3
   13a68:	000b883a 	mov	r5,zero
   13a6c:	9085883a 	add	r2,r18,r2
   13a70:	2cc8b03a 	or	r4,r5,r19
   13a74:	00c003c4 	movi	r3,15
   13a78:	bdacf03a 	xor	r22,r23,r22
   13a7c:	12c00044 	addi	r11,r2,1
   13a80:	19009936 	bltu	r3,r4,13ce8 <__muldf3+0x340>
   13a84:	200890ba 	slli	r4,r4,2
   13a88:	00c00074 	movhi	r3,1
   13a8c:	18cea704 	addi	r3,r3,15004
   13a90:	20c9883a 	add	r4,r4,r3
   13a94:	20c00017 	ldw	r3,0(r4)
   13a98:	1800683a 	jmp	r3
   13a9c:	00013ce8 	cmpgeui	zero,zero,1267
   13aa0:	00013afc 	xorhi	zero,zero,1259
   13aa4:	00013afc 	xorhi	zero,zero,1259
   13aa8:	00013af8 	rdprs	zero,zero,1259
   13aac:	00013cc4 	movi	zero,1267
   13ab0:	00013cc4 	movi	zero,1267
   13ab4:	00013cac 	andhi	zero,zero,1266
   13ab8:	00013af8 	rdprs	zero,zero,1259
   13abc:	00013cc4 	movi	zero,1267
   13ac0:	00013cac 	andhi	zero,zero,1266
   13ac4:	00013cc4 	movi	zero,1267
   13ac8:	00013af8 	rdprs	zero,zero,1259
   13acc:	00013cd4 	movui	zero,1267
   13ad0:	00013cd4 	movui	zero,1267
   13ad4:	00013cd4 	movui	zero,1267
   13ad8:	00013ef0 	cmpltui	zero,zero,1275
   13adc:	2404b03a 	or	r2,r4,r16
   13ae0:	10006f1e 	bne	r2,zero,13ca0 <__muldf3+0x2f8>
   13ae4:	04c00204 	movi	r19,8
   13ae8:	0021883a 	mov	r16,zero
   13aec:	0029883a 	mov	r20,zero
   13af0:	07000084 	movi	fp,2
   13af4:	003fcb06 	br	13a24 <__alt_data_end+0xffff3a24>
   13af8:	502d883a 	mov	r22,r10
   13afc:	00800084 	movi	r2,2
   13b00:	28805726 	beq	r5,r2,13c60 <__muldf3+0x2b8>
   13b04:	008000c4 	movi	r2,3
   13b08:	28816626 	beq	r5,r2,140a4 <__muldf3+0x6fc>
   13b0c:	00800044 	movi	r2,1
   13b10:	2881411e 	bne	r5,r2,14018 <__muldf3+0x670>
   13b14:	b02b883a 	mov	r21,r22
   13b18:	0005883a 	mov	r2,zero
   13b1c:	000b883a 	mov	r5,zero
   13b20:	0029883a 	mov	r20,zero
   13b24:	1004953a 	slli	r2,r2,20
   13b28:	a8c03fcc 	andi	r3,r21,255
   13b2c:	04400434 	movhi	r17,16
   13b30:	8c7fffc4 	addi	r17,r17,-1
   13b34:	180697fa 	slli	r3,r3,31
   13b38:	2c4a703a 	and	r5,r5,r17
   13b3c:	288ab03a 	or	r5,r5,r2
   13b40:	28c6b03a 	or	r3,r5,r3
   13b44:	a005883a 	mov	r2,r20
   13b48:	dfc00c17 	ldw	ra,48(sp)
   13b4c:	df000b17 	ldw	fp,44(sp)
   13b50:	ddc00a17 	ldw	r23,40(sp)
   13b54:	dd800917 	ldw	r22,36(sp)
   13b58:	dd400817 	ldw	r21,32(sp)
   13b5c:	dd000717 	ldw	r20,28(sp)
   13b60:	dcc00617 	ldw	r19,24(sp)
   13b64:	dc800517 	ldw	r18,20(sp)
   13b68:	dc400417 	ldw	r17,16(sp)
   13b6c:	dc000317 	ldw	r16,12(sp)
   13b70:	dec00d04 	addi	sp,sp,52
   13b74:	f800283a 	ret
   13b78:	2404b03a 	or	r2,r4,r16
   13b7c:	2027883a 	mov	r19,r4
   13b80:	10004226 	beq	r2,zero,13c8c <__muldf3+0x2e4>
   13b84:	8000fc26 	beq	r16,zero,13f78 <__muldf3+0x5d0>
   13b88:	8009883a 	mov	r4,r16
   13b8c:	d9800215 	stw	r6,8(sp)
   13b90:	d9c00015 	stw	r7,0(sp)
   13b94:	da400115 	stw	r9,4(sp)
   13b98:	0014c400 	call	14c40 <__clzsi2>
   13b9c:	d9800217 	ldw	r6,8(sp)
   13ba0:	d9c00017 	ldw	r7,0(sp)
   13ba4:	da400117 	ldw	r9,4(sp)
   13ba8:	113ffd44 	addi	r4,r2,-11
   13bac:	00c00704 	movi	r3,28
   13bb0:	1900ed16 	blt	r3,r4,13f68 <__muldf3+0x5c0>
   13bb4:	00c00744 	movi	r3,29
   13bb8:	147ffe04 	addi	r17,r2,-8
   13bbc:	1907c83a 	sub	r3,r3,r4
   13bc0:	8460983a 	sll	r16,r16,r17
   13bc4:	98c6d83a 	srl	r3,r19,r3
   13bc8:	9c68983a 	sll	r20,r19,r17
   13bcc:	1c20b03a 	or	r16,r3,r16
   13bd0:	1080fcc4 	addi	r2,r2,1011
   13bd4:	00a5c83a 	sub	r18,zero,r2
   13bd8:	0027883a 	mov	r19,zero
   13bdc:	0039883a 	mov	fp,zero
   13be0:	003f9006 	br	13a24 <__alt_data_end+0xffff3a24>
   13be4:	3446b03a 	or	r3,r6,r17
   13be8:	1800261e 	bne	r3,zero,13c84 <__muldf3+0x2dc>
   13bec:	0023883a 	mov	r17,zero
   13bf0:	0011883a 	mov	r8,zero
   13bf4:	01400084 	movi	r5,2
   13bf8:	003f9c06 	br	13a6c <__alt_data_end+0xffff3a6c>
   13bfc:	3446b03a 	or	r3,r6,r17
   13c00:	18001c26 	beq	r3,zero,13c74 <__muldf3+0x2cc>
   13c04:	8800ce26 	beq	r17,zero,13f40 <__muldf3+0x598>
   13c08:	8809883a 	mov	r4,r17
   13c0c:	d9800215 	stw	r6,8(sp)
   13c10:	da400115 	stw	r9,4(sp)
   13c14:	da800015 	stw	r10,0(sp)
   13c18:	0014c400 	call	14c40 <__clzsi2>
   13c1c:	d9800217 	ldw	r6,8(sp)
   13c20:	da400117 	ldw	r9,4(sp)
   13c24:	da800017 	ldw	r10,0(sp)
   13c28:	113ffd44 	addi	r4,r2,-11
   13c2c:	00c00704 	movi	r3,28
   13c30:	1900bf16 	blt	r3,r4,13f30 <__muldf3+0x588>
   13c34:	00c00744 	movi	r3,29
   13c38:	123ffe04 	addi	r8,r2,-8
   13c3c:	1907c83a 	sub	r3,r3,r4
   13c40:	8a22983a 	sll	r17,r17,r8
   13c44:	30c6d83a 	srl	r3,r6,r3
   13c48:	3210983a 	sll	r8,r6,r8
   13c4c:	1c62b03a 	or	r17,r3,r17
   13c50:	1080fcc4 	addi	r2,r2,1011
   13c54:	0085c83a 	sub	r2,zero,r2
   13c58:	000b883a 	mov	r5,zero
   13c5c:	003f8306 	br	13a6c <__alt_data_end+0xffff3a6c>
   13c60:	b02b883a 	mov	r21,r22
   13c64:	0081ffc4 	movi	r2,2047
   13c68:	000b883a 	mov	r5,zero
   13c6c:	0029883a 	mov	r20,zero
   13c70:	003fac06 	br	13b24 <__alt_data_end+0xffff3b24>
   13c74:	0023883a 	mov	r17,zero
   13c78:	0011883a 	mov	r8,zero
   13c7c:	01400044 	movi	r5,1
   13c80:	003f7a06 	br	13a6c <__alt_data_end+0xffff3a6c>
   13c84:	014000c4 	movi	r5,3
   13c88:	003f7806 	br	13a6c <__alt_data_end+0xffff3a6c>
   13c8c:	04c00104 	movi	r19,4
   13c90:	0021883a 	mov	r16,zero
   13c94:	0029883a 	mov	r20,zero
   13c98:	07000044 	movi	fp,1
   13c9c:	003f6106 	br	13a24 <__alt_data_end+0xffff3a24>
   13ca0:	04c00304 	movi	r19,12
   13ca4:	070000c4 	movi	fp,3
   13ca8:	003f5e06 	br	13a24 <__alt_data_end+0xffff3a24>
   13cac:	01400434 	movhi	r5,16
   13cb0:	002b883a 	mov	r21,zero
   13cb4:	297fffc4 	addi	r5,r5,-1
   13cb8:	053fffc4 	movi	r20,-1
   13cbc:	0081ffc4 	movi	r2,2047
   13cc0:	003f9806 	br	13b24 <__alt_data_end+0xffff3b24>
   13cc4:	8023883a 	mov	r17,r16
   13cc8:	a011883a 	mov	r8,r20
   13ccc:	e00b883a 	mov	r5,fp
   13cd0:	003f8a06 	br	13afc <__alt_data_end+0xffff3afc>
   13cd4:	8023883a 	mov	r17,r16
   13cd8:	a011883a 	mov	r8,r20
   13cdc:	482d883a 	mov	r22,r9
   13ce0:	e00b883a 	mov	r5,fp
   13ce4:	003f8506 	br	13afc <__alt_data_end+0xffff3afc>
   13ce8:	a00ad43a 	srli	r5,r20,16
   13cec:	401ad43a 	srli	r13,r8,16
   13cf0:	a53fffcc 	andi	r20,r20,65535
   13cf4:	423fffcc 	andi	r8,r8,65535
   13cf8:	4519383a 	mul	r12,r8,r20
   13cfc:	4147383a 	mul	r3,r8,r5
   13d00:	6d09383a 	mul	r4,r13,r20
   13d04:	600cd43a 	srli	r6,r12,16
   13d08:	2b5d383a 	mul	r14,r5,r13
   13d0c:	20c9883a 	add	r4,r4,r3
   13d10:	310d883a 	add	r6,r6,r4
   13d14:	30c0022e 	bgeu	r6,r3,13d20 <__muldf3+0x378>
   13d18:	00c00074 	movhi	r3,1
   13d1c:	70dd883a 	add	r14,r14,r3
   13d20:	8826d43a 	srli	r19,r17,16
   13d24:	8bffffcc 	andi	r15,r17,65535
   13d28:	7d23383a 	mul	r17,r15,r20
   13d2c:	7949383a 	mul	r4,r15,r5
   13d30:	9d29383a 	mul	r20,r19,r20
   13d34:	8814d43a 	srli	r10,r17,16
   13d38:	3012943a 	slli	r9,r6,16
   13d3c:	a129883a 	add	r20,r20,r4
   13d40:	633fffcc 	andi	r12,r12,65535
   13d44:	5515883a 	add	r10,r10,r20
   13d48:	3006d43a 	srli	r3,r6,16
   13d4c:	4b13883a 	add	r9,r9,r12
   13d50:	2ccb383a 	mul	r5,r5,r19
   13d54:	5100022e 	bgeu	r10,r4,13d60 <__muldf3+0x3b8>
   13d58:	01000074 	movhi	r4,1
   13d5c:	290b883a 	add	r5,r5,r4
   13d60:	802ad43a 	srli	r21,r16,16
   13d64:	843fffcc 	andi	r16,r16,65535
   13d68:	440d383a 	mul	r6,r8,r16
   13d6c:	4565383a 	mul	r18,r8,r21
   13d70:	8349383a 	mul	r4,r16,r13
   13d74:	500e943a 	slli	r7,r10,16
   13d78:	3010d43a 	srli	r8,r6,16
   13d7c:	5028d43a 	srli	r20,r10,16
   13d80:	2489883a 	add	r4,r4,r18
   13d84:	8abfffcc 	andi	r10,r17,65535
   13d88:	3a95883a 	add	r10,r7,r10
   13d8c:	4119883a 	add	r12,r8,r4
   13d90:	a169883a 	add	r20,r20,r5
   13d94:	1a87883a 	add	r3,r3,r10
   13d98:	6d5b383a 	mul	r13,r13,r21
   13d9c:	6480022e 	bgeu	r12,r18,13da8 <__muldf3+0x400>
   13da0:	01000074 	movhi	r4,1
   13da4:	691b883a 	add	r13,r13,r4
   13da8:	7c25383a 	mul	r18,r15,r16
   13dac:	7d4b383a 	mul	r5,r15,r21
   13db0:	84cf383a 	mul	r7,r16,r19
   13db4:	901ed43a 	srli	r15,r18,16
   13db8:	6008d43a 	srli	r4,r12,16
   13dbc:	6010943a 	slli	r8,r12,16
   13dc0:	394f883a 	add	r7,r7,r5
   13dc4:	333fffcc 	andi	r12,r6,65535
   13dc8:	79df883a 	add	r15,r15,r7
   13dcc:	235b883a 	add	r13,r4,r13
   13dd0:	9d63383a 	mul	r17,r19,r21
   13dd4:	4309883a 	add	r4,r8,r12
   13dd8:	7940022e 	bgeu	r15,r5,13de4 <__muldf3+0x43c>
   13ddc:	01400074 	movhi	r5,1
   13de0:	8963883a 	add	r17,r17,r5
   13de4:	780a943a 	slli	r5,r15,16
   13de8:	91bfffcc 	andi	r6,r18,65535
   13dec:	70c7883a 	add	r3,r14,r3
   13df0:	298d883a 	add	r6,r5,r6
   13df4:	1a8f803a 	cmpltu	r7,r3,r10
   13df8:	350b883a 	add	r5,r6,r20
   13dfc:	20c7883a 	add	r3,r4,r3
   13e00:	3955883a 	add	r10,r7,r5
   13e04:	1909803a 	cmpltu	r4,r3,r4
   13e08:	6a91883a 	add	r8,r13,r10
   13e0c:	780cd43a 	srli	r6,r15,16
   13e10:	2219883a 	add	r12,r4,r8
   13e14:	2d0b803a 	cmpltu	r5,r5,r20
   13e18:	51cf803a 	cmpltu	r7,r10,r7
   13e1c:	29ceb03a 	or	r7,r5,r7
   13e20:	4351803a 	cmpltu	r8,r8,r13
   13e24:	610b803a 	cmpltu	r5,r12,r4
   13e28:	4148b03a 	or	r4,r8,r5
   13e2c:	398f883a 	add	r7,r7,r6
   13e30:	3909883a 	add	r4,r7,r4
   13e34:	1810927a 	slli	r8,r3,9
   13e38:	2449883a 	add	r4,r4,r17
   13e3c:	2008927a 	slli	r4,r4,9
   13e40:	6022d5fa 	srli	r17,r12,23
   13e44:	1806d5fa 	srli	r3,r3,23
   13e48:	4252b03a 	or	r9,r8,r9
   13e4c:	600a927a 	slli	r5,r12,9
   13e50:	4810c03a 	cmpne	r8,r9,zero
   13e54:	2462b03a 	or	r17,r4,r17
   13e58:	40c6b03a 	or	r3,r8,r3
   13e5c:	8900402c 	andhi	r4,r17,256
   13e60:	1950b03a 	or	r8,r3,r5
   13e64:	20000726 	beq	r4,zero,13e84 <__muldf3+0x4dc>
   13e68:	4006d07a 	srli	r3,r8,1
   13e6c:	880497fa 	slli	r2,r17,31
   13e70:	4200004c 	andi	r8,r8,1
   13e74:	8822d07a 	srli	r17,r17,1
   13e78:	1a10b03a 	or	r8,r3,r8
   13e7c:	1210b03a 	or	r8,r2,r8
   13e80:	5805883a 	mov	r2,r11
   13e84:	1140ffc4 	addi	r5,r2,1023
   13e88:	0140440e 	bge	zero,r5,13f9c <__muldf3+0x5f4>
   13e8c:	40c001cc 	andi	r3,r8,7
   13e90:	18000726 	beq	r3,zero,13eb0 <__muldf3+0x508>
   13e94:	40c003cc 	andi	r3,r8,15
   13e98:	01000104 	movi	r4,4
   13e9c:	19000426 	beq	r3,r4,13eb0 <__muldf3+0x508>
   13ea0:	4107883a 	add	r3,r8,r4
   13ea4:	1a11803a 	cmpltu	r8,r3,r8
   13ea8:	8a23883a 	add	r17,r17,r8
   13eac:	1811883a 	mov	r8,r3
   13eb0:	88c0402c 	andhi	r3,r17,256
   13eb4:	18000426 	beq	r3,zero,13ec8 <__muldf3+0x520>
   13eb8:	11410004 	addi	r5,r2,1024
   13ebc:	00bfc034 	movhi	r2,65280
   13ec0:	10bfffc4 	addi	r2,r2,-1
   13ec4:	88a2703a 	and	r17,r17,r2
   13ec8:	0081ff84 	movi	r2,2046
   13ecc:	117f6416 	blt	r2,r5,13c60 <__alt_data_end+0xffff3c60>
   13ed0:	8828977a 	slli	r20,r17,29
   13ed4:	4010d0fa 	srli	r8,r8,3
   13ed8:	8822927a 	slli	r17,r17,9
   13edc:	2881ffcc 	andi	r2,r5,2047
   13ee0:	a228b03a 	or	r20,r20,r8
   13ee4:	880ad33a 	srli	r5,r17,12
   13ee8:	b02b883a 	mov	r21,r22
   13eec:	003f0d06 	br	13b24 <__alt_data_end+0xffff3b24>
   13ef0:	8080022c 	andhi	r2,r16,8
   13ef4:	10000926 	beq	r2,zero,13f1c <__muldf3+0x574>
   13ef8:	8880022c 	andhi	r2,r17,8
   13efc:	1000071e 	bne	r2,zero,13f1c <__muldf3+0x574>
   13f00:	00800434 	movhi	r2,16
   13f04:	89400234 	orhi	r5,r17,8
   13f08:	10bfffc4 	addi	r2,r2,-1
   13f0c:	b82b883a 	mov	r21,r23
   13f10:	288a703a 	and	r5,r5,r2
   13f14:	4029883a 	mov	r20,r8
   13f18:	003f6806 	br	13cbc <__alt_data_end+0xffff3cbc>
   13f1c:	00800434 	movhi	r2,16
   13f20:	81400234 	orhi	r5,r16,8
   13f24:	10bfffc4 	addi	r2,r2,-1
   13f28:	288a703a 	and	r5,r5,r2
   13f2c:	003f6306 	br	13cbc <__alt_data_end+0xffff3cbc>
   13f30:	147ff604 	addi	r17,r2,-40
   13f34:	3462983a 	sll	r17,r6,r17
   13f38:	0011883a 	mov	r8,zero
   13f3c:	003f4406 	br	13c50 <__alt_data_end+0xffff3c50>
   13f40:	3009883a 	mov	r4,r6
   13f44:	d9800215 	stw	r6,8(sp)
   13f48:	da400115 	stw	r9,4(sp)
   13f4c:	da800015 	stw	r10,0(sp)
   13f50:	0014c400 	call	14c40 <__clzsi2>
   13f54:	10800804 	addi	r2,r2,32
   13f58:	da800017 	ldw	r10,0(sp)
   13f5c:	da400117 	ldw	r9,4(sp)
   13f60:	d9800217 	ldw	r6,8(sp)
   13f64:	003f3006 	br	13c28 <__alt_data_end+0xffff3c28>
   13f68:	143ff604 	addi	r16,r2,-40
   13f6c:	9c20983a 	sll	r16,r19,r16
   13f70:	0029883a 	mov	r20,zero
   13f74:	003f1606 	br	13bd0 <__alt_data_end+0xffff3bd0>
   13f78:	d9800215 	stw	r6,8(sp)
   13f7c:	d9c00015 	stw	r7,0(sp)
   13f80:	da400115 	stw	r9,4(sp)
   13f84:	0014c400 	call	14c40 <__clzsi2>
   13f88:	10800804 	addi	r2,r2,32
   13f8c:	da400117 	ldw	r9,4(sp)
   13f90:	d9c00017 	ldw	r7,0(sp)
   13f94:	d9800217 	ldw	r6,8(sp)
   13f98:	003f0306 	br	13ba8 <__alt_data_end+0xffff3ba8>
   13f9c:	00c00044 	movi	r3,1
   13fa0:	1947c83a 	sub	r3,r3,r5
   13fa4:	00800e04 	movi	r2,56
   13fa8:	10feda16 	blt	r2,r3,13b14 <__alt_data_end+0xffff3b14>
   13fac:	008007c4 	movi	r2,31
   13fb0:	10c01b16 	blt	r2,r3,14020 <__muldf3+0x678>
   13fb4:	00800804 	movi	r2,32
   13fb8:	10c5c83a 	sub	r2,r2,r3
   13fbc:	888a983a 	sll	r5,r17,r2
   13fc0:	40c8d83a 	srl	r4,r8,r3
   13fc4:	4084983a 	sll	r2,r8,r2
   13fc8:	88e2d83a 	srl	r17,r17,r3
   13fcc:	2906b03a 	or	r3,r5,r4
   13fd0:	1004c03a 	cmpne	r2,r2,zero
   13fd4:	1886b03a 	or	r3,r3,r2
   13fd8:	188001cc 	andi	r2,r3,7
   13fdc:	10000726 	beq	r2,zero,13ffc <__muldf3+0x654>
   13fe0:	188003cc 	andi	r2,r3,15
   13fe4:	01000104 	movi	r4,4
   13fe8:	11000426 	beq	r2,r4,13ffc <__muldf3+0x654>
   13fec:	1805883a 	mov	r2,r3
   13ff0:	10c00104 	addi	r3,r2,4
   13ff4:	1885803a 	cmpltu	r2,r3,r2
   13ff8:	88a3883a 	add	r17,r17,r2
   13ffc:	8880202c 	andhi	r2,r17,128
   14000:	10001c26 	beq	r2,zero,14074 <__muldf3+0x6cc>
   14004:	b02b883a 	mov	r21,r22
   14008:	00800044 	movi	r2,1
   1400c:	000b883a 	mov	r5,zero
   14010:	0029883a 	mov	r20,zero
   14014:	003ec306 	br	13b24 <__alt_data_end+0xffff3b24>
   14018:	5805883a 	mov	r2,r11
   1401c:	003f9906 	br	13e84 <__alt_data_end+0xffff3e84>
   14020:	00bff844 	movi	r2,-31
   14024:	1145c83a 	sub	r2,r2,r5
   14028:	8888d83a 	srl	r4,r17,r2
   1402c:	00800804 	movi	r2,32
   14030:	18801a26 	beq	r3,r2,1409c <__muldf3+0x6f4>
   14034:	00801004 	movi	r2,64
   14038:	10c5c83a 	sub	r2,r2,r3
   1403c:	8884983a 	sll	r2,r17,r2
   14040:	1204b03a 	or	r2,r2,r8
   14044:	1004c03a 	cmpne	r2,r2,zero
   14048:	2084b03a 	or	r2,r4,r2
   1404c:	144001cc 	andi	r17,r2,7
   14050:	88000d1e 	bne	r17,zero,14088 <__muldf3+0x6e0>
   14054:	000b883a 	mov	r5,zero
   14058:	1028d0fa 	srli	r20,r2,3
   1405c:	b02b883a 	mov	r21,r22
   14060:	0005883a 	mov	r2,zero
   14064:	a468b03a 	or	r20,r20,r17
   14068:	003eae06 	br	13b24 <__alt_data_end+0xffff3b24>
   1406c:	1007883a 	mov	r3,r2
   14070:	0023883a 	mov	r17,zero
   14074:	880a927a 	slli	r5,r17,9
   14078:	1805883a 	mov	r2,r3
   1407c:	8822977a 	slli	r17,r17,29
   14080:	280ad33a 	srli	r5,r5,12
   14084:	003ff406 	br	14058 <__alt_data_end+0xffff4058>
   14088:	10c003cc 	andi	r3,r2,15
   1408c:	01000104 	movi	r4,4
   14090:	193ff626 	beq	r3,r4,1406c <__alt_data_end+0xffff406c>
   14094:	0023883a 	mov	r17,zero
   14098:	003fd506 	br	13ff0 <__alt_data_end+0xffff3ff0>
   1409c:	0005883a 	mov	r2,zero
   140a0:	003fe706 	br	14040 <__alt_data_end+0xffff4040>
   140a4:	00800434 	movhi	r2,16
   140a8:	89400234 	orhi	r5,r17,8
   140ac:	10bfffc4 	addi	r2,r2,-1
   140b0:	b02b883a 	mov	r21,r22
   140b4:	288a703a 	and	r5,r5,r2
   140b8:	4029883a 	mov	r20,r8
   140bc:	003eff06 	br	13cbc <__alt_data_end+0xffff3cbc>

000140c0 <__subdf3>:
   140c0:	02000434 	movhi	r8,16
   140c4:	423fffc4 	addi	r8,r8,-1
   140c8:	defffb04 	addi	sp,sp,-20
   140cc:	2a14703a 	and	r10,r5,r8
   140d0:	3812d53a 	srli	r9,r7,20
   140d4:	3a10703a 	and	r8,r7,r8
   140d8:	2006d77a 	srli	r3,r4,29
   140dc:	3004d77a 	srli	r2,r6,29
   140e0:	dc000015 	stw	r16,0(sp)
   140e4:	501490fa 	slli	r10,r10,3
   140e8:	2820d53a 	srli	r16,r5,20
   140ec:	401090fa 	slli	r8,r8,3
   140f0:	dc800215 	stw	r18,8(sp)
   140f4:	dc400115 	stw	r17,4(sp)
   140f8:	dfc00415 	stw	ra,16(sp)
   140fc:	202290fa 	slli	r17,r4,3
   14100:	dcc00315 	stw	r19,12(sp)
   14104:	4a41ffcc 	andi	r9,r9,2047
   14108:	0101ffc4 	movi	r4,2047
   1410c:	2824d7fa 	srli	r18,r5,31
   14110:	8401ffcc 	andi	r16,r16,2047
   14114:	50c6b03a 	or	r3,r10,r3
   14118:	380ed7fa 	srli	r7,r7,31
   1411c:	408ab03a 	or	r5,r8,r2
   14120:	300c90fa 	slli	r6,r6,3
   14124:	49009626 	beq	r9,r4,14380 <__subdf3+0x2c0>
   14128:	39c0005c 	xori	r7,r7,1
   1412c:	8245c83a 	sub	r2,r16,r9
   14130:	3c807426 	beq	r7,r18,14304 <__subdf3+0x244>
   14134:	0080af0e 	bge	zero,r2,143f4 <__subdf3+0x334>
   14138:	48002a1e 	bne	r9,zero,141e4 <__subdf3+0x124>
   1413c:	2988b03a 	or	r4,r5,r6
   14140:	20009a1e 	bne	r4,zero,143ac <__subdf3+0x2ec>
   14144:	888001cc 	andi	r2,r17,7
   14148:	10000726 	beq	r2,zero,14168 <__subdf3+0xa8>
   1414c:	888003cc 	andi	r2,r17,15
   14150:	01000104 	movi	r4,4
   14154:	11000426 	beq	r2,r4,14168 <__subdf3+0xa8>
   14158:	890b883a 	add	r5,r17,r4
   1415c:	2c63803a 	cmpltu	r17,r5,r17
   14160:	1c47883a 	add	r3,r3,r17
   14164:	2823883a 	mov	r17,r5
   14168:	1880202c 	andhi	r2,r3,128
   1416c:	10005926 	beq	r2,zero,142d4 <__subdf3+0x214>
   14170:	84000044 	addi	r16,r16,1
   14174:	0081ffc4 	movi	r2,2047
   14178:	8080be26 	beq	r16,r2,14474 <__subdf3+0x3b4>
   1417c:	017fe034 	movhi	r5,65408
   14180:	297fffc4 	addi	r5,r5,-1
   14184:	1946703a 	and	r3,r3,r5
   14188:	1804977a 	slli	r2,r3,29
   1418c:	1806927a 	slli	r3,r3,9
   14190:	8822d0fa 	srli	r17,r17,3
   14194:	8401ffcc 	andi	r16,r16,2047
   14198:	180ad33a 	srli	r5,r3,12
   1419c:	9100004c 	andi	r4,r18,1
   141a0:	1444b03a 	or	r2,r2,r17
   141a4:	80c1ffcc 	andi	r3,r16,2047
   141a8:	1820953a 	slli	r16,r3,20
   141ac:	20c03fcc 	andi	r3,r4,255
   141b0:	180897fa 	slli	r4,r3,31
   141b4:	00c00434 	movhi	r3,16
   141b8:	18ffffc4 	addi	r3,r3,-1
   141bc:	28c6703a 	and	r3,r5,r3
   141c0:	1c06b03a 	or	r3,r3,r16
   141c4:	1906b03a 	or	r3,r3,r4
   141c8:	dfc00417 	ldw	ra,16(sp)
   141cc:	dcc00317 	ldw	r19,12(sp)
   141d0:	dc800217 	ldw	r18,8(sp)
   141d4:	dc400117 	ldw	r17,4(sp)
   141d8:	dc000017 	ldw	r16,0(sp)
   141dc:	dec00504 	addi	sp,sp,20
   141e0:	f800283a 	ret
   141e4:	0101ffc4 	movi	r4,2047
   141e8:	813fd626 	beq	r16,r4,14144 <__alt_data_end+0xffff4144>
   141ec:	29402034 	orhi	r5,r5,128
   141f0:	01000e04 	movi	r4,56
   141f4:	2080a316 	blt	r4,r2,14484 <__subdf3+0x3c4>
   141f8:	010007c4 	movi	r4,31
   141fc:	2080c616 	blt	r4,r2,14518 <__subdf3+0x458>
   14200:	01000804 	movi	r4,32
   14204:	2089c83a 	sub	r4,r4,r2
   14208:	2910983a 	sll	r8,r5,r4
   1420c:	308ed83a 	srl	r7,r6,r2
   14210:	3108983a 	sll	r4,r6,r4
   14214:	2884d83a 	srl	r2,r5,r2
   14218:	41ccb03a 	or	r6,r8,r7
   1421c:	2008c03a 	cmpne	r4,r4,zero
   14220:	310cb03a 	or	r6,r6,r4
   14224:	898dc83a 	sub	r6,r17,r6
   14228:	89a3803a 	cmpltu	r17,r17,r6
   1422c:	1887c83a 	sub	r3,r3,r2
   14230:	1c47c83a 	sub	r3,r3,r17
   14234:	3023883a 	mov	r17,r6
   14238:	1880202c 	andhi	r2,r3,128
   1423c:	10002326 	beq	r2,zero,142cc <__subdf3+0x20c>
   14240:	04c02034 	movhi	r19,128
   14244:	9cffffc4 	addi	r19,r19,-1
   14248:	1ce6703a 	and	r19,r3,r19
   1424c:	98007a26 	beq	r19,zero,14438 <__subdf3+0x378>
   14250:	9809883a 	mov	r4,r19
   14254:	0014c400 	call	14c40 <__clzsi2>
   14258:	113ffe04 	addi	r4,r2,-8
   1425c:	00c007c4 	movi	r3,31
   14260:	19007b16 	blt	r3,r4,14450 <__subdf3+0x390>
   14264:	00800804 	movi	r2,32
   14268:	1105c83a 	sub	r2,r2,r4
   1426c:	8884d83a 	srl	r2,r17,r2
   14270:	9906983a 	sll	r3,r19,r4
   14274:	8922983a 	sll	r17,r17,r4
   14278:	10c4b03a 	or	r2,r2,r3
   1427c:	24007816 	blt	r4,r16,14460 <__subdf3+0x3a0>
   14280:	2421c83a 	sub	r16,r4,r16
   14284:	80c00044 	addi	r3,r16,1
   14288:	010007c4 	movi	r4,31
   1428c:	20c09516 	blt	r4,r3,144e4 <__subdf3+0x424>
   14290:	01400804 	movi	r5,32
   14294:	28cbc83a 	sub	r5,r5,r3
   14298:	88c8d83a 	srl	r4,r17,r3
   1429c:	8962983a 	sll	r17,r17,r5
   142a0:	114a983a 	sll	r5,r2,r5
   142a4:	10c6d83a 	srl	r3,r2,r3
   142a8:	8804c03a 	cmpne	r2,r17,zero
   142ac:	290ab03a 	or	r5,r5,r4
   142b0:	28a2b03a 	or	r17,r5,r2
   142b4:	0021883a 	mov	r16,zero
   142b8:	003fa206 	br	14144 <__alt_data_end+0xffff4144>
   142bc:	2090b03a 	or	r8,r4,r2
   142c0:	40018e26 	beq	r8,zero,148fc <__subdf3+0x83c>
   142c4:	1007883a 	mov	r3,r2
   142c8:	2023883a 	mov	r17,r4
   142cc:	888001cc 	andi	r2,r17,7
   142d0:	103f9e1e 	bne	r2,zero,1414c <__alt_data_end+0xffff414c>
   142d4:	1804977a 	slli	r2,r3,29
   142d8:	8822d0fa 	srli	r17,r17,3
   142dc:	1810d0fa 	srli	r8,r3,3
   142e0:	9100004c 	andi	r4,r18,1
   142e4:	1444b03a 	or	r2,r2,r17
   142e8:	00c1ffc4 	movi	r3,2047
   142ec:	80c02826 	beq	r16,r3,14390 <__subdf3+0x2d0>
   142f0:	01400434 	movhi	r5,16
   142f4:	297fffc4 	addi	r5,r5,-1
   142f8:	80e0703a 	and	r16,r16,r3
   142fc:	414a703a 	and	r5,r8,r5
   14300:	003fa806 	br	141a4 <__alt_data_end+0xffff41a4>
   14304:	0080630e 	bge	zero,r2,14494 <__subdf3+0x3d4>
   14308:	48003026 	beq	r9,zero,143cc <__subdf3+0x30c>
   1430c:	0101ffc4 	movi	r4,2047
   14310:	813f8c26 	beq	r16,r4,14144 <__alt_data_end+0xffff4144>
   14314:	29402034 	orhi	r5,r5,128
   14318:	01000e04 	movi	r4,56
   1431c:	2080a90e 	bge	r4,r2,145c4 <__subdf3+0x504>
   14320:	298cb03a 	or	r6,r5,r6
   14324:	3012c03a 	cmpne	r9,r6,zero
   14328:	0005883a 	mov	r2,zero
   1432c:	4c53883a 	add	r9,r9,r17
   14330:	4c63803a 	cmpltu	r17,r9,r17
   14334:	10c7883a 	add	r3,r2,r3
   14338:	88c7883a 	add	r3,r17,r3
   1433c:	4823883a 	mov	r17,r9
   14340:	1880202c 	andhi	r2,r3,128
   14344:	1000d026 	beq	r2,zero,14688 <__subdf3+0x5c8>
   14348:	84000044 	addi	r16,r16,1
   1434c:	0081ffc4 	movi	r2,2047
   14350:	8080fe26 	beq	r16,r2,1474c <__subdf3+0x68c>
   14354:	00bfe034 	movhi	r2,65408
   14358:	10bfffc4 	addi	r2,r2,-1
   1435c:	1886703a 	and	r3,r3,r2
   14360:	880ad07a 	srli	r5,r17,1
   14364:	180497fa 	slli	r2,r3,31
   14368:	8900004c 	andi	r4,r17,1
   1436c:	2922b03a 	or	r17,r5,r4
   14370:	1806d07a 	srli	r3,r3,1
   14374:	1462b03a 	or	r17,r2,r17
   14378:	3825883a 	mov	r18,r7
   1437c:	003f7106 	br	14144 <__alt_data_end+0xffff4144>
   14380:	2984b03a 	or	r2,r5,r6
   14384:	103f6826 	beq	r2,zero,14128 <__alt_data_end+0xffff4128>
   14388:	39c03fcc 	andi	r7,r7,255
   1438c:	003f6706 	br	1412c <__alt_data_end+0xffff412c>
   14390:	4086b03a 	or	r3,r8,r2
   14394:	18015226 	beq	r3,zero,148e0 <__subdf3+0x820>
   14398:	00c00434 	movhi	r3,16
   1439c:	41400234 	orhi	r5,r8,8
   143a0:	18ffffc4 	addi	r3,r3,-1
   143a4:	28ca703a 	and	r5,r5,r3
   143a8:	003f7e06 	br	141a4 <__alt_data_end+0xffff41a4>
   143ac:	10bfffc4 	addi	r2,r2,-1
   143b0:	1000491e 	bne	r2,zero,144d8 <__subdf3+0x418>
   143b4:	898fc83a 	sub	r7,r17,r6
   143b8:	89e3803a 	cmpltu	r17,r17,r7
   143bc:	1947c83a 	sub	r3,r3,r5
   143c0:	1c47c83a 	sub	r3,r3,r17
   143c4:	3823883a 	mov	r17,r7
   143c8:	003f9b06 	br	14238 <__alt_data_end+0xffff4238>
   143cc:	2988b03a 	or	r4,r5,r6
   143d0:	203f5c26 	beq	r4,zero,14144 <__alt_data_end+0xffff4144>
   143d4:	10bfffc4 	addi	r2,r2,-1
   143d8:	1000931e 	bne	r2,zero,14628 <__subdf3+0x568>
   143dc:	898d883a 	add	r6,r17,r6
   143e0:	3463803a 	cmpltu	r17,r6,r17
   143e4:	1947883a 	add	r3,r3,r5
   143e8:	88c7883a 	add	r3,r17,r3
   143ec:	3023883a 	mov	r17,r6
   143f0:	003fd306 	br	14340 <__alt_data_end+0xffff4340>
   143f4:	1000541e 	bne	r2,zero,14548 <__subdf3+0x488>
   143f8:	80800044 	addi	r2,r16,1
   143fc:	1081ffcc 	andi	r2,r2,2047
   14400:	01000044 	movi	r4,1
   14404:	2080a20e 	bge	r4,r2,14690 <__subdf3+0x5d0>
   14408:	8989c83a 	sub	r4,r17,r6
   1440c:	8905803a 	cmpltu	r2,r17,r4
   14410:	1967c83a 	sub	r19,r3,r5
   14414:	98a7c83a 	sub	r19,r19,r2
   14418:	9880202c 	andhi	r2,r19,128
   1441c:	10006326 	beq	r2,zero,145ac <__subdf3+0x4ec>
   14420:	3463c83a 	sub	r17,r6,r17
   14424:	28c7c83a 	sub	r3,r5,r3
   14428:	344d803a 	cmpltu	r6,r6,r17
   1442c:	19a7c83a 	sub	r19,r3,r6
   14430:	3825883a 	mov	r18,r7
   14434:	983f861e 	bne	r19,zero,14250 <__alt_data_end+0xffff4250>
   14438:	8809883a 	mov	r4,r17
   1443c:	0014c400 	call	14c40 <__clzsi2>
   14440:	10800804 	addi	r2,r2,32
   14444:	113ffe04 	addi	r4,r2,-8
   14448:	00c007c4 	movi	r3,31
   1444c:	193f850e 	bge	r3,r4,14264 <__alt_data_end+0xffff4264>
   14450:	10bff604 	addi	r2,r2,-40
   14454:	8884983a 	sll	r2,r17,r2
   14458:	0023883a 	mov	r17,zero
   1445c:	243f880e 	bge	r4,r16,14280 <__alt_data_end+0xffff4280>
   14460:	00ffe034 	movhi	r3,65408
   14464:	18ffffc4 	addi	r3,r3,-1
   14468:	8121c83a 	sub	r16,r16,r4
   1446c:	10c6703a 	and	r3,r2,r3
   14470:	003f3406 	br	14144 <__alt_data_end+0xffff4144>
   14474:	9100004c 	andi	r4,r18,1
   14478:	000b883a 	mov	r5,zero
   1447c:	0005883a 	mov	r2,zero
   14480:	003f4806 	br	141a4 <__alt_data_end+0xffff41a4>
   14484:	298cb03a 	or	r6,r5,r6
   14488:	300cc03a 	cmpne	r6,r6,zero
   1448c:	0005883a 	mov	r2,zero
   14490:	003f6406 	br	14224 <__alt_data_end+0xffff4224>
   14494:	10009a1e 	bne	r2,zero,14700 <__subdf3+0x640>
   14498:	82400044 	addi	r9,r16,1
   1449c:	4881ffcc 	andi	r2,r9,2047
   144a0:	02800044 	movi	r10,1
   144a4:	5080670e 	bge	r10,r2,14644 <__subdf3+0x584>
   144a8:	0081ffc4 	movi	r2,2047
   144ac:	4880af26 	beq	r9,r2,1476c <__subdf3+0x6ac>
   144b0:	898d883a 	add	r6,r17,r6
   144b4:	1945883a 	add	r2,r3,r5
   144b8:	3447803a 	cmpltu	r3,r6,r17
   144bc:	1887883a 	add	r3,r3,r2
   144c0:	182297fa 	slli	r17,r3,31
   144c4:	300cd07a 	srli	r6,r6,1
   144c8:	1806d07a 	srli	r3,r3,1
   144cc:	4821883a 	mov	r16,r9
   144d0:	89a2b03a 	or	r17,r17,r6
   144d4:	003f1b06 	br	14144 <__alt_data_end+0xffff4144>
   144d8:	0101ffc4 	movi	r4,2047
   144dc:	813f441e 	bne	r16,r4,141f0 <__alt_data_end+0xffff41f0>
   144e0:	003f1806 	br	14144 <__alt_data_end+0xffff4144>
   144e4:	843ff844 	addi	r16,r16,-31
   144e8:	01400804 	movi	r5,32
   144ec:	1408d83a 	srl	r4,r2,r16
   144f0:	19405026 	beq	r3,r5,14634 <__subdf3+0x574>
   144f4:	01401004 	movi	r5,64
   144f8:	28c7c83a 	sub	r3,r5,r3
   144fc:	10c4983a 	sll	r2,r2,r3
   14500:	88a2b03a 	or	r17,r17,r2
   14504:	8822c03a 	cmpne	r17,r17,zero
   14508:	2462b03a 	or	r17,r4,r17
   1450c:	0007883a 	mov	r3,zero
   14510:	0021883a 	mov	r16,zero
   14514:	003f6d06 	br	142cc <__alt_data_end+0xffff42cc>
   14518:	11fff804 	addi	r7,r2,-32
   1451c:	01000804 	movi	r4,32
   14520:	29ced83a 	srl	r7,r5,r7
   14524:	11004526 	beq	r2,r4,1463c <__subdf3+0x57c>
   14528:	01001004 	movi	r4,64
   1452c:	2089c83a 	sub	r4,r4,r2
   14530:	2904983a 	sll	r2,r5,r4
   14534:	118cb03a 	or	r6,r2,r6
   14538:	300cc03a 	cmpne	r6,r6,zero
   1453c:	398cb03a 	or	r6,r7,r6
   14540:	0005883a 	mov	r2,zero
   14544:	003f3706 	br	14224 <__alt_data_end+0xffff4224>
   14548:	80002a26 	beq	r16,zero,145f4 <__subdf3+0x534>
   1454c:	0101ffc4 	movi	r4,2047
   14550:	49006626 	beq	r9,r4,146ec <__subdf3+0x62c>
   14554:	0085c83a 	sub	r2,zero,r2
   14558:	18c02034 	orhi	r3,r3,128
   1455c:	01000e04 	movi	r4,56
   14560:	20807e16 	blt	r4,r2,1475c <__subdf3+0x69c>
   14564:	010007c4 	movi	r4,31
   14568:	2080e716 	blt	r4,r2,14908 <__subdf3+0x848>
   1456c:	01000804 	movi	r4,32
   14570:	2089c83a 	sub	r4,r4,r2
   14574:	1914983a 	sll	r10,r3,r4
   14578:	8890d83a 	srl	r8,r17,r2
   1457c:	8908983a 	sll	r4,r17,r4
   14580:	1884d83a 	srl	r2,r3,r2
   14584:	5222b03a 	or	r17,r10,r8
   14588:	2006c03a 	cmpne	r3,r4,zero
   1458c:	88e2b03a 	or	r17,r17,r3
   14590:	3463c83a 	sub	r17,r6,r17
   14594:	2885c83a 	sub	r2,r5,r2
   14598:	344d803a 	cmpltu	r6,r6,r17
   1459c:	1187c83a 	sub	r3,r2,r6
   145a0:	4821883a 	mov	r16,r9
   145a4:	3825883a 	mov	r18,r7
   145a8:	003f2306 	br	14238 <__alt_data_end+0xffff4238>
   145ac:	24d0b03a 	or	r8,r4,r19
   145b0:	40001b1e 	bne	r8,zero,14620 <__subdf3+0x560>
   145b4:	0005883a 	mov	r2,zero
   145b8:	0009883a 	mov	r4,zero
   145bc:	0021883a 	mov	r16,zero
   145c0:	003f4906 	br	142e8 <__alt_data_end+0xffff42e8>
   145c4:	010007c4 	movi	r4,31
   145c8:	20803a16 	blt	r4,r2,146b4 <__subdf3+0x5f4>
   145cc:	01000804 	movi	r4,32
   145d0:	2089c83a 	sub	r4,r4,r2
   145d4:	2912983a 	sll	r9,r5,r4
   145d8:	3090d83a 	srl	r8,r6,r2
   145dc:	3108983a 	sll	r4,r6,r4
   145e0:	2884d83a 	srl	r2,r5,r2
   145e4:	4a12b03a 	or	r9,r9,r8
   145e8:	2008c03a 	cmpne	r4,r4,zero
   145ec:	4912b03a 	or	r9,r9,r4
   145f0:	003f4e06 	br	1432c <__alt_data_end+0xffff432c>
   145f4:	1c48b03a 	or	r4,r3,r17
   145f8:	20003c26 	beq	r4,zero,146ec <__subdf3+0x62c>
   145fc:	0084303a 	nor	r2,zero,r2
   14600:	1000381e 	bne	r2,zero,146e4 <__subdf3+0x624>
   14604:	3463c83a 	sub	r17,r6,r17
   14608:	28c5c83a 	sub	r2,r5,r3
   1460c:	344d803a 	cmpltu	r6,r6,r17
   14610:	1187c83a 	sub	r3,r2,r6
   14614:	4821883a 	mov	r16,r9
   14618:	3825883a 	mov	r18,r7
   1461c:	003f0606 	br	14238 <__alt_data_end+0xffff4238>
   14620:	2023883a 	mov	r17,r4
   14624:	003f0906 	br	1424c <__alt_data_end+0xffff424c>
   14628:	0101ffc4 	movi	r4,2047
   1462c:	813f3a1e 	bne	r16,r4,14318 <__alt_data_end+0xffff4318>
   14630:	003ec406 	br	14144 <__alt_data_end+0xffff4144>
   14634:	0005883a 	mov	r2,zero
   14638:	003fb106 	br	14500 <__alt_data_end+0xffff4500>
   1463c:	0005883a 	mov	r2,zero
   14640:	003fbc06 	br	14534 <__alt_data_end+0xffff4534>
   14644:	1c44b03a 	or	r2,r3,r17
   14648:	80008e1e 	bne	r16,zero,14884 <__subdf3+0x7c4>
   1464c:	1000c826 	beq	r2,zero,14970 <__subdf3+0x8b0>
   14650:	2984b03a 	or	r2,r5,r6
   14654:	103ebb26 	beq	r2,zero,14144 <__alt_data_end+0xffff4144>
   14658:	8989883a 	add	r4,r17,r6
   1465c:	1945883a 	add	r2,r3,r5
   14660:	2447803a 	cmpltu	r3,r4,r17
   14664:	1887883a 	add	r3,r3,r2
   14668:	1880202c 	andhi	r2,r3,128
   1466c:	2023883a 	mov	r17,r4
   14670:	103f1626 	beq	r2,zero,142cc <__alt_data_end+0xffff42cc>
   14674:	00bfe034 	movhi	r2,65408
   14678:	10bfffc4 	addi	r2,r2,-1
   1467c:	5021883a 	mov	r16,r10
   14680:	1886703a 	and	r3,r3,r2
   14684:	003eaf06 	br	14144 <__alt_data_end+0xffff4144>
   14688:	3825883a 	mov	r18,r7
   1468c:	003f0f06 	br	142cc <__alt_data_end+0xffff42cc>
   14690:	1c44b03a 	or	r2,r3,r17
   14694:	8000251e 	bne	r16,zero,1472c <__subdf3+0x66c>
   14698:	1000661e 	bne	r2,zero,14834 <__subdf3+0x774>
   1469c:	2990b03a 	or	r8,r5,r6
   146a0:	40009626 	beq	r8,zero,148fc <__subdf3+0x83c>
   146a4:	2807883a 	mov	r3,r5
   146a8:	3023883a 	mov	r17,r6
   146ac:	3825883a 	mov	r18,r7
   146b0:	003ea406 	br	14144 <__alt_data_end+0xffff4144>
   146b4:	127ff804 	addi	r9,r2,-32
   146b8:	01000804 	movi	r4,32
   146bc:	2a52d83a 	srl	r9,r5,r9
   146c0:	11008c26 	beq	r2,r4,148f4 <__subdf3+0x834>
   146c4:	01001004 	movi	r4,64
   146c8:	2085c83a 	sub	r2,r4,r2
   146cc:	2884983a 	sll	r2,r5,r2
   146d0:	118cb03a 	or	r6,r2,r6
   146d4:	300cc03a 	cmpne	r6,r6,zero
   146d8:	4992b03a 	or	r9,r9,r6
   146dc:	0005883a 	mov	r2,zero
   146e0:	003f1206 	br	1432c <__alt_data_end+0xffff432c>
   146e4:	0101ffc4 	movi	r4,2047
   146e8:	493f9c1e 	bne	r9,r4,1455c <__alt_data_end+0xffff455c>
   146ec:	2807883a 	mov	r3,r5
   146f0:	3023883a 	mov	r17,r6
   146f4:	4821883a 	mov	r16,r9
   146f8:	3825883a 	mov	r18,r7
   146fc:	003e9106 	br	14144 <__alt_data_end+0xffff4144>
   14700:	80001f1e 	bne	r16,zero,14780 <__subdf3+0x6c0>
   14704:	1c48b03a 	or	r4,r3,r17
   14708:	20005a26 	beq	r4,zero,14874 <__subdf3+0x7b4>
   1470c:	0084303a 	nor	r2,zero,r2
   14710:	1000561e 	bne	r2,zero,1486c <__subdf3+0x7ac>
   14714:	89a3883a 	add	r17,r17,r6
   14718:	1945883a 	add	r2,r3,r5
   1471c:	898d803a 	cmpltu	r6,r17,r6
   14720:	3087883a 	add	r3,r6,r2
   14724:	4821883a 	mov	r16,r9
   14728:	003f0506 	br	14340 <__alt_data_end+0xffff4340>
   1472c:	10002b1e 	bne	r2,zero,147dc <__subdf3+0x71c>
   14730:	2984b03a 	or	r2,r5,r6
   14734:	10008026 	beq	r2,zero,14938 <__subdf3+0x878>
   14738:	2807883a 	mov	r3,r5
   1473c:	3023883a 	mov	r17,r6
   14740:	3825883a 	mov	r18,r7
   14744:	0401ffc4 	movi	r16,2047
   14748:	003e7e06 	br	14144 <__alt_data_end+0xffff4144>
   1474c:	3809883a 	mov	r4,r7
   14750:	0011883a 	mov	r8,zero
   14754:	0005883a 	mov	r2,zero
   14758:	003ee306 	br	142e8 <__alt_data_end+0xffff42e8>
   1475c:	1c62b03a 	or	r17,r3,r17
   14760:	8822c03a 	cmpne	r17,r17,zero
   14764:	0005883a 	mov	r2,zero
   14768:	003f8906 	br	14590 <__alt_data_end+0xffff4590>
   1476c:	3809883a 	mov	r4,r7
   14770:	4821883a 	mov	r16,r9
   14774:	0011883a 	mov	r8,zero
   14778:	0005883a 	mov	r2,zero
   1477c:	003eda06 	br	142e8 <__alt_data_end+0xffff42e8>
   14780:	0101ffc4 	movi	r4,2047
   14784:	49003b26 	beq	r9,r4,14874 <__subdf3+0x7b4>
   14788:	0085c83a 	sub	r2,zero,r2
   1478c:	18c02034 	orhi	r3,r3,128
   14790:	01000e04 	movi	r4,56
   14794:	20806e16 	blt	r4,r2,14950 <__subdf3+0x890>
   14798:	010007c4 	movi	r4,31
   1479c:	20807716 	blt	r4,r2,1497c <__subdf3+0x8bc>
   147a0:	01000804 	movi	r4,32
   147a4:	2089c83a 	sub	r4,r4,r2
   147a8:	1914983a 	sll	r10,r3,r4
   147ac:	8890d83a 	srl	r8,r17,r2
   147b0:	8908983a 	sll	r4,r17,r4
   147b4:	1884d83a 	srl	r2,r3,r2
   147b8:	5222b03a 	or	r17,r10,r8
   147bc:	2006c03a 	cmpne	r3,r4,zero
   147c0:	88e2b03a 	or	r17,r17,r3
   147c4:	89a3883a 	add	r17,r17,r6
   147c8:	1145883a 	add	r2,r2,r5
   147cc:	898d803a 	cmpltu	r6,r17,r6
   147d0:	3087883a 	add	r3,r6,r2
   147d4:	4821883a 	mov	r16,r9
   147d8:	003ed906 	br	14340 <__alt_data_end+0xffff4340>
   147dc:	2984b03a 	or	r2,r5,r6
   147e0:	10004226 	beq	r2,zero,148ec <__subdf3+0x82c>
   147e4:	1808d0fa 	srli	r4,r3,3
   147e8:	8822d0fa 	srli	r17,r17,3
   147ec:	1806977a 	slli	r3,r3,29
   147f0:	2080022c 	andhi	r2,r4,8
   147f4:	1c62b03a 	or	r17,r3,r17
   147f8:	10000826 	beq	r2,zero,1481c <__subdf3+0x75c>
   147fc:	2812d0fa 	srli	r9,r5,3
   14800:	4880022c 	andhi	r2,r9,8
   14804:	1000051e 	bne	r2,zero,1481c <__subdf3+0x75c>
   14808:	300cd0fa 	srli	r6,r6,3
   1480c:	2804977a 	slli	r2,r5,29
   14810:	4809883a 	mov	r4,r9
   14814:	3825883a 	mov	r18,r7
   14818:	11a2b03a 	or	r17,r2,r6
   1481c:	8806d77a 	srli	r3,r17,29
   14820:	200890fa 	slli	r4,r4,3
   14824:	882290fa 	slli	r17,r17,3
   14828:	0401ffc4 	movi	r16,2047
   1482c:	1906b03a 	or	r3,r3,r4
   14830:	003e4406 	br	14144 <__alt_data_end+0xffff4144>
   14834:	2984b03a 	or	r2,r5,r6
   14838:	103e4226 	beq	r2,zero,14144 <__alt_data_end+0xffff4144>
   1483c:	8989c83a 	sub	r4,r17,r6
   14840:	8911803a 	cmpltu	r8,r17,r4
   14844:	1945c83a 	sub	r2,r3,r5
   14848:	1205c83a 	sub	r2,r2,r8
   1484c:	1200202c 	andhi	r8,r2,128
   14850:	403e9a26 	beq	r8,zero,142bc <__alt_data_end+0xffff42bc>
   14854:	3463c83a 	sub	r17,r6,r17
   14858:	28c5c83a 	sub	r2,r5,r3
   1485c:	344d803a 	cmpltu	r6,r6,r17
   14860:	1187c83a 	sub	r3,r2,r6
   14864:	3825883a 	mov	r18,r7
   14868:	003e3606 	br	14144 <__alt_data_end+0xffff4144>
   1486c:	0101ffc4 	movi	r4,2047
   14870:	493fc71e 	bne	r9,r4,14790 <__alt_data_end+0xffff4790>
   14874:	2807883a 	mov	r3,r5
   14878:	3023883a 	mov	r17,r6
   1487c:	4821883a 	mov	r16,r9
   14880:	003e3006 	br	14144 <__alt_data_end+0xffff4144>
   14884:	10003626 	beq	r2,zero,14960 <__subdf3+0x8a0>
   14888:	2984b03a 	or	r2,r5,r6
   1488c:	10001726 	beq	r2,zero,148ec <__subdf3+0x82c>
   14890:	1808d0fa 	srli	r4,r3,3
   14894:	8822d0fa 	srli	r17,r17,3
   14898:	1806977a 	slli	r3,r3,29
   1489c:	2080022c 	andhi	r2,r4,8
   148a0:	1c62b03a 	or	r17,r3,r17
   148a4:	10000726 	beq	r2,zero,148c4 <__subdf3+0x804>
   148a8:	2812d0fa 	srli	r9,r5,3
   148ac:	4880022c 	andhi	r2,r9,8
   148b0:	1000041e 	bne	r2,zero,148c4 <__subdf3+0x804>
   148b4:	300cd0fa 	srli	r6,r6,3
   148b8:	2804977a 	slli	r2,r5,29
   148bc:	4809883a 	mov	r4,r9
   148c0:	11a2b03a 	or	r17,r2,r6
   148c4:	8806d77a 	srli	r3,r17,29
   148c8:	200890fa 	slli	r4,r4,3
   148cc:	882290fa 	slli	r17,r17,3
   148d0:	3825883a 	mov	r18,r7
   148d4:	1906b03a 	or	r3,r3,r4
   148d8:	0401ffc4 	movi	r16,2047
   148dc:	003e1906 	br	14144 <__alt_data_end+0xffff4144>
   148e0:	000b883a 	mov	r5,zero
   148e4:	0005883a 	mov	r2,zero
   148e8:	003e2e06 	br	141a4 <__alt_data_end+0xffff41a4>
   148ec:	0401ffc4 	movi	r16,2047
   148f0:	003e1406 	br	14144 <__alt_data_end+0xffff4144>
   148f4:	0005883a 	mov	r2,zero
   148f8:	003f7506 	br	146d0 <__alt_data_end+0xffff46d0>
   148fc:	0005883a 	mov	r2,zero
   14900:	0009883a 	mov	r4,zero
   14904:	003e7806 	br	142e8 <__alt_data_end+0xffff42e8>
   14908:	123ff804 	addi	r8,r2,-32
   1490c:	01000804 	movi	r4,32
   14910:	1a10d83a 	srl	r8,r3,r8
   14914:	11002526 	beq	r2,r4,149ac <__subdf3+0x8ec>
   14918:	01001004 	movi	r4,64
   1491c:	2085c83a 	sub	r2,r4,r2
   14920:	1884983a 	sll	r2,r3,r2
   14924:	1444b03a 	or	r2,r2,r17
   14928:	1004c03a 	cmpne	r2,r2,zero
   1492c:	40a2b03a 	or	r17,r8,r2
   14930:	0005883a 	mov	r2,zero
   14934:	003f1606 	br	14590 <__alt_data_end+0xffff4590>
   14938:	02000434 	movhi	r8,16
   1493c:	0009883a 	mov	r4,zero
   14940:	423fffc4 	addi	r8,r8,-1
   14944:	00bfffc4 	movi	r2,-1
   14948:	0401ffc4 	movi	r16,2047
   1494c:	003e6606 	br	142e8 <__alt_data_end+0xffff42e8>
   14950:	1c62b03a 	or	r17,r3,r17
   14954:	8822c03a 	cmpne	r17,r17,zero
   14958:	0005883a 	mov	r2,zero
   1495c:	003f9906 	br	147c4 <__alt_data_end+0xffff47c4>
   14960:	2807883a 	mov	r3,r5
   14964:	3023883a 	mov	r17,r6
   14968:	0401ffc4 	movi	r16,2047
   1496c:	003df506 	br	14144 <__alt_data_end+0xffff4144>
   14970:	2807883a 	mov	r3,r5
   14974:	3023883a 	mov	r17,r6
   14978:	003df206 	br	14144 <__alt_data_end+0xffff4144>
   1497c:	123ff804 	addi	r8,r2,-32
   14980:	01000804 	movi	r4,32
   14984:	1a10d83a 	srl	r8,r3,r8
   14988:	11000a26 	beq	r2,r4,149b4 <__subdf3+0x8f4>
   1498c:	01001004 	movi	r4,64
   14990:	2085c83a 	sub	r2,r4,r2
   14994:	1884983a 	sll	r2,r3,r2
   14998:	1444b03a 	or	r2,r2,r17
   1499c:	1004c03a 	cmpne	r2,r2,zero
   149a0:	40a2b03a 	or	r17,r8,r2
   149a4:	0005883a 	mov	r2,zero
   149a8:	003f8606 	br	147c4 <__alt_data_end+0xffff47c4>
   149ac:	0005883a 	mov	r2,zero
   149b0:	003fdc06 	br	14924 <__alt_data_end+0xffff4924>
   149b4:	0005883a 	mov	r2,zero
   149b8:	003ff706 	br	14998 <__alt_data_end+0xffff4998>

000149bc <__floatsidf>:
   149bc:	defffd04 	addi	sp,sp,-12
   149c0:	dfc00215 	stw	ra,8(sp)
   149c4:	dc400115 	stw	r17,4(sp)
   149c8:	dc000015 	stw	r16,0(sp)
   149cc:	20002b26 	beq	r4,zero,14a7c <__floatsidf+0xc0>
   149d0:	2023883a 	mov	r17,r4
   149d4:	2020d7fa 	srli	r16,r4,31
   149d8:	20002d16 	blt	r4,zero,14a90 <__floatsidf+0xd4>
   149dc:	8809883a 	mov	r4,r17
   149e0:	0014c400 	call	14c40 <__clzsi2>
   149e4:	01410784 	movi	r5,1054
   149e8:	288bc83a 	sub	r5,r5,r2
   149ec:	01010cc4 	movi	r4,1075
   149f0:	2149c83a 	sub	r4,r4,r5
   149f4:	00c007c4 	movi	r3,31
   149f8:	1900160e 	bge	r3,r4,14a54 <__floatsidf+0x98>
   149fc:	00c104c4 	movi	r3,1043
   14a00:	1947c83a 	sub	r3,r3,r5
   14a04:	88c6983a 	sll	r3,r17,r3
   14a08:	00800434 	movhi	r2,16
   14a0c:	10bfffc4 	addi	r2,r2,-1
   14a10:	1886703a 	and	r3,r3,r2
   14a14:	2941ffcc 	andi	r5,r5,2047
   14a18:	800d883a 	mov	r6,r16
   14a1c:	0005883a 	mov	r2,zero
   14a20:	280a953a 	slli	r5,r5,20
   14a24:	31803fcc 	andi	r6,r6,255
   14a28:	01000434 	movhi	r4,16
   14a2c:	300c97fa 	slli	r6,r6,31
   14a30:	213fffc4 	addi	r4,r4,-1
   14a34:	1906703a 	and	r3,r3,r4
   14a38:	1946b03a 	or	r3,r3,r5
   14a3c:	1986b03a 	or	r3,r3,r6
   14a40:	dfc00217 	ldw	ra,8(sp)
   14a44:	dc400117 	ldw	r17,4(sp)
   14a48:	dc000017 	ldw	r16,0(sp)
   14a4c:	dec00304 	addi	sp,sp,12
   14a50:	f800283a 	ret
   14a54:	00c002c4 	movi	r3,11
   14a58:	1887c83a 	sub	r3,r3,r2
   14a5c:	88c6d83a 	srl	r3,r17,r3
   14a60:	8904983a 	sll	r2,r17,r4
   14a64:	01000434 	movhi	r4,16
   14a68:	213fffc4 	addi	r4,r4,-1
   14a6c:	2941ffcc 	andi	r5,r5,2047
   14a70:	1906703a 	and	r3,r3,r4
   14a74:	800d883a 	mov	r6,r16
   14a78:	003fe906 	br	14a20 <__alt_data_end+0xffff4a20>
   14a7c:	000d883a 	mov	r6,zero
   14a80:	000b883a 	mov	r5,zero
   14a84:	0007883a 	mov	r3,zero
   14a88:	0005883a 	mov	r2,zero
   14a8c:	003fe406 	br	14a20 <__alt_data_end+0xffff4a20>
   14a90:	0123c83a 	sub	r17,zero,r4
   14a94:	003fd106 	br	149dc <__alt_data_end+0xffff49dc>

00014a98 <__truncdfsf2>:
   14a98:	2810d53a 	srli	r8,r5,20
   14a9c:	01c00434 	movhi	r7,16
   14aa0:	39ffffc4 	addi	r7,r7,-1
   14aa4:	29ce703a 	and	r7,r5,r7
   14aa8:	4201ffcc 	andi	r8,r8,2047
   14aac:	380e90fa 	slli	r7,r7,3
   14ab0:	200cd77a 	srli	r6,r4,29
   14ab4:	42400044 	addi	r9,r8,1
   14ab8:	4a41ffcc 	andi	r9,r9,2047
   14abc:	00c00044 	movi	r3,1
   14ac0:	280ad7fa 	srli	r5,r5,31
   14ac4:	31ceb03a 	or	r7,r6,r7
   14ac8:	200490fa 	slli	r2,r4,3
   14acc:	1a40230e 	bge	r3,r9,14b5c <__truncdfsf2+0xc4>
   14ad0:	40ff2004 	addi	r3,r8,-896
   14ad4:	01803f84 	movi	r6,254
   14ad8:	30c01516 	blt	r6,r3,14b30 <__truncdfsf2+0x98>
   14adc:	00c0380e 	bge	zero,r3,14bc0 <__truncdfsf2+0x128>
   14ae0:	200c91ba 	slli	r6,r4,6
   14ae4:	380e90fa 	slli	r7,r7,3
   14ae8:	1004d77a 	srli	r2,r2,29
   14aec:	300cc03a 	cmpne	r6,r6,zero
   14af0:	31ccb03a 	or	r6,r6,r7
   14af4:	308cb03a 	or	r6,r6,r2
   14af8:	308001cc 	andi	r2,r6,7
   14afc:	10000426 	beq	r2,zero,14b10 <__truncdfsf2+0x78>
   14b00:	308003cc 	andi	r2,r6,15
   14b04:	01000104 	movi	r4,4
   14b08:	11000126 	beq	r2,r4,14b10 <__truncdfsf2+0x78>
   14b0c:	31800104 	addi	r6,r6,4
   14b10:	3081002c 	andhi	r2,r6,1024
   14b14:	10001626 	beq	r2,zero,14b70 <__truncdfsf2+0xd8>
   14b18:	18c00044 	addi	r3,r3,1
   14b1c:	00803fc4 	movi	r2,255
   14b20:	18800326 	beq	r3,r2,14b30 <__truncdfsf2+0x98>
   14b24:	300c91ba 	slli	r6,r6,6
   14b28:	300cd27a 	srli	r6,r6,9
   14b2c:	00000206 	br	14b38 <__truncdfsf2+0xa0>
   14b30:	00ffffc4 	movi	r3,-1
   14b34:	000d883a 	mov	r6,zero
   14b38:	18c03fcc 	andi	r3,r3,255
   14b3c:	180895fa 	slli	r4,r3,23
   14b40:	00c02034 	movhi	r3,128
   14b44:	280a97fa 	slli	r5,r5,31
   14b48:	18ffffc4 	addi	r3,r3,-1
   14b4c:	30c6703a 	and	r3,r6,r3
   14b50:	1906b03a 	or	r3,r3,r4
   14b54:	1944b03a 	or	r2,r3,r5
   14b58:	f800283a 	ret
   14b5c:	40000b1e 	bne	r8,zero,14b8c <__truncdfsf2+0xf4>
   14b60:	388cb03a 	or	r6,r7,r2
   14b64:	0007883a 	mov	r3,zero
   14b68:	30000426 	beq	r6,zero,14b7c <__truncdfsf2+0xe4>
   14b6c:	01800144 	movi	r6,5
   14b70:	00803fc4 	movi	r2,255
   14b74:	300cd0fa 	srli	r6,r6,3
   14b78:	18800a26 	beq	r3,r2,14ba4 <__truncdfsf2+0x10c>
   14b7c:	00802034 	movhi	r2,128
   14b80:	10bfffc4 	addi	r2,r2,-1
   14b84:	308c703a 	and	r6,r6,r2
   14b88:	003feb06 	br	14b38 <__alt_data_end+0xffff4b38>
   14b8c:	3888b03a 	or	r4,r7,r2
   14b90:	203fe726 	beq	r4,zero,14b30 <__alt_data_end+0xffff4b30>
   14b94:	380c90fa 	slli	r6,r7,3
   14b98:	00c03fc4 	movi	r3,255
   14b9c:	31808034 	orhi	r6,r6,512
   14ba0:	003fd506 	br	14af8 <__alt_data_end+0xffff4af8>
   14ba4:	303fe226 	beq	r6,zero,14b30 <__alt_data_end+0xffff4b30>
   14ba8:	00802034 	movhi	r2,128
   14bac:	31801034 	orhi	r6,r6,64
   14bb0:	10bfffc4 	addi	r2,r2,-1
   14bb4:	00ffffc4 	movi	r3,-1
   14bb8:	308c703a 	and	r6,r6,r2
   14bbc:	003fde06 	br	14b38 <__alt_data_end+0xffff4b38>
   14bc0:	013ffa44 	movi	r4,-23
   14bc4:	19000e16 	blt	r3,r4,14c00 <__truncdfsf2+0x168>
   14bc8:	01000784 	movi	r4,30
   14bcc:	20c9c83a 	sub	r4,r4,r3
   14bd0:	018007c4 	movi	r6,31
   14bd4:	39c02034 	orhi	r7,r7,128
   14bd8:	31000b16 	blt	r6,r4,14c08 <__truncdfsf2+0x170>
   14bdc:	423f2084 	addi	r8,r8,-894
   14be0:	120c983a 	sll	r6,r2,r8
   14be4:	3a0e983a 	sll	r7,r7,r8
   14be8:	1104d83a 	srl	r2,r2,r4
   14bec:	300cc03a 	cmpne	r6,r6,zero
   14bf0:	31ceb03a 	or	r7,r6,r7
   14bf4:	388cb03a 	or	r6,r7,r2
   14bf8:	0007883a 	mov	r3,zero
   14bfc:	003fbe06 	br	14af8 <__alt_data_end+0xffff4af8>
   14c00:	0007883a 	mov	r3,zero
   14c04:	003fd906 	br	14b6c <__alt_data_end+0xffff4b6c>
   14c08:	01bfff84 	movi	r6,-2
   14c0c:	30cdc83a 	sub	r6,r6,r3
   14c10:	00c00804 	movi	r3,32
   14c14:	398cd83a 	srl	r6,r7,r6
   14c18:	20c00726 	beq	r4,r3,14c38 <__truncdfsf2+0x1a0>
   14c1c:	423f2884 	addi	r8,r8,-862
   14c20:	3a0e983a 	sll	r7,r7,r8
   14c24:	3884b03a 	or	r2,r7,r2
   14c28:	1004c03a 	cmpne	r2,r2,zero
   14c2c:	118cb03a 	or	r6,r2,r6
   14c30:	0007883a 	mov	r3,zero
   14c34:	003fb006 	br	14af8 <__alt_data_end+0xffff4af8>
   14c38:	000f883a 	mov	r7,zero
   14c3c:	003ff906 	br	14c24 <__alt_data_end+0xffff4c24>

00014c40 <__clzsi2>:
   14c40:	00bfffd4 	movui	r2,65535
   14c44:	11000536 	bltu	r2,r4,14c5c <__clzsi2+0x1c>
   14c48:	00803fc4 	movi	r2,255
   14c4c:	11000f36 	bltu	r2,r4,14c8c <__clzsi2+0x4c>
   14c50:	00800804 	movi	r2,32
   14c54:	0007883a 	mov	r3,zero
   14c58:	00000506 	br	14c70 <__clzsi2+0x30>
   14c5c:	00804034 	movhi	r2,256
   14c60:	10bfffc4 	addi	r2,r2,-1
   14c64:	11000c2e 	bgeu	r2,r4,14c98 <__clzsi2+0x58>
   14c68:	00800204 	movi	r2,8
   14c6c:	00c00604 	movi	r3,24
   14c70:	20c8d83a 	srl	r4,r4,r3
   14c74:	00c00074 	movhi	r3,1
   14c78:	18db8744 	addi	r3,r3,28189
   14c7c:	1909883a 	add	r4,r3,r4
   14c80:	20c00003 	ldbu	r3,0(r4)
   14c84:	10c5c83a 	sub	r2,r2,r3
   14c88:	f800283a 	ret
   14c8c:	00800604 	movi	r2,24
   14c90:	00c00204 	movi	r3,8
   14c94:	003ff606 	br	14c70 <__alt_data_end+0xffff4c70>
   14c98:	00800404 	movi	r2,16
   14c9c:	1007883a 	mov	r3,r2
   14ca0:	003ff306 	br	14c70 <__alt_data_end+0xffff4c70>

00014ca4 <__divsi3>:
   14ca4:	20001b16 	blt	r4,zero,14d14 <__divsi3+0x70>
   14ca8:	000f883a 	mov	r7,zero
   14cac:	28001616 	blt	r5,zero,14d08 <__divsi3+0x64>
   14cb0:	200d883a 	mov	r6,r4
   14cb4:	29001a2e 	bgeu	r5,r4,14d20 <__divsi3+0x7c>
   14cb8:	00800804 	movi	r2,32
   14cbc:	00c00044 	movi	r3,1
   14cc0:	00000106 	br	14cc8 <__divsi3+0x24>
   14cc4:	10000d26 	beq	r2,zero,14cfc <__divsi3+0x58>
   14cc8:	294b883a 	add	r5,r5,r5
   14ccc:	10bfffc4 	addi	r2,r2,-1
   14cd0:	18c7883a 	add	r3,r3,r3
   14cd4:	293ffb36 	bltu	r5,r4,14cc4 <__alt_data_end+0xffff4cc4>
   14cd8:	0005883a 	mov	r2,zero
   14cdc:	18000726 	beq	r3,zero,14cfc <__divsi3+0x58>
   14ce0:	0005883a 	mov	r2,zero
   14ce4:	31400236 	bltu	r6,r5,14cf0 <__divsi3+0x4c>
   14ce8:	314dc83a 	sub	r6,r6,r5
   14cec:	10c4b03a 	or	r2,r2,r3
   14cf0:	1806d07a 	srli	r3,r3,1
   14cf4:	280ad07a 	srli	r5,r5,1
   14cf8:	183ffa1e 	bne	r3,zero,14ce4 <__alt_data_end+0xffff4ce4>
   14cfc:	38000126 	beq	r7,zero,14d04 <__divsi3+0x60>
   14d00:	0085c83a 	sub	r2,zero,r2
   14d04:	f800283a 	ret
   14d08:	014bc83a 	sub	r5,zero,r5
   14d0c:	39c0005c 	xori	r7,r7,1
   14d10:	003fe706 	br	14cb0 <__alt_data_end+0xffff4cb0>
   14d14:	0109c83a 	sub	r4,zero,r4
   14d18:	01c00044 	movi	r7,1
   14d1c:	003fe306 	br	14cac <__alt_data_end+0xffff4cac>
   14d20:	00c00044 	movi	r3,1
   14d24:	003fee06 	br	14ce0 <__alt_data_end+0xffff4ce0>

00014d28 <__modsi3>:
   14d28:	20001716 	blt	r4,zero,14d88 <__modsi3+0x60>
   14d2c:	000f883a 	mov	r7,zero
   14d30:	2005883a 	mov	r2,r4
   14d34:	28001216 	blt	r5,zero,14d80 <__modsi3+0x58>
   14d38:	2900162e 	bgeu	r5,r4,14d94 <__modsi3+0x6c>
   14d3c:	01800804 	movi	r6,32
   14d40:	00c00044 	movi	r3,1
   14d44:	00000106 	br	14d4c <__modsi3+0x24>
   14d48:	30000a26 	beq	r6,zero,14d74 <__modsi3+0x4c>
   14d4c:	294b883a 	add	r5,r5,r5
   14d50:	31bfffc4 	addi	r6,r6,-1
   14d54:	18c7883a 	add	r3,r3,r3
   14d58:	293ffb36 	bltu	r5,r4,14d48 <__alt_data_end+0xffff4d48>
   14d5c:	18000526 	beq	r3,zero,14d74 <__modsi3+0x4c>
   14d60:	1806d07a 	srli	r3,r3,1
   14d64:	11400136 	bltu	r2,r5,14d6c <__modsi3+0x44>
   14d68:	1145c83a 	sub	r2,r2,r5
   14d6c:	280ad07a 	srli	r5,r5,1
   14d70:	183ffb1e 	bne	r3,zero,14d60 <__alt_data_end+0xffff4d60>
   14d74:	38000126 	beq	r7,zero,14d7c <__modsi3+0x54>
   14d78:	0085c83a 	sub	r2,zero,r2
   14d7c:	f800283a 	ret
   14d80:	014bc83a 	sub	r5,zero,r5
   14d84:	003fec06 	br	14d38 <__alt_data_end+0xffff4d38>
   14d88:	0109c83a 	sub	r4,zero,r4
   14d8c:	01c00044 	movi	r7,1
   14d90:	003fe706 	br	14d30 <__alt_data_end+0xffff4d30>
   14d94:	00c00044 	movi	r3,1
   14d98:	003ff106 	br	14d60 <__alt_data_end+0xffff4d60>

00014d9c <__udivsi3>:
   14d9c:	200d883a 	mov	r6,r4
   14da0:	2900152e 	bgeu	r5,r4,14df8 <__udivsi3+0x5c>
   14da4:	28001416 	blt	r5,zero,14df8 <__udivsi3+0x5c>
   14da8:	00800804 	movi	r2,32
   14dac:	00c00044 	movi	r3,1
   14db0:	00000206 	br	14dbc <__udivsi3+0x20>
   14db4:	10000e26 	beq	r2,zero,14df0 <__udivsi3+0x54>
   14db8:	28000516 	blt	r5,zero,14dd0 <__udivsi3+0x34>
   14dbc:	294b883a 	add	r5,r5,r5
   14dc0:	10bfffc4 	addi	r2,r2,-1
   14dc4:	18c7883a 	add	r3,r3,r3
   14dc8:	293ffa36 	bltu	r5,r4,14db4 <__alt_data_end+0xffff4db4>
   14dcc:	18000826 	beq	r3,zero,14df0 <__udivsi3+0x54>
   14dd0:	0005883a 	mov	r2,zero
   14dd4:	31400236 	bltu	r6,r5,14de0 <__udivsi3+0x44>
   14dd8:	314dc83a 	sub	r6,r6,r5
   14ddc:	10c4b03a 	or	r2,r2,r3
   14de0:	1806d07a 	srli	r3,r3,1
   14de4:	280ad07a 	srli	r5,r5,1
   14de8:	183ffa1e 	bne	r3,zero,14dd4 <__alt_data_end+0xffff4dd4>
   14dec:	f800283a 	ret
   14df0:	0005883a 	mov	r2,zero
   14df4:	f800283a 	ret
   14df8:	00c00044 	movi	r3,1
   14dfc:	003ff406 	br	14dd0 <__alt_data_end+0xffff4dd0>

00014e00 <__umodsi3>:
   14e00:	2005883a 	mov	r2,r4
   14e04:	2900122e 	bgeu	r5,r4,14e50 <__umodsi3+0x50>
   14e08:	28001116 	blt	r5,zero,14e50 <__umodsi3+0x50>
   14e0c:	01800804 	movi	r6,32
   14e10:	00c00044 	movi	r3,1
   14e14:	00000206 	br	14e20 <__umodsi3+0x20>
   14e18:	30000c26 	beq	r6,zero,14e4c <__umodsi3+0x4c>
   14e1c:	28000516 	blt	r5,zero,14e34 <__umodsi3+0x34>
   14e20:	294b883a 	add	r5,r5,r5
   14e24:	31bfffc4 	addi	r6,r6,-1
   14e28:	18c7883a 	add	r3,r3,r3
   14e2c:	293ffa36 	bltu	r5,r4,14e18 <__alt_data_end+0xffff4e18>
   14e30:	18000626 	beq	r3,zero,14e4c <__umodsi3+0x4c>
   14e34:	1806d07a 	srli	r3,r3,1
   14e38:	11400136 	bltu	r2,r5,14e40 <__umodsi3+0x40>
   14e3c:	1145c83a 	sub	r2,r2,r5
   14e40:	280ad07a 	srli	r5,r5,1
   14e44:	183ffb1e 	bne	r3,zero,14e34 <__alt_data_end+0xffff4e34>
   14e48:	f800283a 	ret
   14e4c:	f800283a 	ret
   14e50:	00c00044 	movi	r3,1
   14e54:	003ff706 	br	14e34 <__alt_data_end+0xffff4e34>

00014e58 <__errno>:
   14e58:	00800074 	movhi	r2,1
   14e5c:	109c3f04 	addi	r2,r2,28924
   14e60:	10800017 	ldw	r2,0(r2)
   14e64:	f800283a 	ret

00014e68 <memcpy>:
   14e68:	2005883a 	mov	r2,r4
   14e6c:	2007883a 	mov	r3,r4
   14e70:	218d883a 	add	r6,r4,r6
   14e74:	19800526 	beq	r3,r6,14e8c <memcpy+0x24>
   14e78:	29000003 	ldbu	r4,0(r5)
   14e7c:	18c00044 	addi	r3,r3,1
   14e80:	29400044 	addi	r5,r5,1
   14e84:	193fffc5 	stb	r4,-1(r3)
   14e88:	003ffa06 	br	14e74 <__alt_data_end+0xffff4e74>
   14e8c:	f800283a 	ret

00014e90 <_printf_r>:
   14e90:	defffd04 	addi	sp,sp,-12
   14e94:	dfc00015 	stw	ra,0(sp)
   14e98:	d9800115 	stw	r6,4(sp)
   14e9c:	d9c00215 	stw	r7,8(sp)
   14ea0:	20c00217 	ldw	r3,8(r4)
   14ea4:	01800074 	movhi	r6,1
   14ea8:	31955d04 	addi	r6,r6,21876
   14eac:	19800115 	stw	r6,4(r3)
   14eb0:	280d883a 	mov	r6,r5
   14eb4:	21400217 	ldw	r5,8(r4)
   14eb8:	d9c00104 	addi	r7,sp,4
   14ebc:	00150340 	call	15034 <___vfprintf_internal_r>
   14ec0:	dfc00017 	ldw	ra,0(sp)
   14ec4:	dec00304 	addi	sp,sp,12
   14ec8:	f800283a 	ret

00014ecc <printf>:
   14ecc:	defffc04 	addi	sp,sp,-16
   14ed0:	dfc00015 	stw	ra,0(sp)
   14ed4:	d9400115 	stw	r5,4(sp)
   14ed8:	d9800215 	stw	r6,8(sp)
   14edc:	d9c00315 	stw	r7,12(sp)
   14ee0:	00800074 	movhi	r2,1
   14ee4:	109c3f04 	addi	r2,r2,28924
   14ee8:	10800017 	ldw	r2,0(r2)
   14eec:	01400074 	movhi	r5,1
   14ef0:	29555d04 	addi	r5,r5,21876
   14ef4:	10c00217 	ldw	r3,8(r2)
   14ef8:	d9800104 	addi	r6,sp,4
   14efc:	19400115 	stw	r5,4(r3)
   14f00:	200b883a 	mov	r5,r4
   14f04:	11000217 	ldw	r4,8(r2)
   14f08:	00155580 	call	15558 <__vfprintf_internal>
   14f0c:	dfc00017 	ldw	ra,0(sp)
   14f10:	dec00404 	addi	sp,sp,16
   14f14:	f800283a 	ret

00014f18 <_puts_r>:
   14f18:	defffd04 	addi	sp,sp,-12
   14f1c:	dc000015 	stw	r16,0(sp)
   14f20:	2021883a 	mov	r16,r4
   14f24:	2809883a 	mov	r4,r5
   14f28:	dfc00215 	stw	ra,8(sp)
   14f2c:	dc400115 	stw	r17,4(sp)
   14f30:	2823883a 	mov	r17,r5
   14f34:	0014fac0 	call	14fac <strlen>
   14f38:	81400217 	ldw	r5,8(r16)
   14f3c:	01000074 	movhi	r4,1
   14f40:	21155d04 	addi	r4,r4,21876
   14f44:	29000115 	stw	r4,4(r5)
   14f48:	100f883a 	mov	r7,r2
   14f4c:	880d883a 	mov	r6,r17
   14f50:	8009883a 	mov	r4,r16
   14f54:	00155740 	call	15574 <__sfvwrite_small_dev>
   14f58:	00ffffc4 	movi	r3,-1
   14f5c:	10c00926 	beq	r2,r3,14f84 <_puts_r+0x6c>
   14f60:	81400217 	ldw	r5,8(r16)
   14f64:	01800074 	movhi	r6,1
   14f68:	01c00044 	movi	r7,1
   14f6c:	28800117 	ldw	r2,4(r5)
   14f70:	319b6a04 	addi	r6,r6,28072
   14f74:	8009883a 	mov	r4,r16
   14f78:	103ee83a 	callr	r2
   14f7c:	10bfffe0 	cmpeqi	r2,r2,-1
   14f80:	0085c83a 	sub	r2,zero,r2
   14f84:	dfc00217 	ldw	ra,8(sp)
   14f88:	dc400117 	ldw	r17,4(sp)
   14f8c:	dc000017 	ldw	r16,0(sp)
   14f90:	dec00304 	addi	sp,sp,12
   14f94:	f800283a 	ret

00014f98 <puts>:
   14f98:	00800074 	movhi	r2,1
   14f9c:	109c3f04 	addi	r2,r2,28924
   14fa0:	200b883a 	mov	r5,r4
   14fa4:	11000017 	ldw	r4,0(r2)
   14fa8:	0014f181 	jmpi	14f18 <_puts_r>

00014fac <strlen>:
   14fac:	2005883a 	mov	r2,r4
   14fb0:	10c00007 	ldb	r3,0(r2)
   14fb4:	18000226 	beq	r3,zero,14fc0 <strlen+0x14>
   14fb8:	10800044 	addi	r2,r2,1
   14fbc:	003ffc06 	br	14fb0 <__alt_data_end+0xffff4fb0>
   14fc0:	1105c83a 	sub	r2,r2,r4
   14fc4:	f800283a 	ret

00014fc8 <print_repeat>:
   14fc8:	defffb04 	addi	sp,sp,-20
   14fcc:	dc800315 	stw	r18,12(sp)
   14fd0:	dc400215 	stw	r17,8(sp)
   14fd4:	dc000115 	stw	r16,4(sp)
   14fd8:	dfc00415 	stw	ra,16(sp)
   14fdc:	2025883a 	mov	r18,r4
   14fe0:	2823883a 	mov	r17,r5
   14fe4:	d9800005 	stb	r6,0(sp)
   14fe8:	3821883a 	mov	r16,r7
   14fec:	04000a0e 	bge	zero,r16,15018 <print_repeat+0x50>
   14ff0:	88800117 	ldw	r2,4(r17)
   14ff4:	01c00044 	movi	r7,1
   14ff8:	d80d883a 	mov	r6,sp
   14ffc:	880b883a 	mov	r5,r17
   15000:	9009883a 	mov	r4,r18
   15004:	103ee83a 	callr	r2
   15008:	843fffc4 	addi	r16,r16,-1
   1500c:	103ff726 	beq	r2,zero,14fec <__alt_data_end+0xffff4fec>
   15010:	00bfffc4 	movi	r2,-1
   15014:	00000106 	br	1501c <print_repeat+0x54>
   15018:	0005883a 	mov	r2,zero
   1501c:	dfc00417 	ldw	ra,16(sp)
   15020:	dc800317 	ldw	r18,12(sp)
   15024:	dc400217 	ldw	r17,8(sp)
   15028:	dc000117 	ldw	r16,4(sp)
   1502c:	dec00504 	addi	sp,sp,20
   15030:	f800283a 	ret

00015034 <___vfprintf_internal_r>:
   15034:	deffe504 	addi	sp,sp,-108
   15038:	d8c00804 	addi	r3,sp,32
   1503c:	df001915 	stw	fp,100(sp)
   15040:	ddc01815 	stw	r23,96(sp)
   15044:	dd801715 	stw	r22,92(sp)
   15048:	dd401615 	stw	r21,88(sp)
   1504c:	dd001515 	stw	r20,84(sp)
   15050:	dcc01415 	stw	r19,80(sp)
   15054:	dc801315 	stw	r18,76(sp)
   15058:	dc401215 	stw	r17,72(sp)
   1505c:	dc001115 	stw	r16,68(sp)
   15060:	dfc01a15 	stw	ra,104(sp)
   15064:	2027883a 	mov	r19,r4
   15068:	2839883a 	mov	fp,r5
   1506c:	382d883a 	mov	r22,r7
   15070:	d9800f15 	stw	r6,60(sp)
   15074:	0021883a 	mov	r16,zero
   15078:	d8000e15 	stw	zero,56(sp)
   1507c:	002f883a 	mov	r23,zero
   15080:	002b883a 	mov	r21,zero
   15084:	0025883a 	mov	r18,zero
   15088:	0023883a 	mov	r17,zero
   1508c:	d8000c15 	stw	zero,48(sp)
   15090:	d8000b15 	stw	zero,44(sp)
   15094:	0029883a 	mov	r20,zero
   15098:	d8c00915 	stw	r3,36(sp)
   1509c:	d8c00f17 	ldw	r3,60(sp)
   150a0:	19000003 	ldbu	r4,0(r3)
   150a4:	20803fcc 	andi	r2,r4,255
   150a8:	1080201c 	xori	r2,r2,128
   150ac:	10bfe004 	addi	r2,r2,-128
   150b0:	10011c26 	beq	r2,zero,15524 <___vfprintf_internal_r+0x4f0>
   150b4:	00c00044 	movi	r3,1
   150b8:	a0c01426 	beq	r20,r3,1510c <___vfprintf_internal_r+0xd8>
   150bc:	1d000216 	blt	r3,r20,150c8 <___vfprintf_internal_r+0x94>
   150c0:	a0000626 	beq	r20,zero,150dc <___vfprintf_internal_r+0xa8>
   150c4:	00011306 	br	15514 <___vfprintf_internal_r+0x4e0>
   150c8:	01400084 	movi	r5,2
   150cc:	a1401d26 	beq	r20,r5,15144 <___vfprintf_internal_r+0x110>
   150d0:	014000c4 	movi	r5,3
   150d4:	a1402926 	beq	r20,r5,1517c <___vfprintf_internal_r+0x148>
   150d8:	00010e06 	br	15514 <___vfprintf_internal_r+0x4e0>
   150dc:	01400944 	movi	r5,37
   150e0:	1140fb26 	beq	r2,r5,154d0 <___vfprintf_internal_r+0x49c>
   150e4:	e0800117 	ldw	r2,4(fp)
   150e8:	d9000005 	stb	r4,0(sp)
   150ec:	01c00044 	movi	r7,1
   150f0:	d80d883a 	mov	r6,sp
   150f4:	e00b883a 	mov	r5,fp
   150f8:	9809883a 	mov	r4,r19
   150fc:	103ee83a 	callr	r2
   15100:	1000d61e 	bne	r2,zero,1545c <___vfprintf_internal_r+0x428>
   15104:	84000044 	addi	r16,r16,1
   15108:	00010206 	br	15514 <___vfprintf_internal_r+0x4e0>
   1510c:	01400c04 	movi	r5,48
   15110:	1140f826 	beq	r2,r5,154f4 <___vfprintf_internal_r+0x4c0>
   15114:	01400944 	movi	r5,37
   15118:	11400a1e 	bne	r2,r5,15144 <___vfprintf_internal_r+0x110>
   1511c:	d8800005 	stb	r2,0(sp)
   15120:	e0800117 	ldw	r2,4(fp)
   15124:	a00f883a 	mov	r7,r20
   15128:	d80d883a 	mov	r6,sp
   1512c:	e00b883a 	mov	r5,fp
   15130:	9809883a 	mov	r4,r19
   15134:	103ee83a 	callr	r2
   15138:	1000c81e 	bne	r2,zero,1545c <___vfprintf_internal_r+0x428>
   1513c:	84000044 	addi	r16,r16,1
   15140:	0000f306 	br	15510 <___vfprintf_internal_r+0x4dc>
   15144:	217ff404 	addi	r5,r4,-48
   15148:	29403fcc 	andi	r5,r5,255
   1514c:	00c00244 	movi	r3,9
   15150:	19400736 	bltu	r3,r5,15170 <___vfprintf_internal_r+0x13c>
   15154:	00bfffc4 	movi	r2,-1
   15158:	88800226 	beq	r17,r2,15164 <___vfprintf_internal_r+0x130>
   1515c:	8c4002a4 	muli	r17,r17,10
   15160:	00000106 	br	15168 <___vfprintf_internal_r+0x134>
   15164:	0023883a 	mov	r17,zero
   15168:	2c63883a 	add	r17,r5,r17
   1516c:	0000e206 	br	154f8 <___vfprintf_internal_r+0x4c4>
   15170:	01400b84 	movi	r5,46
   15174:	1140e426 	beq	r2,r5,15508 <___vfprintf_internal_r+0x4d4>
   15178:	05000084 	movi	r20,2
   1517c:	213ff404 	addi	r4,r4,-48
   15180:	21003fcc 	andi	r4,r4,255
   15184:	00c00244 	movi	r3,9
   15188:	19000736 	bltu	r3,r4,151a8 <___vfprintf_internal_r+0x174>
   1518c:	00bfffc4 	movi	r2,-1
   15190:	90800226 	beq	r18,r2,1519c <___vfprintf_internal_r+0x168>
   15194:	948002a4 	muli	r18,r18,10
   15198:	00000106 	br	151a0 <___vfprintf_internal_r+0x16c>
   1519c:	0025883a 	mov	r18,zero
   151a0:	24a5883a 	add	r18,r4,r18
   151a4:	0000db06 	br	15514 <___vfprintf_internal_r+0x4e0>
   151a8:	00c01b04 	movi	r3,108
   151ac:	10c0d426 	beq	r2,r3,15500 <___vfprintf_internal_r+0x4cc>
   151b0:	013fffc4 	movi	r4,-1
   151b4:	91000226 	beq	r18,r4,151c0 <___vfprintf_internal_r+0x18c>
   151b8:	d8000b15 	stw	zero,44(sp)
   151bc:	00000106 	br	151c4 <___vfprintf_internal_r+0x190>
   151c0:	04800044 	movi	r18,1
   151c4:	01001a44 	movi	r4,105
   151c8:	11001626 	beq	r2,r4,15224 <___vfprintf_internal_r+0x1f0>
   151cc:	20800916 	blt	r4,r2,151f4 <___vfprintf_internal_r+0x1c0>
   151d0:	010018c4 	movi	r4,99
   151d4:	11008a26 	beq	r2,r4,15400 <___vfprintf_internal_r+0x3cc>
   151d8:	01001904 	movi	r4,100
   151dc:	11001126 	beq	r2,r4,15224 <___vfprintf_internal_r+0x1f0>
   151e0:	01001604 	movi	r4,88
   151e4:	1100ca1e 	bne	r2,r4,15510 <___vfprintf_internal_r+0x4dc>
   151e8:	00c00044 	movi	r3,1
   151ec:	d8c00e15 	stw	r3,56(sp)
   151f0:	00001406 	br	15244 <___vfprintf_internal_r+0x210>
   151f4:	01001cc4 	movi	r4,115
   151f8:	11009a26 	beq	r2,r4,15464 <___vfprintf_internal_r+0x430>
   151fc:	20800416 	blt	r4,r2,15210 <___vfprintf_internal_r+0x1dc>
   15200:	01001bc4 	movi	r4,111
   15204:	1100c21e 	bne	r2,r4,15510 <___vfprintf_internal_r+0x4dc>
   15208:	05400204 	movi	r21,8
   1520c:	00000e06 	br	15248 <___vfprintf_internal_r+0x214>
   15210:	01001d44 	movi	r4,117
   15214:	11000c26 	beq	r2,r4,15248 <___vfprintf_internal_r+0x214>
   15218:	01001e04 	movi	r4,120
   1521c:	11000926 	beq	r2,r4,15244 <___vfprintf_internal_r+0x210>
   15220:	0000bb06 	br	15510 <___vfprintf_internal_r+0x4dc>
   15224:	b5000104 	addi	r20,r22,4
   15228:	b8000726 	beq	r23,zero,15248 <___vfprintf_internal_r+0x214>
   1522c:	dd000d15 	stw	r20,52(sp)
   15230:	b5800017 	ldw	r22,0(r22)
   15234:	b000080e 	bge	r22,zero,15258 <___vfprintf_internal_r+0x224>
   15238:	05adc83a 	sub	r22,zero,r22
   1523c:	02800044 	movi	r10,1
   15240:	00000606 	br	1525c <___vfprintf_internal_r+0x228>
   15244:	05400404 	movi	r21,16
   15248:	b0c00104 	addi	r3,r22,4
   1524c:	d8c00d15 	stw	r3,52(sp)
   15250:	b5800017 	ldw	r22,0(r22)
   15254:	002f883a 	mov	r23,zero
   15258:	0015883a 	mov	r10,zero
   1525c:	d829883a 	mov	r20,sp
   15260:	b0001426 	beq	r22,zero,152b4 <___vfprintf_internal_r+0x280>
   15264:	b009883a 	mov	r4,r22
   15268:	a80b883a 	mov	r5,r21
   1526c:	da801015 	stw	r10,64(sp)
   15270:	0014d9c0 	call	14d9c <__udivsi3>
   15274:	1549383a 	mul	r4,r2,r21
   15278:	00c00244 	movi	r3,9
   1527c:	da801017 	ldw	r10,64(sp)
   15280:	b12dc83a 	sub	r22,r22,r4
   15284:	1d800216 	blt	r3,r22,15290 <___vfprintf_internal_r+0x25c>
   15288:	b5800c04 	addi	r22,r22,48
   1528c:	00000506 	br	152a4 <___vfprintf_internal_r+0x270>
   15290:	d8c00e17 	ldw	r3,56(sp)
   15294:	18000226 	beq	r3,zero,152a0 <___vfprintf_internal_r+0x26c>
   15298:	b5800dc4 	addi	r22,r22,55
   1529c:	00000106 	br	152a4 <___vfprintf_internal_r+0x270>
   152a0:	b58015c4 	addi	r22,r22,87
   152a4:	a5800005 	stb	r22,0(r20)
   152a8:	a5000044 	addi	r20,r20,1
   152ac:	102d883a 	mov	r22,r2
   152b0:	003feb06 	br	15260 <__alt_data_end+0xffff5260>
   152b4:	a6c7c83a 	sub	r3,r20,sp
   152b8:	d8c00a15 	stw	r3,40(sp)
   152bc:	90c5c83a 	sub	r2,r18,r3
   152c0:	00800a0e 	bge	zero,r2,152ec <___vfprintf_internal_r+0x2b8>
   152c4:	a085883a 	add	r2,r20,r2
   152c8:	01400c04 	movi	r5,48
   152cc:	d8c00917 	ldw	r3,36(sp)
   152d0:	a009883a 	mov	r4,r20
   152d4:	a0c0032e 	bgeu	r20,r3,152e4 <___vfprintf_internal_r+0x2b0>
   152d8:	a5000044 	addi	r20,r20,1
   152dc:	21400005 	stb	r5,0(r4)
   152e0:	a0bffa1e 	bne	r20,r2,152cc <__alt_data_end+0xffff52cc>
   152e4:	a6c7c83a 	sub	r3,r20,sp
   152e8:	d8c00a15 	stw	r3,40(sp)
   152ec:	d8c00a17 	ldw	r3,40(sp)
   152f0:	50d3883a 	add	r9,r10,r3
   152f4:	d8c00b17 	ldw	r3,44(sp)
   152f8:	8a6dc83a 	sub	r22,r17,r9
   152fc:	18001726 	beq	r3,zero,1535c <___vfprintf_internal_r+0x328>
   15300:	50000a26 	beq	r10,zero,1532c <___vfprintf_internal_r+0x2f8>
   15304:	00800b44 	movi	r2,45
   15308:	d8800805 	stb	r2,32(sp)
   1530c:	e0800117 	ldw	r2,4(fp)
   15310:	01c00044 	movi	r7,1
   15314:	d9800804 	addi	r6,sp,32
   15318:	e00b883a 	mov	r5,fp
   1531c:	9809883a 	mov	r4,r19
   15320:	103ee83a 	callr	r2
   15324:	10004d1e 	bne	r2,zero,1545c <___vfprintf_internal_r+0x428>
   15328:	84000044 	addi	r16,r16,1
   1532c:	0580070e 	bge	zero,r22,1534c <___vfprintf_internal_r+0x318>
   15330:	b00f883a 	mov	r7,r22
   15334:	01800c04 	movi	r6,48
   15338:	e00b883a 	mov	r5,fp
   1533c:	9809883a 	mov	r4,r19
   15340:	0014fc80 	call	14fc8 <print_repeat>
   15344:	1000451e 	bne	r2,zero,1545c <___vfprintf_internal_r+0x428>
   15348:	85a1883a 	add	r16,r16,r22
   1534c:	d8c00a17 	ldw	r3,40(sp)
   15350:	a013883a 	mov	r9,r20
   15354:	1d2dc83a 	sub	r22,r3,r20
   15358:	00002206 	br	153e4 <___vfprintf_internal_r+0x3b0>
   1535c:	0580090e 	bge	zero,r22,15384 <___vfprintf_internal_r+0x350>
   15360:	b00f883a 	mov	r7,r22
   15364:	01800804 	movi	r6,32
   15368:	e00b883a 	mov	r5,fp
   1536c:	9809883a 	mov	r4,r19
   15370:	da801015 	stw	r10,64(sp)
   15374:	0014fc80 	call	14fc8 <print_repeat>
   15378:	da801017 	ldw	r10,64(sp)
   1537c:	1000371e 	bne	r2,zero,1545c <___vfprintf_internal_r+0x428>
   15380:	85a1883a 	add	r16,r16,r22
   15384:	503ff126 	beq	r10,zero,1534c <__alt_data_end+0xffff534c>
   15388:	00800b44 	movi	r2,45
   1538c:	d8800805 	stb	r2,32(sp)
   15390:	e0800117 	ldw	r2,4(fp)
   15394:	01c00044 	movi	r7,1
   15398:	d9800804 	addi	r6,sp,32
   1539c:	e00b883a 	mov	r5,fp
   153a0:	9809883a 	mov	r4,r19
   153a4:	103ee83a 	callr	r2
   153a8:	10002c1e 	bne	r2,zero,1545c <___vfprintf_internal_r+0x428>
   153ac:	84000044 	addi	r16,r16,1
   153b0:	003fe606 	br	1534c <__alt_data_end+0xffff534c>
   153b4:	4a7fffc4 	addi	r9,r9,-1
   153b8:	48800003 	ldbu	r2,0(r9)
   153bc:	01c00044 	movi	r7,1
   153c0:	d9800804 	addi	r6,sp,32
   153c4:	d8800805 	stb	r2,32(sp)
   153c8:	e0800117 	ldw	r2,4(fp)
   153cc:	e00b883a 	mov	r5,fp
   153d0:	da401015 	stw	r9,64(sp)
   153d4:	9809883a 	mov	r4,r19
   153d8:	103ee83a 	callr	r2
   153dc:	da401017 	ldw	r9,64(sp)
   153e0:	10001e1e 	bne	r2,zero,1545c <___vfprintf_internal_r+0x428>
   153e4:	8245c83a 	sub	r2,r16,r9
   153e8:	4d89883a 	add	r4,r9,r22
   153ec:	a085883a 	add	r2,r20,r2
   153f0:	013ff016 	blt	zero,r4,153b4 <__alt_data_end+0xffff53b4>
   153f4:	1021883a 	mov	r16,r2
   153f8:	dd800d17 	ldw	r22,52(sp)
   153fc:	00004406 	br	15510 <___vfprintf_internal_r+0x4dc>
   15400:	00800044 	movi	r2,1
   15404:	1440080e 	bge	r2,r17,15428 <___vfprintf_internal_r+0x3f4>
   15408:	8d3fffc4 	addi	r20,r17,-1
   1540c:	a00f883a 	mov	r7,r20
   15410:	01800804 	movi	r6,32
   15414:	e00b883a 	mov	r5,fp
   15418:	9809883a 	mov	r4,r19
   1541c:	0014fc80 	call	14fc8 <print_repeat>
   15420:	10000e1e 	bne	r2,zero,1545c <___vfprintf_internal_r+0x428>
   15424:	8521883a 	add	r16,r16,r20
   15428:	b0800017 	ldw	r2,0(r22)
   1542c:	01c00044 	movi	r7,1
   15430:	d80d883a 	mov	r6,sp
   15434:	d8800005 	stb	r2,0(sp)
   15438:	e0800117 	ldw	r2,4(fp)
   1543c:	e00b883a 	mov	r5,fp
   15440:	9809883a 	mov	r4,r19
   15444:	b5000104 	addi	r20,r22,4
   15448:	103ee83a 	callr	r2
   1544c:	1000031e 	bne	r2,zero,1545c <___vfprintf_internal_r+0x428>
   15450:	84000044 	addi	r16,r16,1
   15454:	a02d883a 	mov	r22,r20
   15458:	00002d06 	br	15510 <___vfprintf_internal_r+0x4dc>
   1545c:	00bfffc4 	movi	r2,-1
   15460:	00003106 	br	15528 <___vfprintf_internal_r+0x4f4>
   15464:	b5000017 	ldw	r20,0(r22)
   15468:	b0c00104 	addi	r3,r22,4
   1546c:	d8c00a15 	stw	r3,40(sp)
   15470:	a009883a 	mov	r4,r20
   15474:	0014fac0 	call	14fac <strlen>
   15478:	8893c83a 	sub	r9,r17,r2
   1547c:	102d883a 	mov	r22,r2
   15480:	0240090e 	bge	zero,r9,154a8 <___vfprintf_internal_r+0x474>
   15484:	480f883a 	mov	r7,r9
   15488:	01800804 	movi	r6,32
   1548c:	e00b883a 	mov	r5,fp
   15490:	9809883a 	mov	r4,r19
   15494:	da401015 	stw	r9,64(sp)
   15498:	0014fc80 	call	14fc8 <print_repeat>
   1549c:	da401017 	ldw	r9,64(sp)
   154a0:	103fee1e 	bne	r2,zero,1545c <__alt_data_end+0xffff545c>
   154a4:	8261883a 	add	r16,r16,r9
   154a8:	e0800117 	ldw	r2,4(fp)
   154ac:	b00f883a 	mov	r7,r22
   154b0:	a00d883a 	mov	r6,r20
   154b4:	e00b883a 	mov	r5,fp
   154b8:	9809883a 	mov	r4,r19
   154bc:	103ee83a 	callr	r2
   154c0:	103fe61e 	bne	r2,zero,1545c <__alt_data_end+0xffff545c>
   154c4:	85a1883a 	add	r16,r16,r22
   154c8:	dd800a17 	ldw	r22,40(sp)
   154cc:	00001006 	br	15510 <___vfprintf_internal_r+0x4dc>
   154d0:	05c00044 	movi	r23,1
   154d4:	04bfffc4 	movi	r18,-1
   154d8:	d8000e15 	stw	zero,56(sp)
   154dc:	05400284 	movi	r21,10
   154e0:	9023883a 	mov	r17,r18
   154e4:	d8000c15 	stw	zero,48(sp)
   154e8:	d8000b15 	stw	zero,44(sp)
   154ec:	b829883a 	mov	r20,r23
   154f0:	00000806 	br	15514 <___vfprintf_internal_r+0x4e0>
   154f4:	dd000b15 	stw	r20,44(sp)
   154f8:	05000084 	movi	r20,2
   154fc:	00000506 	br	15514 <___vfprintf_internal_r+0x4e0>
   15500:	00c00044 	movi	r3,1
   15504:	d8c00c15 	stw	r3,48(sp)
   15508:	050000c4 	movi	r20,3
   1550c:	00000106 	br	15514 <___vfprintf_internal_r+0x4e0>
   15510:	0029883a 	mov	r20,zero
   15514:	d8c00f17 	ldw	r3,60(sp)
   15518:	18c00044 	addi	r3,r3,1
   1551c:	d8c00f15 	stw	r3,60(sp)
   15520:	003ede06 	br	1509c <__alt_data_end+0xffff509c>
   15524:	8005883a 	mov	r2,r16
   15528:	dfc01a17 	ldw	ra,104(sp)
   1552c:	df001917 	ldw	fp,100(sp)
   15530:	ddc01817 	ldw	r23,96(sp)
   15534:	dd801717 	ldw	r22,92(sp)
   15538:	dd401617 	ldw	r21,88(sp)
   1553c:	dd001517 	ldw	r20,84(sp)
   15540:	dcc01417 	ldw	r19,80(sp)
   15544:	dc801317 	ldw	r18,76(sp)
   15548:	dc401217 	ldw	r17,72(sp)
   1554c:	dc001117 	ldw	r16,68(sp)
   15550:	dec01b04 	addi	sp,sp,108
   15554:	f800283a 	ret

00015558 <__vfprintf_internal>:
   15558:	00800074 	movhi	r2,1
   1555c:	109c3f04 	addi	r2,r2,28924
   15560:	300f883a 	mov	r7,r6
   15564:	280d883a 	mov	r6,r5
   15568:	200b883a 	mov	r5,r4
   1556c:	11000017 	ldw	r4,0(r2)
   15570:	00150341 	jmpi	15034 <___vfprintf_internal_r>

00015574 <__sfvwrite_small_dev>:
   15574:	2880000b 	ldhu	r2,0(r5)
   15578:	1080020c 	andi	r2,r2,8
   1557c:	10002126 	beq	r2,zero,15604 <__sfvwrite_small_dev+0x90>
   15580:	2880008f 	ldh	r2,2(r5)
   15584:	defffa04 	addi	sp,sp,-24
   15588:	dc000015 	stw	r16,0(sp)
   1558c:	dfc00515 	stw	ra,20(sp)
   15590:	dd000415 	stw	r20,16(sp)
   15594:	dcc00315 	stw	r19,12(sp)
   15598:	dc800215 	stw	r18,8(sp)
   1559c:	dc400115 	stw	r17,4(sp)
   155a0:	2821883a 	mov	r16,r5
   155a4:	10001216 	blt	r2,zero,155f0 <__sfvwrite_small_dev+0x7c>
   155a8:	2027883a 	mov	r19,r4
   155ac:	3025883a 	mov	r18,r6
   155b0:	3823883a 	mov	r17,r7
   155b4:	05010004 	movi	r20,1024
   155b8:	04400b0e 	bge	zero,r17,155e8 <__sfvwrite_small_dev+0x74>
   155bc:	880f883a 	mov	r7,r17
   155c0:	a440010e 	bge	r20,r17,155c8 <__sfvwrite_small_dev+0x54>
   155c4:	01c10004 	movi	r7,1024
   155c8:	8140008f 	ldh	r5,2(r16)
   155cc:	900d883a 	mov	r6,r18
   155d0:	9809883a 	mov	r4,r19
   155d4:	001562c0 	call	1562c <_write_r>
   155d8:	0080050e 	bge	zero,r2,155f0 <__sfvwrite_small_dev+0x7c>
   155dc:	88a3c83a 	sub	r17,r17,r2
   155e0:	90a5883a 	add	r18,r18,r2
   155e4:	003ff406 	br	155b8 <__alt_data_end+0xffff55b8>
   155e8:	0005883a 	mov	r2,zero
   155ec:	00000706 	br	1560c <__sfvwrite_small_dev+0x98>
   155f0:	8080000b 	ldhu	r2,0(r16)
   155f4:	10801014 	ori	r2,r2,64
   155f8:	8080000d 	sth	r2,0(r16)
   155fc:	00bfffc4 	movi	r2,-1
   15600:	00000206 	br	1560c <__sfvwrite_small_dev+0x98>
   15604:	00bfffc4 	movi	r2,-1
   15608:	f800283a 	ret
   1560c:	dfc00517 	ldw	ra,20(sp)
   15610:	dd000417 	ldw	r20,16(sp)
   15614:	dcc00317 	ldw	r19,12(sp)
   15618:	dc800217 	ldw	r18,8(sp)
   1561c:	dc400117 	ldw	r17,4(sp)
   15620:	dc000017 	ldw	r16,0(sp)
   15624:	dec00604 	addi	sp,sp,24
   15628:	f800283a 	ret

0001562c <_write_r>:
   1562c:	defffd04 	addi	sp,sp,-12
   15630:	dc000015 	stw	r16,0(sp)
   15634:	04000074 	movhi	r16,1
   15638:	dc400115 	stw	r17,4(sp)
   1563c:	841cc704 	addi	r16,r16,29468
   15640:	2023883a 	mov	r17,r4
   15644:	2809883a 	mov	r4,r5
   15648:	300b883a 	mov	r5,r6
   1564c:	380d883a 	mov	r6,r7
   15650:	dfc00215 	stw	ra,8(sp)
   15654:	80000015 	stw	zero,0(r16)
   15658:	00157cc0 	call	157cc <write>
   1565c:	00ffffc4 	movi	r3,-1
   15660:	10c0031e 	bne	r2,r3,15670 <_write_r+0x44>
   15664:	80c00017 	ldw	r3,0(r16)
   15668:	18000126 	beq	r3,zero,15670 <_write_r+0x44>
   1566c:	88c00015 	stw	r3,0(r17)
   15670:	dfc00217 	ldw	ra,8(sp)
   15674:	dc400117 	ldw	r17,4(sp)
   15678:	dc000017 	ldw	r16,0(sp)
   1567c:	dec00304 	addi	sp,sp,12
   15680:	f800283a 	ret

00015684 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   15684:	deffff04 	addi	sp,sp,-4
   15688:	01000074 	movhi	r4,1
   1568c:	01400074 	movhi	r5,1
   15690:	dfc00015 	stw	ra,0(sp)
   15694:	211bd004 	addi	r4,r4,28480
   15698:	295c4404 	addi	r5,r5,28944

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   1569c:	2140061e 	bne	r4,r5,156b8 <alt_load+0x34>
   156a0:	01000074 	movhi	r4,1
   156a4:	01400074 	movhi	r5,1
   156a8:	21000804 	addi	r4,r4,32
   156ac:	29400804 	addi	r5,r5,32
   156b0:	2140121e 	bne	r4,r5,156fc <alt_load+0x78>
   156b4:	00000b06 	br	156e4 <alt_load+0x60>
   156b8:	00c00074 	movhi	r3,1
   156bc:	18dc4404 	addi	r3,r3,28944
   156c0:	1907c83a 	sub	r3,r3,r4
   156c4:	0005883a 	mov	r2,zero
  {
    while( to != end )
   156c8:	10fff526 	beq	r2,r3,156a0 <__alt_data_end+0xffff56a0>
    {
      *to++ = *from++;
   156cc:	114f883a 	add	r7,r2,r5
   156d0:	39c00017 	ldw	r7,0(r7)
   156d4:	110d883a 	add	r6,r2,r4
   156d8:	10800104 	addi	r2,r2,4
   156dc:	31c00015 	stw	r7,0(r6)
   156e0:	003ff906 	br	156c8 <__alt_data_end+0xffff56c8>
   156e4:	01000074 	movhi	r4,1
   156e8:	01400074 	movhi	r5,1
   156ec:	211b4d04 	addi	r4,r4,27956
   156f0:	295b4d04 	addi	r5,r5,27956

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   156f4:	2140101e 	bne	r4,r5,15738 <alt_load+0xb4>
   156f8:	00000b06 	br	15728 <alt_load+0xa4>
   156fc:	00c00074 	movhi	r3,1
   15700:	18c00804 	addi	r3,r3,32
   15704:	1907c83a 	sub	r3,r3,r4
   15708:	0005883a 	mov	r2,zero
  {
    while( to != end )
   1570c:	10fff526 	beq	r2,r3,156e4 <__alt_data_end+0xffff56e4>
    {
      *to++ = *from++;
   15710:	114f883a 	add	r7,r2,r5
   15714:	39c00017 	ldw	r7,0(r7)
   15718:	110d883a 	add	r6,r2,r4
   1571c:	10800104 	addi	r2,r2,4
   15720:	31c00015 	stw	r7,0(r6)
   15724:	003ff906 	br	1570c <__alt_data_end+0xffff570c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   15728:	0016bc80 	call	16bc8 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   1572c:	dfc00017 	ldw	ra,0(sp)
   15730:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   15734:	0016cc01 	jmpi	16cc0 <alt_icache_flush_all>
   15738:	00c00074 	movhi	r3,1
   1573c:	18dbd004 	addi	r3,r3,28480
   15740:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   15744:	0005883a 	mov	r2,zero
  {
    while( to != end )
   15748:	18bff726 	beq	r3,r2,15728 <__alt_data_end+0xffff5728>
    {
      *to++ = *from++;
   1574c:	114f883a 	add	r7,r2,r5
   15750:	39c00017 	ldw	r7,0(r7)
   15754:	110d883a 	add	r6,r2,r4
   15758:	10800104 	addi	r2,r2,4
   1575c:	31c00015 	stw	r7,0(r6)
   15760:	003ff906 	br	15748 <__alt_data_end+0xffff5748>

00015764 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   15764:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   15768:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1576c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   15770:	001582c0 	call	1582c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   15774:	00158580 	call	15858 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   15778:	d1a08b17 	ldw	r6,-32212(gp)
   1577c:	d1608c17 	ldw	r5,-32208(gp)
   15780:	d1208d17 	ldw	r4,-32204(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   15784:	dfc00017 	ldw	ra,0(sp)
   15788:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   1578c:	00106e81 	jmpi	106e8 <main>

00015790 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   15790:	defffe04 	addi	sp,sp,-8
   15794:	dc000015 	stw	r16,0(sp)
   15798:	dfc00115 	stw	ra,4(sp)
   1579c:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   157a0:	0014fac0 	call	14fac <strlen>
   157a4:	01000074 	movhi	r4,1
   157a8:	000f883a 	mov	r7,zero
   157ac:	100d883a 	mov	r6,r2
   157b0:	800b883a 	mov	r5,r16
   157b4:	211c4004 	addi	r4,r4,28928
#else
    return fputs(str, stdout);
#endif
#endif
}
   157b8:	dfc00117 	ldw	ra,4(sp)
   157bc:	dc000017 	ldw	r16,0(sp)
   157c0:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   157c4:	001699c1 	jmpi	1699c <altera_avalon_jtag_uart_write>

000157c8 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
   157c8:	0016b501 	jmpi	16b50 <alt_busy_sleep>

000157cc <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   157cc:	00800044 	movi	r2,1
   157d0:	20800226 	beq	r4,r2,157dc <write+0x10>
   157d4:	00800084 	movi	r2,2
   157d8:	2080041e 	bne	r4,r2,157ec <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
   157dc:	01000074 	movhi	r4,1
   157e0:	000f883a 	mov	r7,zero
   157e4:	211c4004 	addi	r4,r4,28928
   157e8:	001699c1 	jmpi	1699c <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   157ec:	d0a00617 	ldw	r2,-32744(gp)
   157f0:	10000926 	beq	r2,zero,15818 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   157f4:	deffff04 	addi	sp,sp,-4
   157f8:	dfc00015 	stw	ra,0(sp)
   157fc:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   15800:	00c01444 	movi	r3,81
   15804:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   15808:	00bfffc4 	movi	r2,-1
   1580c:	dfc00017 	ldw	ra,0(sp)
   15810:	dec00104 	addi	sp,sp,4
   15814:	f800283a 	ret
   15818:	d0a08a04 	addi	r2,gp,-32216
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   1581c:	00c01444 	movi	r3,81
   15820:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   15824:	00bfffc4 	movi	r2,-1
   15828:	f800283a 	ret

0001582c <alt_irq_init>:
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    ALTERA_VIC_IRQ_INIT ( VIC_0, vic_0);
   1582c:	01000074 	movhi	r4,1
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   15830:	deffff04 	addi	sp,sp,-4
    ALTERA_VIC_IRQ_INIT ( VIC_0, vic_0);
   15834:	211c1604 	addi	r4,r4,28760
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   15838:	dfc00015 	stw	ra,0(sp)
    ALTERA_VIC_IRQ_INIT ( VIC_0, vic_0);
   1583c:	0016a280 	call	16a28 <alt_vic_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   15840:	00802034 	movhi	r2,128
   15844:	10800044 	addi	r2,r2,1
   15848:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1584c:	dfc00017 	ldw	ra,0(sp)
   15850:	dec00104 	addi	sp,sp,4
   15854:	f800283a 	ret

00015858 <alt_sys_init>:
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
   15858:	01000074 	movhi	r4,1
   1585c:	211c0804 	addi	r4,r4,28704
   15860:	00165801 	jmpi	16580 <alt_avalon_i2c_init>

00015864 <alt_avalon_i2c_register_optional_irq_handler>:
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
    dev->callback         = callback;
   15864:	00800074 	movhi	r2,1
    irq->irq_busy=0;
}

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
   irq_data->irq_busy=0;
   15868:	28000215 	stw	zero,8(r5)
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
    dev->callback         = callback;
   1586c:	10983e04 	addi	r2,r2,24824
   15870:	20800615 	stw	r2,24(r4)
    dev->callback_context = context;
   15874:	21400715 	stw	r5,28(r4)
    dev->control          = control;
   15878:	20000815 	stw	zero,32(r4)
   1587c:	f800283a 	ret

00015880 <alt_avalon_i2c_register_callback>:
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
    dev->callback         = callback;
   15880:	21400615 	stw	r5,24(r4)
    dev->callback_context = context;
   15884:	21c00715 	stw	r7,28(r4)
    dev->control          = control;
   15888:	21800815 	stw	r6,32(r4)
   1588c:	f800283a 	ret

00015890 <alt_avalon_i2c_open>:
/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
    ALT_AVALON_I2C_DEV_t* dev = NULL;

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
   15890:	d1600404 	addi	r5,gp,-32752
   15894:	0016c4c1 	jmpi	16c4c <alt_find_dev>

00015898 <alt_avalon_i2c_enable>:
}

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   15898:	21400717 	ldw	r5,28(r4)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
   1589c:	20800317 	ldw	r2,12(r4)
   158a0:	10c00237 	ldwio	r3,8(r2)
   if (enable_status)
   158a4:	18c0004c 	andi	r3,r3,1
   158a8:	18000b1e 	bne	r3,zero,158d8 <alt_avalon_i2c_enable+0x40>
   {
     return ALT_AVALON_I2C_BUSY;
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
   158ac:	21000617 	ldw	r4,24(r4)
   158b0:	00c00074 	movhi	r3,1
   158b4:	18d83e04 	addi	r3,r3,24824
   158b8:	20c0011e 	bne	r4,r3,158c0 <alt_avalon_i2c_enable+0x28>
   {
     irq_data->irq_busy=0;
   158bc:	28000215 	stw	zero,8(r5)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
   158c0:	10800204 	addi	r2,r2,8
   158c4:	10c00037 	ldwio	r3,0(r2)
   158c8:	18c00054 	ori	r3,r3,1
   158cc:	10c00035 	stwio	r3,0(r2)
   158d0:	0005883a 	mov	r2,zero
   158d4:	f800283a 	ret
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
   if (enable_status)
   {
     return ALT_AVALON_I2C_BUSY;
   158d8:	00bffe44 	movi	r2,-7
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);

   return ALT_AVALON_I2C_SUCCESS;
}
   158dc:	f800283a 	ret

000158e0 <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
   158e0:	20800317 	ldw	r2,12(r4)
   158e4:	10800204 	addi	r2,r2,8
   158e8:	11000037 	ldwio	r4,0(r2)
   158ec:	00ffff84 	movi	r3,-2
   158f0:	20c6703a 	and	r3,r4,r3
   158f4:	10c00035 	stwio	r3,0(r2)
   158f8:	f800283a 	ret

000158fc <alt_avalon_i2c_master_config_get>:
/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{

    cfg->addr_mode = i2c_dev->address_mode;
   158fc:	20800d17 	ldw	r2,52(r4)
   15900:	28800015 	stw	r2,0(r5)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
   15904:	20800317 	ldw	r2,12(r4)
   15908:	10800237 	ldwio	r2,8(r2)
   1590c:	1080008c 	andi	r2,r2,2
   15910:	1005d07a 	srai	r2,r2,1
   15914:	28800115 	stw	r2,4(r5)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
   15918:	20800317 	ldw	r2,12(r4)
   1591c:	10800937 	ldwio	r2,36(r2)
   15920:	2880020d 	sth	r2,8(r5)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
   15924:	20800317 	ldw	r2,12(r4)
   15928:	10800837 	ldwio	r2,32(r2)
   1592c:	2880028d 	sth	r2,10(r5)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
   15930:	20800317 	ldw	r2,12(r4)
   15934:	10800a37 	ldwio	r2,40(r2)
   15938:	2880030d 	sth	r2,12(r5)
   1593c:	f800283a 	ret

00015940 <alt_avalon_i2c_master_config_set>:
/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
    i2c_dev->address_mode   =   cfg->addr_mode;
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
   15940:	21800317 	ldw	r6,12(r4)

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
    i2c_dev->address_mode   =   cfg->addr_mode;
   15944:	28800017 	ldw	r2,0(r5)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
   15948:	31800204 	addi	r6,r6,8

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
    i2c_dev->address_mode   =   cfg->addr_mode;
   1594c:	20800d15 	stw	r2,52(r4)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
   15950:	31c00037 	ldwio	r7,0(r6)
   15954:	00ffff44 	movi	r3,-3
   15958:	28800117 	ldw	r2,4(r5)
   1595c:	38c6703a 	and	r3,r7,r3
   15960:	1085883a 	add	r2,r2,r2
   15964:	1080008c 	andi	r2,r2,2
   15968:	10c4b03a 	or	r2,r2,r3
   1596c:	30800035 	stwio	r2,0(r6)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
   15970:	20800317 	ldw	r2,12(r4)
   15974:	28c0020b 	ldhu	r3,8(r5)
   15978:	10c00935 	stwio	r3,36(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
   1597c:	20800317 	ldw	r2,12(r4)
   15980:	28c0028b 	ldhu	r3,10(r5)
   15984:	10c00835 	stwio	r3,32(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
   15988:	20800317 	ldw	r2,12(r4)
   1598c:	28c0030b 	ldhu	r3,12(r5)
   15990:	10c00a35 	stwio	r3,40(r2)
   15994:	f800283a 	ret

00015998 <alt_avalon_i2c_master_config_speed_get>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   15998:	28c0028b 	ldhu	r3,10(r5)
   1599c:	18000f26 	beq	r3,zero,159dc <alt_avalon_i2c_master_config_speed_get+0x44>
   159a0:	2940020b 	ldhu	r5,8(r5)
   159a4:	28000d26 	beq	r5,zero,159dc <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
   159a8:	21000c17 	ldw	r4,48(r4)
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
   159ac:	defffe04 	addi	sp,sp,-8
   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   {
       return ALT_AVALON_I2C_BAD_ARG;
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
   159b0:	194b883a 	add	r5,r3,r5
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
   159b4:	dc000015 	stw	r16,0(sp)
   159b8:	dfc00115 	stw	ra,4(sp)
   159bc:	3021883a 	mov	r16,r6
   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   {
       return ALT_AVALON_I2C_BAD_ARG;
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
   159c0:	0014d9c0 	call	14d9c <__udivsi3>
   159c4:	80800015 	stw	r2,0(r16)

   return ALT_AVALON_I2C_SUCCESS;
   159c8:	0005883a 	mov	r2,zero
}
   159cc:	dfc00117 	ldw	ra,4(sp)
   159d0:	dc000017 	ldw	r16,0(sp)
   159d4:	dec00204 	addi	sp,sp,8
   159d8:	f800283a 	ret
                                                alt_u32 * speed_in_hz)
{

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   {
       return ALT_AVALON_I2C_BAD_ARG;
   159dc:	00bfff44 	movi	r2,-3
   159e0:	f800283a 	ret

000159e4 <alt_avalon_i2c_master_config_speed_set>:
                                                alt_u32 speed_in_hz)
{
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
   159e4:	00c001b4 	movhi	r3,6
   159e8:	30bfffc4 	addi	r2,r6,-1
   159ec:	18c69fc4 	addi	r3,r3,6783
   159f0:	18801d36 	bltu	r3,r2,15a68 <alt_avalon_i2c_master_config_speed_set+0x84>
    {
        return ALT_AVALON_I2C_RANGE;
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
   159f4:	21000c17 	ldw	r4,48(r4)
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
   159f8:	defffd04 	addi	sp,sp,-12
   159fc:	dc000015 	stw	r16,0(sp)
   15a00:	2821883a 	mov	r16,r5
    {
        return ALT_AVALON_I2C_RANGE;
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
   15a04:	318b883a 	add	r5,r6,r6
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
   15a08:	dc400115 	stw	r17,4(sp)
   15a0c:	dfc00215 	stw	ra,8(sp)
   15a10:	3023883a 	mov	r17,r6
    {
        return ALT_AVALON_I2C_RANGE;
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
   15a14:	0014d9c0 	call	14d9c <__udivsi3>

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
   15a18:	010000b4 	movhi	r4,2
   15a1c:	2121a804 	addi	r4,r4,-31072

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   15a20:	10c00f04 	addi	r3,r2,60
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   15a24:	10bff104 	addi	r2,r2,-60

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
   15a28:	2440032e 	bgeu	r4,r17,15a38 <alt_avalon_i2c_master_config_speed_set+0x54>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
   15a2c:	01000044 	movi	r4,1
   15a30:	81000115 	stw	r4,4(r16)
   15a34:	00000106 	br	15a3c <alt_avalon_i2c_master_config_speed_set+0x58>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
   15a38:	80000115 	stw	zero,4(r16)
    }

    cfg->scl_lcnt = scl_lcnt;
    cfg->scl_hcnt = scl_hcnt;
   15a3c:	80c0020d 	sth	r3,8(r16)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
   15a40:	1006d07a 	srli	r3,r2,1
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
    }

    cfg->scl_lcnt = scl_lcnt;
   15a44:	8080028d 	sth	r2,10(r16)
    cfg->scl_hcnt = scl_hcnt;
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
   15a48:	10c5c83a 	sub	r2,r2,r3
   15a4c:	8080030d 	sth	r2,12(r16)
   15a50:	0005883a 	mov	r2,zero

    return ALT_AVALON_I2C_SUCCESS;

}
   15a54:	dfc00217 	ldw	ra,8(sp)
   15a58:	dc400117 	ldw	r17,4(sp)
   15a5c:	dc000017 	ldw	r16,0(sp)
   15a60:	dec00304 	addi	sp,sp,12
   15a64:	f800283a 	ret
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
    {
        return ALT_AVALON_I2C_RANGE;
   15a68:	00bfff04 	movi	r2,-4
   15a6c:	f800283a 	ret

00015a70 <alt_avalon_i2c_is_busy>:
/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
   15a70:	20800317 	ldw	r2,12(r4)
   15a74:	10800537 	ldwio	r2,20(r2)
    {
       return ALT_AVALON_I2C_TRUE;
    }

    return ALT_AVALON_I2C_FALSE;
}
   15a78:	1080004c 	andi	r2,r2,1
   15a7c:	f800283a 	ret

00015a80 <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
   15a80:	38000015 	stw	zero,0(r7)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   15a84:	20c00317 	ldw	r3,12(r4)
   15a88:	18800737 	ldwio	r2,28(r3)
   15a8c:	10000926 	beq	r2,zero,15ab4 <alt_avalon_i2c_rx_read_available+0x34>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   15a90:	38800017 	ldw	r2,0(r7)
   15a94:	2885883a 	add	r2,r5,r2
   15a98:	18c00137 	ldwio	r3,4(r3)
   15a9c:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
   15aa0:	38800017 	ldw	r2,0(r7)
   15aa4:	10800044 	addi	r2,r2,1
   15aa8:	38800015 	stw	r2,0(r7)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   15aac:	11bff51e 	bne	r2,r6,15a84 <__alt_data_end+0xffff5a84>
   15ab0:	303ff426 	beq	r6,zero,15a84 <__alt_data_end+0xffff5a84>
   15ab4:	f800283a 	ret

00015ab8 <alt_avalon_i2c_rx_read>:
    }
}

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
   15ab8:	defffb04 	addi	sp,sp,-20
   15abc:	dc000015 	stw	r16,0(sp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   15ac0:	040000b4 	movhi	r16,2
    }
}

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
   15ac4:	dcc00315 	stw	r19,12(sp)
   15ac8:	dc800215 	stw	r18,8(sp)
   15acc:	dc400115 	stw	r17,4(sp)
   15ad0:	dfc00415 	stw	ra,16(sp)
   15ad4:	2023883a 	mov	r17,r4
   15ad8:	2825883a 	mov	r18,r5
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   15adc:	8421a804 	addi	r16,r16,-31072
    {
      if (timeout<10) alt_busy_sleep(10000);
   15ae0:	04c00244 	movi	r19,9
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   15ae4:	88800317 	ldw	r2,12(r17)
   15ae8:	10800737 	ldwio	r2,28(r2)
   15aec:	1000071e 	bne	r2,zero,15b0c <alt_avalon_i2c_rx_read+0x54>
    {
      if (timeout<10) alt_busy_sleep(10000);
   15af0:	9c000236 	bltu	r19,r16,15afc <alt_avalon_i2c_rx_read+0x44>
   15af4:	0109c404 	movi	r4,10000
   15af8:	0016b500 	call	16b50 <alt_busy_sleep>
   15afc:	843fffc4 	addi	r16,r16,-1
      if (--timeout == 0)
   15b00:	803ff81e 	bne	r16,zero,15ae4 <__alt_data_end+0xffff5ae4>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
   15b04:	00bfff84 	movi	r2,-2
   15b08:	00000106 	br	15b10 <alt_avalon_i2c_rx_read+0x58>
}

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
   15b0c:	0005883a 	mov	r2,zero
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   15b10:	88c00317 	ldw	r3,12(r17)
   15b14:	18c00137 	ldwio	r3,4(r3)
   15b18:	90c00005 	stb	r3,0(r18)
        
    return status;
}
   15b1c:	dfc00417 	ldw	ra,16(sp)
   15b20:	dcc00317 	ldw	r19,12(sp)
   15b24:	dc800217 	ldw	r18,8(sp)
   15b28:	dc400117 	ldw	r17,4(sp)
   15b2c:	dc000017 	ldw	r16,0(sp)
   15b30:	dec00504 	addi	sp,sp,20
   15b34:	f800283a 	ret

00015b38 <alt_avalon_i2c_master_target_get>:
}

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
    *target_addr=i2c_dev->master_target_address;
   15b38:	20800917 	ldw	r2,36(r4)
   15b3c:	28800015 	stw	r2,0(r5)
   15b40:	f800283a 	ret

00015b44 <alt_avalon_i2c_master_target_set>:
}

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
    i2c_dev->master_target_address=target_addr;
   15b44:	21400915 	stw	r5,36(r4)
   15b48:	f800283a 	ret

00015b4c <alt_avalon_i2c_check_nack>:
}

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
   15b4c:	20800317 	ldw	r2,12(r4)
   15b50:	10800437 	ldwio	r2,16(r2)
   15b54:	1080010c 	andi	r2,r2,4
   15b58:	10000226 	beq	r2,zero,15b64 <alt_avalon_i2c_check_nack+0x18>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
   15b5c:	00bffec4 	movi	r2,-5
   15b60:	28800015 	stw	r2,0(r5)
   15b64:	f800283a 	ret

00015b68 <alt_avalon_i2c_check_arblost>:
}

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
   15b68:	20800317 	ldw	r2,12(r4)
   15b6c:	10800437 	ldwio	r2,16(r2)
   15b70:	1080020c 	andi	r2,r2,8
   15b74:	10000226 	beq	r2,zero,15b80 <alt_avalon_i2c_check_arblost+0x18>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
   15b78:	00bffe84 	movi	r2,-6
   15b7c:	28800015 	stw	r2,0(r5)
   15b80:	f800283a 	ret

00015b84 <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
   15b84:	defff804 	addi	sp,sp,-32
   15b88:	dd400615 	stw	r21,24(sp)
   15b8c:	dd000515 	stw	r20,20(sp)
   15b90:	dcc00415 	stw	r19,16(sp)
   15b94:	dc800315 	stw	r18,12(sp)
   15b98:	dc400215 	stw	r17,8(sp)
   15b9c:	dc000115 	stw	r16,4(sp)
   15ba0:	dfc00715 	stw	ra,28(sp)
   15ba4:	2029883a 	mov	r20,r4
   15ba8:	2823883a 	mov	r17,r5
   15bac:	3025883a 	mov	r18,r6
   15bb0:	3821883a 	mov	r16,r7
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   15bb4:	d8000015 	stw	zero,0(sp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   15bb8:	04c9c404 	movi	r19,10000
    {
      if (timeout<10) alt_busy_sleep(10000);    
   15bbc:	05400244 	movi	r21,9
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   15bc0:	a0c00317 	ldw	r3,12(r20)
   15bc4:	18800437 	ldwio	r2,16(r3)
   15bc8:	1080004c 	andi	r2,r2,1
   15bcc:	1000071e 	bne	r2,zero,15bec <alt_avalon_i2c_cmd_write+0x68>
    {
      if (timeout<10) alt_busy_sleep(10000);    
   15bd0:	acc00236 	bltu	r21,r19,15bdc <alt_avalon_i2c_cmd_write+0x58>
   15bd4:	0109c404 	movi	r4,10000
   15bd8:	0016b500 	call	16b50 <alt_busy_sleep>
   15bdc:	9cffffc4 	addi	r19,r19,-1
      if (--timeout == 0)
   15be0:	983ff71e 	bne	r19,zero,15bc0 <__alt_data_end+0xffff5bc0>
      {
        return ALT_AVALON_I2C_TIMEOUT;
   15be4:	00bfff84 	movi	r2,-2
   15be8:	00000f06 	br	15c28 <alt_avalon_i2c_cmd_write+0xa4>
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
   15bec:	94803fcc 	andi	r18,r18,255
   15bf0:	9024927a 	slli	r18,r18,9
   15bf4:	84003fcc 	andi	r16,r16,255
   15bf8:	8020923a 	slli	r16,r16,8
   15bfc:	8c403fcc 	andi	r17,r17,255
   15c00:	9462b03a 	or	r17,r18,r17
   15c04:	8c20b03a 	or	r16,r17,r16
   15c08:	1c000035 	stwio	r16,0(r3)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   15c0c:	d80b883a 	mov	r5,sp
   15c10:	a009883a 	mov	r4,r20
   15c14:	0015b4c0 	call	15b4c <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
   15c18:	d80b883a 	mov	r5,sp
   15c1c:	a009883a 	mov	r4,r20
   15c20:	0015b680 	call	15b68 <alt_avalon_i2c_check_arblost>
    
    return status;
   15c24:	d8800017 	ldw	r2,0(sp)
}
   15c28:	dfc00717 	ldw	ra,28(sp)
   15c2c:	dd400617 	ldw	r21,24(sp)
   15c30:	dd000517 	ldw	r20,20(sp)
   15c34:	dcc00417 	ldw	r19,16(sp)
   15c38:	dc800317 	ldw	r18,12(sp)
   15c3c:	dc400217 	ldw	r17,8(sp)
   15c40:	dc000117 	ldw	r16,4(sp)
   15c44:	dec00804 	addi	sp,sp,32
   15c48:	f800283a 	ret

00015c4c <alt_avalon_i2c_send_address>:
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
   15c4c:	22000d17 	ldw	r8,52(r4)
   15c50:	01c00044 	movi	r7,1
   15c54:	31803fcc 	andi	r6,r6,255
   15c58:	20800917 	ldw	r2,36(r4)
   15c5c:	41c0141e 	bne	r8,r7,15cb0 <alt_avalon_i2c_send_address+0x64>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   15c60:	10de0014 	ori	r3,r2,30720
   15c64:	1806d1fa 	srli	r3,r3,7
   15c68:	00bfff84 	movi	r2,-2

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
   15c6c:	defffe04 	addi	sp,sp,-8
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   15c70:	1886703a 	and	r3,r3,r2
   15c74:	194ab03a 	or	r5,r3,r5
   15c78:	000f883a 	mov	r7,zero
   15c7c:	29403fcc 	andi	r5,r5,255

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
   15c80:	dc000015 	stw	r16,0(sp)
   15c84:	dfc00115 	stw	ra,4(sp)
   15c88:	2021883a 	mov	r16,r4
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   15c8c:	0015b840 	call	15b84 <alt_avalon_i2c_cmd_write>
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
   15c90:	81400903 	ldbu	r5,36(r16)
   15c94:	000f883a 	mov	r7,zero
   15c98:	000d883a 	mov	r6,zero
   15c9c:	8009883a 	mov	r4,r16
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
    }
    
    return status;
}
   15ca0:	dfc00117 	ldw	ra,4(sp)
   15ca4:	dc000017 	ldw	r16,0(sp)
   15ca8:	dec00204 	addi	sp,sp,8
   15cac:	00000406 	br	15cc0 <alt_avalon_i2c_send_address+0x74>
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   15cb0:	1085883a 	add	r2,r2,r2
   15cb4:	114ab03a 	or	r5,r2,r5
   15cb8:	000f883a 	mov	r7,zero
   15cbc:	29403fcc 	andi	r5,r5,255
   15cc0:	0015b841 	jmpi	15b84 <alt_avalon_i2c_cmd_write>

00015cc4 <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   15cc4:	defff904 	addi	sp,sp,-28
   15cc8:	dcc00415 	stw	r19,16(sp)
   15ccc:	dfc00615 	stw	ra,24(sp)
   15cd0:	dd000515 	stw	r20,20(sp)
   15cd4:	dc800315 	stw	r18,12(sp)
   15cd8:	dc400215 	stw	r17,8(sp)
   15cdc:	dc000115 	stw	r16,4(sp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   15ce0:	d8000015 	stw	zero,0(sp)
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   15ce4:	dcc00717 	ldw	r19,28(sp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout=size * 10000;
    
    if (size==0)
   15ce8:	30003b26 	beq	r6,zero,15dd8 <alt_avalon_i2c_master_transmit+0x114>
    {
      return ALT_AVALON_I2C_SUCCESS;
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   15cec:	3d003fcc 	andi	r20,r7,255
   15cf0:	2023883a 	mov	r17,r4
   15cf4:	2825883a 	mov	r18,r5
   15cf8:	3021883a 	mov	r16,r6
   15cfc:	a000061e 	bne	r20,zero,15d18 <alt_avalon_i2c_master_transmit+0x54>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   15d00:	00158980 	call	15898 <alt_avalon_i2c_enable>
   15d04:	d8800015 	stw	r2,0(sp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   15d08:	1000341e 	bne	r2,zero,15ddc <alt_avalon_i2c_master_transmit+0x118>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   15d0c:	88800317 	ldw	r2,12(r17)
   15d10:	00c00704 	movi	r3,28
   15d14:	10c00435 	stwio	r3,16(r2)
      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   15d18:	a00d883a 	mov	r6,r20
   15d1c:	000b883a 	mov	r5,zero
   15d20:	8809883a 	mov	r4,r17
   15d24:	0015c4c0 	call	15c4c <alt_avalon_i2c_send_address>
   15d28:	d8800015 	stw	r2,0(sp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
   15d2c:	1000171e 	bne	r2,zero,15d8c <alt_avalon_i2c_master_transmit+0xc8>
   15d30:	853fffc4 	addi	r20,r16,-1
   15d34:	9529883a 	add	r20,r18,r20
   15d38:	d8800017 	ldw	r2,0(sp)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   15d3c:	95000926 	beq	r18,r20,15d64 <alt_avalon_i2c_master_transmit+0xa0>
   15d40:	1000081e 	bne	r2,zero,15d64 <alt_avalon_i2c_master_transmit+0xa0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   15d44:	91400003 	ldbu	r5,0(r18)
   15d48:	000f883a 	mov	r7,zero
   15d4c:	000d883a 	mov	r6,zero
   15d50:	8809883a 	mov	r4,r17
   15d54:	0015b840 	call	15b84 <alt_avalon_i2c_cmd_write>
   15d58:	d8800015 	stw	r2,0(sp)
            
            ++buffer;
   15d5c:	94800044 	addi	r18,r18,1
   15d60:	003ff506 	br	15d38 <__alt_data_end+0xffff5d38>
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   15d64:	1000091e 	bne	r2,zero,15d8c <alt_avalon_i2c_master_transmit+0xc8>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   15d68:	91400003 	ldbu	r5,0(r18)
   15d6c:	9cc03fcc 	andi	r19,r19,255
   15d70:	980f883a 	mov	r7,r19
   15d74:	000d883a 	mov	r6,zero
   15d78:	8809883a 	mov	r4,r17
   15d7c:	0015b840 	call	15b84 <alt_avalon_i2c_cmd_write>
   15d80:	d8800015 	stw	r2,0(sp)
            --size;
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   15d84:	9800011e 	bne	r19,zero,15d8c <alt_avalon_i2c_master_transmit+0xc8>
   15d88:	10001126 	beq	r2,zero,15dd0 <alt_avalon_i2c_master_transmit+0x10c>
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout=size * 10000;
   15d8c:	8409c424 	muli	r16,r16,10000
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);
   15d90:	04800244 	movi	r18,9
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   15d94:	8809883a 	mov	r4,r17
   15d98:	0015a700 	call	15a70 <alt_avalon_i2c_is_busy>
   15d9c:	10000726 	beq	r2,zero,15dbc <alt_avalon_i2c_master_transmit+0xf8>
        {
            if (timeout<10) alt_busy_sleep(10000);
   15da0:	94000236 	bltu	r18,r16,15dac <alt_avalon_i2c_master_transmit+0xe8>
   15da4:	0109c404 	movi	r4,10000
   15da8:	0016b500 	call	16b50 <alt_busy_sleep>
            if (--timeout == 0)
   15dac:	843fffc4 	addi	r16,r16,-1
   15db0:	803ff81e 	bne	r16,zero,15d94 <__alt_data_end+0xffff5d94>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   15db4:	00bfff84 	movi	r2,-2
   15db8:	d8800015 	stw	r2,0(sp)
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
   15dbc:	8809883a 	mov	r4,r17
   15dc0:	d80b883a 	mov	r5,sp
   15dc4:	0015b4c0 	call	15b4c <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   15dc8:	8809883a 	mov	r4,r17
   15dcc:	00158e00 	call	158e0 <alt_avalon_i2c_disable>
    }


    return status;
   15dd0:	d8800017 	ldw	r2,0(sp)
   15dd4:	00000106 	br	15ddc <alt_avalon_i2c_master_transmit+0x118>
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout=size * 10000;
    
    if (size==0)
    {
      return ALT_AVALON_I2C_SUCCESS;
   15dd8:	0005883a 	mov	r2,zero
        alt_avalon_i2c_disable(i2c_dev);
    }


    return status;
}
   15ddc:	dfc00617 	ldw	ra,24(sp)
   15de0:	dd000517 	ldw	r20,20(sp)
   15de4:	dcc00417 	ldw	r19,16(sp)
   15de8:	dc800317 	ldw	r18,12(sp)
   15dec:	dc400217 	ldw	r17,8(sp)
   15df0:	dc000117 	ldw	r16,4(sp)
   15df4:	dec00704 	addi	sp,sp,28
   15df8:	f800283a 	ret

00015dfc <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   15dfc:	defff604 	addi	sp,sp,-40
   15e00:	dd000615 	stw	r20,24(sp)
   15e04:	dfc00915 	stw	ra,36(sp)
   15e08:	dd800815 	stw	r22,32(sp)
   15e0c:	dd400715 	stw	r21,28(sp)
   15e10:	dcc00515 	stw	r19,20(sp)
   15e14:	dc800415 	stw	r18,16(sp)
   15e18:	dc400315 	stw	r17,12(sp)
   15e1c:	dc000215 	stw	r16,8(sp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   15e20:	d8000115 	stw	zero,4(sp)
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   15e24:	dd000a17 	ldw	r20,40(sp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
    alt_u32 bytes_written=0;
    alt_u32 temp_bytes_read;
    
    if (size==0)
   15e28:	30005326 	beq	r6,zero,15f78 <alt_avalon_i2c_master_receive+0x17c>
    {
      return ALT_AVALON_I2C_SUCCESS;
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   15e2c:	3cc03fcc 	andi	r19,r7,255
   15e30:	2023883a 	mov	r17,r4
   15e34:	2821883a 	mov	r16,r5
   15e38:	3025883a 	mov	r18,r6
   15e3c:	9800061e 	bne	r19,zero,15e58 <alt_avalon_i2c_master_receive+0x5c>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   15e40:	00158980 	call	15898 <alt_avalon_i2c_enable>
   15e44:	d8800115 	stw	r2,4(sp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   15e48:	10004c1e 	bne	r2,zero,15f7c <alt_avalon_i2c_master_receive+0x180>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   15e4c:	88800317 	ldw	r2,12(r17)
   15e50:	00c00704 	movi	r3,28
   15e54:	10c00435 	stwio	r3,16(r2)
      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   15e58:	980d883a 	mov	r6,r19
   15e5c:	01400044 	movi	r5,1
   15e60:	8809883a 	mov	r4,r17
   15e64:	0015c4c0 	call	15c4c <alt_avalon_i2c_send_address>
   15e68:	d8800115 	stw	r2,4(sp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   15e6c:	10001f1e 	bne	r2,zero,15eec <alt_avalon_i2c_master_receive+0xf0>
   15e70:	002b883a 	mov	r21,zero
   15e74:	0027883a 	mov	r19,zero
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   15e78:	95bfffc4 	addi	r22,r18,-1
   15e7c:	d8800117 	ldw	r2,4(sp)
   15e80:	ad800836 	bltu	r21,r22,15ea4 <alt_avalon_i2c_master_receive+0xa8>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   15e84:	10001a1e 	bne	r2,zero,15ef0 <alt_avalon_i2c_master_receive+0xf4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   15e88:	a1c03fcc 	andi	r7,r20,255
   15e8c:	000d883a 	mov	r6,zero
   15e90:	000b883a 	mov	r5,zero
   15e94:	8809883a 	mov	r4,r17
   15e98:	0015b840 	call	15b84 <alt_avalon_i2c_cmd_write>
   15e9c:	d8800115 	stw	r2,4(sp)
   15ea0:	00001306 	br	15ef0 <alt_avalon_i2c_master_receive+0xf4>
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   15ea4:	103ff71e 	bne	r2,zero,15e84 <__alt_data_end+0xffff5e84>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   15ea8:	000f883a 	mov	r7,zero
   15eac:	000d883a 	mov	r6,zero
   15eb0:	000b883a 	mov	r5,zero
   15eb4:	8809883a 	mov	r4,r17
   15eb8:	0015b840 	call	15b84 <alt_avalon_i2c_cmd_write>
   15ebc:	d8800115 	stw	r2,4(sp)
            bytes_written++;
   15ec0:	ad400044 	addi	r21,r21,1
            if (status == ALT_AVALON_I2C_SUCCESS)
   15ec4:	103fed1e 	bne	r2,zero,15e7c <__alt_data_end+0xffff5e7c>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
   15ec8:	800b883a 	mov	r5,r16
   15ecc:	d80f883a 	mov	r7,sp
   15ed0:	000d883a 	mov	r6,zero
   15ed4:	8809883a 	mov	r4,r17
   15ed8:	0015a800 	call	15a80 <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
   15edc:	d8800017 	ldw	r2,0(sp)
   15ee0:	80a1883a 	add	r16,r16,r2
               bytes_read+=temp_bytes_read;
   15ee4:	98a7883a 	add	r19,r19,r2
   15ee8:	003fe406 	br	15e7c <__alt_data_end+0xffff5e7c>
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout;
    alt_u32 bytes_read=0;
   15eec:	0027883a 	mov	r19,zero
   15ef0:	9c27c83a 	sub	r19,r19,r16
   15ef4:	84c5883a 	add	r2,r16,r19
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   15ef8:	1480082e 	bgeu	r2,r18,15f1c <alt_avalon_i2c_master_receive+0x120>
   15efc:	d8800117 	ldw	r2,4(sp)
   15f00:	10000a1e 	bne	r2,zero,15f2c <alt_avalon_i2c_master_receive+0x130>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
   15f04:	800b883a 	mov	r5,r16
   15f08:	8809883a 	mov	r4,r17
   15f0c:	0015ab80 	call	15ab8 <alt_avalon_i2c_rx_read>
   15f10:	d8800115 	stw	r2,4(sp)
        buffer++;
   15f14:	84000044 	addi	r16,r16,1
   15f18:	003ff606 	br	15ef4 <__alt_data_end+0xffff5ef4>
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   15f1c:	a5003fcc 	andi	r20,r20,255
   15f20:	a000021e 	bne	r20,zero,15f2c <alt_avalon_i2c_master_receive+0x130>
   15f24:	d8800117 	ldw	r2,4(sp)
   15f28:	10001126 	beq	r2,zero,15f70 <alt_avalon_i2c_master_receive+0x174>
    {
        timeout=10000 * size;
   15f2c:	9489c424 	muli	r18,r18,10000
        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);
   15f30:	04000244 	movi	r16,9

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   15f34:	8809883a 	mov	r4,r17
   15f38:	0015a700 	call	15a70 <alt_avalon_i2c_is_busy>
   15f3c:	10000726 	beq	r2,zero,15f5c <alt_avalon_i2c_master_receive+0x160>
        {
            if (timeout<10) alt_busy_sleep(10000);
   15f40:	84800236 	bltu	r16,r18,15f4c <alt_avalon_i2c_master_receive+0x150>
   15f44:	0109c404 	movi	r4,10000
   15f48:	0016b500 	call	16b50 <alt_busy_sleep>
            if (--timeout == 0)
   15f4c:	94bfffc4 	addi	r18,r18,-1
   15f50:	903ff81e 	bne	r18,zero,15f34 <__alt_data_end+0xffff5f34>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   15f54:	00bfff84 	movi	r2,-2
   15f58:	d8800115 	stw	r2,4(sp)
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
   15f5c:	8809883a 	mov	r4,r17
   15f60:	d9400104 	addi	r5,sp,4
   15f64:	0015b4c0 	call	15b4c <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   15f68:	8809883a 	mov	r4,r17
   15f6c:	00158e00 	call	158e0 <alt_avalon_i2c_disable>
    }

    return status;
   15f70:	d8800117 	ldw	r2,4(sp)
   15f74:	00000106 	br	15f7c <alt_avalon_i2c_master_receive+0x180>
    alt_u32 bytes_written=0;
    alt_u32 temp_bytes_read;
    
    if (size==0)
    {
      return ALT_AVALON_I2C_SUCCESS;
   15f78:	0005883a 	mov	r2,zero
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
    }

    return status;
}
   15f7c:	dfc00917 	ldw	ra,36(sp)
   15f80:	dd800817 	ldw	r22,32(sp)
   15f84:	dd400717 	ldw	r21,28(sp)
   15f88:	dd000617 	ldw	r20,24(sp)
   15f8c:	dcc00517 	ldw	r19,20(sp)
   15f90:	dc800417 	ldw	r18,16(sp)
   15f94:	dc400317 	ldw	r17,12(sp)
   15f98:	dc000217 	ldw	r16,8(sp)
   15f9c:	dec00a04 	addi	sp,sp,40
   15fa0:	f800283a 	ret

00015fa4 <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
   15fa4:	20c00317 	ldw	r3,12(r4)
   15fa8:	19000437 	ldwio	r4,16(r3)
   15fac:	18800337 	ldwio	r2,12(r3)
   15fb0:	2084703a 	and	r2,r4,r2
   15fb4:	28800015 	stw	r2,0(r5)
   15fb8:	f800283a 	ret

00015fbc <alt_avalon_i2c_int_raw_status_get>:
/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
   15fbc:	20800317 	ldw	r2,12(r4)
   15fc0:	10800437 	ldwio	r2,16(r2)
   15fc4:	28800015 	stw	r2,0(r5)
   15fc8:	f800283a 	ret

00015fcc <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   15fcc:	20800317 	ldw	r2,12(r4)
   15fd0:	11400435 	stwio	r5,16(r2)
   15fd4:	f800283a 	ret

00015fd8 <alt_avalon_i2c_enabled_ints_get>:
}

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
   15fd8:	20800317 	ldw	r2,12(r4)
   15fdc:	10800337 	ldwio	r2,12(r2)
   15fe0:	108007cc 	andi	r2,r2,31
   15fe4:	28800015 	stw	r2,0(r5)
   15fe8:	f800283a 	ret

00015fec <alt_avalon_i2c_int_disable>:
}

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   15fec:	defffc04 	addi	sp,sp,-16
   15ff0:	dc000115 	stw	r16,4(sp)
   15ff4:	2821883a 	mov	r16,r5
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   15ff8:	d80b883a 	mov	r5,sp
}

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   15ffc:	dc400215 	stw	r17,8(sp)
   16000:	dfc00315 	stw	ra,12(sp)
   16004:	2023883a 	mov	r17,r4
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   16008:	0015fd80 	call	15fd8 <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
   1600c:	d8800017 	ldw	r2,0(sp)
   16010:	040a303a 	nor	r5,zero,r16
   16014:	288a703a 	and	r5,r5,r2
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   16018:	88800317 	ldw	r2,12(r17)
   1601c:	294007cc 	andi	r5,r5,31
   16020:	11400335 	stwio	r5,12(r2)
}
   16024:	dfc00317 	ldw	ra,12(sp)
   16028:	dc400217 	ldw	r17,8(sp)
   1602c:	dc000117 	ldw	r16,4(sp)
   16030:	dec00404 	addi	sp,sp,16
   16034:	f800283a 	ret

00016038 <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
   16038:	defffc04 	addi	sp,sp,-16
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   1603c:	014007c4 	movi	r5,31
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
   16040:	dc800215 	stw	r18,8(sp)
   16044:	dfc00315 	stw	ra,12(sp)
   16048:	2025883a 	mov	r18,r4
   1604c:	dc400115 	stw	r17,4(sp)
   16050:	dc000015 	stw	r16,0(sp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   16054:	0015fec0 	call	15fec <alt_avalon_i2c_int_disable>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   16058:	90800317 	ldw	r2,12(r18)
   1605c:	00c00704 	movi	r3,28
   16060:	10c00435 	stwio	r3,16(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
   16064:	90800617 	ldw	r2,24(r18)
   16068:	10000b26 	beq	r2,zero,16098 <alt_avalon_i2c_irq+0x60>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1606c:	0023303a 	rdctl	r17,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16070:	043fff84 	movi	r16,-2
   16074:	8c06703a 	and	r3,r17,r16
   16078:	1801703a 	wrctl	status,r3
    {
        cpu_sr = alt_irq_disable_all();
        dev->callback(dev);
   1607c:	9009883a 	mov	r4,r18
   16080:	103ee83a 	callr	r2
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
   16084:	0005303a 	rdctl	r2,status
  
  status &= ~NIOS2_STATUS_PIE_MSK;
   16088:	1420703a 	and	r16,r2,r16
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
   1608c:	8c40004c 	andi	r17,r17,1
   16090:	8c20b03a 	or	r16,r17,r16
   16094:	8001703a 	wrctl	status,r16
        alt_irq_enable_all(cpu_sr);
    }

    return;
}
   16098:	dfc00317 	ldw	ra,12(sp)
   1609c:	dc800217 	ldw	r18,8(sp)
   160a0:	dc400117 	ldw	r17,4(sp)
   160a4:	dc000017 	ldw	r16,0(sp)
   160a8:	dec00404 	addi	sp,sp,16
   160ac:	f800283a 	ret

000160b0 <alt_avalon_i2c_int_enable>:
}

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   160b0:	defffc04 	addi	sp,sp,-16
   160b4:	dc400215 	stw	r17,8(sp)
   160b8:	2823883a 	mov	r17,r5
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   160bc:	d80b883a 	mov	r5,sp
}

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   160c0:	dc000115 	stw	r16,4(sp)
   160c4:	dfc00315 	stw	ra,12(sp)
   160c8:	2021883a 	mov	r16,r4
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   160cc:	0015fd80 	call	15fd8 <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
   160d0:	d9400017 	ldw	r5,0(sp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   160d4:	80800317 	ldw	r2,12(r16)
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
    enabled_ints |= mask;
   160d8:	894ab03a 	or	r5,r17,r5
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   160dc:	294007cc 	andi	r5,r5,31
   160e0:	11400335 	stwio	r5,12(r2)
}
   160e4:	dfc00317 	ldw	ra,12(sp)
   160e8:	dc400217 	ldw	r17,8(sp)
   160ec:	dc000117 	ldw	r16,4(sp)
   160f0:	dec00404 	addi	sp,sp,16
   160f4:	f800283a 	ret

000160f8 <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
   160f8:	defffb04 	addi	sp,sp,-20
   160fc:	dc000115 	stw	r16,4(sp)
   int timeout=100000;
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   IRQ_DATA_t *irq = i2c_dev->callback_context;
   16100:	24000717 	ldw	r16,28(r4)

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
   16104:	dc800315 	stw	r18,12(sp)
   16108:	dc400215 	stw	r17,8(sp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   IRQ_DATA_t *irq = i2c_dev->callback_context;

   if (irq->irq_busy==2)  /*receive request*/
   1610c:	84800217 	ldw	r18,8(r16)

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
   16110:	dfc00415 	stw	ra,16(sp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   IRQ_DATA_t *irq = i2c_dev->callback_context;

   if (irq->irq_busy==2)  /*receive request*/
   16114:	00800084 	movi	r2,2

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
   16118:	2023883a 	mov	r17,r4
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   IRQ_DATA_t *irq = i2c_dev->callback_context;

   if (irq->irq_busy==2)  /*receive request*/
   1611c:	90800326 	beq	r18,r2,1612c <optional_irq_callback+0x34>

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
   16120:	048000b4 	movhi	r18,2
   16124:	94a1a804 	addi	r18,r18,-31072
   16128:	00001506 	br	16180 <optional_irq_callback+0x88>
   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   IRQ_DATA_t *irq = i2c_dev->callback_context;

   if (irq->irq_busy==2)  /*receive request*/
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
   1612c:	81800117 	ldw	r6,4(r16)
   16130:	81400017 	ldw	r5,0(r16)
   16134:	d80f883a 	mov	r7,sp
   16138:	0015a800 	call	15a80 <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
   1613c:	d8c00017 	ldw	r3,0(sp)
   16140:	80800117 	ldw	r2,4(r16)
       irq->buffer+=bytes_read;
   16144:	81000017 	ldw	r4,0(r16)
   IRQ_DATA_t *irq = i2c_dev->callback_context;

   if (irq->irq_busy==2)  /*receive request*/
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
       irq->size-=bytes_read;
   16148:	10c5c83a 	sub	r2,r2,r3
       irq->buffer+=bytes_read;
   1614c:	20c7883a 	add	r3,r4,r3
   IRQ_DATA_t *irq = i2c_dev->callback_context;

   if (irq->irq_busy==2)  /*receive request*/
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
       irq->size-=bytes_read;
   16150:	80800115 	stw	r2,4(r16)
       irq->buffer+=bytes_read;
   16154:	80c00015 	stw	r3,0(r16)
       if (irq->size > 0)
   16158:	103ff126 	beq	r2,zero,16120 <__alt_data_end+0xffff6120>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   1615c:	88800317 	ldw	r2,12(r17)
   16160:	00c00704 	movi	r3,28
   16164:	10c00435 	stwio	r3,16(r2)
       if (irq->size > 0)
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   16168:	900b883a 	mov	r5,r18
   1616c:	8809883a 	mov	r4,r17
   16170:	00160b00 	call	160b0 <alt_avalon_i2c_int_enable>
   16174:	00000806 	br	16198 <optional_irq_callback+0xa0>
   16178:	94bfffc4 	addi	r18,r18,-1
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
   1617c:	90000326 	beq	r18,zero,1618c <optional_irq_callback+0x94>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
   16180:	8809883a 	mov	r4,r17
   16184:	0015a700 	call	15a70 <alt_avalon_i2c_is_busy>
   16188:	103ffb1e 	bne	r2,zero,16178 <__alt_data_end+0xffff6178>
         break;
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
   1618c:	8809883a 	mov	r4,r17
   16190:	00158e00 	call	158e0 <alt_avalon_i2c_disable>

    irq->irq_busy=0;
   16194:	80000215 	stw	zero,8(r16)
}
   16198:	dfc00417 	ldw	ra,16(sp)
   1619c:	dc800317 	ldw	r18,12(sp)
   161a0:	dc400217 	ldw	r17,8(sp)
   161a4:	dc000117 	ldw	r16,4(sp)
   161a8:	dec00504 	addi	sp,sp,20
   161ac:	f800283a 	ret

000161b0 <alt_avalon_i2c_interrupt_transaction_status>:
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
    }
}

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   161b0:	defff804 	addi	sp,sp,-32
   161b4:	dc800515 	stw	r18,20(sp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   161b8:	24800717 	ldw	r18,28(r4)
    alt_u32 timeout=10000 * irq_data->size + 10000;
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
   161bc:	d9400104 	addi	r5,sp,4
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
    }
}

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   161c0:	dfc00715 	stw	ra,28(sp)
   161c4:	dc400415 	stw	r17,16(sp)
   161c8:	dc000315 	stw	r16,12(sp)
   161cc:	2023883a 	mov	r17,r4
   161d0:	dcc00615 	stw	r19,24(sp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   161d4:	d8000215 	stw	zero,8(sp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
    alt_u32 timeout=10000 * irq_data->size + 10000;
   161d8:	94000117 	ldw	r16,4(r18)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
   161dc:	0015fd80 	call	15fd8 <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
   161e0:	d9400117 	ldw	r5,4(sp)
   161e4:	8809883a 	mov	r4,r17
   161e8:	0015fec0 	call	15fec <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   161ec:	d9400204 	addi	r5,sp,8
   161f0:	8809883a 	mov	r4,r17
   161f4:	0015b4c0 	call	15b4c <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
   161f8:	d8c00217 	ldw	r3,8(sp)
   161fc:	90800217 	ldw	r2,8(r18)
   16200:	18001826 	beq	r3,zero,16264 <alt_avalon_i2c_interrupt_transaction_status+0xb4>
    {
      if (irq_data->irq_busy)
   16204:	10001526 	beq	r2,zero,1625c <alt_avalon_i2c_interrupt_transaction_status+0xac>

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
    alt_u32 timeout=10000 * irq_data->size + 10000;
   16208:	84000044 	addi	r16,r16,1
   1620c:	8409c424 	muli	r16,r16,10000
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
              if (timeout<10) alt_busy_sleep(10000);
   16210:	04c00244 	movi	r19,9

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   16214:	8809883a 	mov	r4,r17
   16218:	0015a700 	call	15a70 <alt_avalon_i2c_is_busy>
   1621c:	10000726 	beq	r2,zero,1623c <alt_avalon_i2c_interrupt_transaction_status+0x8c>
        {
              if (timeout<10) alt_busy_sleep(10000);
   16220:	9c000236 	bltu	r19,r16,1622c <alt_avalon_i2c_interrupt_transaction_status+0x7c>
   16224:	0109c404 	movi	r4,10000
   16228:	0016b500 	call	16b50 <alt_busy_sleep>
              if (--timeout == 0)
   1622c:	843fffc4 	addi	r16,r16,-1
   16230:	803ff81e 	bne	r16,zero,16214 <__alt_data_end+0xffff6214>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
   16234:	00bfff84 	movi	r2,-2
   16238:	d8800215 	stw	r2,8(sp)
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
   1623c:	91400017 	ldw	r5,0(r18)
   16240:	d80f883a 	mov	r7,sp
   16244:	000d883a 	mov	r6,zero
   16248:	8809883a 	mov	r4,r17
   1624c:	0015a800 	call	15a80 <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
   16250:	8809883a 	mov	r4,r17
   16254:	00158e00 	call	158e0 <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
   16258:	90000215 	stw	zero,8(r18)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
   1625c:	d8800217 	ldw	r2,8(sp)
   16260:	00000506 	br	16278 <alt_avalon_i2c_interrupt_transaction_status+0xc8>
    }
    
    if (irq_data->irq_busy)
   16264:	10000426 	beq	r2,zero,16278 <alt_avalon_i2c_interrupt_transaction_status+0xc8>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
   16268:	d9400117 	ldw	r5,4(sp)
   1626c:	8809883a 	mov	r4,r17
   16270:	00160b00 	call	160b0 <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
   16274:	00bffe44 	movi	r2,-7
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
}
   16278:	dfc00717 	ldw	ra,28(sp)
   1627c:	dcc00617 	ldw	r19,24(sp)
   16280:	dc800517 	ldw	r18,20(sp)
   16284:	dc400417 	ldw	r17,16(sp)
   16288:	dc000317 	ldw	r16,12(sp)
   1628c:	dec00804 	addi	sp,sp,32
   16290:	f800283a 	ret

00016294 <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
   16294:	20800317 	ldw	r2,12(r4)
   16298:	10800237 	ldwio	r2,8(r2)
   1629c:	10800c0c 	andi	r2,r2,48
   162a0:	1005d13a 	srai	r2,r2,4
   162a4:	28800015 	stw	r2,0(r5)
   162a8:	f800283a 	ret

000162ac <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
   162ac:	20c00317 	ldw	r3,12(r4)
   162b0:	18c00204 	addi	r3,r3,8
   162b4:	19000037 	ldwio	r4,0(r3)
   162b8:	00bff3c4 	movi	r2,-49
   162bc:	280a913a 	slli	r5,r5,4
   162c0:	2084703a 	and	r2,r4,r2
   162c4:	29400c0c 	andi	r5,r5,48
   162c8:	288ab03a 	or	r5,r5,r2
   162cc:	19400035 	stwio	r5,0(r3)
   162d0:	f800283a 	ret

000162d4 <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   162d4:	defff704 	addi	sp,sp,-36
   162d8:	dcc00315 	stw	r19,12(sp)
   162dc:	dfc00815 	stw	ra,32(sp)
   162e0:	ddc00715 	stw	r23,28(sp)
   162e4:	dd800615 	stw	r22,24(sp)
   162e8:	dd400515 	stw	r21,20(sp)
   162ec:	dd000415 	stw	r20,16(sp)
   162f0:	dc800215 	stw	r18,8(sp)
   162f4:	dc400115 	stw	r17,4(sp)
   162f8:	dc000015 	stw	r16,0(sp)
   162fc:	dcc00917 	ldw	r19,36(sp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
    alt_u32 timeout;
    alt_u32 bytes_written=0;
    
    if (size==0)
   16300:	30004626 	beq	r6,zero,1641c <alt_avalon_i2c_master_receive_using_interrupts+0x148>
    {
      return ALT_AVALON_I2C_SUCCESS;
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   16304:	20c00617 	ldw	r3,24(r4)
   16308:	00800074 	movhi	r2,1
   1630c:	10983e04 	addi	r2,r2,24824
   16310:	2023883a 	mov	r17,r4
   16314:	1880431e 	bne	r3,r2,16424 <alt_avalon_i2c_master_receive_using_interrupts+0x150>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   16318:	3c003fcc 	andi	r16,r7,255
   1631c:	3025883a 	mov	r18,r6
   16320:	282b883a 	mov	r21,r5
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   16324:	25000717 	ldw	r20,28(r4)
    {
       return ALT_AVALON_I2C_BAD_ARG;    
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   16328:	8000051e 	bne	r16,zero,16340 <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   1632c:	00158980 	call	15898 <alt_avalon_i2c_enable>
      if (status != ALT_AVALON_I2C_SUCCESS)
   16330:	10003d1e 	bne	r2,zero,16428 <alt_avalon_i2c_master_receive_using_interrupts+0x154>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   16334:	88800317 	ldw	r2,12(r17)
   16338:	00c00704 	movi	r3,28
   1633c:	10c00435 	stwio	r3,16(r2)
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   16340:	800d883a 	mov	r6,r16
   16344:	01400044 	movi	r5,1
   16348:	8809883a 	mov	r4,r17
   1634c:	0015c4c0 	call	15c4c <alt_avalon_i2c_send_address>
   16350:	1021883a 	mov	r16,r2

    if (status == ALT_AVALON_I2C_SUCCESS)
   16354:	1000151e 	bne	r2,zero,163ac <alt_avalon_i2c_master_receive_using_interrupts+0xd8>
   16358:	002d883a 	mov	r22,zero
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   1635c:	95ffffc4 	addi	r23,r18,-1
   16360:	b5c0092e 	bgeu	r22,r23,16388 <alt_avalon_i2c_master_receive_using_interrupts+0xb4>
   16364:	8000111e 	bne	r16,zero,163ac <alt_avalon_i2c_master_receive_using_interrupts+0xd8>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   16368:	000f883a 	mov	r7,zero
   1636c:	000d883a 	mov	r6,zero
   16370:	000b883a 	mov	r5,zero
   16374:	8809883a 	mov	r4,r17
   16378:	0015b840 	call	15b84 <alt_avalon_i2c_cmd_write>
   1637c:	1021883a 	mov	r16,r2
            bytes_written++;
   16380:	b5800044 	addi	r22,r22,1
   16384:	003ff606 	br	16360 <__alt_data_end+0xffff6360>
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   16388:	8000081e 	bne	r16,zero,163ac <alt_avalon_i2c_master_receive_using_interrupts+0xd8>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   1638c:	9cc03fcc 	andi	r19,r19,255
   16390:	980f883a 	mov	r7,r19
   16394:	000d883a 	mov	r6,zero
   16398:	000b883a 	mov	r5,zero
   1639c:	8809883a 	mov	r4,r17
   163a0:	0015b840 	call	15b84 <alt_avalon_i2c_cmd_write>
   163a4:	1021883a 	mov	r16,r2
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   163a8:	10000f26 	beq	r2,zero,163e8 <alt_avalon_i2c_master_receive_using_interrupts+0x114>
    {
        timeout=10000 * size;
   163ac:	9489c424 	muli	r18,r18,10000
        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);
   163b0:	04c00244 	movi	r19,9
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   163b4:	8809883a 	mov	r4,r17
   163b8:	0015a700 	call	15a70 <alt_avalon_i2c_is_busy>
   163bc:	10000626 	beq	r2,zero,163d8 <alt_avalon_i2c_master_receive_using_interrupts+0x104>
        {
            if (timeout<10) alt_busy_sleep(10000);
   163c0:	9c800236 	bltu	r19,r18,163cc <alt_avalon_i2c_master_receive_using_interrupts+0xf8>
   163c4:	0109c404 	movi	r4,10000
   163c8:	0016b500 	call	16b50 <alt_busy_sleep>
            if (--timeout == 0)
   163cc:	94bfffc4 	addi	r18,r18,-1
   163d0:	903ff81e 	bne	r18,zero,163b4 <__alt_data_end+0xffff63b4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   163d4:	043fff84 	movi	r16,-2
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   163d8:	8809883a 	mov	r4,r17
   163dc:	00158e00 	call	158e0 <alt_avalon_i2c_disable>
   163e0:	8005883a 	mov	r2,r16
   163e4:	00001006 	br	16428 <alt_avalon_i2c_master_receive_using_interrupts+0x154>
    }
    else
    {
       if (issue_stop)
   163e8:	98000c26 	beq	r19,zero,1641c <alt_avalon_i2c_master_receive_using_interrupts+0x148>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   163ec:	88800317 	ldw	r2,12(r17)
   163f0:	00c00704 	movi	r3,28
   163f4:	10c00435 	stwio	r3,16(r2)
       if (issue_stop)
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
   163f8:	000b883a 	mov	r5,zero
   163fc:	8809883a 	mov	r4,r17
   16400:	00162ac0 	call	162ac <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
   16404:	01400084 	movi	r5,2
   16408:	a1400215 	stw	r5,8(r20)
         
         irq_data->buffer = buffer;
   1640c:	a5400015 	stw	r21,0(r20)
         irq_data->size = size;
   16410:	a4800115 	stw	r18,4(r20)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   16414:	8809883a 	mov	r4,r17
   16418:	00160b00 	call	160b0 <alt_avalon_i2c_int_enable>
   1641c:	0005883a 	mov	r2,zero
   16420:	00000106 	br	16428 <alt_avalon_i2c_master_receive_using_interrupts+0x154>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   16424:	00bfff44 	movi	r2,-3
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
       }
    }

    return status;
}
   16428:	dfc00817 	ldw	ra,32(sp)
   1642c:	ddc00717 	ldw	r23,28(sp)
   16430:	dd800617 	ldw	r22,24(sp)
   16434:	dd400517 	ldw	r21,20(sp)
   16438:	dd000417 	ldw	r20,16(sp)
   1643c:	dcc00317 	ldw	r19,12(sp)
   16440:	dc800217 	ldw	r18,8(sp)
   16444:	dc400117 	ldw	r17,4(sp)
   16448:	dc000017 	ldw	r16,0(sp)
   1644c:	dec00904 	addi	sp,sp,36
   16450:	f800283a 	ret

00016454 <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   16454:	defff604 	addi	sp,sp,-40
   16458:	ddc00815 	stw	r23,32(sp)
   1645c:	dd800715 	stw	r22,28(sp)
   16460:	dd400615 	stw	r21,24(sp)
   16464:	dd000515 	stw	r20,20(sp)
   16468:	dcc00415 	stw	r19,16(sp)
   1646c:	dc800315 	stw	r18,12(sp)
   16470:	dc400215 	stw	r17,8(sp)
   16474:	dc000115 	stw	r16,4(sp)
   16478:	dfc00915 	stw	ra,36(sp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
   1647c:	39c03fcc 	andi	r7,r7,255
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   16480:	2023883a 	mov	r17,r4
   16484:	2825883a 	mov	r18,r5
   16488:	3027883a 	mov	r19,r6
   1648c:	0409c404 	movi	r16,10000
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
   16490:	053fffc4 	movi	r20,-1
      {
        if (retry<10) alt_busy_sleep(10000);      
   16494:	05400244 	movi	r21,9
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   16498:	05800044 	movi	r22,1
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   1649c:	05c00084 	movi	r23,2
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
   164a0:	38001926 	beq	r7,zero,16508 <alt_avalon_i2c_master_rx+0xb4>
    {
      while (retry--) 
   164a4:	843fffc4 	addi	r16,r16,-1
   164a8:	85001926 	beq	r16,r20,16510 <alt_avalon_i2c_master_rx+0xbc>
      {
        if (retry<10) alt_busy_sleep(10000);      
   164ac:	ac000236 	bltu	r21,r16,164b8 <alt_avalon_i2c_master_rx+0x64>
   164b0:	0109c404 	movi	r4,10000
   164b4:	0016b500 	call	16b50 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   164b8:	dd800015 	stw	r22,0(sp)
   164bc:	000f883a 	mov	r7,zero
   164c0:	980d883a 	mov	r6,r19
   164c4:	900b883a 	mov	r5,r18
   164c8:	8809883a 	mov	r4,r17
   164cc:	00162d40 	call	162d4 <alt_avalon_i2c_master_receive_using_interrupts>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   164d0:	10c001c4 	addi	r3,r2,7
   164d4:	b8fff32e 	bgeu	r23,r3,164a4 <__alt_data_end+0xffff64a4>
   164d8:	00000d06 	br	16510 <alt_avalon_i2c_master_rx+0xbc>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   164dc:	ac000236 	bltu	r21,r16,164e8 <alt_avalon_i2c_master_rx+0x94>
   164e0:	0109c404 	movi	r4,10000
   164e4:	0016b500 	call	16b50 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   164e8:	dd800015 	stw	r22,0(sp)
   164ec:	000f883a 	mov	r7,zero
   164f0:	980d883a 	mov	r6,r19
   164f4:	900b883a 	mov	r5,r18
   164f8:	8809883a 	mov	r4,r17
   164fc:	0015dfc0 	call	15dfc <alt_avalon_i2c_master_receive>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   16500:	10c001c4 	addi	r3,r2,7
   16504:	b8c00236 	bltu	r23,r3,16510 <alt_avalon_i2c_master_rx+0xbc>
        break;
      }
    }
    else
    {
      while (retry--) 
   16508:	843fffc4 	addi	r16,r16,-1
   1650c:	853ff31e 	bne	r16,r20,164dc <__alt_data_end+0xffff64dc>
        break;
      }
    }
    
    return status;
}        
   16510:	dfc00917 	ldw	ra,36(sp)
   16514:	ddc00817 	ldw	r23,32(sp)
   16518:	dd800717 	ldw	r22,28(sp)
   1651c:	dd400617 	ldw	r21,24(sp)
   16520:	dd000517 	ldw	r20,20(sp)
   16524:	dcc00417 	ldw	r19,16(sp)
   16528:	dc800317 	ldw	r18,12(sp)
   1652c:	dc400217 	ldw	r17,8(sp)
   16530:	dc000117 	ldw	r16,4(sp)
   16534:	dec00a04 	addi	sp,sp,40
   16538:	f800283a 	ret

0001653c <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
   1653c:	20800317 	ldw	r2,12(r4)
   16540:	10800237 	ldwio	r2,8(r2)
   16544:	1080030c 	andi	r2,r2,12
   16548:	1005d0ba 	srai	r2,r2,2
   1654c:	28800015 	stw	r2,0(r5)
   16550:	f800283a 	ret

00016554 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
   16554:	20c00317 	ldw	r3,12(r4)
   16558:	18c00204 	addi	r3,r3,8
   1655c:	19000037 	ldwio	r4,0(r3)
   16560:	00bffcc4 	movi	r2,-13
   16564:	294b883a 	add	r5,r5,r5
   16568:	294b883a 	add	r5,r5,r5
   1656c:	2084703a 	and	r2,r4,r2
   16570:	2940030c 	andi	r5,r5,12
   16574:	288ab03a 	or	r5,r5,r2
   16578:	19400035 	stwio	r5,0(r3)
   1657c:	f800283a 	ret

00016580 <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
   16580:	defff804 	addi	sp,sp,-32
   16584:	dfc00715 	stw	ra,28(sp)
   16588:	dc000515 	stw	r16,20(sp)
   1658c:	dc400615 	stw	r17,24(sp)
   16590:	2021883a 	mov	r16,r4
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
   16594:	00158e00 	call	158e0 <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   16598:	014007c4 	movi	r5,31
   1659c:	8009883a 	mov	r4,r16
   165a0:	0015fec0 	call	15fec <alt_avalon_i2c_int_disable>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   165a4:	80800317 	ldw	r2,12(r16)
   165a8:	00c00704 	movi	r3,28
   165ac:	10c00435 	stwio	r3,16(r2)

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
   165b0:	044000c4 	movi	r17,3
   165b4:	880b883a 	mov	r5,r17
   165b8:	8009883a 	mov	r4,r16
   165bc:	00165540 	call	16554 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
   165c0:	880b883a 	mov	r5,r17
   165c4:	8009883a 	mov	r4,r16
   165c8:	00162ac0 	call	162ac <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
   165cc:	018000b4 	movhi	r6,2
   165d0:	31a1a804 	addi	r6,r6,-31072
   165d4:	d9400104 	addi	r5,sp,4
   165d8:	8009883a 	mov	r4,r16
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
   165dc:	d8000215 	stw	zero,8(sp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
   165e0:	d8000115 	stw	zero,4(sp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
   165e4:	00159e40 	call	159e4 <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
   165e8:	d9400104 	addi	r5,sp,4
   165ec:	8009883a 	mov	r4,r16
   165f0:	00159400 	call	15940 <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
   165f4:	8009883a 	mov	r4,r16
   165f8:	d1600404 	addi	r5,gp,-32752
   165fc:	0016be00 	call	16be0 <alt_dev_llist_insert>
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);

    if (!error)
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
   16600:	81400517 	ldw	r5,20(r16)
   16604:	81000417 	ldw	r4,16(r16)
   16608:	01800074 	movhi	r6,1
   1660c:	d8000015 	stw	zero,0(sp)
   16610:	800f883a 	mov	r7,r16
   16614:	31980e04 	addi	r6,r6,24632
   16618:	0016ad80 	call	16ad8 <alt_ic_isr_register>
        alt_printf("failed to create semaphores\n");
    }

    return;

}
   1661c:	dfc00717 	ldw	ra,28(sp)
   16620:	dc400617 	ldw	r17,24(sp)
   16624:	dc000517 	ldw	r16,20(sp)
   16628:	dec00804 	addi	sp,sp,32
   1662c:	f800283a 	ret

00016630 <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   16630:	defff804 	addi	sp,sp,-32
   16634:	dd000415 	stw	r20,16(sp)
   16638:	dfc00715 	stw	ra,28(sp)
   1663c:	dd800615 	stw	r22,24(sp)
   16640:	dd400515 	stw	r21,20(sp)
   16644:	dcc00315 	stw	r19,12(sp)
   16648:	dc800215 	stw	r18,8(sp)
   1664c:	dc400115 	stw	r17,4(sp)
   16650:	dc000015 	stw	r16,0(sp)
   16654:	dd000817 	ldw	r20,32(sp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout=size*10000;
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
    
    if (size==0)
   16658:	30004426 	beq	r6,zero,1676c <alt_avalon_i2c_master_transmit_using_interrupts+0x13c>
    {
      return ALT_AVALON_I2C_SUCCESS;
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   1665c:	20c00617 	ldw	r3,24(r4)
   16660:	00800074 	movhi	r2,1
   16664:	10983e04 	addi	r2,r2,24824
   16668:	2023883a 	mov	r17,r4
   1666c:	1880411e 	bne	r3,r2,16774 <alt_avalon_i2c_master_transmit_using_interrupts+0x144>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   16670:	3c003fcc 	andi	r16,r7,255
   16674:	2827883a 	mov	r19,r5
   16678:	3025883a 	mov	r18,r6
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout=size*10000;
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   1667c:	25400717 	ldw	r21,28(r4)
    {
       return ALT_AVALON_I2C_BAD_ARG;    
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   16680:	8000051e 	bne	r16,zero,16698 <alt_avalon_i2c_master_transmit_using_interrupts+0x68>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   16684:	00158980 	call	15898 <alt_avalon_i2c_enable>
      if (status != ALT_AVALON_I2C_SUCCESS)
   16688:	10003b1e 	bne	r2,zero,16778 <alt_avalon_i2c_master_transmit_using_interrupts+0x148>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   1668c:	88800317 	ldw	r2,12(r17)
   16690:	00c00704 	movi	r3,28
   16694:	10c00435 	stwio	r3,16(r2)
      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   16698:	800d883a 	mov	r6,r16
   1669c:	000b883a 	mov	r5,zero
   166a0:	8809883a 	mov	r4,r17
   166a4:	0015c4c0 	call	15c4c <alt_avalon_i2c_send_address>
   166a8:	1021883a 	mov	r16,r2
        
    if (status == ALT_AVALON_I2C_SUCCESS)
   166ac:	1000151e 	bne	r2,zero,16704 <alt_avalon_i2c_master_transmit_using_interrupts+0xd4>
   166b0:	95bfffc4 	addi	r22,r18,-1
   166b4:	9dad883a 	add	r22,r19,r22
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   166b8:	9d800926 	beq	r19,r22,166e0 <alt_avalon_i2c_master_transmit_using_interrupts+0xb0>
   166bc:	8000111e 	bne	r16,zero,16704 <alt_avalon_i2c_master_transmit_using_interrupts+0xd4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   166c0:	99400003 	ldbu	r5,0(r19)
   166c4:	000f883a 	mov	r7,zero
   166c8:	000d883a 	mov	r6,zero
   166cc:	8809883a 	mov	r4,r17
   166d0:	0015b840 	call	15b84 <alt_avalon_i2c_cmd_write>
   166d4:	1021883a 	mov	r16,r2
            
            ++buffer;
   166d8:	9cc00044 	addi	r19,r19,1
   166dc:	003ff606 	br	166b8 <__alt_data_end+0xffff66b8>
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   166e0:	8000081e 	bne	r16,zero,16704 <alt_avalon_i2c_master_transmit_using_interrupts+0xd4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   166e4:	99400003 	ldbu	r5,0(r19)
   166e8:	a5003fcc 	andi	r20,r20,255
   166ec:	a00f883a 	mov	r7,r20
   166f0:	000d883a 	mov	r6,zero
   166f4:	8809883a 	mov	r4,r17
   166f8:	0015b840 	call	15b84 <alt_avalon_i2c_cmd_write>
   166fc:	1021883a 	mov	r16,r2
            --size;
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   16700:	10000f26 	beq	r2,zero,16740 <alt_avalon_i2c_master_transmit_using_interrupts+0x110>
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout=size*10000;
   16704:	9489c424 	muli	r18,r18,10000
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
        {
            if (timeout<10) alt_busy_sleep(10000);        
   16708:	04c00244 	movi	r19,9
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   1670c:	8809883a 	mov	r4,r17
   16710:	0015a700 	call	15a70 <alt_avalon_i2c_is_busy>
   16714:	10000626 	beq	r2,zero,16730 <alt_avalon_i2c_master_transmit_using_interrupts+0x100>
        {
            if (timeout<10) alt_busy_sleep(10000);        
   16718:	9c800236 	bltu	r19,r18,16724 <alt_avalon_i2c_master_transmit_using_interrupts+0xf4>
   1671c:	0109c404 	movi	r4,10000
   16720:	0016b500 	call	16b50 <alt_busy_sleep>
            if (--timeout == 0)
   16724:	94bfffc4 	addi	r18,r18,-1
   16728:	903ff81e 	bne	r18,zero,1670c <__alt_data_end+0xffff670c>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   1672c:	043fff84 	movi	r16,-2
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   16730:	8809883a 	mov	r4,r17
   16734:	00158e00 	call	158e0 <alt_avalon_i2c_disable>
   16738:	8005883a 	mov	r2,r16
   1673c:	00000e06 	br	16778 <alt_avalon_i2c_master_transmit_using_interrupts+0x148>
    }
    else
    {
       if (issue_stop)
   16740:	a0000a26 	beq	r20,zero,1676c <alt_avalon_i2c_master_transmit_using_interrupts+0x13c>

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   16744:	88800317 	ldw	r2,12(r17)
   16748:	00c00704 	movi	r3,28
   1674c:	10c00435 	stwio	r3,16(r2)
       if (issue_stop)
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
   16750:	000b883a 	mov	r5,zero
   16754:	8809883a 	mov	r4,r17
   16758:	00165540 	call	16554 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
   1675c:	01400044 	movi	r5,1
   16760:	a9400215 	stw	r5,8(r21)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
   16764:	8809883a 	mov	r4,r17
   16768:	00160b00 	call	160b0 <alt_avalon_i2c_int_enable>
   1676c:	0005883a 	mov	r2,zero
   16770:	00000106 	br	16778 <alt_avalon_i2c_master_transmit_using_interrupts+0x148>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   16774:	00bfff44 	movi	r2,-3
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
       }
    }
    
    return status;
}
   16778:	dfc00717 	ldw	ra,28(sp)
   1677c:	dd800617 	ldw	r22,24(sp)
   16780:	dd400517 	ldw	r21,20(sp)
   16784:	dd000417 	ldw	r20,16(sp)
   16788:	dcc00317 	ldw	r19,12(sp)
   1678c:	dc800217 	ldw	r18,8(sp)
   16790:	dc400117 	ldw	r17,4(sp)
   16794:	dc000017 	ldw	r16,0(sp)
   16798:	dec00804 	addi	sp,sp,32
   1679c:	f800283a 	ret

000167a0 <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   167a0:	defff504 	addi	sp,sp,-44
   167a4:	df000915 	stw	fp,36(sp)
   167a8:	ddc00815 	stw	r23,32(sp)
   167ac:	dd800715 	stw	r22,28(sp)
   167b0:	dd400615 	stw	r21,24(sp)
   167b4:	dd000515 	stw	r20,20(sp)
   167b8:	dcc00415 	stw	r19,16(sp)
   167bc:	dc800315 	stw	r18,12(sp)
   167c0:	dc400215 	stw	r17,8(sp)
   167c4:	dc000115 	stw	r16,4(sp)
   167c8:	dfc00a15 	stw	ra,40(sp)
   167cc:	2023883a 	mov	r17,r4
   167d0:	2825883a 	mov	r18,r5
   167d4:	3027883a 	mov	r19,r6
   167d8:	382d883a 	mov	r22,r7
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   167dc:	0409c404 	movi	r16,10000
    
    while (retry--)
   167e0:	057fffc4 	movi	r21,-1
    {
      if (retry<10) alt_busy_sleep(10000);
   167e4:	05c00244 	movi	r23,9
   167e8:	05000044 	movi	r20,1
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   167ec:	07000084 	movi	fp,2
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
   167f0:	843fffc4 	addi	r16,r16,-1
   167f4:	85400f26 	beq	r16,r21,16834 <alt_avalon_i2c_master_tx+0x94>
    {
      if (retry<10) alt_busy_sleep(10000);
   167f8:	bc000236 	bltu	r23,r16,16804 <alt_avalon_i2c_master_tx+0x64>
   167fc:	0109c404 	movi	r4,10000
   16800:	0016b500 	call	16b50 <alt_busy_sleep>
      if (use_interrupts)
   16804:	b0803fcc 	andi	r2,r22,255
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
   16808:	dd000015 	stw	r20,0(sp)
   1680c:	000f883a 	mov	r7,zero
   16810:	980d883a 	mov	r6,r19
   16814:	900b883a 	mov	r5,r18
   16818:	8809883a 	mov	r4,r17
    alt_u32 retry=10000;  
    
    while (retry--)
    {
      if (retry<10) alt_busy_sleep(10000);
      if (use_interrupts)
   1681c:	10000226 	beq	r2,zero,16828 <alt_avalon_i2c_master_tx+0x88>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
   16820:	00166300 	call	16630 <alt_avalon_i2c_master_transmit_using_interrupts>
   16824:	00000106 	br	1682c <alt_avalon_i2c_master_tx+0x8c>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
   16828:	0015cc40 	call	15cc4 <alt_avalon_i2c_master_transmit>
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   1682c:	10c001c4 	addi	r3,r2,7
   16830:	e0ffef2e 	bgeu	fp,r3,167f0 <__alt_data_end+0xffff67f0>
      break;
    }

    return status;
}        
   16834:	dfc00a17 	ldw	ra,40(sp)
   16838:	df000917 	ldw	fp,36(sp)
   1683c:	ddc00817 	ldw	r23,32(sp)
   16840:	dd800717 	ldw	r22,28(sp)
   16844:	dd400617 	ldw	r21,24(sp)
   16848:	dd000517 	ldw	r20,20(sp)
   1684c:	dcc00417 	ldw	r19,16(sp)
   16850:	dc800317 	ldw	r18,12(sp)
   16854:	dc400217 	ldw	r17,8(sp)
   16858:	dc000117 	ldw	r16,4(sp)
   1685c:	dec00b04 	addi	sp,sp,44
   16860:	f800283a 	ret

00016864 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
   16864:	defff504 	addi	sp,sp,-44
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
   16868:	d8c00c03 	ldbu	r3,48(sp)
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
   1686c:	df000915 	stw	fp,36(sp)
   16870:	ddc00815 	stw	r23,32(sp)
   16874:	dd800715 	stw	r22,28(sp)
   16878:	dd400615 	stw	r21,24(sp)
   1687c:	dd000515 	stw	r20,20(sp)
   16880:	dcc00415 	stw	r19,16(sp)
   16884:	dc800315 	stw	r18,12(sp)
   16888:	dc400215 	stw	r17,8(sp)
   1688c:	dc000115 	stw	r16,4(sp)
   16890:	dfc00a15 	stw	ra,40(sp)
   16894:	2023883a 	mov	r17,r4
   16898:	2825883a 	mov	r18,r5
   1689c:	3027883a 	mov	r19,r6
   168a0:	3829883a 	mov	r20,r7
   168a4:	0409c404 	movi	r16,10000
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
   168a8:	05bfffc4 	movi	r22,-1
      {
        if (retry<10) alt_busy_sleep(10000);      
   168ac:	05c00244 	movi	r23,9
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   168b0:	05400084 	movi	r21,2
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   168b4:	07000044 	movi	fp,1
                                       const alt_u8 use_interrupts)                                       
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
   168b8:	18002126 	beq	r3,zero,16940 <alt_avalon_i2c_master_tx_rx+0xdc>
    {
      while (retry--) 
   168bc:	843fffc4 	addi	r16,r16,-1
   168c0:	85802a26 	beq	r16,r22,1696c <alt_avalon_i2c_master_tx_rx+0x108>
      {
        if (retry<10) alt_busy_sleep(10000);      
   168c4:	bc000236 	bltu	r23,r16,168d0 <alt_avalon_i2c_master_tx_rx+0x6c>
   168c8:	0109c404 	movi	r4,10000
   168cc:	0016b500 	call	16b50 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   168d0:	d8000015 	stw	zero,0(sp)
   168d4:	000f883a 	mov	r7,zero
   168d8:	980d883a 	mov	r6,r19
   168dc:	900b883a 	mov	r5,r18
   168e0:	8809883a 	mov	r4,r17
   168e4:	00166300 	call	16630 <alt_avalon_i2c_master_transmit_using_interrupts>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   168e8:	10c001c4 	addi	r3,r2,7
   168ec:	a8fff32e 	bgeu	r21,r3,168bc <__alt_data_end+0xffff68bc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   168f0:	d9800b17 	ldw	r6,44(sp)
   168f4:	df000015 	stw	fp,0(sp)
   168f8:	01c00044 	movi	r7,1
   168fc:	a00b883a 	mov	r5,r20
   16900:	8809883a 	mov	r4,r17
   16904:	00162d40 	call	162d4 <alt_avalon_i2c_master_receive_using_interrupts>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   16908:	10c001c4 	addi	r3,r2,7
   1690c:	a8ffeb2e 	bgeu	r21,r3,168bc <__alt_data_end+0xffff68bc>
   16910:	00001606 	br	1696c <alt_avalon_i2c_master_tx_rx+0x108>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   16914:	bc000236 	bltu	r23,r16,16920 <alt_avalon_i2c_master_tx_rx+0xbc>
   16918:	0109c404 	movi	r4,10000
   1691c:	0016b500 	call	16b50 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   16920:	d8000015 	stw	zero,0(sp)
   16924:	000f883a 	mov	r7,zero
   16928:	980d883a 	mov	r6,r19
   1692c:	900b883a 	mov	r5,r18
   16930:	8809883a 	mov	r4,r17
   16934:	0015cc40 	call	15cc4 <alt_avalon_i2c_master_transmit>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   16938:	10c001c4 	addi	r3,r2,7
   1693c:	a8c00336 	bltu	r21,r3,1694c <alt_avalon_i2c_master_tx_rx+0xe8>
        break;
      }
    }
    else 
    {
      while (retry--) 
   16940:	843fffc4 	addi	r16,r16,-1
   16944:	85bff31e 	bne	r16,r22,16914 <__alt_data_end+0xffff6914>
   16948:	00000806 	br	1696c <alt_avalon_i2c_master_tx_rx+0x108>
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   1694c:	d9800b17 	ldw	r6,44(sp)
   16950:	df000015 	stw	fp,0(sp)
   16954:	01c00044 	movi	r7,1
   16958:	a00b883a 	mov	r5,r20
   1695c:	8809883a 	mov	r4,r17
   16960:	0015dfc0 	call	15dfc <alt_avalon_i2c_master_receive>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   16964:	10c001c4 	addi	r3,r2,7
   16968:	a8fff52e 	bgeu	r21,r3,16940 <__alt_data_end+0xffff6940>
        break;
      }
    }
    
    return status;
}                                       
   1696c:	dfc00a17 	ldw	ra,40(sp)
   16970:	df000917 	ldw	fp,36(sp)
   16974:	ddc00817 	ldw	r23,32(sp)
   16978:	dd800717 	ldw	r22,28(sp)
   1697c:	dd400617 	ldw	r21,24(sp)
   16980:	dd000517 	ldw	r20,20(sp)
   16984:	dcc00417 	ldw	r19,16(sp)
   16988:	dc800317 	ldw	r18,12(sp)
   1698c:	dc400217 	ldw	r17,8(sp)
   16990:	dc000117 	ldw	r16,4(sp)
   16994:	dec00b04 	addi	sp,sp,44
   16998:	f800283a 	ret

0001699c <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   1699c:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   169a0:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   169a4:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   169a8:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   169ac:	2980072e 	bgeu	r5,r6,169cc <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   169b0:	38c00037 	ldwio	r3,0(r7)
   169b4:	18ffffec 	andhi	r3,r3,65535
   169b8:	183ffc26 	beq	r3,zero,169ac <__alt_data_end+0xffff69ac>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   169bc:	28c00007 	ldb	r3,0(r5)
   169c0:	20c00035 	stwio	r3,0(r4)
   169c4:	29400044 	addi	r5,r5,1
   169c8:	003ff806 	br	169ac <__alt_data_end+0xffff69ac>

  return count;
}
   169cc:	f800283a 	ret

000169d0 <VIC_0_VECTOR_TABLE>:

    .section .text, "xa"
    .align 2
    .globl VIC_0_VECTOR_TABLE
VIC_0_VECTOR_TABLE:
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
   169d0:	0030e03a 	nextpc	et
   169d4:	0016a101 	jmpi	16a10 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
   169e0:	0030e03a 	nextpc	et
   169e4:	0016a101 	jmpi	16a10 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
   169f0:	0030e03a 	nextpc	et
   169f4:	0016a101 	jmpi	16a10 <alt_shadow_non_preemptive_interrupt>
	...
     ALT_SHADOW_NON_PREEMPTIVE_INTERRUPT    16
   16a00:	0030e03a 	nextpc	et
   16a04:	0016a101 	jmpi	16a10 <alt_shadow_non_preemptive_interrupt>
	...

00016a10 <alt_shadow_non_preemptive_interrupt>:
    .section ALTERA_VIC_DRIVER_LINKER_SECTION
    .set nobreak
    .globl alt_shadow_non_preemptive_interrupt
alt_shadow_non_preemptive_interrupt:

    ldw r16, 4(et)               /* load ISR pointer */
   16a10:	c4000117 	ldw	r16,4(et)

     /*
      * Get SP from previous register set.
      */

    rdprs sp, sp, 0
   16a14:	dec00038 	rdprs	sp,sp,0
    rdctl r5, status
    ori   r5, r5, NIOS2_STATUS_PIE_MSK
    wrctl status, r5
#endif

    ldw r4, 8(et)               /* load isr_context */
   16a18:	c1000217 	ldw	r4,8(et)
    callr r16                   /* call ISR */
   16a1c:	803ee83a 	callr	r16
    /*
     * Notify the operating system that interrupt processing is complete.
     */
    ALT_OS_INT_EXIT_ASM

    addi ea, ea, -4             /* instruction that caused exception */
   16a20:	ef7fff04 	addi	ea,ea,-4
    eret
   16a24:	ef80083a 	eret

00016a28 <alt_vic_irq_init>:
{
    alt_u32 i;
    static const int VEC_SIZE_ARRAY[]={4, 8, 16, 32, 64, 128, 256, 512};

    /* Stores the VIC instance to list */
    alt_vic_dev_list[pdev->intr_controller_id] = pdev;
   16a28:	20800117 	ldw	r2,4(r4)
   16a2c:	d0e08e04 	addi	r3,gp,-32200
   16a30:	1085883a 	add	r2,r2,r2
   16a34:	1085883a 	add	r2,r2,r2
   16a38:	1885883a 	add	r2,r3,r2
   16a3c:	11000015 	stw	r4,0(r2)

    /* Disables all interrupts */
    IOWR_ALTERA_VIC_INT_ENABLE_CLR(pdev->base, 0xFFFFFFFF);
   16a40:	20800017 	ldw	r2,0(r4)
   16a44:	00ffffc4 	movi	r3,-1
   16a48:	10c02235 	stwio	r3,136(r2)
   16a4c:	21400704 	addi	r5,r4,28

    /* Initialize INT_CONFIG for all interrupts in this VIC */
    for(i = 0; i < pdev->num_of_intr_ports; i++)
   16a50:	0007883a 	mov	r3,zero
   16a54:	20800217 	ldw	r2,8(r4)
   16a58:	1880092e 	bgeu	r3,r2,16a80 <alt_vic_irq_init+0x58>
    {
        IOWR_ALTERA_VIC_INT_CONFIG(pdev->base, i, pdev->int_config[i]);
   16a5c:	21800017 	ldw	r6,0(r4)
   16a60:	18c5883a 	add	r2,r3,r3
   16a64:	1085883a 	add	r2,r2,r2
   16a68:	3085883a 	add	r2,r6,r2
   16a6c:	29800017 	ldw	r6,0(r5)
   16a70:	11800035 	stwio	r6,0(r2)

    /* Disables all interrupts */
    IOWR_ALTERA_VIC_INT_ENABLE_CLR(pdev->base, 0xFFFFFFFF);

    /* Initialize INT_CONFIG for all interrupts in this VIC */
    for(i = 0; i < pdev->num_of_intr_ports; i++)
   16a74:	18c00044 	addi	r3,r3,1
   16a78:	29400104 	addi	r5,r5,4
   16a7c:	003ff506 	br	16a54 <__alt_data_end+0xffff6a54>
    }

    /* Set vector size and disable/enable daisy-chained input */
    for(i = 0; i < sizeof(VEC_SIZE_ARRAY)/sizeof(VEC_SIZE_ARRAY[0]); i++)
    {
        if(VEC_SIZE_ARRAY[i] == pdev->vec_size)
   16a80:	21800517 	ldw	r6,20(r4)
   16a84:	01c00074 	movhi	r7,1
   16a88:	0005883a 	mov	r2,zero
   16a8c:	39dbc804 	addi	r7,r7,28448
    {
        IOWR_ALTERA_VIC_INT_CONFIG(pdev->base, i, pdev->int_config[i]);
    }

    /* Set vector size and disable/enable daisy-chained input */
    for(i = 0; i < sizeof(VEC_SIZE_ARRAY)/sizeof(VEC_SIZE_ARRAY[0]); i++)
   16a90:	01400204 	movi	r5,8
    {
        if(VEC_SIZE_ARRAY[i] == pdev->vec_size)
   16a94:	1087883a 	add	r3,r2,r2
   16a98:	18c7883a 	add	r3,r3,r3
   16a9c:	19c7883a 	add	r3,r3,r7
   16aa0:	18c00017 	ldw	r3,0(r3)
   16aa4:	1980061e 	bne	r3,r6,16ac0 <alt_vic_irq_init+0x98>
        {
            IOWR_ALTERA_VIC_CONFIG(pdev->base,
   16aa8:	20c00417 	ldw	r3,16(r4)
   16aac:	21400017 	ldw	r5,0(r4)
   16ab0:	180690fa 	slli	r3,r3,3
   16ab4:	1884b03a 	or	r2,r3,r2
   16ab8:	28802835 	stwio	r2,160(r5)
                (i | (pdev->daisy_chain_present << ALTERA_VIC_CONFIG_DC_OFST)));
            break;
   16abc:	00000206 	br	16ac8 <alt_vic_irq_init+0xa0>
    {
        IOWR_ALTERA_VIC_INT_CONFIG(pdev->base, i, pdev->int_config[i]);
    }

    /* Set vector size and disable/enable daisy-chained input */
    for(i = 0; i < sizeof(VEC_SIZE_ARRAY)/sizeof(VEC_SIZE_ARRAY[0]); i++)
   16ac0:	10800044 	addi	r2,r2,1
   16ac4:	117ff31e 	bne	r2,r5,16a94 <__alt_data_end+0xffff6a94>
            break;
        }
    }

    /* Set vector table base address */
    IOWR_ALTERA_VIC_VEC_TBL_BASE(pdev->base,((alt_u32)pdev->vec_addr));
   16ac8:	20800017 	ldw	r2,0(r4)
   16acc:	20c00617 	ldw	r3,24(r4)
   16ad0:	10c02a35 	stwio	r3,168(r2)
   16ad4:	f800283a 	ret

00016ad8 <alt_ic_isr_register>:
{
    alt_vic_dev *pdev;
    alt_u32 *offset;
    alt_irq_context status;

    if(ic_id >= ALT_NUM_EXTERNAL_INTERRUPT_CONTROLLERS)
   16ad8:	20001b1e 	bne	r4,zero,16b48 <alt_ic_isr_register+0x70>
        return -1;

    /* Get VIC handle */
    pdev = alt_vic_dev_list[ic_id];
   16adc:	d0e08e17 	ldw	r3,-32200(gp)

    if(irq < pdev->num_of_intr_ports)
   16ae0:	18800217 	ldw	r2,8(r3)
   16ae4:	2880182e 	bgeu	r5,r2,16b48 <alt_ic_isr_register+0x70>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16ae8:	0011303a 	rdctl	r8,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16aec:	00bfff84 	movi	r2,-2
   16af0:	4088703a 	and	r4,r8,r2
   16af4:	2001703a 	wrctl	status,r4
    {
        /* Disable all interrupts */
        status = alt_irq_disable_all ();

        /* Get table offset */
        offset = pdev->vec_addr + (irq * pdev->vec_size);
   16af8:	19000517 	ldw	r4,20(r3)
   16afc:	1a400617 	ldw	r9,24(r3)
   16b00:	2909383a 	mul	r4,r5,r4
   16b04:	4909883a 	add	r4,r9,r4

        /* Write ISR and ISR context to vector table */
        ALT_VECTOR_TABLE_WRITE(offset+2, isr);
   16b08:	21800215 	stw	r6,8(r4)
        ALT_VECTOR_TABLE_WRITE(offset+3, isr_context);
   16b0c:	21c00315 	stw	r7,12(r4)
   16b10:	19000017 	ldw	r4,0(r3)
   16b14:	00c00044 	movi	r3,1

        if(isr)
        {
            /* Enable this IRQ on the VIC */
            IOWR_ALTERA_VIC_INT_ENABLE_SET(pdev->base, 1 << irq);
   16b18:	1946983a 	sll	r3,r3,r5

        /* Write ISR and ISR context to vector table */
        ALT_VECTOR_TABLE_WRITE(offset+2, isr);
        ALT_VECTOR_TABLE_WRITE(offset+3, isr_context);

        if(isr)
   16b1c:	30000226 	beq	r6,zero,16b28 <alt_ic_isr_register+0x50>
        {
            /* Enable this IRQ on the VIC */
            IOWR_ALTERA_VIC_INT_ENABLE_SET(pdev->base, 1 << irq);
   16b20:	20c02135 	stwio	r3,132(r4)
   16b24:	00000106 	br	16b2c <alt_ic_isr_register+0x54>
        }
        else
        {
            /* Disable this IRQ on the VIC */
            IOWR_ALTERA_VIC_INT_ENABLE_CLR(pdev->base, 1 << irq);
   16b28:	20c02235 	stwio	r3,136(r4)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
   16b2c:	0007303a 	rdctl	r3,status
  
  status &= ~NIOS2_STATUS_PIE_MSK;
   16b30:	1884703a 	and	r2,r3,r2
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
   16b34:	4200004c 	andi	r8,r8,1
   16b38:	4084b03a 	or	r2,r8,r2
   16b3c:	1001703a 	wrctl	status,r2
        }

        /* Re-enable all interrupts */
        alt_irq_enable_all(status);

        return 0;
   16b40:	0005883a 	mov	r2,zero
   16b44:	f800283a 	ret
    alt_vic_dev *pdev;
    alt_u32 *offset;
    alt_irq_context status;

    if(ic_id >= ALT_NUM_EXTERNAL_INTERRUPT_CONTROLLERS)
        return -1;
   16b48:	00bfffc4 	movi	r2,-1

        return 0;
    }

    return -1;
}
   16b4c:	f800283a 	ret

00016b50 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   16b50:	01420034 	movhi	r5,2048
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   16b54:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   16b58:	297fffc4 	addi	r5,r5,-1
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   16b5c:	dc000015 	stw	r16,0(sp)
   16b60:	dfc00115 	stw	ra,4(sp)
   16b64:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   16b68:	0014d9c0 	call	14d9c <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   16b6c:	10000e26 	beq	r2,zero,16ba8 <alt_busy_sleep+0x58>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   16b70:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   16b74:	013e0034 	movhi	r4,63488
   16b78:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   16b7c:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   16b80:	21000044 	addi	r4,r4,1
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   16b84:	297fffc4 	addi	r5,r5,-1
   16b88:	283ffe1e 	bne	r5,zero,16b84 <__alt_data_end+0xffff6b84>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   16b8c:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   16b90:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   16b94:	18bffb16 	blt	r3,r2,16b84 <__alt_data_end+0xffff6b84>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   16b98:	8020913a 	slli	r16,r16,4
   16b9c:	843fffc4 	addi	r16,r16,-1
   16ba0:	803ffe1e 	bne	r16,zero,16b9c <__alt_data_end+0xffff6b9c>
   16ba4:	00000306 	br	16bb4 <alt_busy_sleep+0x64>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   16ba8:	8020913a 	slli	r16,r16,4
   16bac:	843fffc4 	addi	r16,r16,-1
   16bb0:	043ffe16 	blt	zero,r16,16bac <__alt_data_end+0xffff6bac>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
   16bb4:	0005883a 	mov	r2,zero
   16bb8:	dfc00117 	ldw	ra,4(sp)
   16bbc:	dc000017 	ldw	r16,0(sp)
   16bc0:	dec00204 	addi	sp,sp,8
   16bc4:	f800283a 	ret

00016bc8 <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   16bc8:	0005883a 	mov	r2,zero
   16bcc:	00c20004 	movi	r3,2048
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   16bd0:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   16bd4:	10800804 	addi	r2,r2,32
   16bd8:	10fffd1e 	bne	r2,r3,16bd0 <__alt_data_end+0xffff6bd0>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   16bdc:	f800283a 	ret

00016be0 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   16be0:	20000226 	beq	r4,zero,16bec <alt_dev_llist_insert+0xc>
   16be4:	20800217 	ldw	r2,8(r4)
   16be8:	1000101e 	bne	r2,zero,16c2c <alt_dev_llist_insert+0x4c>
   16bec:	d0a00617 	ldw	r2,-32744(gp)
   16bf0:	10000926 	beq	r2,zero,16c18 <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   16bf4:	deffff04 	addi	sp,sp,-4
   16bf8:	dfc00015 	stw	ra,0(sp)
   16bfc:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   16c00:	00c00584 	movi	r3,22
   16c04:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   16c08:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   16c0c:	dfc00017 	ldw	ra,0(sp)
   16c10:	dec00104 	addi	sp,sp,4
   16c14:	f800283a 	ret
   16c18:	d0a08a04 	addi	r2,gp,-32216
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   16c1c:	00c00584 	movi	r3,22
   16c20:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   16c24:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   16c28:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
   16c2c:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   16c30:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   16c34:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   16c38:	28800017 	ldw	r2,0(r5)
   16c3c:	11000115 	stw	r4,4(r2)
  list->next           = entry;
   16c40:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
   16c44:	0005883a 	mov	r2,zero
   16c48:	f800283a 	ret

00016c4c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   16c4c:	defffb04 	addi	sp,sp,-20
   16c50:	dcc00315 	stw	r19,12(sp)
   16c54:	dc800215 	stw	r18,8(sp)
   16c58:	dc400115 	stw	r17,4(sp)
   16c5c:	dc000015 	stw	r16,0(sp)
   16c60:	dfc00415 	stw	ra,16(sp)
   16c64:	2027883a 	mov	r19,r4
   16c68:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
   16c6c:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
   16c70:	0014fac0 	call	14fac <strlen>
   16c74:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   16c78:	84400726 	beq	r16,r17,16c98 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   16c7c:	81000217 	ldw	r4,8(r16)
   16c80:	900d883a 	mov	r6,r18
   16c84:	980b883a 	mov	r5,r19
   16c88:	0016d040 	call	16d04 <memcmp>
   16c8c:	10000426 	beq	r2,zero,16ca0 <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   16c90:	84000017 	ldw	r16,0(r16)
   16c94:	003ff806 	br	16c78 <__alt_data_end+0xffff6c78>
  }
  
  /* No match found */
  
  return NULL;
   16c98:	0005883a 	mov	r2,zero
   16c9c:	00000106 	br	16ca4 <alt_find_dev+0x58>
   16ca0:	8005883a 	mov	r2,r16
}
   16ca4:	dfc00417 	ldw	ra,16(sp)
   16ca8:	dcc00317 	ldw	r19,12(sp)
   16cac:	dc800217 	ldw	r18,8(sp)
   16cb0:	dc400117 	ldw	r17,4(sp)
   16cb4:	dc000017 	ldw	r16,0(sp)
   16cb8:	dec00504 	addi	sp,sp,20
   16cbc:	f800283a 	ret

00016cc0 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   16cc0:	01440004 	movi	r5,4096
   16cc4:	0009883a 	mov	r4,zero
   16cc8:	0016ccc1 	jmpi	16ccc <alt_icache_flush>

00016ccc <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
   16ccc:	00840004 	movi	r2,4096
   16cd0:	1140012e 	bgeu	r2,r5,16cd8 <alt_icache_flush+0xc>
   16cd4:	100b883a 	mov	r5,r2
   16cd8:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   16cdc:	2005883a 	mov	r2,r4
   16ce0:	1140032e 	bgeu	r2,r5,16cf0 <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   16ce4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   16ce8:	10800804 	addi	r2,r2,32
   16cec:	003ffc06 	br	16ce0 <__alt_data_end+0xffff6ce0>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   16cf0:	210007cc 	andi	r4,r4,31
   16cf4:	20000126 	beq	r4,zero,16cfc <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   16cf8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   16cfc:	0000203a 	flushp
   16d00:	f800283a 	ret

00016d04 <memcmp>:
   16d04:	218d883a 	add	r6,r4,r6
   16d08:	21800826 	beq	r4,r6,16d2c <memcmp+0x28>
   16d0c:	20800003 	ldbu	r2,0(r4)
   16d10:	28c00003 	ldbu	r3,0(r5)
   16d14:	10c00226 	beq	r2,r3,16d20 <memcmp+0x1c>
   16d18:	10c5c83a 	sub	r2,r2,r3
   16d1c:	f800283a 	ret
   16d20:	21000044 	addi	r4,r4,1
   16d24:	29400044 	addi	r5,r5,1
   16d28:	003ff706 	br	16d08 <__alt_data_end+0xffff6d08>
   16d2c:	0005883a 	mov	r2,zero
   16d30:	f800283a 	ret
