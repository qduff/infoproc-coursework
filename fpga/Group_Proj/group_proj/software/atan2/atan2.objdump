
atan2.elf:     file format elf32-littlenios2
atan2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010020

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x000012dc memsz 0x000012dc flags r-x
    LOAD off    0x000022fc vaddr 0x000112fc paddr 0x000113ec align 2**12
         filesz 0x000000f0 memsz 0x000000f0 flags rw-
    LOAD off    0x000024dc vaddr 0x000114dc paddr 0x000114dc align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00010020  00010020  000023ec  2**0
                  CONTENTS
  2 .text         000011bc  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000120  000111dc  000111dc  000021dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f0  000112fc  000113ec  000022fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  000114dc  000114dc  000024dc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  000114ec  000114ec  000023ec  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000023ec  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000360  00000000  00000000  00002410  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00003eb6  00000000  00000000  00002770  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000017d1  00000000  00000000  00006626  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001a01  00000000  00000000  00007df7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000480  00000000  00000000  000097f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000011a8  00000000  00000000  00009c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001c80  00000000  00000000  0000ae20  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0000caa0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002d0  00000000  00000000  0000cae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000df11  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0000df14  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000df17  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000df18  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0000df19  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0000df22  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0000df2b  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000007  00000000  00000000  0000df34  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002c  00000000  00000000  0000df3b  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     00090515  00000000  00000000  0000df67  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010020 l    d  .text	00000000 .text
000111dc l    d  .rodata	00000000 .rodata
000112fc l    d  .rwdata	00000000 .rwdata
000114dc l    d  .bss	00000000 .bss
000114ec l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../atan2_bsp//obj/HAL/src/crt0.o
00010058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
000106b0 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
000112fc l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00011024 g     F .text	0000002c alt_main
000113ec g       *ABS*	00000000 __flash_rwdata_start
00010664 g     F .text	0000004c printf
0001052c g     F .text	00000070 .hidden __fixsfsi
00011050 g     F .text	00000038 alt_putstr
000113e4 g     O .rwdata	00000004 jtag_uart
000111d4 g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
000114dc g     O .bss	00000004 errno
000114e4 g     O .bss	00000004 alt_argv
000193dc g       *ABS*	00000000 _gp
00011088 g     F .text	00000004 usleep
00010628 g     F .text	0000003c _printf_r
00010e88 g     F .text	00000064 .hidden __udivsi3
000113dc g     O .rwdata	00000004 _global_impure_ptr
000114ec g       *ABS*	00000000 __bss_end
000111cc g     F .text	00000004 alt_dcache_flush_all
000113ec g       *ABS*	00000000 __ram_rwdata_end
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
0001108c g     F .text	00000060 write
000112fc g       *ABS*	00000000 __ram_rodata_end
00010eec g     F .text	00000058 .hidden __umodsi3
000114ec g       *ABS*	00000000 end
00020000 g       *ABS*	00000000 __alt_stack_pointer
0001059c g     F .text	00000064 .hidden __clzsi2
00011110 g     F .text	00000034 altera_avalon_jtag_uart_write
0001071c g     F .text	0000052c ___vfprintf_internal_r
00010020 g     F .text	0000003c _start
0001110c g     F .text	00000004 alt_sys_init
00010600 g     F .text	00000028 .hidden __mulsi3
000112fc g       *ABS*	00000000 __ram_rwdata_start
000111dc g       *ABS*	00000000 __ram_rodata_start
00011144 g     F .text	00000088 alt_busy_sleep
000114ec g       *ABS*	00000000 __alt_stack_base
00010c64 g     F .text	000000b8 __sfvwrite_small_dev
000114dc g       *ABS*	00000000 __bss_start
0001005c g     F .text	000000a0 main
000114e0 g     O .bss	00000004 alt_envp
000113e8 g     O .rwdata	00000004 alt_errno
00010d90 g     F .text	00000084 .hidden __divsi3
000100fc g     F .text	00000430 .hidden __mulsf3
000111dc g       *ABS*	00000000 __flash_rodata_start
000110ec g     F .text	00000020 alt_irq_init
000111fc g     O .rodata	00000100 .hidden __clz_tab
00010d38 g     F .text	00000058 _write_r
000113e0 g     O .rwdata	00000004 _impure_ptr
000114e8 g     O .bss	00000004 alt_argc
00010020 g       *ABS*	00000000 __ram_exceptions_start
000113ec g       *ABS*	00000000 _edata
000114ec g       *ABS*	00000000 _end
00010020 g       *ABS*	00000000 __ram_exceptions_end
00010e14 g     F .text	00000074 .hidden __modsi3
00020000 g       *ABS*	00000000 __alt_data_end
0001000c g       .entry	00000000 _exit
00010d1c g     F .text	0000001c strlen
000111d0 g     F .text	00000004 alt_icache_flush_all
00010c48 g     F .text	0000001c __vfprintf_internal
00010f44 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08400814 	ori	at,at,32
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .text:

00010020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10020:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1002c:	d6a4f714 	ori	gp,gp,37852
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10030:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10034:	10853714 	ori	r2,r2,5340

    movhi r3, %hi(__bss_end)
   10038:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1003c:	18c53b14 	ori	r3,r3,5356

    beq r2, r3, 1f
   10040:	10c00326 	beq	r2,r3,10050 <_start+0x30>

0:
    stw zero, (r2)
   10044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1004c:	10fffd36 	bltu	r2,r3,10044 <__alt_data_end+0xffff0044>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10050:	0010f440 	call	10f44 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10054:	00110240 	call	11024 <alt_main>

00010058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10058:	003fff06 	br	10058 <__alt_data_end+0xffff0058>

0001005c <main>:
#include <math.h>


int main()
{
	alt_putstr("Hello from Nios II!\n");
   1005c:	01000074 	movhi	r4,1
#include "altera_avalon_pio_regs.h"
#include <math.h>


int main()
{
   10060:	defffe04 	addi	sp,sp,-8
	alt_putstr("Hello from Nios II!\n");
   10064:	21047704 	addi	r4,r4,4572
#include "altera_avalon_pio_regs.h"
#include <math.h>


int main()
{
   10068:	dfc00115 	stw	ra,4(sp)
   1006c:	dc000015 	stw	r16,0(sp)
	alt_putstr("Hello from Nios II!\n");
   10070:	00110500 	call	11050 <alt_putstr>

	usleep(2000000);
   10074:	010007f4 	movhi	r4,31
   10078:	21212004 	addi	r4,r4,-31616
   1007c:	00110880 	call	11088 <usleep>


	alt_u32 old = IORD_ALTERA_AVALON_PIO_DATA(IN_L_BASE);
   10080:	008000b4 	movhi	r2,2
   10084:	10843004 	addi	r2,r2,4288
   10088:	14000037 	ldwio	r16,0(r2)

	float a = 0.5f;
	float b = 1.0f;
	alt_u32 a_param = *(alt_u32*) &a;
	alt_u32 b_param = *(alt_u32*) &b;
	IOWR_ALTERA_AVALON_PIO_DATA(ATAN2_A_BASE, a_param);
   1008c:	00c000b4 	movhi	r3,2
   10090:	18c40804 	addi	r3,r3,4128
   10094:	010fc034 	movhi	r4,16128
   10098:	19000035 	stwio	r4,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(ATAN2_B_BASE, b_param);
   1009c:	00c000b4 	movhi	r3,2
   100a0:	18c40404 	addi	r3,r3,4112
   100a4:	010fe034 	movhi	r4,16256
   100a8:	19000035 	stwio	r4,0(r3)
	float retFloat;
	alt_u32 ret = IORD_ALTERA_AVALON_PIO_DATA(ATAN2_Q_BASE);
   100ac:	00c000b4 	movhi	r3,2
   100b0:	18c40004 	addi	r3,r3,4096
   100b4:	19000037 	ldwio	r4,0(r3)
	retFloat = *(float*) &ret;

	int new = IORD_ALTERA_AVALON_PIO_DATA(IN_L_BASE);
   100b8:	10800037 	ldwio	r2,0(r2)
	int dt = new - old;
	old = new;
	printf("%d, %d\n", (int) (retFloat * 10000.f), dt);
   100bc:	01518734 	movhi	r5,17948
   100c0:	29500004 	addi	r5,r5,16384
   100c4:	1421c83a 	sub	r16,r2,r16
   100c8:	00100fc0 	call	100fc <__mulsf3>
   100cc:	1009883a 	mov	r4,r2
   100d0:	001052c0 	call	1052c <__fixsfsi>
   100d4:	01000074 	movhi	r4,1
   100d8:	800d883a 	mov	r6,r16
   100dc:	100b883a 	mov	r5,r2
   100e0:	21047d04 	addi	r4,r4,4596
   100e4:	00106640 	call	10664 <printf>



	return 0;
}
   100e8:	0005883a 	mov	r2,zero
   100ec:	dfc00117 	ldw	ra,4(sp)
   100f0:	dc000017 	ldw	r16,0(sp)
   100f4:	dec00204 	addi	sp,sp,8
   100f8:	f800283a 	ret

000100fc <__mulsf3>:
   100fc:	defff504 	addi	sp,sp,-44
   10100:	dc000115 	stw	r16,4(sp)
   10104:	2020d5fa 	srli	r16,r4,23
   10108:	dd400615 	stw	r21,24(sp)
   1010c:	202ad7fa 	srli	r21,r4,31
   10110:	dc800315 	stw	r18,12(sp)
   10114:	04802034 	movhi	r18,128
   10118:	df000915 	stw	fp,36(sp)
   1011c:	dd000515 	stw	r20,20(sp)
   10120:	94bfffc4 	addi	r18,r18,-1
   10124:	dfc00a15 	stw	ra,40(sp)
   10128:	ddc00815 	stw	r23,32(sp)
   1012c:	dd800715 	stw	r22,28(sp)
   10130:	dcc00415 	stw	r19,16(sp)
   10134:	dc400215 	stw	r17,8(sp)
   10138:	84003fcc 	andi	r16,r16,255
   1013c:	9124703a 	and	r18,r18,r4
   10140:	a829883a 	mov	r20,r21
   10144:	af003fcc 	andi	fp,r21,255
   10148:	80005426 	beq	r16,zero,1029c <__mulsf3+0x1a0>
   1014c:	00803fc4 	movi	r2,255
   10150:	80802f26 	beq	r16,r2,10210 <__mulsf3+0x114>
   10154:	91002034 	orhi	r4,r18,128
   10158:	202490fa 	slli	r18,r4,3
   1015c:	843fe044 	addi	r16,r16,-127
   10160:	0023883a 	mov	r17,zero
   10164:	002f883a 	mov	r23,zero
   10168:	2804d5fa 	srli	r2,r5,23
   1016c:	282cd7fa 	srli	r22,r5,31
   10170:	01002034 	movhi	r4,128
   10174:	213fffc4 	addi	r4,r4,-1
   10178:	10803fcc 	andi	r2,r2,255
   1017c:	2166703a 	and	r19,r4,r5
   10180:	b1803fcc 	andi	r6,r22,255
   10184:	10004c26 	beq	r2,zero,102b8 <__mulsf3+0x1bc>
   10188:	00c03fc4 	movi	r3,255
   1018c:	10c04726 	beq	r2,r3,102ac <__mulsf3+0x1b0>
   10190:	99002034 	orhi	r4,r19,128
   10194:	202690fa 	slli	r19,r4,3
   10198:	10bfe044 	addi	r2,r2,-127
   1019c:	0007883a 	mov	r3,zero
   101a0:	80a1883a 	add	r16,r16,r2
   101a4:	010003c4 	movi	r4,15
   101a8:	1c44b03a 	or	r2,r3,r17
   101ac:	b56af03a 	xor	r21,r22,r21
   101b0:	81c00044 	addi	r7,r16,1
   101b4:	20806b36 	bltu	r4,r2,10364 <__mulsf3+0x268>
   101b8:	100490ba 	slli	r2,r2,2
   101bc:	01000074 	movhi	r4,1
   101c0:	21007404 	addi	r4,r4,464
   101c4:	1105883a 	add	r2,r2,r4
   101c8:	10800017 	ldw	r2,0(r2)
   101cc:	1000683a 	jmp	r2
   101d0:	00010364 	muli	zero,zero,1037
   101d4:	00010224 	muli	zero,zero,1032
   101d8:	00010224 	muli	zero,zero,1032
   101dc:	00010220 	cmpeqi	zero,zero,1032
   101e0:	00010348 	cmpgei	zero,zero,1037
   101e4:	00010348 	cmpgei	zero,zero,1037
   101e8:	00010334 	movhi	zero,1036
   101ec:	00010220 	cmpeqi	zero,zero,1032
   101f0:	00010348 	cmpgei	zero,zero,1037
   101f4:	00010334 	movhi	zero,1036
   101f8:	00010348 	cmpgei	zero,zero,1037
   101fc:	00010220 	cmpeqi	zero,zero,1032
   10200:	00010354 	movui	zero,1037
   10204:	00010354 	movui	zero,1037
   10208:	00010354 	movui	zero,1037
   1020c:	00010464 	muli	zero,zero,1041
   10210:	90003b1e 	bne	r18,zero,10300 <__mulsf3+0x204>
   10214:	04400204 	movi	r17,8
   10218:	05c00084 	movi	r23,2
   1021c:	003fd206 	br	10168 <__alt_data_end+0xffff0168>
   10220:	302b883a 	mov	r21,r6
   10224:	00800084 	movi	r2,2
   10228:	18802626 	beq	r3,r2,102c4 <__mulsf3+0x1c8>
   1022c:	008000c4 	movi	r2,3
   10230:	1880b826 	beq	r3,r2,10514 <__mulsf3+0x418>
   10234:	00800044 	movi	r2,1
   10238:	1880af1e 	bne	r3,r2,104f8 <__mulsf3+0x3fc>
   1023c:	a829883a 	mov	r20,r21
   10240:	0007883a 	mov	r3,zero
   10244:	0009883a 	mov	r4,zero
   10248:	18803fcc 	andi	r2,r3,255
   1024c:	100695fa 	slli	r3,r2,23
   10250:	a0803fcc 	andi	r2,r20,255
   10254:	100a97fa 	slli	r5,r2,31
   10258:	00802034 	movhi	r2,128
   1025c:	10bfffc4 	addi	r2,r2,-1
   10260:	2084703a 	and	r2,r4,r2
   10264:	10c4b03a 	or	r2,r2,r3
   10268:	1144b03a 	or	r2,r2,r5
   1026c:	dfc00a17 	ldw	ra,40(sp)
   10270:	df000917 	ldw	fp,36(sp)
   10274:	ddc00817 	ldw	r23,32(sp)
   10278:	dd800717 	ldw	r22,28(sp)
   1027c:	dd400617 	ldw	r21,24(sp)
   10280:	dd000517 	ldw	r20,20(sp)
   10284:	dcc00417 	ldw	r19,16(sp)
   10288:	dc800317 	ldw	r18,12(sp)
   1028c:	dc400217 	ldw	r17,8(sp)
   10290:	dc000117 	ldw	r16,4(sp)
   10294:	dec00b04 	addi	sp,sp,44
   10298:	f800283a 	ret
   1029c:	90000d1e 	bne	r18,zero,102d4 <__mulsf3+0x1d8>
   102a0:	04400104 	movi	r17,4
   102a4:	05c00044 	movi	r23,1
   102a8:	003faf06 	br	10168 <__alt_data_end+0xffff0168>
   102ac:	9806c03a 	cmpne	r3,r19,zero
   102b0:	18c00084 	addi	r3,r3,2
   102b4:	003fba06 	br	101a0 <__alt_data_end+0xffff01a0>
   102b8:	9800141e 	bne	r19,zero,1030c <__mulsf3+0x210>
   102bc:	00c00044 	movi	r3,1
   102c0:	003fb706 	br	101a0 <__alt_data_end+0xffff01a0>
   102c4:	a829883a 	mov	r20,r21
   102c8:	00ffffc4 	movi	r3,-1
   102cc:	0009883a 	mov	r4,zero
   102d0:	003fdd06 	br	10248 <__alt_data_end+0xffff0248>
   102d4:	9009883a 	mov	r4,r18
   102d8:	d9400015 	stw	r5,0(sp)
   102dc:	001059c0 	call	1059c <__clzsi2>
   102e0:	10fffec4 	addi	r3,r2,-5
   102e4:	10801d84 	addi	r2,r2,118
   102e8:	90e4983a 	sll	r18,r18,r3
   102ec:	00a1c83a 	sub	r16,zero,r2
   102f0:	0023883a 	mov	r17,zero
   102f4:	002f883a 	mov	r23,zero
   102f8:	d9400017 	ldw	r5,0(sp)
   102fc:	003f9a06 	br	10168 <__alt_data_end+0xffff0168>
   10300:	04400304 	movi	r17,12
   10304:	05c000c4 	movi	r23,3
   10308:	003f9706 	br	10168 <__alt_data_end+0xffff0168>
   1030c:	9809883a 	mov	r4,r19
   10310:	d9800015 	stw	r6,0(sp)
   10314:	001059c0 	call	1059c <__clzsi2>
   10318:	10fffec4 	addi	r3,r2,-5
   1031c:	10801d84 	addi	r2,r2,118
   10320:	98e6983a 	sll	r19,r19,r3
   10324:	0085c83a 	sub	r2,zero,r2
   10328:	0007883a 	mov	r3,zero
   1032c:	d9800017 	ldw	r6,0(sp)
   10330:	003f9b06 	br	101a0 <__alt_data_end+0xffff01a0>
   10334:	01002034 	movhi	r4,128
   10338:	0029883a 	mov	r20,zero
   1033c:	213fffc4 	addi	r4,r4,-1
   10340:	00ffffc4 	movi	r3,-1
   10344:	003fc006 	br	10248 <__alt_data_end+0xffff0248>
   10348:	9027883a 	mov	r19,r18
   1034c:	b807883a 	mov	r3,r23
   10350:	003fb406 	br	10224 <__alt_data_end+0xffff0224>
   10354:	9027883a 	mov	r19,r18
   10358:	e02b883a 	mov	r21,fp
   1035c:	b807883a 	mov	r3,r23
   10360:	003fb006 	br	10224 <__alt_data_end+0xffff0224>
   10364:	9028d43a 	srli	r20,r18,16
   10368:	982cd43a 	srli	r22,r19,16
   1036c:	94bfffcc 	andi	r18,r18,65535
   10370:	9cffffcc 	andi	r19,r19,65535
   10374:	980b883a 	mov	r5,r19
   10378:	9009883a 	mov	r4,r18
   1037c:	d9c00015 	stw	r7,0(sp)
   10380:	00106000 	call	10600 <__mulsi3>
   10384:	a00b883a 	mov	r5,r20
   10388:	9809883a 	mov	r4,r19
   1038c:	1023883a 	mov	r17,r2
   10390:	00106000 	call	10600 <__mulsi3>
   10394:	a009883a 	mov	r4,r20
   10398:	b00b883a 	mov	r5,r22
   1039c:	1027883a 	mov	r19,r2
   103a0:	00106000 	call	10600 <__mulsi3>
   103a4:	b00b883a 	mov	r5,r22
   103a8:	9009883a 	mov	r4,r18
   103ac:	1029883a 	mov	r20,r2
   103b0:	00106000 	call	10600 <__mulsi3>
   103b4:	8806d43a 	srli	r3,r17,16
   103b8:	14c5883a 	add	r2,r2,r19
   103bc:	d9c00017 	ldw	r7,0(sp)
   103c0:	1885883a 	add	r2,r3,r2
   103c4:	14c0022e 	bgeu	r2,r19,103d0 <__mulsf3+0x2d4>
   103c8:	00c00074 	movhi	r3,1
   103cc:	a0e9883a 	add	r20,r20,r3
   103d0:	1026943a 	slli	r19,r2,16
   103d4:	8c7fffcc 	andi	r17,r17,65535
   103d8:	1004d43a 	srli	r2,r2,16
   103dc:	9c63883a 	add	r17,r19,r17
   103e0:	882691ba 	slli	r19,r17,6
   103e4:	1505883a 	add	r2,r2,r20
   103e8:	8822d6ba 	srli	r17,r17,26
   103ec:	100891ba 	slli	r4,r2,6
   103f0:	9826c03a 	cmpne	r19,r19,zero
   103f4:	9c62b03a 	or	r17,r19,r17
   103f8:	8926b03a 	or	r19,r17,r4
   103fc:	9882002c 	andhi	r2,r19,2048
   10400:	10000426 	beq	r2,zero,10414 <__mulsf3+0x318>
   10404:	9804d07a 	srli	r2,r19,1
   10408:	9900004c 	andi	r4,r19,1
   1040c:	3821883a 	mov	r16,r7
   10410:	1126b03a 	or	r19,r2,r4
   10414:	80c01fc4 	addi	r3,r16,127
   10418:	00c0210e 	bge	zero,r3,104a0 <__mulsf3+0x3a4>
   1041c:	988001cc 	andi	r2,r19,7
   10420:	10000426 	beq	r2,zero,10434 <__mulsf3+0x338>
   10424:	988003cc 	andi	r2,r19,15
   10428:	01000104 	movi	r4,4
   1042c:	11000126 	beq	r2,r4,10434 <__mulsf3+0x338>
   10430:	9927883a 	add	r19,r19,r4
   10434:	9882002c 	andhi	r2,r19,2048
   10438:	10000426 	beq	r2,zero,1044c <__mulsf3+0x350>
   1043c:	00be0034 	movhi	r2,63488
   10440:	10bfffc4 	addi	r2,r2,-1
   10444:	80c02004 	addi	r3,r16,128
   10448:	98a6703a 	and	r19,r19,r2
   1044c:	00803f84 	movi	r2,254
   10450:	10ff9c16 	blt	r2,r3,102c4 <__alt_data_end+0xffff02c4>
   10454:	980891ba 	slli	r4,r19,6
   10458:	a829883a 	mov	r20,r21
   1045c:	2008d27a 	srli	r4,r4,9
   10460:	003f7906 	br	10248 <__alt_data_end+0xffff0248>
   10464:	9080102c 	andhi	r2,r18,64
   10468:	10000826 	beq	r2,zero,1048c <__mulsf3+0x390>
   1046c:	9880102c 	andhi	r2,r19,64
   10470:	1000061e 	bne	r2,zero,1048c <__mulsf3+0x390>
   10474:	00802034 	movhi	r2,128
   10478:	99001034 	orhi	r4,r19,64
   1047c:	10bfffc4 	addi	r2,r2,-1
   10480:	b029883a 	mov	r20,r22
   10484:	2088703a 	and	r4,r4,r2
   10488:	003fad06 	br	10340 <__alt_data_end+0xffff0340>
   1048c:	00802034 	movhi	r2,128
   10490:	91001034 	orhi	r4,r18,64
   10494:	10bfffc4 	addi	r2,r2,-1
   10498:	2088703a 	and	r4,r4,r2
   1049c:	003fa806 	br	10340 <__alt_data_end+0xffff0340>
   104a0:	00800044 	movi	r2,1
   104a4:	10c7c83a 	sub	r3,r2,r3
   104a8:	008006c4 	movi	r2,27
   104ac:	10ff6316 	blt	r2,r3,1023c <__alt_data_end+0xffff023c>
   104b0:	00800804 	movi	r2,32
   104b4:	10c5c83a 	sub	r2,r2,r3
   104b8:	9884983a 	sll	r2,r19,r2
   104bc:	98c6d83a 	srl	r3,r19,r3
   104c0:	1004c03a 	cmpne	r2,r2,zero
   104c4:	1884b03a 	or	r2,r3,r2
   104c8:	10c001cc 	andi	r3,r2,7
   104cc:	18000426 	beq	r3,zero,104e0 <__mulsf3+0x3e4>
   104d0:	10c003cc 	andi	r3,r2,15
   104d4:	01000104 	movi	r4,4
   104d8:	19000126 	beq	r3,r4,104e0 <__mulsf3+0x3e4>
   104dc:	1105883a 	add	r2,r2,r4
   104e0:	10c1002c 	andhi	r3,r2,1024
   104e4:	18000626 	beq	r3,zero,10500 <__mulsf3+0x404>
   104e8:	a829883a 	mov	r20,r21
   104ec:	00c00044 	movi	r3,1
   104f0:	0009883a 	mov	r4,zero
   104f4:	003f5406 	br	10248 <__alt_data_end+0xffff0248>
   104f8:	3821883a 	mov	r16,r7
   104fc:	003fc506 	br	10414 <__alt_data_end+0xffff0414>
   10500:	100491ba 	slli	r2,r2,6
   10504:	a829883a 	mov	r20,r21
   10508:	0007883a 	mov	r3,zero
   1050c:	1008d27a 	srli	r4,r2,9
   10510:	003f4d06 	br	10248 <__alt_data_end+0xffff0248>
   10514:	00802034 	movhi	r2,128
   10518:	99001034 	orhi	r4,r19,64
   1051c:	10bfffc4 	addi	r2,r2,-1
   10520:	a829883a 	mov	r20,r21
   10524:	2088703a 	and	r4,r4,r2
   10528:	003f8506 	br	10340 <__alt_data_end+0xffff0340>

0001052c <__fixsfsi>:
   1052c:	200ad5fa 	srli	r5,r4,23
   10530:	00c02034 	movhi	r3,128
   10534:	18ffffc4 	addi	r3,r3,-1
   10538:	29403fcc 	andi	r5,r5,255
   1053c:	00801f84 	movi	r2,126
   10540:	1906703a 	and	r3,r3,r4
   10544:	2008d7fa 	srli	r4,r4,31
   10548:	11400e0e 	bge	r2,r5,10584 <__fixsfsi+0x58>
   1054c:	00802744 	movi	r2,157
   10550:	11400816 	blt	r2,r5,10574 <__fixsfsi+0x48>
   10554:	00802544 	movi	r2,149
   10558:	18c02034 	orhi	r3,r3,128
   1055c:	11400b0e 	bge	r2,r5,1058c <__fixsfsi+0x60>
   10560:	28bfda84 	addi	r2,r5,-150
   10564:	1884983a 	sll	r2,r3,r2
   10568:	20000726 	beq	r4,zero,10588 <__fixsfsi+0x5c>
   1056c:	0085c83a 	sub	r2,zero,r2
   10570:	f800283a 	ret
   10574:	00a00034 	movhi	r2,32768
   10578:	10bfffc4 	addi	r2,r2,-1
   1057c:	2085883a 	add	r2,r4,r2
   10580:	f800283a 	ret
   10584:	0005883a 	mov	r2,zero
   10588:	f800283a 	ret
   1058c:	00802584 	movi	r2,150
   10590:	1145c83a 	sub	r2,r2,r5
   10594:	1884d83a 	srl	r2,r3,r2
   10598:	003ff306 	br	10568 <__alt_data_end+0xffff0568>

0001059c <__clzsi2>:
   1059c:	00bfffd4 	movui	r2,65535
   105a0:	11000536 	bltu	r2,r4,105b8 <__clzsi2+0x1c>
   105a4:	00803fc4 	movi	r2,255
   105a8:	11000f36 	bltu	r2,r4,105e8 <__clzsi2+0x4c>
   105ac:	00800804 	movi	r2,32
   105b0:	0007883a 	mov	r3,zero
   105b4:	00000506 	br	105cc <__clzsi2+0x30>
   105b8:	00804034 	movhi	r2,256
   105bc:	10bfffc4 	addi	r2,r2,-1
   105c0:	11000c2e 	bgeu	r2,r4,105f4 <__clzsi2+0x58>
   105c4:	00800204 	movi	r2,8
   105c8:	00c00604 	movi	r3,24
   105cc:	20c8d83a 	srl	r4,r4,r3
   105d0:	00c00074 	movhi	r3,1
   105d4:	18c47f04 	addi	r3,r3,4604
   105d8:	1909883a 	add	r4,r3,r4
   105dc:	20c00003 	ldbu	r3,0(r4)
   105e0:	10c5c83a 	sub	r2,r2,r3
   105e4:	f800283a 	ret
   105e8:	00800604 	movi	r2,24
   105ec:	00c00204 	movi	r3,8
   105f0:	003ff606 	br	105cc <__alt_data_end+0xffff05cc>
   105f4:	00800404 	movi	r2,16
   105f8:	1007883a 	mov	r3,r2
   105fc:	003ff306 	br	105cc <__alt_data_end+0xffff05cc>

00010600 <__mulsi3>:
   10600:	0005883a 	mov	r2,zero
   10604:	20000726 	beq	r4,zero,10624 <__mulsi3+0x24>
   10608:	20c0004c 	andi	r3,r4,1
   1060c:	2008d07a 	srli	r4,r4,1
   10610:	18000126 	beq	r3,zero,10618 <__mulsi3+0x18>
   10614:	1145883a 	add	r2,r2,r5
   10618:	294b883a 	add	r5,r5,r5
   1061c:	203ffa1e 	bne	r4,zero,10608 <__alt_data_end+0xffff0608>
   10620:	f800283a 	ret
   10624:	f800283a 	ret

00010628 <_printf_r>:
   10628:	defffd04 	addi	sp,sp,-12
   1062c:	dfc00015 	stw	ra,0(sp)
   10630:	d9800115 	stw	r6,4(sp)
   10634:	d9c00215 	stw	r7,8(sp)
   10638:	20c00217 	ldw	r3,8(r4)
   1063c:	01800074 	movhi	r6,1
   10640:	31831904 	addi	r6,r6,3172
   10644:	19800115 	stw	r6,4(r3)
   10648:	280d883a 	mov	r6,r5
   1064c:	21400217 	ldw	r5,8(r4)
   10650:	d9c00104 	addi	r7,sp,4
   10654:	001071c0 	call	1071c <___vfprintf_internal_r>
   10658:	dfc00017 	ldw	ra,0(sp)
   1065c:	dec00304 	addi	sp,sp,12
   10660:	f800283a 	ret

00010664 <printf>:
   10664:	defffc04 	addi	sp,sp,-16
   10668:	dfc00015 	stw	ra,0(sp)
   1066c:	d9400115 	stw	r5,4(sp)
   10670:	d9800215 	stw	r6,8(sp)
   10674:	d9c00315 	stw	r7,12(sp)
   10678:	00800074 	movhi	r2,1
   1067c:	1084f804 	addi	r2,r2,5088
   10680:	10800017 	ldw	r2,0(r2)
   10684:	01400074 	movhi	r5,1
   10688:	29431904 	addi	r5,r5,3172
   1068c:	10c00217 	ldw	r3,8(r2)
   10690:	d9800104 	addi	r6,sp,4
   10694:	19400115 	stw	r5,4(r3)
   10698:	200b883a 	mov	r5,r4
   1069c:	11000217 	ldw	r4,8(r2)
   106a0:	0010c480 	call	10c48 <__vfprintf_internal>
   106a4:	dfc00017 	ldw	ra,0(sp)
   106a8:	dec00404 	addi	sp,sp,16
   106ac:	f800283a 	ret

000106b0 <print_repeat>:
   106b0:	defffb04 	addi	sp,sp,-20
   106b4:	dc800315 	stw	r18,12(sp)
   106b8:	dc400215 	stw	r17,8(sp)
   106bc:	dc000115 	stw	r16,4(sp)
   106c0:	dfc00415 	stw	ra,16(sp)
   106c4:	2025883a 	mov	r18,r4
   106c8:	2823883a 	mov	r17,r5
   106cc:	d9800005 	stb	r6,0(sp)
   106d0:	3821883a 	mov	r16,r7
   106d4:	04000a0e 	bge	zero,r16,10700 <print_repeat+0x50>
   106d8:	88800117 	ldw	r2,4(r17)
   106dc:	01c00044 	movi	r7,1
   106e0:	d80d883a 	mov	r6,sp
   106e4:	880b883a 	mov	r5,r17
   106e8:	9009883a 	mov	r4,r18
   106ec:	103ee83a 	callr	r2
   106f0:	843fffc4 	addi	r16,r16,-1
   106f4:	103ff726 	beq	r2,zero,106d4 <__alt_data_end+0xffff06d4>
   106f8:	00bfffc4 	movi	r2,-1
   106fc:	00000106 	br	10704 <print_repeat+0x54>
   10700:	0005883a 	mov	r2,zero
   10704:	dfc00417 	ldw	ra,16(sp)
   10708:	dc800317 	ldw	r18,12(sp)
   1070c:	dc400217 	ldw	r17,8(sp)
   10710:	dc000117 	ldw	r16,4(sp)
   10714:	dec00504 	addi	sp,sp,20
   10718:	f800283a 	ret

0001071c <___vfprintf_internal_r>:
   1071c:	deffe504 	addi	sp,sp,-108
   10720:	d8c00804 	addi	r3,sp,32
   10724:	ddc01815 	stw	r23,96(sp)
   10728:	dd801715 	stw	r22,92(sp)
   1072c:	dd401615 	stw	r21,88(sp)
   10730:	dd001515 	stw	r20,84(sp)
   10734:	dcc01415 	stw	r19,80(sp)
   10738:	dc801315 	stw	r18,76(sp)
   1073c:	dc401215 	stw	r17,72(sp)
   10740:	dc001115 	stw	r16,68(sp)
   10744:	dfc01a15 	stw	ra,104(sp)
   10748:	df001915 	stw	fp,100(sp)
   1074c:	2029883a 	mov	r20,r4
   10750:	2823883a 	mov	r17,r5
   10754:	382d883a 	mov	r22,r7
   10758:	d9800f15 	stw	r6,60(sp)
   1075c:	0021883a 	mov	r16,zero
   10760:	d8000e15 	stw	zero,56(sp)
   10764:	d8000a15 	stw	zero,40(sp)
   10768:	002b883a 	mov	r21,zero
   1076c:	0027883a 	mov	r19,zero
   10770:	0025883a 	mov	r18,zero
   10774:	d8000c15 	stw	zero,48(sp)
   10778:	d8000b15 	stw	zero,44(sp)
   1077c:	002f883a 	mov	r23,zero
   10780:	d8c00915 	stw	r3,36(sp)
   10784:	d8c00f17 	ldw	r3,60(sp)
   10788:	19000003 	ldbu	r4,0(r3)
   1078c:	20803fcc 	andi	r2,r4,255
   10790:	1080201c 	xori	r2,r2,128
   10794:	10bfe004 	addi	r2,r2,-128
   10798:	10011e26 	beq	r2,zero,10c14 <___vfprintf_internal_r+0x4f8>
   1079c:	00c00044 	movi	r3,1
   107a0:	b8c01426 	beq	r23,r3,107f4 <___vfprintf_internal_r+0xd8>
   107a4:	1dc00216 	blt	r3,r23,107b0 <___vfprintf_internal_r+0x94>
   107a8:	b8000626 	beq	r23,zero,107c4 <___vfprintf_internal_r+0xa8>
   107ac:	00011506 	br	10c04 <___vfprintf_internal_r+0x4e8>
   107b0:	01400084 	movi	r5,2
   107b4:	b9401d26 	beq	r23,r5,1082c <___vfprintf_internal_r+0x110>
   107b8:	014000c4 	movi	r5,3
   107bc:	b9402b26 	beq	r23,r5,1086c <___vfprintf_internal_r+0x150>
   107c0:	00011006 	br	10c04 <___vfprintf_internal_r+0x4e8>
   107c4:	01400944 	movi	r5,37
   107c8:	1140fc26 	beq	r2,r5,10bbc <___vfprintf_internal_r+0x4a0>
   107cc:	88800117 	ldw	r2,4(r17)
   107d0:	d9000005 	stb	r4,0(sp)
   107d4:	01c00044 	movi	r7,1
   107d8:	d80d883a 	mov	r6,sp
   107dc:	880b883a 	mov	r5,r17
   107e0:	a009883a 	mov	r4,r20
   107e4:	103ee83a 	callr	r2
   107e8:	1000d81e 	bne	r2,zero,10b4c <___vfprintf_internal_r+0x430>
   107ec:	84000044 	addi	r16,r16,1
   107f0:	00010406 	br	10c04 <___vfprintf_internal_r+0x4e8>
   107f4:	01400c04 	movi	r5,48
   107f8:	1140fa26 	beq	r2,r5,10be4 <___vfprintf_internal_r+0x4c8>
   107fc:	01400944 	movi	r5,37
   10800:	11400a1e 	bne	r2,r5,1082c <___vfprintf_internal_r+0x110>
   10804:	d8800005 	stb	r2,0(sp)
   10808:	88800117 	ldw	r2,4(r17)
   1080c:	b80f883a 	mov	r7,r23
   10810:	d80d883a 	mov	r6,sp
   10814:	880b883a 	mov	r5,r17
   10818:	a009883a 	mov	r4,r20
   1081c:	103ee83a 	callr	r2
   10820:	1000ca1e 	bne	r2,zero,10b4c <___vfprintf_internal_r+0x430>
   10824:	84000044 	addi	r16,r16,1
   10828:	0000f506 	br	10c00 <___vfprintf_internal_r+0x4e4>
   1082c:	25fff404 	addi	r23,r4,-48
   10830:	bdc03fcc 	andi	r23,r23,255
   10834:	00c00244 	movi	r3,9
   10838:	1dc00936 	bltu	r3,r23,10860 <___vfprintf_internal_r+0x144>
   1083c:	00bfffc4 	movi	r2,-1
   10840:	90800426 	beq	r18,r2,10854 <___vfprintf_internal_r+0x138>
   10844:	01400284 	movi	r5,10
   10848:	9009883a 	mov	r4,r18
   1084c:	00106000 	call	10600 <__mulsi3>
   10850:	00000106 	br	10858 <___vfprintf_internal_r+0x13c>
   10854:	0005883a 	mov	r2,zero
   10858:	b8a5883a 	add	r18,r23,r2
   1085c:	0000e206 	br	10be8 <___vfprintf_internal_r+0x4cc>
   10860:	01400b84 	movi	r5,46
   10864:	1140e426 	beq	r2,r5,10bf8 <___vfprintf_internal_r+0x4dc>
   10868:	05c00084 	movi	r23,2
   1086c:	213ff404 	addi	r4,r4,-48
   10870:	27003fcc 	andi	fp,r4,255
   10874:	00c00244 	movi	r3,9
   10878:	1f000936 	bltu	r3,fp,108a0 <___vfprintf_internal_r+0x184>
   1087c:	00bfffc4 	movi	r2,-1
   10880:	98800426 	beq	r19,r2,10894 <___vfprintf_internal_r+0x178>
   10884:	01400284 	movi	r5,10
   10888:	9809883a 	mov	r4,r19
   1088c:	00106000 	call	10600 <__mulsi3>
   10890:	00000106 	br	10898 <___vfprintf_internal_r+0x17c>
   10894:	0005883a 	mov	r2,zero
   10898:	e0a7883a 	add	r19,fp,r2
   1089c:	0000d906 	br	10c04 <___vfprintf_internal_r+0x4e8>
   108a0:	00c01b04 	movi	r3,108
   108a4:	10c0d226 	beq	r2,r3,10bf0 <___vfprintf_internal_r+0x4d4>
   108a8:	013fffc4 	movi	r4,-1
   108ac:	99000226 	beq	r19,r4,108b8 <___vfprintf_internal_r+0x19c>
   108b0:	d8000b15 	stw	zero,44(sp)
   108b4:	00000106 	br	108bc <___vfprintf_internal_r+0x1a0>
   108b8:	04c00044 	movi	r19,1
   108bc:	01001a44 	movi	r4,105
   108c0:	11001626 	beq	r2,r4,1091c <___vfprintf_internal_r+0x200>
   108c4:	20800916 	blt	r4,r2,108ec <___vfprintf_internal_r+0x1d0>
   108c8:	010018c4 	movi	r4,99
   108cc:	11008826 	beq	r2,r4,10af0 <___vfprintf_internal_r+0x3d4>
   108d0:	01001904 	movi	r4,100
   108d4:	11001126 	beq	r2,r4,1091c <___vfprintf_internal_r+0x200>
   108d8:	01001604 	movi	r4,88
   108dc:	1100c81e 	bne	r2,r4,10c00 <___vfprintf_internal_r+0x4e4>
   108e0:	00c00044 	movi	r3,1
   108e4:	d8c00e15 	stw	r3,56(sp)
   108e8:	00001506 	br	10940 <___vfprintf_internal_r+0x224>
   108ec:	01001cc4 	movi	r4,115
   108f0:	11009826 	beq	r2,r4,10b54 <___vfprintf_internal_r+0x438>
   108f4:	20800416 	blt	r4,r2,10908 <___vfprintf_internal_r+0x1ec>
   108f8:	01001bc4 	movi	r4,111
   108fc:	1100c01e 	bne	r2,r4,10c00 <___vfprintf_internal_r+0x4e4>
   10900:	05400204 	movi	r21,8
   10904:	00000f06 	br	10944 <___vfprintf_internal_r+0x228>
   10908:	01001d44 	movi	r4,117
   1090c:	11000d26 	beq	r2,r4,10944 <___vfprintf_internal_r+0x228>
   10910:	01001e04 	movi	r4,120
   10914:	11000a26 	beq	r2,r4,10940 <___vfprintf_internal_r+0x224>
   10918:	0000b906 	br	10c00 <___vfprintf_internal_r+0x4e4>
   1091c:	d8c00a17 	ldw	r3,40(sp)
   10920:	b7000104 	addi	fp,r22,4
   10924:	18000726 	beq	r3,zero,10944 <___vfprintf_internal_r+0x228>
   10928:	df000d15 	stw	fp,52(sp)
   1092c:	b5c00017 	ldw	r23,0(r22)
   10930:	b800080e 	bge	r23,zero,10954 <___vfprintf_internal_r+0x238>
   10934:	05efc83a 	sub	r23,zero,r23
   10938:	02400044 	movi	r9,1
   1093c:	00000606 	br	10958 <___vfprintf_internal_r+0x23c>
   10940:	05400404 	movi	r21,16
   10944:	b0c00104 	addi	r3,r22,4
   10948:	d8c00d15 	stw	r3,52(sp)
   1094c:	b5c00017 	ldw	r23,0(r22)
   10950:	d8000a15 	stw	zero,40(sp)
   10954:	0013883a 	mov	r9,zero
   10958:	d839883a 	mov	fp,sp
   1095c:	b8001726 	beq	r23,zero,109bc <___vfprintf_internal_r+0x2a0>
   10960:	a80b883a 	mov	r5,r21
   10964:	b809883a 	mov	r4,r23
   10968:	da401015 	stw	r9,64(sp)
   1096c:	0010e880 	call	10e88 <__udivsi3>
   10970:	a80b883a 	mov	r5,r21
   10974:	1009883a 	mov	r4,r2
   10978:	102d883a 	mov	r22,r2
   1097c:	00106000 	call	10600 <__mulsi3>
   10980:	b885c83a 	sub	r2,r23,r2
   10984:	00c00244 	movi	r3,9
   10988:	da401017 	ldw	r9,64(sp)
   1098c:	18800216 	blt	r3,r2,10998 <___vfprintf_internal_r+0x27c>
   10990:	10800c04 	addi	r2,r2,48
   10994:	00000506 	br	109ac <___vfprintf_internal_r+0x290>
   10998:	d8c00e17 	ldw	r3,56(sp)
   1099c:	18000226 	beq	r3,zero,109a8 <___vfprintf_internal_r+0x28c>
   109a0:	10800dc4 	addi	r2,r2,55
   109a4:	00000106 	br	109ac <___vfprintf_internal_r+0x290>
   109a8:	108015c4 	addi	r2,r2,87
   109ac:	e0800005 	stb	r2,0(fp)
   109b0:	b02f883a 	mov	r23,r22
   109b4:	e7000044 	addi	fp,fp,1
   109b8:	003fe806 	br	1095c <__alt_data_end+0xffff095c>
   109bc:	e6efc83a 	sub	r23,fp,sp
   109c0:	9dc5c83a 	sub	r2,r19,r23
   109c4:	0080090e 	bge	zero,r2,109ec <___vfprintf_internal_r+0x2d0>
   109c8:	e085883a 	add	r2,fp,r2
   109cc:	01400c04 	movi	r5,48
   109d0:	d8c00917 	ldw	r3,36(sp)
   109d4:	e009883a 	mov	r4,fp
   109d8:	e0c0032e 	bgeu	fp,r3,109e8 <___vfprintf_internal_r+0x2cc>
   109dc:	e7000044 	addi	fp,fp,1
   109e0:	21400005 	stb	r5,0(r4)
   109e4:	e0bffa1e 	bne	fp,r2,109d0 <__alt_data_end+0xffff09d0>
   109e8:	e6efc83a 	sub	r23,fp,sp
   109ec:	d8c00b17 	ldw	r3,44(sp)
   109f0:	4dd1883a 	add	r8,r9,r23
   109f4:	922dc83a 	sub	r22,r18,r8
   109f8:	18001626 	beq	r3,zero,10a54 <___vfprintf_internal_r+0x338>
   109fc:	48000a26 	beq	r9,zero,10a28 <___vfprintf_internal_r+0x30c>
   10a00:	00800b44 	movi	r2,45
   10a04:	d8800805 	stb	r2,32(sp)
   10a08:	88800117 	ldw	r2,4(r17)
   10a0c:	01c00044 	movi	r7,1
   10a10:	d9800804 	addi	r6,sp,32
   10a14:	880b883a 	mov	r5,r17
   10a18:	a009883a 	mov	r4,r20
   10a1c:	103ee83a 	callr	r2
   10a20:	10004a1e 	bne	r2,zero,10b4c <___vfprintf_internal_r+0x430>
   10a24:	84000044 	addi	r16,r16,1
   10a28:	0580070e 	bge	zero,r22,10a48 <___vfprintf_internal_r+0x32c>
   10a2c:	b00f883a 	mov	r7,r22
   10a30:	01800c04 	movi	r6,48
   10a34:	880b883a 	mov	r5,r17
   10a38:	a009883a 	mov	r4,r20
   10a3c:	00106b00 	call	106b0 <print_repeat>
   10a40:	1000421e 	bne	r2,zero,10b4c <___vfprintf_internal_r+0x430>
   10a44:	85a1883a 	add	r16,r16,r22
   10a48:	e02d883a 	mov	r22,fp
   10a4c:	bf2fc83a 	sub	r23,r23,fp
   10a50:	00002006 	br	10ad4 <___vfprintf_internal_r+0x3b8>
   10a54:	0580090e 	bge	zero,r22,10a7c <___vfprintf_internal_r+0x360>
   10a58:	b00f883a 	mov	r7,r22
   10a5c:	01800804 	movi	r6,32
   10a60:	880b883a 	mov	r5,r17
   10a64:	a009883a 	mov	r4,r20
   10a68:	da401015 	stw	r9,64(sp)
   10a6c:	00106b00 	call	106b0 <print_repeat>
   10a70:	da401017 	ldw	r9,64(sp)
   10a74:	1000351e 	bne	r2,zero,10b4c <___vfprintf_internal_r+0x430>
   10a78:	85a1883a 	add	r16,r16,r22
   10a7c:	483ff226 	beq	r9,zero,10a48 <__alt_data_end+0xffff0a48>
   10a80:	00800b44 	movi	r2,45
   10a84:	d8800805 	stb	r2,32(sp)
   10a88:	88800117 	ldw	r2,4(r17)
   10a8c:	01c00044 	movi	r7,1
   10a90:	d9800804 	addi	r6,sp,32
   10a94:	880b883a 	mov	r5,r17
   10a98:	a009883a 	mov	r4,r20
   10a9c:	103ee83a 	callr	r2
   10aa0:	10002a1e 	bne	r2,zero,10b4c <___vfprintf_internal_r+0x430>
   10aa4:	84000044 	addi	r16,r16,1
   10aa8:	003fe706 	br	10a48 <__alt_data_end+0xffff0a48>
   10aac:	b5bfffc4 	addi	r22,r22,-1
   10ab0:	b0800003 	ldbu	r2,0(r22)
   10ab4:	01c00044 	movi	r7,1
   10ab8:	d9800804 	addi	r6,sp,32
   10abc:	d8800805 	stb	r2,32(sp)
   10ac0:	88800117 	ldw	r2,4(r17)
   10ac4:	880b883a 	mov	r5,r17
   10ac8:	a009883a 	mov	r4,r20
   10acc:	103ee83a 	callr	r2
   10ad0:	10001e1e 	bne	r2,zero,10b4c <___vfprintf_internal_r+0x430>
   10ad4:	8585c83a 	sub	r2,r16,r22
   10ad8:	b5c9883a 	add	r4,r22,r23
   10adc:	e085883a 	add	r2,fp,r2
   10ae0:	013ff216 	blt	zero,r4,10aac <__alt_data_end+0xffff0aac>
   10ae4:	1021883a 	mov	r16,r2
   10ae8:	dd800d17 	ldw	r22,52(sp)
   10aec:	00004406 	br	10c00 <___vfprintf_internal_r+0x4e4>
   10af0:	00800044 	movi	r2,1
   10af4:	1480080e 	bge	r2,r18,10b18 <___vfprintf_internal_r+0x3fc>
   10af8:	95ffffc4 	addi	r23,r18,-1
   10afc:	b80f883a 	mov	r7,r23
   10b00:	01800804 	movi	r6,32
   10b04:	880b883a 	mov	r5,r17
   10b08:	a009883a 	mov	r4,r20
   10b0c:	00106b00 	call	106b0 <print_repeat>
   10b10:	10000e1e 	bne	r2,zero,10b4c <___vfprintf_internal_r+0x430>
   10b14:	85e1883a 	add	r16,r16,r23
   10b18:	b0800017 	ldw	r2,0(r22)
   10b1c:	01c00044 	movi	r7,1
   10b20:	d80d883a 	mov	r6,sp
   10b24:	d8800005 	stb	r2,0(sp)
   10b28:	88800117 	ldw	r2,4(r17)
   10b2c:	880b883a 	mov	r5,r17
   10b30:	a009883a 	mov	r4,r20
   10b34:	b5c00104 	addi	r23,r22,4
   10b38:	103ee83a 	callr	r2
   10b3c:	1000031e 	bne	r2,zero,10b4c <___vfprintf_internal_r+0x430>
   10b40:	84000044 	addi	r16,r16,1
   10b44:	b82d883a 	mov	r22,r23
   10b48:	00002d06 	br	10c00 <___vfprintf_internal_r+0x4e4>
   10b4c:	00bfffc4 	movi	r2,-1
   10b50:	00003106 	br	10c18 <___vfprintf_internal_r+0x4fc>
   10b54:	b5c00017 	ldw	r23,0(r22)
   10b58:	b7000104 	addi	fp,r22,4
   10b5c:	b809883a 	mov	r4,r23
   10b60:	0010d1c0 	call	10d1c <strlen>
   10b64:	9091c83a 	sub	r8,r18,r2
   10b68:	102d883a 	mov	r22,r2
   10b6c:	0200090e 	bge	zero,r8,10b94 <___vfprintf_internal_r+0x478>
   10b70:	400f883a 	mov	r7,r8
   10b74:	01800804 	movi	r6,32
   10b78:	880b883a 	mov	r5,r17
   10b7c:	a009883a 	mov	r4,r20
   10b80:	da001015 	stw	r8,64(sp)
   10b84:	00106b00 	call	106b0 <print_repeat>
   10b88:	da001017 	ldw	r8,64(sp)
   10b8c:	103fef1e 	bne	r2,zero,10b4c <__alt_data_end+0xffff0b4c>
   10b90:	8221883a 	add	r16,r16,r8
   10b94:	88800117 	ldw	r2,4(r17)
   10b98:	b00f883a 	mov	r7,r22
   10b9c:	b80d883a 	mov	r6,r23
   10ba0:	880b883a 	mov	r5,r17
   10ba4:	a009883a 	mov	r4,r20
   10ba8:	103ee83a 	callr	r2
   10bac:	103fe71e 	bne	r2,zero,10b4c <__alt_data_end+0xffff0b4c>
   10bb0:	85a1883a 	add	r16,r16,r22
   10bb4:	e02d883a 	mov	r22,fp
   10bb8:	00001106 	br	10c00 <___vfprintf_internal_r+0x4e4>
   10bbc:	00c00044 	movi	r3,1
   10bc0:	04ffffc4 	movi	r19,-1
   10bc4:	d8000e15 	stw	zero,56(sp)
   10bc8:	d8c00a15 	stw	r3,40(sp)
   10bcc:	05400284 	movi	r21,10
   10bd0:	9825883a 	mov	r18,r19
   10bd4:	d8000c15 	stw	zero,48(sp)
   10bd8:	d8000b15 	stw	zero,44(sp)
   10bdc:	182f883a 	mov	r23,r3
   10be0:	00000806 	br	10c04 <___vfprintf_internal_r+0x4e8>
   10be4:	ddc00b15 	stw	r23,44(sp)
   10be8:	05c00084 	movi	r23,2
   10bec:	00000506 	br	10c04 <___vfprintf_internal_r+0x4e8>
   10bf0:	00c00044 	movi	r3,1
   10bf4:	d8c00c15 	stw	r3,48(sp)
   10bf8:	05c000c4 	movi	r23,3
   10bfc:	00000106 	br	10c04 <___vfprintf_internal_r+0x4e8>
   10c00:	002f883a 	mov	r23,zero
   10c04:	d8c00f17 	ldw	r3,60(sp)
   10c08:	18c00044 	addi	r3,r3,1
   10c0c:	d8c00f15 	stw	r3,60(sp)
   10c10:	003edc06 	br	10784 <__alt_data_end+0xffff0784>
   10c14:	8005883a 	mov	r2,r16
   10c18:	dfc01a17 	ldw	ra,104(sp)
   10c1c:	df001917 	ldw	fp,100(sp)
   10c20:	ddc01817 	ldw	r23,96(sp)
   10c24:	dd801717 	ldw	r22,92(sp)
   10c28:	dd401617 	ldw	r21,88(sp)
   10c2c:	dd001517 	ldw	r20,84(sp)
   10c30:	dcc01417 	ldw	r19,80(sp)
   10c34:	dc801317 	ldw	r18,76(sp)
   10c38:	dc401217 	ldw	r17,72(sp)
   10c3c:	dc001117 	ldw	r16,68(sp)
   10c40:	dec01b04 	addi	sp,sp,108
   10c44:	f800283a 	ret

00010c48 <__vfprintf_internal>:
   10c48:	00800074 	movhi	r2,1
   10c4c:	1084f804 	addi	r2,r2,5088
   10c50:	300f883a 	mov	r7,r6
   10c54:	280d883a 	mov	r6,r5
   10c58:	200b883a 	mov	r5,r4
   10c5c:	11000017 	ldw	r4,0(r2)
   10c60:	001071c1 	jmpi	1071c <___vfprintf_internal_r>

00010c64 <__sfvwrite_small_dev>:
   10c64:	2880000b 	ldhu	r2,0(r5)
   10c68:	1080020c 	andi	r2,r2,8
   10c6c:	10002126 	beq	r2,zero,10cf4 <__sfvwrite_small_dev+0x90>
   10c70:	2880008f 	ldh	r2,2(r5)
   10c74:	defffa04 	addi	sp,sp,-24
   10c78:	dc000015 	stw	r16,0(sp)
   10c7c:	dfc00515 	stw	ra,20(sp)
   10c80:	dd000415 	stw	r20,16(sp)
   10c84:	dcc00315 	stw	r19,12(sp)
   10c88:	dc800215 	stw	r18,8(sp)
   10c8c:	dc400115 	stw	r17,4(sp)
   10c90:	2821883a 	mov	r16,r5
   10c94:	10001216 	blt	r2,zero,10ce0 <__sfvwrite_small_dev+0x7c>
   10c98:	2027883a 	mov	r19,r4
   10c9c:	3025883a 	mov	r18,r6
   10ca0:	3823883a 	mov	r17,r7
   10ca4:	05010004 	movi	r20,1024
   10ca8:	04400b0e 	bge	zero,r17,10cd8 <__sfvwrite_small_dev+0x74>
   10cac:	880f883a 	mov	r7,r17
   10cb0:	a440010e 	bge	r20,r17,10cb8 <__sfvwrite_small_dev+0x54>
   10cb4:	01c10004 	movi	r7,1024
   10cb8:	8140008f 	ldh	r5,2(r16)
   10cbc:	900d883a 	mov	r6,r18
   10cc0:	9809883a 	mov	r4,r19
   10cc4:	0010d380 	call	10d38 <_write_r>
   10cc8:	0080050e 	bge	zero,r2,10ce0 <__sfvwrite_small_dev+0x7c>
   10ccc:	88a3c83a 	sub	r17,r17,r2
   10cd0:	90a5883a 	add	r18,r18,r2
   10cd4:	003ff406 	br	10ca8 <__alt_data_end+0xffff0ca8>
   10cd8:	0005883a 	mov	r2,zero
   10cdc:	00000706 	br	10cfc <__sfvwrite_small_dev+0x98>
   10ce0:	8080000b 	ldhu	r2,0(r16)
   10ce4:	10801014 	ori	r2,r2,64
   10ce8:	8080000d 	sth	r2,0(r16)
   10cec:	00bfffc4 	movi	r2,-1
   10cf0:	00000206 	br	10cfc <__sfvwrite_small_dev+0x98>
   10cf4:	00bfffc4 	movi	r2,-1
   10cf8:	f800283a 	ret
   10cfc:	dfc00517 	ldw	ra,20(sp)
   10d00:	dd000417 	ldw	r20,16(sp)
   10d04:	dcc00317 	ldw	r19,12(sp)
   10d08:	dc800217 	ldw	r18,8(sp)
   10d0c:	dc400117 	ldw	r17,4(sp)
   10d10:	dc000017 	ldw	r16,0(sp)
   10d14:	dec00604 	addi	sp,sp,24
   10d18:	f800283a 	ret

00010d1c <strlen>:
   10d1c:	2005883a 	mov	r2,r4
   10d20:	10c00007 	ldb	r3,0(r2)
   10d24:	18000226 	beq	r3,zero,10d30 <strlen+0x14>
   10d28:	10800044 	addi	r2,r2,1
   10d2c:	003ffc06 	br	10d20 <__alt_data_end+0xffff0d20>
   10d30:	1105c83a 	sub	r2,r2,r4
   10d34:	f800283a 	ret

00010d38 <_write_r>:
   10d38:	defffd04 	addi	sp,sp,-12
   10d3c:	dc000015 	stw	r16,0(sp)
   10d40:	04000074 	movhi	r16,1
   10d44:	dc400115 	stw	r17,4(sp)
   10d48:	84053704 	addi	r16,r16,5340
   10d4c:	2023883a 	mov	r17,r4
   10d50:	2809883a 	mov	r4,r5
   10d54:	300b883a 	mov	r5,r6
   10d58:	380d883a 	mov	r6,r7
   10d5c:	dfc00215 	stw	ra,8(sp)
   10d60:	80000015 	stw	zero,0(r16)
   10d64:	001108c0 	call	1108c <write>
   10d68:	00ffffc4 	movi	r3,-1
   10d6c:	10c0031e 	bne	r2,r3,10d7c <_write_r+0x44>
   10d70:	80c00017 	ldw	r3,0(r16)
   10d74:	18000126 	beq	r3,zero,10d7c <_write_r+0x44>
   10d78:	88c00015 	stw	r3,0(r17)
   10d7c:	dfc00217 	ldw	ra,8(sp)
   10d80:	dc400117 	ldw	r17,4(sp)
   10d84:	dc000017 	ldw	r16,0(sp)
   10d88:	dec00304 	addi	sp,sp,12
   10d8c:	f800283a 	ret

00010d90 <__divsi3>:
   10d90:	20001b16 	blt	r4,zero,10e00 <__divsi3+0x70>
   10d94:	000f883a 	mov	r7,zero
   10d98:	28001616 	blt	r5,zero,10df4 <__divsi3+0x64>
   10d9c:	200d883a 	mov	r6,r4
   10da0:	29001a2e 	bgeu	r5,r4,10e0c <__divsi3+0x7c>
   10da4:	00800804 	movi	r2,32
   10da8:	00c00044 	movi	r3,1
   10dac:	00000106 	br	10db4 <__divsi3+0x24>
   10db0:	10000d26 	beq	r2,zero,10de8 <__divsi3+0x58>
   10db4:	294b883a 	add	r5,r5,r5
   10db8:	10bfffc4 	addi	r2,r2,-1
   10dbc:	18c7883a 	add	r3,r3,r3
   10dc0:	293ffb36 	bltu	r5,r4,10db0 <__alt_data_end+0xffff0db0>
   10dc4:	0005883a 	mov	r2,zero
   10dc8:	18000726 	beq	r3,zero,10de8 <__divsi3+0x58>
   10dcc:	0005883a 	mov	r2,zero
   10dd0:	31400236 	bltu	r6,r5,10ddc <__divsi3+0x4c>
   10dd4:	314dc83a 	sub	r6,r6,r5
   10dd8:	10c4b03a 	or	r2,r2,r3
   10ddc:	1806d07a 	srli	r3,r3,1
   10de0:	280ad07a 	srli	r5,r5,1
   10de4:	183ffa1e 	bne	r3,zero,10dd0 <__alt_data_end+0xffff0dd0>
   10de8:	38000126 	beq	r7,zero,10df0 <__divsi3+0x60>
   10dec:	0085c83a 	sub	r2,zero,r2
   10df0:	f800283a 	ret
   10df4:	014bc83a 	sub	r5,zero,r5
   10df8:	39c0005c 	xori	r7,r7,1
   10dfc:	003fe706 	br	10d9c <__alt_data_end+0xffff0d9c>
   10e00:	0109c83a 	sub	r4,zero,r4
   10e04:	01c00044 	movi	r7,1
   10e08:	003fe306 	br	10d98 <__alt_data_end+0xffff0d98>
   10e0c:	00c00044 	movi	r3,1
   10e10:	003fee06 	br	10dcc <__alt_data_end+0xffff0dcc>

00010e14 <__modsi3>:
   10e14:	20001716 	blt	r4,zero,10e74 <__modsi3+0x60>
   10e18:	000f883a 	mov	r7,zero
   10e1c:	2005883a 	mov	r2,r4
   10e20:	28001216 	blt	r5,zero,10e6c <__modsi3+0x58>
   10e24:	2900162e 	bgeu	r5,r4,10e80 <__modsi3+0x6c>
   10e28:	01800804 	movi	r6,32
   10e2c:	00c00044 	movi	r3,1
   10e30:	00000106 	br	10e38 <__modsi3+0x24>
   10e34:	30000a26 	beq	r6,zero,10e60 <__modsi3+0x4c>
   10e38:	294b883a 	add	r5,r5,r5
   10e3c:	31bfffc4 	addi	r6,r6,-1
   10e40:	18c7883a 	add	r3,r3,r3
   10e44:	293ffb36 	bltu	r5,r4,10e34 <__alt_data_end+0xffff0e34>
   10e48:	18000526 	beq	r3,zero,10e60 <__modsi3+0x4c>
   10e4c:	1806d07a 	srli	r3,r3,1
   10e50:	11400136 	bltu	r2,r5,10e58 <__modsi3+0x44>
   10e54:	1145c83a 	sub	r2,r2,r5
   10e58:	280ad07a 	srli	r5,r5,1
   10e5c:	183ffb1e 	bne	r3,zero,10e4c <__alt_data_end+0xffff0e4c>
   10e60:	38000126 	beq	r7,zero,10e68 <__modsi3+0x54>
   10e64:	0085c83a 	sub	r2,zero,r2
   10e68:	f800283a 	ret
   10e6c:	014bc83a 	sub	r5,zero,r5
   10e70:	003fec06 	br	10e24 <__alt_data_end+0xffff0e24>
   10e74:	0109c83a 	sub	r4,zero,r4
   10e78:	01c00044 	movi	r7,1
   10e7c:	003fe706 	br	10e1c <__alt_data_end+0xffff0e1c>
   10e80:	00c00044 	movi	r3,1
   10e84:	003ff106 	br	10e4c <__alt_data_end+0xffff0e4c>

00010e88 <__udivsi3>:
   10e88:	200d883a 	mov	r6,r4
   10e8c:	2900152e 	bgeu	r5,r4,10ee4 <__udivsi3+0x5c>
   10e90:	28001416 	blt	r5,zero,10ee4 <__udivsi3+0x5c>
   10e94:	00800804 	movi	r2,32
   10e98:	00c00044 	movi	r3,1
   10e9c:	00000206 	br	10ea8 <__udivsi3+0x20>
   10ea0:	10000e26 	beq	r2,zero,10edc <__udivsi3+0x54>
   10ea4:	28000516 	blt	r5,zero,10ebc <__udivsi3+0x34>
   10ea8:	294b883a 	add	r5,r5,r5
   10eac:	10bfffc4 	addi	r2,r2,-1
   10eb0:	18c7883a 	add	r3,r3,r3
   10eb4:	293ffa36 	bltu	r5,r4,10ea0 <__alt_data_end+0xffff0ea0>
   10eb8:	18000826 	beq	r3,zero,10edc <__udivsi3+0x54>
   10ebc:	0005883a 	mov	r2,zero
   10ec0:	31400236 	bltu	r6,r5,10ecc <__udivsi3+0x44>
   10ec4:	314dc83a 	sub	r6,r6,r5
   10ec8:	10c4b03a 	or	r2,r2,r3
   10ecc:	1806d07a 	srli	r3,r3,1
   10ed0:	280ad07a 	srli	r5,r5,1
   10ed4:	183ffa1e 	bne	r3,zero,10ec0 <__alt_data_end+0xffff0ec0>
   10ed8:	f800283a 	ret
   10edc:	0005883a 	mov	r2,zero
   10ee0:	f800283a 	ret
   10ee4:	00c00044 	movi	r3,1
   10ee8:	003ff406 	br	10ebc <__alt_data_end+0xffff0ebc>

00010eec <__umodsi3>:
   10eec:	2005883a 	mov	r2,r4
   10ef0:	2900122e 	bgeu	r5,r4,10f3c <__umodsi3+0x50>
   10ef4:	28001116 	blt	r5,zero,10f3c <__umodsi3+0x50>
   10ef8:	01800804 	movi	r6,32
   10efc:	00c00044 	movi	r3,1
   10f00:	00000206 	br	10f0c <__umodsi3+0x20>
   10f04:	30000c26 	beq	r6,zero,10f38 <__umodsi3+0x4c>
   10f08:	28000516 	blt	r5,zero,10f20 <__umodsi3+0x34>
   10f0c:	294b883a 	add	r5,r5,r5
   10f10:	31bfffc4 	addi	r6,r6,-1
   10f14:	18c7883a 	add	r3,r3,r3
   10f18:	293ffa36 	bltu	r5,r4,10f04 <__alt_data_end+0xffff0f04>
   10f1c:	18000626 	beq	r3,zero,10f38 <__umodsi3+0x4c>
   10f20:	1806d07a 	srli	r3,r3,1
   10f24:	11400136 	bltu	r2,r5,10f2c <__umodsi3+0x40>
   10f28:	1145c83a 	sub	r2,r2,r5
   10f2c:	280ad07a 	srli	r5,r5,1
   10f30:	183ffb1e 	bne	r3,zero,10f20 <__alt_data_end+0xffff0f20>
   10f34:	f800283a 	ret
   10f38:	f800283a 	ret
   10f3c:	00c00044 	movi	r3,1
   10f40:	003ff706 	br	10f20 <__alt_data_end+0xffff0f20>

00010f44 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10f44:	deffff04 	addi	sp,sp,-4
   10f48:	01000074 	movhi	r4,1
   10f4c:	01400074 	movhi	r5,1
   10f50:	dfc00015 	stw	ra,0(sp)
   10f54:	2104bf04 	addi	r4,r4,4860
   10f58:	2944fb04 	addi	r5,r5,5100

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10f5c:	2140061e 	bne	r4,r5,10f78 <alt_load+0x34>
   10f60:	01000074 	movhi	r4,1
   10f64:	01400074 	movhi	r5,1
   10f68:	21000804 	addi	r4,r4,32
   10f6c:	29400804 	addi	r5,r5,32
   10f70:	2140121e 	bne	r4,r5,10fbc <alt_load+0x78>
   10f74:	00000b06 	br	10fa4 <alt_load+0x60>
   10f78:	00c00074 	movhi	r3,1
   10f7c:	18c4fb04 	addi	r3,r3,5100
   10f80:	1907c83a 	sub	r3,r3,r4
   10f84:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10f88:	10fff526 	beq	r2,r3,10f60 <__alt_data_end+0xffff0f60>
    {
      *to++ = *from++;
   10f8c:	114f883a 	add	r7,r2,r5
   10f90:	39c00017 	ldw	r7,0(r7)
   10f94:	110d883a 	add	r6,r2,r4
   10f98:	10800104 	addi	r2,r2,4
   10f9c:	31c00015 	stw	r7,0(r6)
   10fa0:	003ff906 	br	10f88 <__alt_data_end+0xffff0f88>
   10fa4:	01000074 	movhi	r4,1
   10fa8:	01400074 	movhi	r5,1
   10fac:	21047704 	addi	r4,r4,4572
   10fb0:	29447704 	addi	r5,r5,4572

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10fb4:	2140101e 	bne	r4,r5,10ff8 <alt_load+0xb4>
   10fb8:	00000b06 	br	10fe8 <alt_load+0xa4>
   10fbc:	00c00074 	movhi	r3,1
   10fc0:	18c00804 	addi	r3,r3,32
   10fc4:	1907c83a 	sub	r3,r3,r4
   10fc8:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10fcc:	10fff526 	beq	r2,r3,10fa4 <__alt_data_end+0xffff0fa4>
    {
      *to++ = *from++;
   10fd0:	114f883a 	add	r7,r2,r5
   10fd4:	39c00017 	ldw	r7,0(r7)
   10fd8:	110d883a 	add	r6,r2,r4
   10fdc:	10800104 	addi	r2,r2,4
   10fe0:	31c00015 	stw	r7,0(r6)
   10fe4:	003ff906 	br	10fcc <__alt_data_end+0xffff0fcc>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10fe8:	00111cc0 	call	111cc <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   10fec:	dfc00017 	ldw	ra,0(sp)
   10ff0:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   10ff4:	00111d01 	jmpi	111d0 <alt_icache_flush_all>
   10ff8:	00c00074 	movhi	r3,1
   10ffc:	18c4bf04 	addi	r3,r3,4860
   11000:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   11004:	0005883a 	mov	r2,zero
  {
    while( to != end )
   11008:	18bff726 	beq	r3,r2,10fe8 <__alt_data_end+0xffff0fe8>
    {
      *to++ = *from++;
   1100c:	114f883a 	add	r7,r2,r5
   11010:	39c00017 	ldw	r7,0(r7)
   11014:	110d883a 	add	r6,r2,r4
   11018:	10800104 	addi	r2,r2,4
   1101c:	31c00015 	stw	r7,0(r6)
   11020:	003ff906 	br	11008 <__alt_data_end+0xffff1008>

00011024 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   11024:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   11028:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1102c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   11030:	00110ec0 	call	110ec <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   11034:	001110c0 	call	1110c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   11038:	d1a04117 	ldw	r6,-32508(gp)
   1103c:	d1604217 	ldw	r5,-32504(gp)
   11040:	d1204317 	ldw	r4,-32500(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   11044:	dfc00017 	ldw	ra,0(sp)
   11048:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   1104c:	001005c1 	jmpi	1005c <main>

00011050 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   11050:	defffe04 	addi	sp,sp,-8
   11054:	dc000015 	stw	r16,0(sp)
   11058:	dfc00115 	stw	ra,4(sp)
   1105c:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   11060:	0010d1c0 	call	10d1c <strlen>
   11064:	01000074 	movhi	r4,1
   11068:	000f883a 	mov	r7,zero
   1106c:	100d883a 	mov	r6,r2
   11070:	800b883a 	mov	r5,r16
   11074:	2104f904 	addi	r4,r4,5092
#else
    return fputs(str, stdout);
#endif
#endif
}
   11078:	dfc00117 	ldw	ra,4(sp)
   1107c:	dc000017 	ldw	r16,0(sp)
   11080:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   11084:	00111101 	jmpi	11110 <altera_avalon_jtag_uart_write>

00011088 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
   11088:	00111441 	jmpi	11144 <alt_busy_sleep>

0001108c <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   1108c:	00800044 	movi	r2,1
   11090:	20800226 	beq	r4,r2,1109c <write+0x10>
   11094:	00800084 	movi	r2,2
   11098:	2080041e 	bne	r4,r2,110ac <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
   1109c:	01000074 	movhi	r4,1
   110a0:	000f883a 	mov	r7,zero
   110a4:	2104f904 	addi	r4,r4,5092
   110a8:	00111101 	jmpi	11110 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   110ac:	d0a00317 	ldw	r2,-32756(gp)
   110b0:	10000926 	beq	r2,zero,110d8 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   110b4:	deffff04 	addi	sp,sp,-4
   110b8:	dfc00015 	stw	ra,0(sp)
   110bc:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   110c0:	00c01444 	movi	r3,81
   110c4:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   110c8:	00bfffc4 	movi	r2,-1
   110cc:	dfc00017 	ldw	ra,0(sp)
   110d0:	dec00104 	addi	sp,sp,4
   110d4:	f800283a 	ret
   110d8:	d0a04004 	addi	r2,gp,-32512
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   110dc:	00c01444 	movi	r3,81
   110e0:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   110e4:	00bfffc4 	movi	r2,-1
   110e8:	f800283a 	ret

000110ec <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   110ec:	deffff04 	addi	sp,sp,-4
   110f0:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   110f4:	00111d40 	call	111d4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   110f8:	00800044 	movi	r2,1
   110fc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   11100:	dfc00017 	ldw	ra,0(sp)
   11104:	dec00104 	addi	sp,sp,4
   11108:	f800283a 	ret

0001110c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1110c:	f800283a 	ret

00011110 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   11110:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   11114:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   11118:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   1111c:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   11120:	2980072e 	bgeu	r5,r6,11140 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   11124:	38c00037 	ldwio	r3,0(r7)
   11128:	18ffffec 	andhi	r3,r3,65535
   1112c:	183ffc26 	beq	r3,zero,11120 <__alt_data_end+0xffff1120>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   11130:	28c00007 	ldb	r3,0(r5)
   11134:	20c00035 	stwio	r3,0(r4)
   11138:	29400044 	addi	r5,r5,1
   1113c:	003ff806 	br	11120 <__alt_data_end+0xffff1120>

  return count;
}
   11140:	f800283a 	ret

00011144 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   11144:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   11148:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   1114c:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   11150:	dc000015 	stw	r16,0(sp)
   11154:	dfc00115 	stw	ra,4(sp)
   11158:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   1115c:	0010e880 	call	10e88 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   11160:	10001026 	beq	r2,zero,111a4 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   11164:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   11168:	013999b4 	movhi	r4,58982
   1116c:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   11170:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   11174:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   11178:	297fffc4 	addi	r5,r5,-1
   1117c:	283ffe1e 	bne	r5,zero,11178 <__alt_data_end+0xffff1178>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   11180:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   11184:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   11188:	18bffb16 	blt	r3,r2,11178 <__alt_data_end+0xffff1178>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   1118c:	01400144 	movi	r5,5
   11190:	8009883a 	mov	r4,r16
   11194:	00106000 	call	10600 <__mulsi3>
   11198:	10bfffc4 	addi	r2,r2,-1
   1119c:	103ffe1e 	bne	r2,zero,11198 <__alt_data_end+0xffff1198>
   111a0:	00000506 	br	111b8 <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   111a4:	01400144 	movi	r5,5
   111a8:	8009883a 	mov	r4,r16
   111ac:	00106000 	call	10600 <__mulsi3>
   111b0:	10bfffc4 	addi	r2,r2,-1
   111b4:	00bffe16 	blt	zero,r2,111b0 <__alt_data_end+0xffff11b0>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
   111b8:	0005883a 	mov	r2,zero
   111bc:	dfc00117 	ldw	ra,4(sp)
   111c0:	dc000017 	ldw	r16,0(sp)
   111c4:	dec00204 	addi	sp,sp,8
   111c8:	f800283a 	ret

000111cc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   111cc:	f800283a 	ret

000111d0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   111d0:	f800283a 	ret

000111d4 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   111d4:	000170fa 	wrctl	ienable,zero
   111d8:	f800283a 	ret
