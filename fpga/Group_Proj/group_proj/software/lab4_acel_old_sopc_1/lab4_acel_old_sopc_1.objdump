
lab4_acel_old_sopc_1.elf:     file format elf32-littlenios2
lab4_acel_old_sopc_1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010180

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00002e40 memsz 0x00002e40 flags r-x
    LOAD off    0x00003e60 vaddr 0x00012e60 paddr 0x000130c0 align 2**12
         filesz 0x00000260 memsz 0x00000260 flags rw-
    LOAD off    0x00004320 vaddr 0x00013320 paddr 0x00013320 align 2**12
         filesz 0x00000000 memsz 0x00000220 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002994  00010180  00010180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000034c  00012b14  00012b14  00003b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000260  00012e60  000130c0  00003e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000220  00013320  00013320  00004320  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00013540  00013540  000040c0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000040c0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000748  00000000  00000000  000040e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000c373  00000000  00000000  00004830  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000400e  00000000  00000000  00010ba3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000046ee  00000000  00000000  00014bb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000bbc  00000000  00000000  000192a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002356  00000000  00000000  00019e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003a52  00000000  00000000  0001c1b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0001fc04  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000678  00000000  00000000  0001fc18  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00022151  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00022154  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00022157  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00022158  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00022159  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00022162  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0002216b  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000007  00000000  00000000  00022174  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002d  00000000  00000000  0002217b  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     00061be3  00000000  00000000  000221a8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010180 l    d  .text	00000000 .text
00012b14 l    d  .rodata	00000000 .rodata
00012e60 l    d  .rwdata	00000000 .rwdata
00013320 l    d  .bss	00000000 .bss
00013540 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab4_acel_old_sopc_1_bsp//obj/HAL/src/crt0.o
000101b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 asprintf.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 fvwrite_small_str_mbf.c
00000000 l    df *ABS*	00000000 impure.c
00012f24 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
000115fc l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 vfprintf.c
00011bb0 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 ctype_.c
00012cd3 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00013098 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00013004 l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000126c8 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00012890 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 memcmp.c
00013378 g     O .bss	00000004 alt_instruction_exception_handler
00012244 g     F .text	0000001c _malloc_usable_size_r
00012470 g     F .text	0000002c alt_main
000108ac g     F .text	00000014 led_write
000112ac g     F .text	00000080 _puts_r
00013440 g     O .bss	00000100 alt_irq
000130c0 g       *ABS*	00000000 __flash_rwdata_start
00013540 g       *ABS*	00000000 __alt_heap_start
00011260 g     F .text	0000004c printf
00010ec4 g     F .text	00000060 memmove
000101bc g     F .text	00000080 sys_timer_isr
00010764 g     F .text	00000148 read_chars
0001249c g     F .text	00000038 alt_putstr
0001309c g     O .rwdata	00000004 jtag_uart
00012a68 g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00012520 g     F .text	00000060 times
00012784 g     F .text	00000058 alt_up_accelerometer_spi_read_x_axis
00010020 g       *ABS*	00000000 __flash_exceptions_start
0001335c g     O .bss	00000004 errno
00013368 g     O .bss	00000004 alt_argv
0001b088 g       *ABS*	00000000 _gp
0001054c g     F .text	000000c4 generate_text
00013030 g     O .rwdata	00000030 alt_fd_list
00012904 g     F .text	00000074 alt_find_dev
0001221c g     F .text	00000028 memcpy
0001132c g     F .text	00000014 puts
00012a70 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00012638 g     F .text	0000005c altera_avalon_jtag_uart_read
00010e9c g     F .text	00000014 malloc
00011224 g     F .text	0000003c _printf_r
00010b80 g     F .text	00000064 .hidden __udivsi3
00013324 g     O .bss	00000004 exec_t1
00013328 g     O .bss	00000004 filt
00011340 g     F .text	00000050 _sbrk_r
000130a0 g     O .rwdata	00000004 alt_max_fd
000122fc g     F .text	00000094 alt_irq_register
00013088 g     O .rwdata	00000004 _global_impure_ptr
00011180 g     F .text	000000a4 _realloc_r
00013540 g       *ABS*	00000000 __bss_end
000122b8 g     F .text	00000044 alt_getchar
000129b0 g     F .text	000000b8 alt_tick
0001297c g     F .text	00000034 alt_alarm_stop
000115e0 g     F .text	0000001c strtol
00013360 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	00000060 alt_irq_handler
00013060 g     O .rwdata	00000028 alt_dev_null
0001288c g     F .text	00000004 alt_dcache_flush_all
0001023c g     F .text	00000310 print_text
000130c0 g       *ABS*	00000000 __ram_rwdata_end
000108c0 g     F .text	00000070 timer_init
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
000130a4 g     O .rwdata	00000008 alt_dev_list
00012580 g     F .text	00000060 write
0001332c g     O .bss	00000004 x_read
00012e60 g       *ABS*	00000000 __ram_rodata_end
00013330 g     O .bss	00000004 ind
00010d88 g     F .text	00000114 __sfvwrite_small_str_mbf
00013334 g     O .bss	00000001 led
00010be4 g     F .text	00000058 .hidden __umodsi3
00013540 g       *ABS*	00000000 end
00010d7c g     F .text	0000000c _atoi_r
0001015c g     F .exceptions	00000024 alt_instruction_exception_entry
00020000 g       *ABS*	00000000 __alt_stack_pointer
00012704 g     F .text	00000028 alt_avalon_timer_sc_init
00012694 g     F .text	00000034 altera_avalon_jtag_uart_write
00010c64 g     F .text	0000007c _asprintf_r
00011c1c g     F .text	0000052c ___vfprintf_internal_r
00010f44 g     F .text	000000e4 _free_r
00010180 g     F .text	0000003c _start
00013338 g     O .bss	00000004 level
00013374 g     O .bss	00000004 _alt_tick_rate
00013370 g     O .bss	00000004 _alt_nticks
00012600 g     F .text	00000038 alt_sys_init
00012734 g     F .text	00000014 alt_up_accelerometer_spi_read_address_register
00010c3c g     F .text	00000028 .hidden __mulsi3
00012e60 g       *ABS*	00000000 __ram_rwdata_start
00012b14 g       *ABS*	00000000 __ram_rodata_start
000127dc g     F .text	00000058 alt_up_accelerometer_spi_read_y_axis
0001337c g     O .bss	000000c4 mem
00012ae4 g     F .text	00000030 memcmp
00013540 g       *ABS*	00000000 __alt_stack_base
00012898 g     F .text	0000006c alt_dev_llist_insert
000124d4 g     F .text	0000004c sbrk
00011668 g     F .text	0000052c ___svfprintf_internal_r
00012164 g     F .text	000000b8 __sfvwrite_small_dev
00013320 g       *ABS*	00000000 __bss_start
00010f24 g     F .text	00000020 memset
00010930 g     F .text	0000004c main
00013364 g     O .bss	00000004 alt_envp
00020000 g       *ABS*	00000000 __alt_heap_limit
000113ac g     F .text	00000234 _strtol_r
00011028 g     F .text	00000158 _malloc_r
0001333c g     O .bss	00000004 raw
000130b4 g     O .rwdata	00000004 alt_errno
00010a88 g     F .text	00000084 .hidden __divsi3
00010610 g     F .text	00000124 convert_data_quant
00012b14 g       *ABS*	00000000 __flash_rodata_start
00013340 g     O .bss	00000004 printing
000125e0 g     F .text	00000020 alt_irq_init
00010ce0 g     F .text	00000090 asprintf
00012260 g     F .text	00000058 _write_r
00013344 g     O .bss	00000004 samplesPrinted
00013348 g     O .bss	00000004 numSamples
0001308c g     O .rwdata	00000004 _impure_ptr
0001336c g     O .bss	00000004 alt_argc
00010020 g       .exceptions	00000000 alt_irq_entry
00013320 g     O .bss	00000001 pwm
00012e60 g     O .rwdata	000000c4 a_quant
000130ac g     O .rwdata	00000008 alt_fs_list
00011b94 g     F .text	0000001c __vfprintf_internal_unused
00010020 g       *ABS*	00000000 __ram_exceptions_start
0001272c g     F .text	00000008 alt_up_accelerometer_spi_open_dev
0001334c g     O .bss	00000004 exec_t2
000130c0 g       *ABS*	00000000 _edata
00013540 g       *ABS*	00000000 _end
00010180 g       *ABS*	00000000 __ram_exceptions_end
00010b0c g     F .text	00000074 .hidden __modsi3
00013090 g     O .rwdata	00000004 __ctype_ptr__
00012834 g     F .text	00000058 alt_up_accelerometer_spi_read_z_axis
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00010d70 g     F .text	0000000c atoi
00012bd2 g     O .rodata	00000101 _ctype_
00010734 g     F .text	00000030 convert_read
0001000c g       .entry	00000000 _exit
00012748 g     F .text	00000020 alt_up_accelerometer_spi_read
00012768 g     F .text	0000001c alt_up_accelerometer_spi_write
0001097c g     F .text	0000010c .hidden __muldi3
00011390 g     F .text	0000001c strlen
00013354 g     O .bss	00000004 __malloc_sbrk_start
00012978 g     F .text	00000004 alt_icache_flush_all
00013094 g     O .rwdata	00000004 alt_priority_mask
00013358 g     O .bss	00000004 __malloc_free_list
00012148 g     F .text	0000001c __vfprintf_internal
00013350 g     O .bss	00000004 acc_dev
000130b8 g     O .rwdata	00000008 alt_alarm_list
00012390 g     F .text	000000e0 alt_load
00010eb0 g     F .text	00000014 free



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08406014 	ori	at,at,384
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	001015c0 	call	1015c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defffe04 	addi	sp,sp,-8
   10100:	dfc00115 	stw	ra,4(sp)
   10104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10108:	0007313a 	rdctl	r3,ipending
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   1010c:	04000074 	movhi	r16,1
   10110:	840d1004 	addi	r16,r16,13376

  active = alt_irq_pending ();

  do
  {
    i = 0;
   10114:	000b883a 	mov	r5,zero
    mask = 1;
   10118:	00800044 	movi	r2,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1011c:	1888703a 	and	r4,r3,r2
   10120:	20000b26 	beq	r4,zero,10150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   10124:	280490fa 	slli	r2,r5,3
   10128:	8085883a 	add	r2,r16,r2
   1012c:	10c00017 	ldw	r3,0(r2)
   10130:	11000117 	ldw	r4,4(r2)
   10134:	183ee83a 	callr	r3
   10138:	0007313a 	rdctl	r3,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   1013c:	183ff51e 	bne	r3,zero,10114 <__alt_data_end+0xffff0114>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   10140:	dfc00117 	ldw	ra,4(sp)
   10144:	dc000017 	ldw	r16,0(sp)
   10148:	dec00204 	addi	sp,sp,8
   1014c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10150:	1085883a 	add	r2,r2,r2
      i++;
   10154:	29400044 	addi	r5,r5,1

    } while (1);
   10158:	003ff006 	br	1011c <__alt_data_end+0xffff011c>

0001015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   1015c:	d0a0bc17 	ldw	r2,-32016(gp)
   10160:	10000426 	beq	r2,zero,10174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   10164:	200b883a 	mov	r5,r4
   10168:	000d883a 	mov	r6,zero
   1016c:	013fffc4 	movi	r4,-1
   10170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
   10178:	0005883a 	mov	r2,zero
   1017c:	f800283a 	ret

Disassembly of section .text:

00010180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10180:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10184:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10188:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1018c:	d6ac2214 	ori	gp,gp,45192
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10190:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10194:	108cc814 	ori	r2,r2,13088

    movhi r3, %hi(__bss_end)
   10198:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1019c:	18cd5014 	ori	r3,r3,13632

    beq r2, r3, 1f
   101a0:	10c00326 	beq	r2,r3,101b0 <_start+0x30>

0:
    stw zero, (r2)
   101a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101ac:	10fffd36 	bltu	r2,r3,101a4 <__alt_data_end+0xffff01a4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101b0:	00123900 	call	12390 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101b4:	00124700 	call	12470 <alt_main>

000101b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101b8:	003fff06 	br	101b8 <__alt_data_end+0xffff01b8>

000101bc <sys_timer_isr>:
void led_write(alt_u8 led_pattern) {
    IOWR(LED_BASE, 0, led_pattern);
}

void sys_timer_isr() {
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   101bc:	008000b4 	movhi	r2,2
   101c0:	10840804 	addi	r2,r2,4128
   101c4:	10000035 	stwio	zero,0(r2)

    if (pwm < abs(level)) {
   101c8:	d0a0ac17 	ldw	r2,-32080(gp)
   101cc:	d160a607 	ldb	r5,-32104(gp)
   101d0:	1009883a 	mov	r4,r2
   101d4:	1000010e 	bge	r2,zero,101dc <sys_timer_isr+0x20>
   101d8:	0089c83a 	sub	r4,zero,r2
   101dc:	00c000b4 	movhi	r3,2
   101e0:	18c42404 	addi	r3,r3,4240
   101e4:	2900080e 	bge	r5,r4,10208 <sys_timer_isr+0x4c>

        if (level < 0) {
   101e8:	1000040e 	bge	r2,zero,101fc <sys_timer_isr+0x40>

    return 0;
}

void led_write(alt_u8 led_pattern) {
    IOWR(LED_BASE, 0, led_pattern);
   101ec:	d0a0ab03 	ldbu	r2,-32084(gp)
   101f0:	1085883a 	add	r2,r2,r2
   101f4:	10803fcc 	andi	r2,r2,255
   101f8:	00000406 	br	1020c <sys_timer_isr+0x50>
   101fc:	d0a0ab03 	ldbu	r2,-32084(gp)
   10200:	1004d07a 	srli	r2,r2,1
   10204:	00000106 	br	1020c <sys_timer_isr+0x50>
   10208:	d0a0ab03 	ldbu	r2,-32084(gp)
   1020c:	18800035 	stwio	r2,0(r3)

    } else {
        led_write(led);
    }

    if (pwm > PWM_PERIOD) {
   10210:	d0a0a603 	ldbu	r2,-32104(gp)
   10214:	01000404 	movi	r4,16
   10218:	10c03fcc 	andi	r3,r2,255
   1021c:	18c0201c 	xori	r3,r3,128
   10220:	18ffe004 	addi	r3,r3,-128
   10224:	20c0020e 	bge	r4,r3,10230 <sys_timer_isr+0x74>
        pwm = 0;
   10228:	d020a605 	stb	zero,-32104(gp)
   1022c:	f800283a 	ret
    } else {
        pwm++;
   10230:	10800044 	addi	r2,r2,1
   10234:	d0a0a605 	stb	r2,-32104(gp)
   10238:	f800283a 	ret

0001023c <print_text>:

alt_32 x_read;
alt_up_accelerometer_spi_dev * acc_dev;

void print_text(char *text, const int length)
{
   1023c:	defff404 	addi	sp,sp,-48
   10240:	dcc00715 	stw	r19,28(sp)
   10244:	dc400515 	stw	r17,20(sp)
   10248:	dc000415 	stw	r16,16(sp)
   1024c:	dfc00b15 	stw	ra,44(sp)
   10250:	dd800a15 	stw	r22,40(sp)
   10254:	dd400915 	stw	r21,36(sp)
   10258:	dd000815 	stw	r20,32(sp)
   1025c:	dc800615 	stw	r18,24(sp)
   10260:	2023883a 	mov	r17,r4
   10264:	2827883a 	mov	r19,r5
	for (int i = 0; i < length;i++){
   10268:	0021883a 	mov	r16,zero
   1026c:	84c09e0e 	bge	r16,r19,104e8 <print_text+0x2ac>
		if (text[i] == 'P'){
   10270:	8c05883a 	add	r2,r17,r16
   10274:	10800007 	ldb	r2,0(r2)
   10278:	00c01404 	movi	r3,80
   1027c:	10c0301e 	bne	r2,r3,10340 <print_text+0x104>
			char numSampleschar[10];
			int ind_numSamples = 0;
			while(i < length){
				printf("1\n");
				if (isdigit(text[i])){
   10280:	04800244 	movi	r18,9
	for (int i = 0; i < length;i++){
		if (text[i] == 'P'){
			char numSampleschar[10];
			int ind_numSamples = 0;
			while(i < length){
				printf("1\n");
   10284:	01000074 	movhi	r4,1
   10288:	210ac504 	addi	r4,r4,11028
   1028c:	001132c0 	call	1132c <puts>
				if (isdigit(text[i])){
   10290:	8c05883a 	add	r2,r17,r16
   10294:	10800007 	ldb	r2,0(r2)
   10298:	10bff404 	addi	r2,r2,-48
   1029c:	90800436 	bltu	r18,r2,102b0 <print_text+0x74>
   102a0:	8027883a 	mov	r19,r16
   102a4:	8c23883a 	add	r17,r17,r16
					break;
				}
				i++;
			}
			while(isdigit(text[i])){
   102a8:	04800244 	movi	r18,9
   102ac:	00000306 	br	102bc <print_text+0x80>
			while(i < length){
				printf("1\n");
				if (isdigit(text[i])){
					break;
				}
				i++;
   102b0:	84000044 	addi	r16,r16,1
{
	for (int i = 0; i < length;i++){
		if (text[i] == 'P'){
			char numSampleschar[10];
			int ind_numSamples = 0;
			while(i < length){
   102b4:	84fff316 	blt	r16,r19,10284 <__alt_data_end+0xffff0284>
   102b8:	003ff906 	br	102a0 <__alt_data_end+0xffff02a0>
				if (isdigit(text[i])){
					break;
				}
				i++;
			}
			while(isdigit(text[i])){
   102bc:	88800007 	ldb	r2,0(r17)
   102c0:	10bff404 	addi	r2,r2,-48
   102c4:	90800b36 	bltu	r18,r2,102f4 <print_text+0xb8>
				printf("2\n");
   102c8:	01000074 	movhi	r4,1
   102cc:	210ac604 	addi	r4,r4,11032
   102d0:	001132c0 	call	1132c <puts>
				numSampleschar[ind_numSamples] = text[i];
   102d4:	88c00003 	ldbu	r3,0(r17)
   102d8:	84c5c83a 	sub	r2,r16,r19
   102dc:	d9000104 	addi	r4,sp,4
   102e0:	2085883a 	add	r2,r4,r2
   102e4:	10c00005 	stb	r3,0(r2)
				ind_numSamples ++;
				i++;
   102e8:	84000044 	addi	r16,r16,1
   102ec:	8c400044 	addi	r17,r17,1
   102f0:	003ff206 	br	102bc <__alt_data_end+0xffff02bc>
			}
			numSamples = atoi(numSampleschar);
   102f4:	d9000104 	addi	r4,sp,4
   102f8:	0010d700 	call	10d70 <atoi>
			printing = 1;
			samplesPrinted = 0;
			printf("{\n");
   102fc:	01000074 	movhi	r4,1
				printf("2\n");
				numSampleschar[ind_numSamples] = text[i];
				ind_numSamples ++;
				i++;
			}
			numSamples = atoi(numSampleschar);
   10300:	d0a0b015 	stw	r2,-32064(gp)
			printing = 1;
			samplesPrinted = 0;
			printf("{\n");
   10304:	210ac704 	addi	r4,r4,11036
				numSampleschar[ind_numSamples] = text[i];
				ind_numSamples ++;
				i++;
			}
			numSamples = atoi(numSampleschar);
			printing = 1;
   10308:	00800044 	movi	r2,1
   1030c:	d0a0ae15 	stw	r2,-32072(gp)
			samplesPrinted = 0;
   10310:	d020af15 	stw	zero,-32068(gp)
			printf("{\n");
   10314:	001132c0 	call	1132c <puts>
    char *printMsg;
    asprintf(&printMsg, "<--> Detected %d characters: %s <--> \n %c", length, text, 0x4); // Print out the strings
    alt_putstr(printMsg);
    free(printMsg);
    memset(text, 0, 2 * CHARLIM); // Empty the text buffer for next input
}
   10318:	dfc00b17 	ldw	ra,44(sp)
   1031c:	dd800a17 	ldw	r22,40(sp)
   10320:	dd400917 	ldw	r21,36(sp)
   10324:	dd000817 	ldw	r20,32(sp)
   10328:	dcc00717 	ldw	r19,28(sp)
   1032c:	dc800617 	ldw	r18,24(sp)
   10330:	dc400517 	ldw	r17,20(sp)
   10334:	dc000417 	ldw	r16,16(sp)
   10338:	dec00c04 	addi	sp,sp,48
   1033c:	f800283a 	ret
			printing = 1;
			samplesPrinted = 0;
			printf("{\n");
			return;
		}
		if (text[i]=='C'){
   10340:	00c010c4 	movi	r3,67
   10344:	81000044 	addi	r4,r16,1
   10348:	10c00f1e 	bne	r2,r3,10388 <print_text+0x14c>
			i=(i+1)%length;
   1034c:	980b883a 	mov	r5,r19
   10350:	0010b0c0 	call	10b0c <__modsi3>
   10354:	1021883a 	mov	r16,r2
			filt = text[i] - '0';
   10358:	8885883a 	add	r2,r17,r2
   1035c:	10800007 	ldb	r2,0(r2)
   10360:	10bff404 	addi	r2,r2,-48
   10364:	d0a0a815 	stw	r2,-32096(gp)
			if (filt != 0){
   10368:	10000326 	beq	r2,zero,10378 <print_text+0x13c>
				printf("Filtering On\n");
   1036c:	01000074 	movhi	r4,1
   10370:	210ac804 	addi	r4,r4,11040
   10374:	00000206 	br	10380 <print_text+0x144>
			}else{
				printf("Filtering Off\n");
   10378:	01000074 	movhi	r4,1
   1037c:	210acc04 	addi	r4,r4,11056
   10380:	001132c0 	call	1132c <puts>
   10384:	00005606 	br	104e0 <print_text+0x2a4>
			}
		}else if(text[i] == 'T'){
   10388:	00c01504 	movi	r3,84
   1038c:	10c0541e 	bne	r2,r3,104e0 <print_text+0x2a4>
			char tapNum[2], coeff[10];
			int ind_tapNum = 0;
			int ind_coeff = 0;
			i++;
   10390:	2021883a 	mov	r16,r4
			while(i < length){
				printf("1\n");
				if (isdigit(text[i])){
   10394:	05000244 	movi	r20,9
   10398:	8c25883a 	add	r18,r17,r16
		}else if(text[i] == 'T'){
			char tapNum[2], coeff[10];
			int ind_tapNum = 0;
			int ind_coeff = 0;
			i++;
			while(i < length){
   1039c:	84c00626 	beq	r16,r19,103b8 <print_text+0x17c>
				printf("1\n");
   103a0:	01000074 	movhi	r4,1
   103a4:	210ac504 	addi	r4,r4,11028
   103a8:	001132c0 	call	1132c <puts>
				if (isdigit(text[i])){
   103ac:	90800007 	ldb	r2,0(r18)
   103b0:	10bff404 	addi	r2,r2,-48
   103b4:	a0800336 	bltu	r20,r2,103c4 <print_text+0x188>
   103b8:	802b883a 	mov	r21,r16
					break;
				}
				i++;
			}
			while(isdigit(text[i])){
   103bc:	05000244 	movi	r20,9
   103c0:	00000206 	br	103cc <print_text+0x190>
			while(i < length){
				printf("1\n");
				if (isdigit(text[i])){
					break;
				}
				i++;
   103c4:	84000044 	addi	r16,r16,1
   103c8:	003ff306 	br	10398 <__alt_data_end+0xffff0398>
			}
			while(isdigit(text[i])){
   103cc:	90800007 	ldb	r2,0(r18)
   103d0:	10bff404 	addi	r2,r2,-48
   103d4:	a0800b36 	bltu	r20,r2,10404 <print_text+0x1c8>
				printf("2\n");
   103d8:	01000074 	movhi	r4,1
   103dc:	210ac604 	addi	r4,r4,11032
   103e0:	001132c0 	call	1132c <puts>
				tapNum[ind_tapNum] = text[i];
   103e4:	90c00003 	ldbu	r3,0(r18)
   103e8:	8545c83a 	sub	r2,r16,r21
   103ec:	d9000384 	addi	r4,sp,14
   103f0:	2085883a 	add	r2,r4,r2
   103f4:	10c00005 	stb	r3,0(r2)
				ind_tapNum ++;
				i++;
   103f8:	84000044 	addi	r16,r16,1
   103fc:	94800044 	addi	r18,r18,1
   10400:	003ff206 	br	103cc <__alt_data_end+0xffff03cc>
			}
			while(i < length){
				printf("4\n");
				if (isdigit(text[i])){
   10404:	05000244 	movi	r20,9
   10408:	8c25883a 	add	r18,r17,r16
				printf("2\n");
				tapNum[ind_tapNum] = text[i];
				ind_tapNum ++;
				i++;
			}
			while(i < length){
   1040c:	84c0060e 	bge	r16,r19,10428 <print_text+0x1ec>
				printf("4\n");
   10410:	01000074 	movhi	r4,1
   10414:	210ad004 	addi	r4,r4,11072
   10418:	001132c0 	call	1132c <puts>
				if (isdigit(text[i])){
   1041c:	90800007 	ldb	r2,0(r18)
   10420:	10bff404 	addi	r2,r2,-48
   10424:	a0800436 	bltu	r20,r2,10438 <print_text+0x1fc>
   10428:	802b883a 	mov	r21,r16
					break;
				}
				i++;
			}
			while(isdigit(text[i])||(text[i]=='-')){
   1042c:	05800244 	movi	r22,9
   10430:	05000b44 	movi	r20,45
   10434:	00000c06 	br	10468 <print_text+0x22c>
			while(i < length){
				printf("4\n");
				if (isdigit(text[i])){
					break;
				}
				i++;
   10438:	84000044 	addi	r16,r16,1
   1043c:	003ff206 	br	10408 <__alt_data_end+0xffff0408>
			}
			while(isdigit(text[i])||(text[i]=='-')){
				printf("3\n");
   10440:	01000074 	movhi	r4,1
   10444:	210ad104 	addi	r4,r4,11076
   10448:	001132c0 	call	1132c <puts>
				coeff[ind_coeff] = text[i];
   1044c:	90c00003 	ldbu	r3,0(r18)
   10450:	8545c83a 	sub	r2,r16,r21
   10454:	d9000104 	addi	r4,sp,4
   10458:	2085883a 	add	r2,r4,r2
   1045c:	10c00005 	stb	r3,0(r2)
				ind_coeff++;
				i++;
   10460:	84000044 	addi	r16,r16,1
   10464:	94800044 	addi	r18,r18,1
				if (isdigit(text[i])){
					break;
				}
				i++;
			}
			while(isdigit(text[i])||(text[i]=='-')){
   10468:	90800007 	ldb	r2,0(r18)
   1046c:	10fff404 	addi	r3,r2,-48
   10470:	b0fff32e 	bgeu	r22,r3,10440 <__alt_data_end+0xffff0440>
   10474:	153ff226 	beq	r2,r20,10440 <__alt_data_end+0xffff0440>
				printf("3\n");
				coeff[ind_coeff] = text[i];
				ind_coeff++;
				i++;
			}
			a_quant[atoi(tapNum)] = atoi(coeff);
   10478:	d9000384 	addi	r4,sp,14
   1047c:	0010d700 	call	10d70 <atoi>
   10480:	d9000104 	addi	r4,sp,4
   10484:	1025883a 	mov	r18,r2
   10488:	0010d700 	call	10d70 <atoi>
   1048c:	94a5883a 	add	r18,r18,r18
   10490:	00c00074 	movhi	r3,1
   10494:	18cb9804 	addi	r3,r3,11872
   10498:	94a5883a 	add	r18,r18,r18
   1049c:	1ca5883a 	add	r18,r3,r18
			printf("filt coeff: %d %d\n", atoi(tapNum), atoi(coeff));
   104a0:	d9000384 	addi	r4,sp,14
				printf("3\n");
				coeff[ind_coeff] = text[i];
				ind_coeff++;
				i++;
			}
			a_quant[atoi(tapNum)] = atoi(coeff);
   104a4:	90800015 	stw	r2,0(r18)
			printf("filt coeff: %d %d\n", atoi(tapNum), atoi(coeff));
   104a8:	0010d700 	call	10d70 <atoi>
   104ac:	d9000104 	addi	r4,sp,4
   104b0:	1025883a 	mov	r18,r2
   104b4:	0010d700 	call	10d70 <atoi>
   104b8:	01000074 	movhi	r4,1
   104bc:	100d883a 	mov	r6,r2
   104c0:	900b883a 	mov	r5,r18
   104c4:	210ad204 	addi	r4,r4,11080
   104c8:	00112600 	call	11260 <printf>
			printf("filt coeff: %s %s\n", tapNum, coeff);
   104cc:	01000074 	movhi	r4,1
   104d0:	d9800104 	addi	r6,sp,4
   104d4:	d9400384 	addi	r5,sp,14
   104d8:	210ad704 	addi	r4,r4,11100
   104dc:	00112600 	call	11260 <printf>
alt_32 x_read;
alt_up_accelerometer_spi_dev * acc_dev;

void print_text(char *text, const int length)
{
	for (int i = 0; i < length;i++){
   104e0:	84000044 	addi	r16,r16,1
   104e4:	003f6106 	br	1026c <__alt_data_end+0xffff026c>
			printf("filt coeff: %s %s\n", tapNum, coeff);
		}

	}
    char *printMsg;
    asprintf(&printMsg, "<--> Detected %d characters: %s <--> \n %c", length, text, 0x4); // Print out the strings
   104e8:	00800104 	movi	r2,4
   104ec:	01400074 	movhi	r5,1
   104f0:	980d883a 	mov	r6,r19
   104f4:	880f883a 	mov	r7,r17
   104f8:	294adc04 	addi	r5,r5,11120
   104fc:	d889883a 	add	r4,sp,r2
   10500:	d8800015 	stw	r2,0(sp)
   10504:	0010ce00 	call	10ce0 <asprintf>
    alt_putstr(printMsg);
   10508:	d9000117 	ldw	r4,4(sp)
   1050c:	001249c0 	call	1249c <alt_putstr>
    free(printMsg);
   10510:	d9000117 	ldw	r4,4(sp)
   10514:	0010eb00 	call	10eb0 <free>
    memset(text, 0, 2 * CHARLIM); // Empty the text buffer for next input
   10518:	01840004 	movi	r6,4096
   1051c:	000b883a 	mov	r5,zero
   10520:	8809883a 	mov	r4,r17
}
   10524:	dfc00b17 	ldw	ra,44(sp)
   10528:	dd800a17 	ldw	r22,40(sp)
   1052c:	dd400917 	ldw	r21,36(sp)
   10530:	dd000817 	ldw	r20,32(sp)
   10534:	dcc00717 	ldw	r19,28(sp)
   10538:	dc800617 	ldw	r18,24(sp)
   1053c:	dc400517 	ldw	r17,20(sp)
   10540:	dc000417 	ldw	r16,16(sp)
   10544:	dec00c04 	addi	sp,sp,48
	}
    char *printMsg;
    asprintf(&printMsg, "<--> Detected %d characters: %s <--> \n %c", length, text, 0x4); // Print out the strings
    alt_putstr(printMsg);
    free(printMsg);
    memset(text, 0, 2 * CHARLIM); // Empty the text buffer for next input
   10548:	0010f241 	jmpi	10f24 <memset>

0001054c <generate_text>:
}

char generate_text(char curr, int *length, char *text, int *running)
{
   1054c:	defff804 	addi	sp,sp,-32
   10550:	dc000015 	stw	r16,0(sp)
   10554:	2021883a 	mov	r16,r4
    if (curr == '\n')
   10558:	21003fcc 	andi	r4,r4,255
   1055c:	2100201c 	xori	r4,r4,128
    free(printMsg);
    memset(text, 0, 2 * CHARLIM); // Empty the text buffer for next input
}

char generate_text(char curr, int *length, char *text, int *running)
{
   10560:	dfc00715 	stw	ra,28(sp)
   10564:	dd800615 	stw	r22,24(sp)
   10568:	dd400515 	stw	r21,20(sp)
   1056c:	dd000415 	stw	r20,16(sp)
   10570:	dcc00315 	stw	r19,12(sp)
   10574:	dc800215 	stw	r18,8(sp)
   10578:	dc400115 	stw	r17,4(sp)
    if (curr == '\n')
   1057c:	213fe004 	addi	r4,r4,-128
   10580:	00800284 	movi	r2,10
   10584:	20801726 	beq	r4,r2,105e4 <generate_text+0x98>
   10588:	3027883a 	mov	r19,r6
   1058c:	2829883a 	mov	r20,r5
   10590:	3025883a 	mov	r18,r6
        return curr; // If the line is empty, return nothing.
    int idx = 0;     // Keep track of how many characters have been sent down for later printing
    char newCurr = curr;

    while (newCurr != EOF && newCurr != '\n')
   10594:	057fffc4 	movi	r21,-1
   10598:	1023883a 	mov	r17,r2
    { // Keep reading characters until we get to the end of the line
        if (newCurr == QUITLETTER)
   1059c:	05801f84 	movi	r22,126
    if (curr == '\n')
        return curr; // If the line is empty, return nothing.
    int idx = 0;     // Keep track of how many characters have been sent down for later printing
    char newCurr = curr;

    while (newCurr != EOF && newCurr != '\n')
   105a0:	80803fcc 	andi	r2,r16,255
   105a4:	1080201c 	xori	r2,r2,128
   105a8:	10bfe004 	addi	r2,r2,-128
   105ac:	94c7c83a 	sub	r3,r18,r19
   105b0:	15400b26 	beq	r2,r21,105e0 <generate_text+0x94>
   105b4:	14400a26 	beq	r2,r17,105e0 <generate_text+0x94>
    { // Keep reading characters until we get to the end of the line
        if (newCurr == QUITLETTER)
   105b8:	1580041e 	bne	r2,r22,105cc <generate_text+0x80>
        {
            //*running = 0;
            printf("%s\n", 0x4);
   105bc:	01000074 	movhi	r4,1
   105c0:	01400104 	movi	r5,4
   105c4:	210ae704 	addi	r4,r4,11164
   105c8:	00112600 	call	11260 <printf>
        }                        // If quitting letter is encountered, setting running to 0
        text[idx] = newCurr;     // Add the next letter to the text buffer
   105cc:	94000005 	stb	r16,0(r18)
        idx++;                   // Keep track of the number of characters read
        newCurr = alt_getchar(); // Get the next character
   105d0:	00122b80 	call	122b8 <alt_getchar>
   105d4:	1021883a 	mov	r16,r2
   105d8:	94800044 	addi	r18,r18,1
   105dc:	003ff006 	br	105a0 <__alt_data_end+0xffff05a0>
    }
    *length = idx;
   105e0:	a0c00015 	stw	r3,0(r20)

    return newCurr;
}
   105e4:	8005883a 	mov	r2,r16
   105e8:	dfc00717 	ldw	ra,28(sp)
   105ec:	dd800617 	ldw	r22,24(sp)
   105f0:	dd400517 	ldw	r21,20(sp)
   105f4:	dd000417 	ldw	r20,16(sp)
   105f8:	dcc00317 	ldw	r19,12(sp)
   105fc:	dc800217 	ldw	r18,8(sp)
   10600:	dc400117 	ldw	r17,4(sp)
   10604:	dc000017 	ldw	r16,0(sp)
   10608:	dec00804 	addi	sp,sp,32
   1060c:	f800283a 	ret

00010610 <convert_data_quant>:

void convert_data_quant(int * level, alt_u8 * led, alt_32 * raw_dat) {
   10610:	defff504 	addi	sp,sp,-44
	int i;
	alt_64 res = 0;
	for (i = 0; i < TAPS; i++) {
		res += (alt_64) mem[(ind + i) % TAPS] * a_quant[i];
   10614:	d220aa17 	ldw	r8,-32088(gp)
    *length = idx;

    return newCurr;
}

void convert_data_quant(int * level, alt_u8 * led, alt_32 * raw_dat) {
   10618:	dcc00415 	stw	r19,16(sp)
   1061c:	dc800315 	stw	r18,12(sp)
	int i;
	alt_64 res = 0;
	for (i = 0; i < TAPS; i++) {
		res += (alt_64) mem[(ind + i) % TAPS] * a_quant[i];
   10620:	04c00074 	movhi	r19,1
   10624:	04800074 	movhi	r18,1
    *length = idx;

    return newCurr;
}

void convert_data_quant(int * level, alt_u8 * led, alt_32 * raw_dat) {
   10628:	df000915 	stw	fp,36(sp)
   1062c:	ddc00815 	stw	r23,32(sp)
   10630:	dd800715 	stw	r22,28(sp)
   10634:	dd400615 	stw	r21,24(sp)
   10638:	dd000515 	stw	r20,20(sp)
   1063c:	dc400215 	stw	r17,8(sp)
   10640:	dc000115 	stw	r16,4(sp)
   10644:	dfc00a15 	stw	ra,40(sp)
   10648:	2029883a 	mov	r20,r4
   1064c:	282b883a 	mov	r21,r5
   10650:	302f883a 	mov	r23,r6
	int i;
	alt_64 res = 0;
   10654:	0021883a 	mov	r16,zero
   10658:	0023883a 	mov	r17,zero
	for (i = 0; i < TAPS; i++) {
   1065c:	002d883a 	mov	r22,zero
		res += (alt_64) mem[(ind + i) % TAPS] * a_quant[i];
   10660:	9cccdf04 	addi	r19,r19,13180
   10664:	07000c44 	movi	fp,49
   10668:	948b9804 	addi	r18,r18,11872
   1066c:	4589883a 	add	r4,r8,r22
   10670:	01400c44 	movi	r5,49
   10674:	da000015 	stw	r8,0(sp)
   10678:	0010be40 	call	10be4 <__umodsi3>
   1067c:	1085883a 	add	r2,r2,r2
   10680:	1085883a 	add	r2,r2,r2
   10684:	9885883a 	add	r2,r19,r2
   10688:	11000017 	ldw	r4,0(r2)
   1068c:	b585883a 	add	r2,r22,r22
   10690:	1085883a 	add	r2,r2,r2
   10694:	1485883a 	add	r2,r2,r18
   10698:	11800017 	ldw	r6,0(r2)
   1069c:	200bd7fa 	srai	r5,r4,31
}

void convert_data_quant(int * level, alt_u8 * led, alt_32 * raw_dat) {
	int i;
	alt_64 res = 0;
	for (i = 0; i < TAPS; i++) {
   106a0:	b5800044 	addi	r22,r22,1
		res += (alt_64) mem[(ind + i) % TAPS] * a_quant[i];
   106a4:	300fd7fa 	srai	r7,r6,31
   106a8:	001097c0 	call	1097c <__muldi3>
   106ac:	8085883a 	add	r2,r16,r2
   106b0:	1409803a 	cmpltu	r4,r2,r16
   106b4:	88c7883a 	add	r3,r17,r3
   106b8:	1021883a 	mov	r16,r2
   106bc:	20e3883a 	add	r17,r4,r3
}

void convert_data_quant(int * level, alt_u8 * led, alt_32 * raw_dat) {
	int i;
	alt_64 res = 0;
	for (i = 0; i < TAPS; i++) {
   106c0:	da000017 	ldw	r8,0(sp)
   106c4:	b73fe91e 	bne	r22,fp,1066c <__alt_data_end+0xffff066c>
		res += (alt_64) mem[(ind + i) % TAPS] * a_quant[i];
	}
	//printf("%d", res);
	alt_32 filt_read = (res >> EXP_COEFFICIENT_GAIN);
   106c8:	8822953a 	slli	r17,r17,20
   106cc:	1004d33a 	srli	r2,r2,12
   106d0:	8884b03a 	or	r2,r17,r2
	* raw_dat = filt_read;
	alt_u8 val = (filt_read >> 6) & 0x07;
	*led = (8 >> val) | (8 << (8 - val));
   106d4:	1007d1ba 	srai	r3,r2,6
	for (i = 0; i < TAPS; i++) {
		res += (alt_64) mem[(ind + i) % TAPS] * a_quant[i];
	}
	//printf("%d", res);
	alt_32 filt_read = (res >> EXP_COEFFICIENT_GAIN);
	* raw_dat = filt_read;
   106d8:	b8800015 	stw	r2,0(r23)
	alt_u8 val = (filt_read >> 6) & 0x07;
	*led = (8 >> val) | (8 << (8 - val));
	*level = (filt_read >> 1) & 0x1f;
   106dc:	1005d07a 	srai	r2,r2,1
	}
	//printf("%d", res);
	alt_32 filt_read = (res >> EXP_COEFFICIENT_GAIN);
	* raw_dat = filt_read;
	alt_u8 val = (filt_read >> 6) & 0x07;
	*led = (8 >> val) | (8 << (8 - val));
   106e0:	190001cc 	andi	r4,r3,7
   106e4:	00c00204 	movi	r3,8
   106e8:	190bc83a 	sub	r5,r3,r4
   106ec:	194a983a 	sll	r5,r3,r5
   106f0:	1907d83a 	sra	r3,r3,r4
	*level = (filt_read >> 1) & 0x1f;
   106f4:	108007cc 	andi	r2,r2,31
	}
	//printf("%d", res);
	alt_32 filt_read = (res >> EXP_COEFFICIENT_GAIN);
	* raw_dat = filt_read;
	alt_u8 val = (filt_read >> 6) & 0x07;
	*led = (8 >> val) | (8 << (8 - val));
   106f8:	28c6b03a 	or	r3,r5,r3
   106fc:	a8c00005 	stb	r3,0(r21)
	*level = (filt_read >> 1) & 0x1f;
   10700:	a0800015 	stw	r2,0(r20)
}
   10704:	dfc00a17 	ldw	ra,40(sp)
   10708:	df000917 	ldw	fp,36(sp)
   1070c:	ddc00817 	ldw	r23,32(sp)
   10710:	dd800717 	ldw	r22,28(sp)
   10714:	dd400617 	ldw	r21,24(sp)
   10718:	dd000517 	ldw	r20,20(sp)
   1071c:	dcc00417 	ldw	r19,16(sp)
   10720:	dc800317 	ldw	r18,12(sp)
   10724:	dc400217 	ldw	r17,8(sp)
   10728:	dc000117 	ldw	r16,4(sp)
   1072c:	dec00b04 	addi	sp,sp,44
   10730:	f800283a 	ret

00010734 <convert_read>:

void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
	//acc_read += OFFSET;
	alt_u8 val = (acc_read >> 6) & 0x07;
	*led = (8 >> val) | (8 << (8 - val));
   10734:	2005d1ba 	srai	r2,r4,6
	*level = (acc_read >> 1) & 0x1f;
   10738:	2009d07a 	srai	r4,r4,1
}

void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
	//acc_read += OFFSET;
	alt_u8 val = (acc_read >> 6) & 0x07;
	*led = (8 >> val) | (8 << (8 - val));
   1073c:	10c001cc 	andi	r3,r2,7
   10740:	00800204 	movi	r2,8
   10744:	10cfc83a 	sub	r7,r2,r3
   10748:	11ce983a 	sll	r7,r2,r7
   1074c:	10c5d83a 	sra	r2,r2,r3
	*level = (acc_read >> 1) & 0x1f;
   10750:	210007cc 	andi	r4,r4,31
}

void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
	//acc_read += OFFSET;
	alt_u8 val = (acc_read >> 6) & 0x07;
	*led = (8 >> val) | (8 << (8 - val));
   10754:	3884b03a 	or	r2,r7,r2
   10758:	30800005 	stb	r2,0(r6)
	*level = (acc_read >> 1) & 0x1f;
   1075c:	29000015 	stw	r4,0(r5)
   10760:	f800283a 	ret

00010764 <read_chars>:
}

int read_chars()
{
   10764:	defbfa04 	addi	sp,sp,-4120
   10768:	dc440315 	stw	r17,4108(sp)
   1076c:	dc040215 	stw	r16,4104(sp)
    char text[2 * CHARLIM]; // The buffer for the printing text
    char prevLetter = '!';
    int length = 0;
    int running = 1;
   10770:	00800044 	movi	r2,1

    while (running)
    {
    	alt_up_accelerometer_spi_read_x_axis(acc_dev, &x_read);
		// alt_printf("raw data: %x\n", x_read);
		mem[ind] = x_read + OFFSET;
   10774:	04000074 	movhi	r16,1
				printing = 0;
				printf("}\n");
			}
		}

		char c = IORD_ALTERA_AVALON_JTAG_UART_DATA(JTAG_UART_BASE);
   10778:	044000b4 	movhi	r17,2
	*led = (8 >> val) | (8 << (8 - val));
	*level = (acc_read >> 1) & 0x1f;
}

int read_chars()
{
   1077c:	dfc40515 	stw	ra,4116(sp)
   10780:	dc840415 	stw	r18,4112(sp)
    char text[2 * CHARLIM]; // The buffer for the printing text
    char prevLetter = '!';
    int length = 0;
   10784:	d8040115 	stw	zero,4100(sp)
    int running = 1;
   10788:	d8840015 	stw	r2,4096(sp)

    while (running)
    {
    	alt_up_accelerometer_spi_read_x_axis(acc_dev, &x_read);
		// alt_printf("raw data: %x\n", x_read);
		mem[ind] = x_read + OFFSET;
   1078c:	840cdf04 	addi	r16,r16,13180
				printing = 0;
				printf("}\n");
			}
		}

		char c = IORD_ALTERA_AVALON_JTAG_UART_DATA(JTAG_UART_BASE);
   10790:	8c442804 	addi	r17,r17,4256
    int length = 0;
    int running = 1;



    while (running)
   10794:	d8840017 	ldw	r2,4096(sp)
   10798:	10003e26 	beq	r2,zero,10894 <read_chars+0x130>
    {
    	alt_up_accelerometer_spi_read_x_axis(acc_dev, &x_read);
   1079c:	d120b217 	ldw	r4,-32056(gp)
   107a0:	d160a904 	addi	r5,gp,-32092
   107a4:	00127840 	call	12784 <alt_up_accelerometer_spi_read_x_axis>
		// alt_printf("raw data: %x\n", x_read);
		mem[ind] = x_read + OFFSET;
   107a8:	d120aa17 	ldw	r4,-32088(gp)
   107ac:	d4a0a917 	ldw	r18,-32092(gp)
		ind++;
		ind = ind % TAPS;
   107b0:	01400c44 	movi	r5,49

    while (running)
    {
    	alt_up_accelerometer_spi_read_x_axis(acc_dev, &x_read);
		// alt_printf("raw data: %x\n", x_read);
		mem[ind] = x_read + OFFSET;
   107b4:	2105883a 	add	r2,r4,r4
   107b8:	1085883a 	add	r2,r2,r2
   107bc:	8085883a 	add	r2,r16,r2
   107c0:	90fff804 	addi	r3,r18,-32
   107c4:	10c00015 	stw	r3,0(r2)
		ind++;
		ind = ind % TAPS;
   107c8:	21000044 	addi	r4,r4,1
   107cc:	0010be40 	call	10be4 <__umodsi3>
   107d0:	d0a0aa15 	stw	r2,-32088(gp)
		if (filt){
   107d4:	d0a0a817 	ldw	r2,-32096(gp)
   107d8:	10000526 	beq	r2,zero,107f0 <read_chars+0x8c>
			convert_data_quant(&level, &led, &raw);
   107dc:	d1a0ad04 	addi	r6,gp,-32076
   107e0:	d160ab04 	addi	r5,gp,-32084
   107e4:	d120ac04 	addi	r4,gp,-32080
   107e8:	00106100 	call	10610 <convert_data_quant>
   107ec:	00000406 	br	10800 <read_chars+0x9c>
		}else{
			convert_read(x_read, & level, & led);
   107f0:	d1a0ab04 	addi	r6,gp,-32084
   107f4:	d160ac04 	addi	r5,gp,-32080
   107f8:	9009883a 	mov	r4,r18
   107fc:	00107340 	call	10734 <convert_read>
		}
		//
		//convert_data(&level, &led);
		exec_t2 = times(NULL); // get system time after finishing the process
   10800:	0009883a 	mov	r4,zero
   10804:	00125200 	call	12520 <times>
   10808:	d0a0b115 	stw	r2,-32060(gp)
		int step = (int) (exec_t2 - exec_t1);
		//printf("proc time = %d ticks \n", step);
		//printf("time = %d ticks \n", (int) exec_t2);
		exec_t1 = exec_t2;
   1080c:	d0a0a715 	stw	r2,-32100(gp)
		if(printing){
   10810:	d0a0ae17 	ldw	r2,-32072(gp)
   10814:	10001126 	beq	r2,zero,1085c <read_chars+0xf8>
			printf("Value: %d,\n", raw);
   10818:	d160ad17 	ldw	r5,-32076(gp)
   1081c:	01000074 	movhi	r4,1
   10820:	210ae804 	addi	r4,r4,11168
   10824:	00112600 	call	11260 <printf>
			samplesPrinted++;
   10828:	d0a0af17 	ldw	r2,-32068(gp)
			if (samplesPrinted > numSamples){
   1082c:	d0e0b017 	ldw	r3,-32064(gp)
		//printf("proc time = %d ticks \n", step);
		//printf("time = %d ticks \n", (int) exec_t2);
		exec_t1 = exec_t2;
		if(printing){
			printf("Value: %d,\n", raw);
			samplesPrinted++;
   10830:	10800044 	addi	r2,r2,1
   10834:	d0a0af15 	stw	r2,-32068(gp)
			if (samplesPrinted > numSamples){
   10838:	1880080e 	bge	r3,r2,1085c <read_chars+0xf8>
				printf("\n %c", 0x4);
   1083c:	01000074 	movhi	r4,1
   10840:	210aeb04 	addi	r4,r4,11180
   10844:	01400104 	movi	r5,4
   10848:	00112600 	call	11260 <printf>
				printing = 0;
				printf("}\n");
   1084c:	01000074 	movhi	r4,1
   10850:	210aed04 	addi	r4,r4,11188
		if(printing){
			printf("Value: %d,\n", raw);
			samplesPrinted++;
			if (samplesPrinted > numSamples){
				printf("\n %c", 0x4);
				printing = 0;
   10854:	d020ae15 	stw	zero,-32072(gp)
				printf("}\n");
   10858:	001132c0 	call	1132c <puts>
			}
		}

		char c = IORD_ALTERA_AVALON_JTAG_UART_DATA(JTAG_UART_BASE);
   1085c:	89000037 	ldwio	r4,0(r17)
		//printf("%d\n", c);
		if (c != 10){
   10860:	00800284 	movi	r2,10
   10864:	21003fcc 	andi	r4,r4,255
   10868:	2100201c 	xori	r4,r4,128
   1086c:	213fe004 	addi	r4,r4,-128
   10870:	20bfc826 	beq	r4,r2,10794 <__alt_data_end+0xffff0794>
			// Keep running until QUITLETTER is encountered
			prevLetter = c;                                      // Extract the first character (and create a hold until one arrives)
			prevLetter = generate_text(prevLetter, &length, text, &running); // Process input text
   10874:	d9440104 	addi	r5,sp,4100
   10878:	d9c40004 	addi	r7,sp,4096
   1087c:	d80d883a 	mov	r6,sp
   10880:	001054c0 	call	1054c <generate_text>
			print_text(text, length);
   10884:	d9440117 	ldw	r5,4100(sp)
   10888:	d809883a 	mov	r4,sp
   1088c:	001023c0 	call	1023c <print_text>
   10890:	003fc006 	br	10794 <__alt_data_end+0xffff0794>


    }

    return 0;
}
   10894:	dfc40517 	ldw	ra,4116(sp)
   10898:	dc840417 	ldw	r18,4112(sp)
   1089c:	dc440317 	ldw	r17,4108(sp)
   108a0:	dc040217 	ldw	r16,4104(sp)
   108a4:	dec40604 	addi	sp,sp,4120
   108a8:	f800283a 	ret

000108ac <led_write>:

void led_write(alt_u8 led_pattern) {
    IOWR(LED_BASE, 0, led_pattern);
   108ac:	008000b4 	movhi	r2,2
   108b0:	21003fcc 	andi	r4,r4,255
   108b4:	10842404 	addi	r2,r2,4240
   108b8:	11000035 	stwio	r4,0(r2)
   108bc:	f800283a 	ret

000108c0 <timer_init>:
    } else {
        pwm++;
    }

}
void timer_init(void * isr) {
   108c0:	defffe04 	addi	sp,sp,-8
   108c4:	dc000015 	stw	r16,0(sp)

    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   108c8:	040000b4 	movhi	r16,2
    } else {
        pwm++;
    }

}
void timer_init(void * isr) {
   108cc:	dfc00115 	stw	ra,4(sp)

    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   108d0:	84040904 	addi	r16,r16,4132
   108d4:	008000c4 	movi	r2,3
   108d8:	80800035 	stwio	r2,0(r16)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   108dc:	00c000b4 	movhi	r3,2
   108e0:	0005883a 	mov	r2,zero
   108e4:	18c40804 	addi	r3,r3,4128
   108e8:	18800035 	stwio	r2,0(r3)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE, 0x0900);
   108ec:	00c000b4 	movhi	r3,2
   108f0:	18c40a04 	addi	r3,r3,4136
   108f4:	01424004 	movi	r5,2304
   108f8:	19400035 	stwio	r5,0(r3)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE, 0x0000);
   108fc:	00c000b4 	movhi	r3,2
   10900:	18c40b04 	addi	r3,r3,4140
   10904:	18800035 	stwio	r2,0(r3)
    alt_irq_register(TIMER_IRQ, 0, isr);
   10908:	200d883a 	mov	r6,r4
   1090c:	000b883a 	mov	r5,zero
   10910:	01000044 	movi	r4,1
   10914:	00122fc0 	call	122fc <alt_irq_register>
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);
   10918:	008001c4 	movi	r2,7
   1091c:	80800035 	stwio	r2,0(r16)

}
   10920:	dfc00117 	ldw	ra,4(sp)
   10924:	dc000017 	ldw	r16,0(sp)
   10928:	dec00204 	addi	sp,sp,8
   1092c:	f800283a 	ret

00010930 <main>:
int main()
{

	ind = 0;
	printing = 0;
	acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   10930:	01000074 	movhi	r4,1
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);

}

int main()
{
   10934:	deffff04 	addi	sp,sp,-4

	ind = 0;
	printing = 0;
	acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   10938:	210aee04 	addi	r4,r4,11192
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);

}

int main()
{
   1093c:	dfc00015 	stw	ra,0(sp)

	ind = 0;
   10940:	d020aa15 	stw	zero,-32088(gp)
	printing = 0;
   10944:	d020ae15 	stw	zero,-32072(gp)
	acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   10948:	001272c0 	call	1272c <alt_up_accelerometer_spi_open_dev>
   1094c:	d0a0b215 	stw	r2,-32056(gp)
	if (acc_dev == NULL) { // if return 1, check if the spi ip name is "accelerometer_spi"
   10950:	10000626 	beq	r2,zero,1096c <main+0x3c>
		return 1;
	}
	timer_init(sys_timer_isr);
   10954:	01000074 	movhi	r4,1
   10958:	21006f04 	addi	r4,r4,444
   1095c:	00108c00 	call	108c0 <timer_init>

    return read_chars();
}
   10960:	dfc00017 	ldw	ra,0(sp)
   10964:	dec00104 	addi	sp,sp,4
	if (acc_dev == NULL) { // if return 1, check if the spi ip name is "accelerometer_spi"
		return 1;
	}
	timer_init(sys_timer_isr);

    return read_chars();
   10968:	00107641 	jmpi	10764 <read_chars>
}
   1096c:	00800044 	movi	r2,1
   10970:	dfc00017 	ldw	ra,0(sp)
   10974:	dec00104 	addi	sp,sp,4
   10978:	f800283a 	ret

0001097c <__muldi3>:
   1097c:	defff604 	addi	sp,sp,-40
   10980:	dd800615 	stw	r22,24(sp)
   10984:	dd400515 	stw	r21,20(sp)
   10988:	dc400115 	stw	r17,4(sp)
   1098c:	357fffcc 	andi	r21,r6,65535
   10990:	2022d43a 	srli	r17,r4,16
   10994:	25bfffcc 	andi	r22,r4,65535
   10998:	dcc00315 	stw	r19,12(sp)
   1099c:	dc800215 	stw	r18,8(sp)
   109a0:	2027883a 	mov	r19,r4
   109a4:	2825883a 	mov	r18,r5
   109a8:	b009883a 	mov	r4,r22
   109ac:	a80b883a 	mov	r5,r21
   109b0:	dfc00915 	stw	ra,36(sp)
   109b4:	df000815 	stw	fp,32(sp)
   109b8:	ddc00715 	stw	r23,28(sp)
   109bc:	3839883a 	mov	fp,r7
   109c0:	302ed43a 	srli	r23,r6,16
   109c4:	dd000415 	stw	r20,16(sp)
   109c8:	dc000015 	stw	r16,0(sp)
   109cc:	3029883a 	mov	r20,r6
   109d0:	0010c3c0 	call	10c3c <__mulsi3>
   109d4:	a80b883a 	mov	r5,r21
   109d8:	8809883a 	mov	r4,r17
   109dc:	1021883a 	mov	r16,r2
   109e0:	0010c3c0 	call	10c3c <__mulsi3>
   109e4:	8809883a 	mov	r4,r17
   109e8:	b80b883a 	mov	r5,r23
   109ec:	102b883a 	mov	r21,r2
   109f0:	0010c3c0 	call	10c3c <__mulsi3>
   109f4:	b80b883a 	mov	r5,r23
   109f8:	b009883a 	mov	r4,r22
   109fc:	1023883a 	mov	r17,r2
   10a00:	0010c3c0 	call	10c3c <__mulsi3>
   10a04:	8006d43a 	srli	r3,r16,16
   10a08:	1545883a 	add	r2,r2,r21
   10a0c:	1885883a 	add	r2,r3,r2
   10a10:	1540022e 	bgeu	r2,r21,10a1c <__muldi3+0xa0>
   10a14:	00c00074 	movhi	r3,1
   10a18:	88e3883a 	add	r17,r17,r3
   10a1c:	1006d43a 	srli	r3,r2,16
   10a20:	1004943a 	slli	r2,r2,16
   10a24:	e00b883a 	mov	r5,fp
   10a28:	9809883a 	mov	r4,r19
   10a2c:	843fffcc 	andi	r16,r16,65535
   10a30:	1c63883a 	add	r17,r3,r17
   10a34:	1421883a 	add	r16,r2,r16
   10a38:	0010c3c0 	call	10c3c <__mulsi3>
   10a3c:	900b883a 	mov	r5,r18
   10a40:	a009883a 	mov	r4,r20
   10a44:	1027883a 	mov	r19,r2
   10a48:	0010c3c0 	call	10c3c <__mulsi3>
   10a4c:	9885883a 	add	r2,r19,r2
   10a50:	1447883a 	add	r3,r2,r17
   10a54:	8005883a 	mov	r2,r16
   10a58:	dfc00917 	ldw	ra,36(sp)
   10a5c:	df000817 	ldw	fp,32(sp)
   10a60:	ddc00717 	ldw	r23,28(sp)
   10a64:	dd800617 	ldw	r22,24(sp)
   10a68:	dd400517 	ldw	r21,20(sp)
   10a6c:	dd000417 	ldw	r20,16(sp)
   10a70:	dcc00317 	ldw	r19,12(sp)
   10a74:	dc800217 	ldw	r18,8(sp)
   10a78:	dc400117 	ldw	r17,4(sp)
   10a7c:	dc000017 	ldw	r16,0(sp)
   10a80:	dec00a04 	addi	sp,sp,40
   10a84:	f800283a 	ret

00010a88 <__divsi3>:
   10a88:	20001b16 	blt	r4,zero,10af8 <__divsi3+0x70>
   10a8c:	000f883a 	mov	r7,zero
   10a90:	28001616 	blt	r5,zero,10aec <__divsi3+0x64>
   10a94:	200d883a 	mov	r6,r4
   10a98:	29001a2e 	bgeu	r5,r4,10b04 <__divsi3+0x7c>
   10a9c:	00800804 	movi	r2,32
   10aa0:	00c00044 	movi	r3,1
   10aa4:	00000106 	br	10aac <__divsi3+0x24>
   10aa8:	10000d26 	beq	r2,zero,10ae0 <__divsi3+0x58>
   10aac:	294b883a 	add	r5,r5,r5
   10ab0:	10bfffc4 	addi	r2,r2,-1
   10ab4:	18c7883a 	add	r3,r3,r3
   10ab8:	293ffb36 	bltu	r5,r4,10aa8 <__alt_data_end+0xffff0aa8>
   10abc:	0005883a 	mov	r2,zero
   10ac0:	18000726 	beq	r3,zero,10ae0 <__divsi3+0x58>
   10ac4:	0005883a 	mov	r2,zero
   10ac8:	31400236 	bltu	r6,r5,10ad4 <__divsi3+0x4c>
   10acc:	314dc83a 	sub	r6,r6,r5
   10ad0:	10c4b03a 	or	r2,r2,r3
   10ad4:	1806d07a 	srli	r3,r3,1
   10ad8:	280ad07a 	srli	r5,r5,1
   10adc:	183ffa1e 	bne	r3,zero,10ac8 <__alt_data_end+0xffff0ac8>
   10ae0:	38000126 	beq	r7,zero,10ae8 <__divsi3+0x60>
   10ae4:	0085c83a 	sub	r2,zero,r2
   10ae8:	f800283a 	ret
   10aec:	014bc83a 	sub	r5,zero,r5
   10af0:	39c0005c 	xori	r7,r7,1
   10af4:	003fe706 	br	10a94 <__alt_data_end+0xffff0a94>
   10af8:	0109c83a 	sub	r4,zero,r4
   10afc:	01c00044 	movi	r7,1
   10b00:	003fe306 	br	10a90 <__alt_data_end+0xffff0a90>
   10b04:	00c00044 	movi	r3,1
   10b08:	003fee06 	br	10ac4 <__alt_data_end+0xffff0ac4>

00010b0c <__modsi3>:
   10b0c:	20001716 	blt	r4,zero,10b6c <__modsi3+0x60>
   10b10:	000f883a 	mov	r7,zero
   10b14:	2005883a 	mov	r2,r4
   10b18:	28001216 	blt	r5,zero,10b64 <__modsi3+0x58>
   10b1c:	2900162e 	bgeu	r5,r4,10b78 <__modsi3+0x6c>
   10b20:	01800804 	movi	r6,32
   10b24:	00c00044 	movi	r3,1
   10b28:	00000106 	br	10b30 <__modsi3+0x24>
   10b2c:	30000a26 	beq	r6,zero,10b58 <__modsi3+0x4c>
   10b30:	294b883a 	add	r5,r5,r5
   10b34:	31bfffc4 	addi	r6,r6,-1
   10b38:	18c7883a 	add	r3,r3,r3
   10b3c:	293ffb36 	bltu	r5,r4,10b2c <__alt_data_end+0xffff0b2c>
   10b40:	18000526 	beq	r3,zero,10b58 <__modsi3+0x4c>
   10b44:	1806d07a 	srli	r3,r3,1
   10b48:	11400136 	bltu	r2,r5,10b50 <__modsi3+0x44>
   10b4c:	1145c83a 	sub	r2,r2,r5
   10b50:	280ad07a 	srli	r5,r5,1
   10b54:	183ffb1e 	bne	r3,zero,10b44 <__alt_data_end+0xffff0b44>
   10b58:	38000126 	beq	r7,zero,10b60 <__modsi3+0x54>
   10b5c:	0085c83a 	sub	r2,zero,r2
   10b60:	f800283a 	ret
   10b64:	014bc83a 	sub	r5,zero,r5
   10b68:	003fec06 	br	10b1c <__alt_data_end+0xffff0b1c>
   10b6c:	0109c83a 	sub	r4,zero,r4
   10b70:	01c00044 	movi	r7,1
   10b74:	003fe706 	br	10b14 <__alt_data_end+0xffff0b14>
   10b78:	00c00044 	movi	r3,1
   10b7c:	003ff106 	br	10b44 <__alt_data_end+0xffff0b44>

00010b80 <__udivsi3>:
   10b80:	200d883a 	mov	r6,r4
   10b84:	2900152e 	bgeu	r5,r4,10bdc <__udivsi3+0x5c>
   10b88:	28001416 	blt	r5,zero,10bdc <__udivsi3+0x5c>
   10b8c:	00800804 	movi	r2,32
   10b90:	00c00044 	movi	r3,1
   10b94:	00000206 	br	10ba0 <__udivsi3+0x20>
   10b98:	10000e26 	beq	r2,zero,10bd4 <__udivsi3+0x54>
   10b9c:	28000516 	blt	r5,zero,10bb4 <__udivsi3+0x34>
   10ba0:	294b883a 	add	r5,r5,r5
   10ba4:	10bfffc4 	addi	r2,r2,-1
   10ba8:	18c7883a 	add	r3,r3,r3
   10bac:	293ffa36 	bltu	r5,r4,10b98 <__alt_data_end+0xffff0b98>
   10bb0:	18000826 	beq	r3,zero,10bd4 <__udivsi3+0x54>
   10bb4:	0005883a 	mov	r2,zero
   10bb8:	31400236 	bltu	r6,r5,10bc4 <__udivsi3+0x44>
   10bbc:	314dc83a 	sub	r6,r6,r5
   10bc0:	10c4b03a 	or	r2,r2,r3
   10bc4:	1806d07a 	srli	r3,r3,1
   10bc8:	280ad07a 	srli	r5,r5,1
   10bcc:	183ffa1e 	bne	r3,zero,10bb8 <__alt_data_end+0xffff0bb8>
   10bd0:	f800283a 	ret
   10bd4:	0005883a 	mov	r2,zero
   10bd8:	f800283a 	ret
   10bdc:	00c00044 	movi	r3,1
   10be0:	003ff406 	br	10bb4 <__alt_data_end+0xffff0bb4>

00010be4 <__umodsi3>:
   10be4:	2005883a 	mov	r2,r4
   10be8:	2900122e 	bgeu	r5,r4,10c34 <__umodsi3+0x50>
   10bec:	28001116 	blt	r5,zero,10c34 <__umodsi3+0x50>
   10bf0:	01800804 	movi	r6,32
   10bf4:	00c00044 	movi	r3,1
   10bf8:	00000206 	br	10c04 <__umodsi3+0x20>
   10bfc:	30000c26 	beq	r6,zero,10c30 <__umodsi3+0x4c>
   10c00:	28000516 	blt	r5,zero,10c18 <__umodsi3+0x34>
   10c04:	294b883a 	add	r5,r5,r5
   10c08:	31bfffc4 	addi	r6,r6,-1
   10c0c:	18c7883a 	add	r3,r3,r3
   10c10:	293ffa36 	bltu	r5,r4,10bfc <__alt_data_end+0xffff0bfc>
   10c14:	18000626 	beq	r3,zero,10c30 <__umodsi3+0x4c>
   10c18:	1806d07a 	srli	r3,r3,1
   10c1c:	11400136 	bltu	r2,r5,10c24 <__umodsi3+0x40>
   10c20:	1145c83a 	sub	r2,r2,r5
   10c24:	280ad07a 	srli	r5,r5,1
   10c28:	183ffb1e 	bne	r3,zero,10c18 <__alt_data_end+0xffff0c18>
   10c2c:	f800283a 	ret
   10c30:	f800283a 	ret
   10c34:	00c00044 	movi	r3,1
   10c38:	003ff706 	br	10c18 <__alt_data_end+0xffff0c18>

00010c3c <__mulsi3>:
   10c3c:	0005883a 	mov	r2,zero
   10c40:	20000726 	beq	r4,zero,10c60 <__mulsi3+0x24>
   10c44:	20c0004c 	andi	r3,r4,1
   10c48:	2008d07a 	srli	r4,r4,1
   10c4c:	18000126 	beq	r3,zero,10c54 <__mulsi3+0x18>
   10c50:	1145883a 	add	r2,r2,r5
   10c54:	294b883a 	add	r5,r5,r5
   10c58:	203ffa1e 	bne	r4,zero,10c44 <__alt_data_end+0xffff0c44>
   10c5c:	f800283a 	ret
   10c60:	f800283a 	ret

00010c64 <_asprintf_r>:
   10c64:	defff604 	addi	sp,sp,-40
   10c68:	dc000715 	stw	r16,28(sp)
   10c6c:	2821883a 	mov	r16,r5
   10c70:	dfc00815 	stw	ra,32(sp)
   10c74:	d9c00915 	stw	r7,36(sp)
   10c78:	0080a204 	movi	r2,648
   10c7c:	d880000d 	sth	r2,0(sp)
   10c80:	00bfffc4 	movi	r2,-1
   10c84:	d880008d 	sth	r2,2(sp)
   10c88:	00800074 	movhi	r2,1
   10c8c:	10836204 	addi	r2,r2,3464
   10c90:	d8800115 	stw	r2,4(sp)
   10c94:	00800074 	movhi	r2,1
   10c98:	10846004 	addi	r2,r2,4480
   10c9c:	d9c00904 	addi	r7,sp,36
   10ca0:	d80b883a 	mov	r5,sp
   10ca4:	d8000415 	stw	zero,16(sp)
   10ca8:	d8000215 	stw	zero,8(sp)
   10cac:	d8000515 	stw	zero,20(sp)
   10cb0:	d8000315 	stw	zero,12(sp)
   10cb4:	d8800615 	stw	r2,24(sp)
   10cb8:	00116680 	call	11668 <___svfprintf_internal_r>
   10cbc:	10000416 	blt	r2,zero,10cd0 <_asprintf_r+0x6c>
   10cc0:	d8c00417 	ldw	r3,16(sp)
   10cc4:	18000005 	stb	zero,0(r3)
   10cc8:	d8c00217 	ldw	r3,8(sp)
   10ccc:	80c00015 	stw	r3,0(r16)
   10cd0:	dfc00817 	ldw	ra,32(sp)
   10cd4:	dc000717 	ldw	r16,28(sp)
   10cd8:	dec00a04 	addi	sp,sp,40
   10cdc:	f800283a 	ret

00010ce0 <asprintf>:
   10ce0:	defff504 	addi	sp,sp,-44
   10ce4:	dc000715 	stw	r16,28(sp)
   10ce8:	2021883a 	mov	r16,r4
   10cec:	dfc00815 	stw	ra,32(sp)
   10cf0:	d9800915 	stw	r6,36(sp)
   10cf4:	d9c00a15 	stw	r7,40(sp)
   10cf8:	0080a204 	movi	r2,648
   10cfc:	d880000d 	sth	r2,0(sp)
   10d00:	00bfffc4 	movi	r2,-1
   10d04:	d880008d 	sth	r2,2(sp)
   10d08:	00800074 	movhi	r2,1
   10d0c:	10836204 	addi	r2,r2,3464
   10d10:	d8800115 	stw	r2,4(sp)
   10d14:	00800074 	movhi	r2,1
   10d18:	10846004 	addi	r2,r2,4480
   10d1c:	d8800615 	stw	r2,24(sp)
   10d20:	00800074 	movhi	r2,1
   10d24:	108c2304 	addi	r2,r2,12428
   10d28:	11000017 	ldw	r4,0(r2)
   10d2c:	280d883a 	mov	r6,r5
   10d30:	d9c00904 	addi	r7,sp,36
   10d34:	d80b883a 	mov	r5,sp
   10d38:	d8000415 	stw	zero,16(sp)
   10d3c:	d8000215 	stw	zero,8(sp)
   10d40:	d8000515 	stw	zero,20(sp)
   10d44:	d8000315 	stw	zero,12(sp)
   10d48:	00116680 	call	11668 <___svfprintf_internal_r>
   10d4c:	10000416 	blt	r2,zero,10d60 <asprintf+0x80>
   10d50:	d8c00417 	ldw	r3,16(sp)
   10d54:	18000005 	stb	zero,0(r3)
   10d58:	d8c00217 	ldw	r3,8(sp)
   10d5c:	80c00015 	stw	r3,0(r16)
   10d60:	dfc00817 	ldw	ra,32(sp)
   10d64:	dc000717 	ldw	r16,28(sp)
   10d68:	dec00b04 	addi	sp,sp,44
   10d6c:	f800283a 	ret

00010d70 <atoi>:
   10d70:	01800284 	movi	r6,10
   10d74:	000b883a 	mov	r5,zero
   10d78:	00115e01 	jmpi	115e0 <strtol>

00010d7c <_atoi_r>:
   10d7c:	01c00284 	movi	r7,10
   10d80:	000d883a 	mov	r6,zero
   10d84:	00113ac1 	jmpi	113ac <_strtol_r>

00010d88 <__sfvwrite_small_str_mbf>:
   10d88:	2880000b 	ldhu	r2,0(r5)
   10d8c:	10c0020c 	andi	r3,r2,8
   10d90:	18003826 	beq	r3,zero,10e74 <__sfvwrite_small_str_mbf+0xec>
   10d94:	28c0008f 	ldh	r3,2(r5)
   10d98:	defffa04 	addi	sp,sp,-24
   10d9c:	dc000015 	stw	r16,0(sp)
   10da0:	dfc00515 	stw	ra,20(sp)
   10da4:	dd000415 	stw	r20,16(sp)
   10da8:	dcc00315 	stw	r19,12(sp)
   10dac:	dc800215 	stw	r18,8(sp)
   10db0:	dc400115 	stw	r17,4(sp)
   10db4:	2821883a 	mov	r16,r5
   10db8:	1800290e 	bge	r3,zero,10e60 <__sfvwrite_small_str_mbf+0xd8>
   10dbc:	10c0800c 	andi	r3,r2,512
   10dc0:	18002726 	beq	r3,zero,10e60 <__sfvwrite_small_str_mbf+0xd8>
   10dc4:	28c00517 	ldw	r3,20(r5)
   10dc8:	3029883a 	mov	r20,r6
   10dcc:	3823883a 	mov	r17,r7
   10dd0:	19c0150e 	bge	r3,r7,10e28 <__sfvwrite_small_str_mbf+0xa0>
   10dd4:	1080200c 	andi	r2,r2,128
   10dd8:	10001426 	beq	r2,zero,10e2c <__sfvwrite_small_str_mbf+0xa4>
   10ddc:	29400217 	ldw	r5,8(r5)
   10de0:	84800417 	ldw	r18,16(r16)
   10de4:	80800617 	ldw	r2,24(r16)
   10de8:	9165c83a 	sub	r18,r18,r5
   10dec:	10001c26 	beq	r2,zero,10e60 <__sfvwrite_small_str_mbf+0xd8>
   10df0:	00c00074 	movhi	r3,1
   10df4:	18cc2304 	addi	r3,r3,12428
   10df8:	19000017 	ldw	r4,0(r3)
   10dfc:	3ca7883a 	add	r19,r7,r18
   10e00:	980d883a 	mov	r6,r19
   10e04:	103ee83a 	callr	r2
   10e08:	10001526 	beq	r2,zero,10e60 <__sfvwrite_small_str_mbf+0xd8>
   10e0c:	14a5883a 	add	r18,r2,r18
   10e10:	80800215 	stw	r2,8(r16)
   10e14:	84800415 	stw	r18,16(r16)
   10e18:	84c00315 	stw	r19,12(r16)
   10e1c:	84400515 	stw	r17,20(r16)
   10e20:	8807883a 	mov	r3,r17
   10e24:	00000106 	br	10e2c <__sfvwrite_small_str_mbf+0xa4>
   10e28:	38c00116 	blt	r7,r3,10e30 <__sfvwrite_small_str_mbf+0xa8>
   10e2c:	1823883a 	mov	r17,r3
   10e30:	81000417 	ldw	r4,16(r16)
   10e34:	880d883a 	mov	r6,r17
   10e38:	a00b883a 	mov	r5,r20
   10e3c:	0010ec40 	call	10ec4 <memmove>
   10e40:	80800517 	ldw	r2,20(r16)
   10e44:	81c00417 	ldw	r7,16(r16)
   10e48:	1445c83a 	sub	r2,r2,r17
   10e4c:	3c63883a 	add	r17,r7,r17
   10e50:	80800515 	stw	r2,20(r16)
   10e54:	84400415 	stw	r17,16(r16)
   10e58:	0005883a 	mov	r2,zero
   10e5c:	00000706 	br	10e7c <__sfvwrite_small_str_mbf+0xf4>
   10e60:	8080000b 	ldhu	r2,0(r16)
   10e64:	10801014 	ori	r2,r2,64
   10e68:	8080000d 	sth	r2,0(r16)
   10e6c:	00bfffc4 	movi	r2,-1
   10e70:	00000206 	br	10e7c <__sfvwrite_small_str_mbf+0xf4>
   10e74:	00bfffc4 	movi	r2,-1
   10e78:	f800283a 	ret
   10e7c:	dfc00517 	ldw	ra,20(sp)
   10e80:	dd000417 	ldw	r20,16(sp)
   10e84:	dcc00317 	ldw	r19,12(sp)
   10e88:	dc800217 	ldw	r18,8(sp)
   10e8c:	dc400117 	ldw	r17,4(sp)
   10e90:	dc000017 	ldw	r16,0(sp)
   10e94:	dec00604 	addi	sp,sp,24
   10e98:	f800283a 	ret

00010e9c <malloc>:
   10e9c:	00800074 	movhi	r2,1
   10ea0:	108c2304 	addi	r2,r2,12428
   10ea4:	200b883a 	mov	r5,r4
   10ea8:	11000017 	ldw	r4,0(r2)
   10eac:	00110281 	jmpi	11028 <_malloc_r>

00010eb0 <free>:
   10eb0:	00800074 	movhi	r2,1
   10eb4:	108c2304 	addi	r2,r2,12428
   10eb8:	200b883a 	mov	r5,r4
   10ebc:	11000017 	ldw	r4,0(r2)
   10ec0:	0010f441 	jmpi	10f44 <_free_r>

00010ec4 <memmove>:
   10ec4:	2005883a 	mov	r2,r4
   10ec8:	218f883a 	add	r7,r4,r6
   10ecc:	29000236 	bltu	r5,r4,10ed8 <memmove+0x14>
   10ed0:	1007883a 	mov	r3,r2
   10ed4:	00000c06 	br	10f08 <memmove+0x44>
   10ed8:	2987883a 	add	r3,r5,r6
   10edc:	20fffc2e 	bgeu	r4,r3,10ed0 <__alt_data_end+0xffff0ed0>
   10ee0:	380b883a 	mov	r5,r7
   10ee4:	30cdc83a 	sub	r6,r6,r3
   10ee8:	1989883a 	add	r4,r3,r6
   10eec:	20000526 	beq	r4,zero,10f04 <memmove+0x40>
   10ef0:	18ffffc4 	addi	r3,r3,-1
   10ef4:	19000003 	ldbu	r4,0(r3)
   10ef8:	297fffc4 	addi	r5,r5,-1
   10efc:	29000005 	stb	r4,0(r5)
   10f00:	003ff906 	br	10ee8 <__alt_data_end+0xffff0ee8>
   10f04:	f800283a 	ret
   10f08:	19c00526 	beq	r3,r7,10f20 <memmove+0x5c>
   10f0c:	29000003 	ldbu	r4,0(r5)
   10f10:	18c00044 	addi	r3,r3,1
   10f14:	29400044 	addi	r5,r5,1
   10f18:	193fffc5 	stb	r4,-1(r3)
   10f1c:	003ffa06 	br	10f08 <__alt_data_end+0xffff0f08>
   10f20:	f800283a 	ret

00010f24 <memset>:
   10f24:	2005883a 	mov	r2,r4
   10f28:	2007883a 	mov	r3,r4
   10f2c:	218d883a 	add	r6,r4,r6
   10f30:	19800326 	beq	r3,r6,10f40 <memset+0x1c>
   10f34:	19400005 	stb	r5,0(r3)
   10f38:	18c00044 	addi	r3,r3,1
   10f3c:	003ffc06 	br	10f30 <__alt_data_end+0xffff0f30>
   10f40:	f800283a 	ret

00010f44 <_free_r>:
   10f44:	28003726 	beq	r5,zero,11024 <_free_r+0xe0>
   10f48:	28ffff17 	ldw	r3,-4(r5)
   10f4c:	28bfff04 	addi	r2,r5,-4
   10f50:	1800010e 	bge	r3,zero,10f58 <_free_r+0x14>
   10f54:	10c5883a 	add	r2,r2,r3
   10f58:	01400074 	movhi	r5,1
   10f5c:	294cd604 	addi	r5,r5,13144
   10f60:	28c00017 	ldw	r3,0(r5)
   10f64:	280d883a 	mov	r6,r5
   10f68:	1800031e 	bne	r3,zero,10f78 <_free_r+0x34>
   10f6c:	10000115 	stw	zero,4(r2)
   10f70:	28800015 	stw	r2,0(r5)
   10f74:	f800283a 	ret
   10f78:	10c00c2e 	bgeu	r2,r3,10fac <_free_r+0x68>
   10f7c:	11000017 	ldw	r4,0(r2)
   10f80:	110b883a 	add	r5,r2,r4
   10f84:	1940041e 	bne	r3,r5,10f98 <_free_r+0x54>
   10f88:	19400017 	ldw	r5,0(r3)
   10f8c:	18c00117 	ldw	r3,4(r3)
   10f90:	2909883a 	add	r4,r5,r4
   10f94:	11000015 	stw	r4,0(r2)
   10f98:	10c00115 	stw	r3,4(r2)
   10f9c:	30800015 	stw	r2,0(r6)
   10fa0:	f800283a 	ret
   10fa4:	11400336 	bltu	r2,r5,10fb4 <_free_r+0x70>
   10fa8:	2807883a 	mov	r3,r5
   10fac:	19400117 	ldw	r5,4(r3)
   10fb0:	283ffc1e 	bne	r5,zero,10fa4 <__alt_data_end+0xffff0fa4>
   10fb4:	19c00017 	ldw	r7,0(r3)
   10fb8:	19cd883a 	add	r6,r3,r7
   10fbc:	30800a1e 	bne	r6,r2,10fe8 <_free_r+0xa4>
   10fc0:	10800017 	ldw	r2,0(r2)
   10fc4:	3885883a 	add	r2,r7,r2
   10fc8:	18800015 	stw	r2,0(r3)
   10fcc:	1889883a 	add	r4,r3,r2
   10fd0:	2900141e 	bne	r5,r4,11024 <_free_r+0xe0>
   10fd4:	29000017 	ldw	r4,0(r5)
   10fd8:	2085883a 	add	r2,r4,r2
   10fdc:	18800015 	stw	r2,0(r3)
   10fe0:	28800117 	ldw	r2,4(r5)
   10fe4:	00000e06 	br	11020 <_free_r+0xdc>
   10fe8:	1180032e 	bgeu	r2,r6,10ff8 <_free_r+0xb4>
   10fec:	00800304 	movi	r2,12
   10ff0:	20800015 	stw	r2,0(r4)
   10ff4:	f800283a 	ret
   10ff8:	11000017 	ldw	r4,0(r2)
   10ffc:	110d883a 	add	r6,r2,r4
   11000:	2980061e 	bne	r5,r6,1101c <_free_r+0xd8>
   11004:	29800017 	ldw	r6,0(r5)
   11008:	3109883a 	add	r4,r6,r4
   1100c:	11000015 	stw	r4,0(r2)
   11010:	29000117 	ldw	r4,4(r5)
   11014:	11000115 	stw	r4,4(r2)
   11018:	00000106 	br	11020 <_free_r+0xdc>
   1101c:	11400115 	stw	r5,4(r2)
   11020:	18800115 	stw	r2,4(r3)
   11024:	f800283a 	ret

00011028 <_malloc_r>:
   11028:	defffb04 	addi	sp,sp,-20
   1102c:	00bfff04 	movi	r2,-4
   11030:	dc400115 	stw	r17,4(sp)
   11034:	2c4000c4 	addi	r17,r5,3
   11038:	88a2703a 	and	r17,r17,r2
   1103c:	dc800215 	stw	r18,8(sp)
   11040:	dfc00415 	stw	ra,16(sp)
   11044:	dcc00315 	stw	r19,12(sp)
   11048:	dc000015 	stw	r16,0(sp)
   1104c:	8c400204 	addi	r17,r17,8
   11050:	00800304 	movi	r2,12
   11054:	2025883a 	mov	r18,r4
   11058:	8880022e 	bgeu	r17,r2,11064 <_malloc_r+0x3c>
   1105c:	1023883a 	mov	r17,r2
   11060:	00000506 	br	11078 <_malloc_r+0x50>
   11064:	8800040e 	bge	r17,zero,11078 <_malloc_r+0x50>
   11068:	00800304 	movi	r2,12
   1106c:	90800015 	stw	r2,0(r18)
   11070:	0005883a 	mov	r2,zero
   11074:	00003b06 	br	11164 <_malloc_r+0x13c>
   11078:	897ffb36 	bltu	r17,r5,11068 <__alt_data_end+0xffff1068>
   1107c:	00800074 	movhi	r2,1
   11080:	108cd604 	addi	r2,r2,13144
   11084:	10c00017 	ldw	r3,0(r2)
   11088:	1009883a 	mov	r4,r2
   1108c:	1821883a 	mov	r16,r3
   11090:	80000926 	beq	r16,zero,110b8 <_malloc_r+0x90>
   11094:	80800017 	ldw	r2,0(r16)
   11098:	1445c83a 	sub	r2,r2,r17
   1109c:	10001516 	blt	r2,zero,110f4 <_malloc_r+0xcc>
   110a0:	014002c4 	movi	r5,11
   110a4:	28800d2e 	bgeu	r5,r2,110dc <_malloc_r+0xb4>
   110a8:	80800015 	stw	r2,0(r16)
   110ac:	80a1883a 	add	r16,r16,r2
   110b0:	84400015 	stw	r17,0(r16)
   110b4:	8000221e 	bne	r16,zero,11140 <_malloc_r+0x118>
   110b8:	04000074 	movhi	r16,1
   110bc:	840cd504 	addi	r16,r16,13140
   110c0:	80800017 	ldw	r2,0(r16)
   110c4:	10000e1e 	bne	r2,zero,11100 <_malloc_r+0xd8>
   110c8:	000b883a 	mov	r5,zero
   110cc:	9009883a 	mov	r4,r18
   110d0:	00113400 	call	11340 <_sbrk_r>
   110d4:	80800015 	stw	r2,0(r16)
   110d8:	00000906 	br	11100 <_malloc_r+0xd8>
   110dc:	80800117 	ldw	r2,4(r16)
   110e0:	1c00021e 	bne	r3,r16,110ec <_malloc_r+0xc4>
   110e4:	20800015 	stw	r2,0(r4)
   110e8:	00001506 	br	11140 <_malloc_r+0x118>
   110ec:	18800115 	stw	r2,4(r3)
   110f0:	00001306 	br	11140 <_malloc_r+0x118>
   110f4:	8007883a 	mov	r3,r16
   110f8:	84000117 	ldw	r16,4(r16)
   110fc:	003fe406 	br	11090 <__alt_data_end+0xffff1090>
   11100:	880b883a 	mov	r5,r17
   11104:	9009883a 	mov	r4,r18
   11108:	00113400 	call	11340 <_sbrk_r>
   1110c:	04ffffc4 	movi	r19,-1
   11110:	14ffd526 	beq	r2,r19,11068 <__alt_data_end+0xffff1068>
   11114:	140000c4 	addi	r16,r2,3
   11118:	00ffff04 	movi	r3,-4
   1111c:	80e0703a 	and	r16,r16,r3
   11120:	1400021e 	bne	r2,r16,1112c <_malloc_r+0x104>
   11124:	84400015 	stw	r17,0(r16)
   11128:	00000506 	br	11140 <_malloc_r+0x118>
   1112c:	808bc83a 	sub	r5,r16,r2
   11130:	9009883a 	mov	r4,r18
   11134:	00113400 	call	11340 <_sbrk_r>
   11138:	14fffa1e 	bne	r2,r19,11124 <__alt_data_end+0xffff1124>
   1113c:	003fca06 	br	11068 <__alt_data_end+0xffff1068>
   11140:	810002c4 	addi	r4,r16,11
   11144:	00bffe04 	movi	r2,-8
   11148:	80c00104 	addi	r3,r16,4
   1114c:	2084703a 	and	r2,r4,r2
   11150:	10c7c83a 	sub	r3,r2,r3
   11154:	18000326 	beq	r3,zero,11164 <_malloc_r+0x13c>
   11158:	80e1883a 	add	r16,r16,r3
   1115c:	00c7c83a 	sub	r3,zero,r3
   11160:	80c00015 	stw	r3,0(r16)
   11164:	dfc00417 	ldw	ra,16(sp)
   11168:	dcc00317 	ldw	r19,12(sp)
   1116c:	dc800217 	ldw	r18,8(sp)
   11170:	dc400117 	ldw	r17,4(sp)
   11174:	dc000017 	ldw	r16,0(sp)
   11178:	dec00504 	addi	sp,sp,20
   1117c:	f800283a 	ret

00011180 <_realloc_r>:
   11180:	2800021e 	bne	r5,zero,1118c <_realloc_r+0xc>
   11184:	300b883a 	mov	r5,r6
   11188:	00110281 	jmpi	11028 <_malloc_r>
   1118c:	defffb04 	addi	sp,sp,-20
   11190:	dc400115 	stw	r17,4(sp)
   11194:	dc000015 	stw	r16,0(sp)
   11198:	dfc00415 	stw	ra,16(sp)
   1119c:	dcc00315 	stw	r19,12(sp)
   111a0:	dc800215 	stw	r18,8(sp)
   111a4:	3023883a 	mov	r17,r6
   111a8:	2821883a 	mov	r16,r5
   111ac:	3000021e 	bne	r6,zero,111b8 <_realloc_r+0x38>
   111b0:	0010f440 	call	10f44 <_free_r>
   111b4:	00001306 	br	11204 <_realloc_r+0x84>
   111b8:	2025883a 	mov	r18,r4
   111bc:	00122440 	call	12244 <_malloc_usable_size_r>
   111c0:	14400e2e 	bgeu	r2,r17,111fc <_realloc_r+0x7c>
   111c4:	880b883a 	mov	r5,r17
   111c8:	9009883a 	mov	r4,r18
   111cc:	00110280 	call	11028 <_malloc_r>
   111d0:	1027883a 	mov	r19,r2
   111d4:	10000b26 	beq	r2,zero,11204 <_realloc_r+0x84>
   111d8:	880d883a 	mov	r6,r17
   111dc:	800b883a 	mov	r5,r16
   111e0:	1009883a 	mov	r4,r2
   111e4:	001221c0 	call	1221c <memcpy>
   111e8:	800b883a 	mov	r5,r16
   111ec:	9009883a 	mov	r4,r18
   111f0:	0010f440 	call	10f44 <_free_r>
   111f4:	9805883a 	mov	r2,r19
   111f8:	00000306 	br	11208 <_realloc_r+0x88>
   111fc:	8005883a 	mov	r2,r16
   11200:	00000106 	br	11208 <_realloc_r+0x88>
   11204:	0005883a 	mov	r2,zero
   11208:	dfc00417 	ldw	ra,16(sp)
   1120c:	dcc00317 	ldw	r19,12(sp)
   11210:	dc800217 	ldw	r18,8(sp)
   11214:	dc400117 	ldw	r17,4(sp)
   11218:	dc000017 	ldw	r16,0(sp)
   1121c:	dec00504 	addi	sp,sp,20
   11220:	f800283a 	ret

00011224 <_printf_r>:
   11224:	defffd04 	addi	sp,sp,-12
   11228:	dfc00015 	stw	ra,0(sp)
   1122c:	d9800115 	stw	r6,4(sp)
   11230:	d9c00215 	stw	r7,8(sp)
   11234:	20c00217 	ldw	r3,8(r4)
   11238:	01800074 	movhi	r6,1
   1123c:	31885904 	addi	r6,r6,8548
   11240:	19800115 	stw	r6,4(r3)
   11244:	280d883a 	mov	r6,r5
   11248:	21400217 	ldw	r5,8(r4)
   1124c:	d9c00104 	addi	r7,sp,4
   11250:	0011c1c0 	call	11c1c <___vfprintf_internal_r>
   11254:	dfc00017 	ldw	ra,0(sp)
   11258:	dec00304 	addi	sp,sp,12
   1125c:	f800283a 	ret

00011260 <printf>:
   11260:	defffc04 	addi	sp,sp,-16
   11264:	dfc00015 	stw	ra,0(sp)
   11268:	d9400115 	stw	r5,4(sp)
   1126c:	d9800215 	stw	r6,8(sp)
   11270:	d9c00315 	stw	r7,12(sp)
   11274:	00800074 	movhi	r2,1
   11278:	108c2304 	addi	r2,r2,12428
   1127c:	10800017 	ldw	r2,0(r2)
   11280:	01400074 	movhi	r5,1
   11284:	29485904 	addi	r5,r5,8548
   11288:	10c00217 	ldw	r3,8(r2)
   1128c:	d9800104 	addi	r6,sp,4
   11290:	19400115 	stw	r5,4(r3)
   11294:	200b883a 	mov	r5,r4
   11298:	11000217 	ldw	r4,8(r2)
   1129c:	00121480 	call	12148 <__vfprintf_internal>
   112a0:	dfc00017 	ldw	ra,0(sp)
   112a4:	dec00404 	addi	sp,sp,16
   112a8:	f800283a 	ret

000112ac <_puts_r>:
   112ac:	defffd04 	addi	sp,sp,-12
   112b0:	dc000015 	stw	r16,0(sp)
   112b4:	2021883a 	mov	r16,r4
   112b8:	2809883a 	mov	r4,r5
   112bc:	dfc00215 	stw	ra,8(sp)
   112c0:	dc400115 	stw	r17,4(sp)
   112c4:	2823883a 	mov	r17,r5
   112c8:	00113900 	call	11390 <strlen>
   112cc:	81400217 	ldw	r5,8(r16)
   112d0:	01000074 	movhi	r4,1
   112d4:	21085904 	addi	r4,r4,8548
   112d8:	29000115 	stw	r4,4(r5)
   112dc:	100f883a 	mov	r7,r2
   112e0:	880d883a 	mov	r6,r17
   112e4:	8009883a 	mov	r4,r16
   112e8:	00121640 	call	12164 <__sfvwrite_small_dev>
   112ec:	00ffffc4 	movi	r3,-1
   112f0:	10c00926 	beq	r2,r3,11318 <_puts_r+0x6c>
   112f4:	81400217 	ldw	r5,8(r16)
   112f8:	01800074 	movhi	r6,1
   112fc:	01c00044 	movi	r7,1
   11300:	28800117 	ldw	r2,4(r5)
   11304:	318af404 	addi	r6,r6,11216
   11308:	8009883a 	mov	r4,r16
   1130c:	103ee83a 	callr	r2
   11310:	10bfffe0 	cmpeqi	r2,r2,-1
   11314:	0085c83a 	sub	r2,zero,r2
   11318:	dfc00217 	ldw	ra,8(sp)
   1131c:	dc400117 	ldw	r17,4(sp)
   11320:	dc000017 	ldw	r16,0(sp)
   11324:	dec00304 	addi	sp,sp,12
   11328:	f800283a 	ret

0001132c <puts>:
   1132c:	00800074 	movhi	r2,1
   11330:	108c2304 	addi	r2,r2,12428
   11334:	200b883a 	mov	r5,r4
   11338:	11000017 	ldw	r4,0(r2)
   1133c:	00112ac1 	jmpi	112ac <_puts_r>

00011340 <_sbrk_r>:
   11340:	defffd04 	addi	sp,sp,-12
   11344:	dc000015 	stw	r16,0(sp)
   11348:	04000074 	movhi	r16,1
   1134c:	dc400115 	stw	r17,4(sp)
   11350:	840cd704 	addi	r16,r16,13148
   11354:	2023883a 	mov	r17,r4
   11358:	2809883a 	mov	r4,r5
   1135c:	dfc00215 	stw	ra,8(sp)
   11360:	80000015 	stw	zero,0(r16)
   11364:	00124d40 	call	124d4 <sbrk>
   11368:	00ffffc4 	movi	r3,-1
   1136c:	10c0031e 	bne	r2,r3,1137c <_sbrk_r+0x3c>
   11370:	80c00017 	ldw	r3,0(r16)
   11374:	18000126 	beq	r3,zero,1137c <_sbrk_r+0x3c>
   11378:	88c00015 	stw	r3,0(r17)
   1137c:	dfc00217 	ldw	ra,8(sp)
   11380:	dc400117 	ldw	r17,4(sp)
   11384:	dc000017 	ldw	r16,0(sp)
   11388:	dec00304 	addi	sp,sp,12
   1138c:	f800283a 	ret

00011390 <strlen>:
   11390:	2005883a 	mov	r2,r4
   11394:	10c00007 	ldb	r3,0(r2)
   11398:	18000226 	beq	r3,zero,113a4 <strlen+0x14>
   1139c:	10800044 	addi	r2,r2,1
   113a0:	003ffc06 	br	11394 <__alt_data_end+0xffff1394>
   113a4:	1105c83a 	sub	r2,r2,r4
   113a8:	f800283a 	ret

000113ac <_strtol_r>:
   113ac:	00800074 	movhi	r2,1
   113b0:	defff304 	addi	sp,sp,-52
   113b4:	108c2404 	addi	r2,r2,12432
   113b8:	dcc00615 	stw	r19,24(sp)
   113bc:	14c00017 	ldw	r19,0(r2)
   113c0:	df000b15 	stw	fp,44(sp)
   113c4:	dd400815 	stw	r21,32(sp)
   113c8:	dd000715 	stw	r20,28(sp)
   113cc:	dc800515 	stw	r18,20(sp)
   113d0:	202b883a 	mov	r21,r4
   113d4:	dfc00c15 	stw	ra,48(sp)
   113d8:	ddc00a15 	stw	r23,40(sp)
   113dc:	dd800915 	stw	r22,36(sp)
   113e0:	dc400415 	stw	r17,16(sp)
   113e4:	dc000315 	stw	r16,12(sp)
   113e8:	2829883a 	mov	r20,r5
   113ec:	3039883a 	mov	fp,r6
   113f0:	3825883a 	mov	r18,r7
   113f4:	2809883a 	mov	r4,r5
   113f8:	2005883a 	mov	r2,r4
   113fc:	14400003 	ldbu	r17,0(r2)
   11400:	24000044 	addi	r16,r4,1
   11404:	8009883a 	mov	r4,r16
   11408:	9c47883a 	add	r3,r19,r17
   1140c:	18c00043 	ldbu	r3,1(r3)
   11410:	18c0020c 	andi	r3,r3,8
   11414:	183ff81e 	bne	r3,zero,113f8 <__alt_data_end+0xffff13f8>
   11418:	00c00b44 	movi	r3,45
   1141c:	88c0041e 	bne	r17,r3,11430 <_strtol_r+0x84>
   11420:	14000084 	addi	r16,r2,2
   11424:	14400043 	ldbu	r17,1(r2)
   11428:	05c00044 	movi	r23,1
   1142c:	00000506 	br	11444 <_strtol_r+0x98>
   11430:	00c00ac4 	movi	r3,43
   11434:	88c0021e 	bne	r17,r3,11440 <_strtol_r+0x94>
   11438:	14400043 	ldbu	r17,1(r2)
   1143c:	14000084 	addi	r16,r2,2
   11440:	002f883a 	mov	r23,zero
   11444:	90000326 	beq	r18,zero,11454 <_strtol_r+0xa8>
   11448:	00800404 	movi	r2,16
   1144c:	90800a1e 	bne	r18,r2,11478 <_strtol_r+0xcc>
   11450:	00005406 	br	115a4 <_strtol_r+0x1f8>
   11454:	00800c04 	movi	r2,48
   11458:	8880501e 	bne	r17,r2,1159c <_strtol_r+0x1f0>
   1145c:	80800003 	ldbu	r2,0(r16)
   11460:	00c01604 	movi	r3,88
   11464:	108037cc 	andi	r2,r2,223
   11468:	10c0481e 	bne	r2,r3,1158c <_strtol_r+0x1e0>
   1146c:	84400043 	ldbu	r17,1(r16)
   11470:	04800404 	movi	r18,16
   11474:	84000084 	addi	r16,r16,2
   11478:	00e00034 	movhi	r3,32768
   1147c:	18ffffc4 	addi	r3,r3,-1
   11480:	b8c7883a 	add	r3,r23,r3
   11484:	1809883a 	mov	r4,r3
   11488:	900b883a 	mov	r5,r18
   1148c:	d8c00015 	stw	r3,0(sp)
   11490:	0010be40 	call	10be4 <__umodsi3>
   11494:	d8c00017 	ldw	r3,0(sp)
   11498:	900b883a 	mov	r5,r18
   1149c:	102d883a 	mov	r22,r2
   114a0:	1809883a 	mov	r4,r3
   114a4:	0010b800 	call	10b80 <__udivsi3>
   114a8:	100d883a 	mov	r6,r2
   114ac:	0009883a 	mov	r4,zero
   114b0:	0005883a 	mov	r2,zero
   114b4:	01c00044 	movi	r7,1
   114b8:	023fffc4 	movi	r8,-1
   114bc:	9c47883a 	add	r3,r19,r17
   114c0:	18c00043 	ldbu	r3,1(r3)
   114c4:	1940010c 	andi	r5,r3,4
   114c8:	28000226 	beq	r5,zero,114d4 <_strtol_r+0x128>
   114cc:	8c7ff404 	addi	r17,r17,-48
   114d0:	00000706 	br	114f0 <_strtol_r+0x144>
   114d4:	18c000cc 	andi	r3,r3,3
   114d8:	18001a26 	beq	r3,zero,11544 <_strtol_r+0x198>
   114dc:	19c00226 	beq	r3,r7,114e8 <_strtol_r+0x13c>
   114e0:	00c015c4 	movi	r3,87
   114e4:	00000106 	br	114ec <_strtol_r+0x140>
   114e8:	00c00dc4 	movi	r3,55
   114ec:	88e3c83a 	sub	r17,r17,r3
   114f0:	8c80140e 	bge	r17,r18,11544 <_strtol_r+0x198>
   114f4:	22001026 	beq	r4,r8,11538 <_strtol_r+0x18c>
   114f8:	30800e36 	bltu	r6,r2,11534 <_strtol_r+0x188>
   114fc:	1180011e 	bne	r2,r6,11504 <_strtol_r+0x158>
   11500:	b4400c16 	blt	r22,r17,11534 <_strtol_r+0x188>
   11504:	1009883a 	mov	r4,r2
   11508:	900b883a 	mov	r5,r18
   1150c:	d9800015 	stw	r6,0(sp)
   11510:	d9c00115 	stw	r7,4(sp)
   11514:	da000215 	stw	r8,8(sp)
   11518:	0010c3c0 	call	10c3c <__mulsi3>
   1151c:	8885883a 	add	r2,r17,r2
   11520:	01000044 	movi	r4,1
   11524:	d9800017 	ldw	r6,0(sp)
   11528:	d9c00117 	ldw	r7,4(sp)
   1152c:	da000217 	ldw	r8,8(sp)
   11530:	00000106 	br	11538 <_strtol_r+0x18c>
   11534:	013fffc4 	movi	r4,-1
   11538:	84400003 	ldbu	r17,0(r16)
   1153c:	84000044 	addi	r16,r16,1
   11540:	003fde06 	br	114bc <__alt_data_end+0xffff14bc>
   11544:	00ffffc4 	movi	r3,-1
   11548:	20c0071e 	bne	r4,r3,11568 <_strtol_r+0x1bc>
   1154c:	00a00034 	movhi	r2,32768
   11550:	10c5883a 	add	r2,r2,r3
   11554:	00c00884 	movi	r3,34
   11558:	a8c00015 	stw	r3,0(r21)
   1155c:	b885883a 	add	r2,r23,r2
   11560:	e000051e 	bne	fp,zero,11578 <_strtol_r+0x1cc>
   11564:	00001206 	br	115b0 <_strtol_r+0x204>
   11568:	b8000126 	beq	r23,zero,11570 <_strtol_r+0x1c4>
   1156c:	0085c83a 	sub	r2,zero,r2
   11570:	e0000f26 	beq	fp,zero,115b0 <_strtol_r+0x204>
   11574:	20000226 	beq	r4,zero,11580 <_strtol_r+0x1d4>
   11578:	843fffc4 	addi	r16,r16,-1
   1157c:	00000106 	br	11584 <_strtol_r+0x1d8>
   11580:	a021883a 	mov	r16,r20
   11584:	e4000015 	stw	r16,0(fp)
   11588:	00000906 	br	115b0 <_strtol_r+0x204>
   1158c:	04400c04 	movi	r17,48
   11590:	903fb91e 	bne	r18,zero,11478 <__alt_data_end+0xffff1478>
   11594:	04800204 	movi	r18,8
   11598:	003fb706 	br	11478 <__alt_data_end+0xffff1478>
   1159c:	04800284 	movi	r18,10
   115a0:	003fb506 	br	11478 <__alt_data_end+0xffff1478>
   115a4:	00800c04 	movi	r2,48
   115a8:	88bfac26 	beq	r17,r2,1145c <__alt_data_end+0xffff145c>
   115ac:	003fb206 	br	11478 <__alt_data_end+0xffff1478>
   115b0:	dfc00c17 	ldw	ra,48(sp)
   115b4:	df000b17 	ldw	fp,44(sp)
   115b8:	ddc00a17 	ldw	r23,40(sp)
   115bc:	dd800917 	ldw	r22,36(sp)
   115c0:	dd400817 	ldw	r21,32(sp)
   115c4:	dd000717 	ldw	r20,28(sp)
   115c8:	dcc00617 	ldw	r19,24(sp)
   115cc:	dc800517 	ldw	r18,20(sp)
   115d0:	dc400417 	ldw	r17,16(sp)
   115d4:	dc000317 	ldw	r16,12(sp)
   115d8:	dec00d04 	addi	sp,sp,52
   115dc:	f800283a 	ret

000115e0 <strtol>:
   115e0:	00800074 	movhi	r2,1
   115e4:	108c2304 	addi	r2,r2,12428
   115e8:	300f883a 	mov	r7,r6
   115ec:	280d883a 	mov	r6,r5
   115f0:	200b883a 	mov	r5,r4
   115f4:	11000017 	ldw	r4,0(r2)
   115f8:	00113ac1 	jmpi	113ac <_strtol_r>

000115fc <print_repeat>:
   115fc:	defffb04 	addi	sp,sp,-20
   11600:	dc800315 	stw	r18,12(sp)
   11604:	dc400215 	stw	r17,8(sp)
   11608:	dc000115 	stw	r16,4(sp)
   1160c:	dfc00415 	stw	ra,16(sp)
   11610:	2025883a 	mov	r18,r4
   11614:	2823883a 	mov	r17,r5
   11618:	d9800005 	stb	r6,0(sp)
   1161c:	3821883a 	mov	r16,r7
   11620:	04000a0e 	bge	zero,r16,1164c <print_repeat+0x50>
   11624:	88800117 	ldw	r2,4(r17)
   11628:	01c00044 	movi	r7,1
   1162c:	d80d883a 	mov	r6,sp
   11630:	880b883a 	mov	r5,r17
   11634:	9009883a 	mov	r4,r18
   11638:	103ee83a 	callr	r2
   1163c:	843fffc4 	addi	r16,r16,-1
   11640:	103ff726 	beq	r2,zero,11620 <__alt_data_end+0xffff1620>
   11644:	00bfffc4 	movi	r2,-1
   11648:	00000106 	br	11650 <print_repeat+0x54>
   1164c:	0005883a 	mov	r2,zero
   11650:	dfc00417 	ldw	ra,16(sp)
   11654:	dc800317 	ldw	r18,12(sp)
   11658:	dc400217 	ldw	r17,8(sp)
   1165c:	dc000117 	ldw	r16,4(sp)
   11660:	dec00504 	addi	sp,sp,20
   11664:	f800283a 	ret

00011668 <___svfprintf_internal_r>:
   11668:	deffe504 	addi	sp,sp,-108
   1166c:	d8c00804 	addi	r3,sp,32
   11670:	ddc01815 	stw	r23,96(sp)
   11674:	dd801715 	stw	r22,92(sp)
   11678:	dd401615 	stw	r21,88(sp)
   1167c:	dd001515 	stw	r20,84(sp)
   11680:	dcc01415 	stw	r19,80(sp)
   11684:	dc801315 	stw	r18,76(sp)
   11688:	dc401215 	stw	r17,72(sp)
   1168c:	dc001115 	stw	r16,68(sp)
   11690:	dfc01a15 	stw	ra,104(sp)
   11694:	df001915 	stw	fp,100(sp)
   11698:	2029883a 	mov	r20,r4
   1169c:	2823883a 	mov	r17,r5
   116a0:	382d883a 	mov	r22,r7
   116a4:	d9800f15 	stw	r6,60(sp)
   116a8:	0021883a 	mov	r16,zero
   116ac:	d8000e15 	stw	zero,56(sp)
   116b0:	d8000a15 	stw	zero,40(sp)
   116b4:	002b883a 	mov	r21,zero
   116b8:	0027883a 	mov	r19,zero
   116bc:	0025883a 	mov	r18,zero
   116c0:	d8000c15 	stw	zero,48(sp)
   116c4:	d8000b15 	stw	zero,44(sp)
   116c8:	002f883a 	mov	r23,zero
   116cc:	d8c00915 	stw	r3,36(sp)
   116d0:	d8c00f17 	ldw	r3,60(sp)
   116d4:	19000003 	ldbu	r4,0(r3)
   116d8:	20803fcc 	andi	r2,r4,255
   116dc:	1080201c 	xori	r2,r2,128
   116e0:	10bfe004 	addi	r2,r2,-128
   116e4:	10011e26 	beq	r2,zero,11b60 <___svfprintf_internal_r+0x4f8>
   116e8:	00c00044 	movi	r3,1
   116ec:	b8c01426 	beq	r23,r3,11740 <___svfprintf_internal_r+0xd8>
   116f0:	1dc00216 	blt	r3,r23,116fc <___svfprintf_internal_r+0x94>
   116f4:	b8000626 	beq	r23,zero,11710 <___svfprintf_internal_r+0xa8>
   116f8:	00011506 	br	11b50 <___svfprintf_internal_r+0x4e8>
   116fc:	01400084 	movi	r5,2
   11700:	b9401d26 	beq	r23,r5,11778 <___svfprintf_internal_r+0x110>
   11704:	014000c4 	movi	r5,3
   11708:	b9402b26 	beq	r23,r5,117b8 <___svfprintf_internal_r+0x150>
   1170c:	00011006 	br	11b50 <___svfprintf_internal_r+0x4e8>
   11710:	01400944 	movi	r5,37
   11714:	1140fc26 	beq	r2,r5,11b08 <___svfprintf_internal_r+0x4a0>
   11718:	88800117 	ldw	r2,4(r17)
   1171c:	d9000005 	stb	r4,0(sp)
   11720:	01c00044 	movi	r7,1
   11724:	d80d883a 	mov	r6,sp
   11728:	880b883a 	mov	r5,r17
   1172c:	a009883a 	mov	r4,r20
   11730:	103ee83a 	callr	r2
   11734:	1000d81e 	bne	r2,zero,11a98 <___svfprintf_internal_r+0x430>
   11738:	84000044 	addi	r16,r16,1
   1173c:	00010406 	br	11b50 <___svfprintf_internal_r+0x4e8>
   11740:	01400c04 	movi	r5,48
   11744:	1140fa26 	beq	r2,r5,11b30 <___svfprintf_internal_r+0x4c8>
   11748:	01400944 	movi	r5,37
   1174c:	11400a1e 	bne	r2,r5,11778 <___svfprintf_internal_r+0x110>
   11750:	d8800005 	stb	r2,0(sp)
   11754:	88800117 	ldw	r2,4(r17)
   11758:	b80f883a 	mov	r7,r23
   1175c:	d80d883a 	mov	r6,sp
   11760:	880b883a 	mov	r5,r17
   11764:	a009883a 	mov	r4,r20
   11768:	103ee83a 	callr	r2
   1176c:	1000ca1e 	bne	r2,zero,11a98 <___svfprintf_internal_r+0x430>
   11770:	84000044 	addi	r16,r16,1
   11774:	0000f506 	br	11b4c <___svfprintf_internal_r+0x4e4>
   11778:	25fff404 	addi	r23,r4,-48
   1177c:	bdc03fcc 	andi	r23,r23,255
   11780:	00c00244 	movi	r3,9
   11784:	1dc00936 	bltu	r3,r23,117ac <___svfprintf_internal_r+0x144>
   11788:	00bfffc4 	movi	r2,-1
   1178c:	90800426 	beq	r18,r2,117a0 <___svfprintf_internal_r+0x138>
   11790:	01400284 	movi	r5,10
   11794:	9009883a 	mov	r4,r18
   11798:	0010c3c0 	call	10c3c <__mulsi3>
   1179c:	00000106 	br	117a4 <___svfprintf_internal_r+0x13c>
   117a0:	0005883a 	mov	r2,zero
   117a4:	b8a5883a 	add	r18,r23,r2
   117a8:	0000e206 	br	11b34 <___svfprintf_internal_r+0x4cc>
   117ac:	01400b84 	movi	r5,46
   117b0:	1140e426 	beq	r2,r5,11b44 <___svfprintf_internal_r+0x4dc>
   117b4:	05c00084 	movi	r23,2
   117b8:	213ff404 	addi	r4,r4,-48
   117bc:	27003fcc 	andi	fp,r4,255
   117c0:	00c00244 	movi	r3,9
   117c4:	1f000936 	bltu	r3,fp,117ec <___svfprintf_internal_r+0x184>
   117c8:	00bfffc4 	movi	r2,-1
   117cc:	98800426 	beq	r19,r2,117e0 <___svfprintf_internal_r+0x178>
   117d0:	01400284 	movi	r5,10
   117d4:	9809883a 	mov	r4,r19
   117d8:	0010c3c0 	call	10c3c <__mulsi3>
   117dc:	00000106 	br	117e4 <___svfprintf_internal_r+0x17c>
   117e0:	0005883a 	mov	r2,zero
   117e4:	e0a7883a 	add	r19,fp,r2
   117e8:	0000d906 	br	11b50 <___svfprintf_internal_r+0x4e8>
   117ec:	00c01b04 	movi	r3,108
   117f0:	10c0d226 	beq	r2,r3,11b3c <___svfprintf_internal_r+0x4d4>
   117f4:	013fffc4 	movi	r4,-1
   117f8:	99000226 	beq	r19,r4,11804 <___svfprintf_internal_r+0x19c>
   117fc:	d8000b15 	stw	zero,44(sp)
   11800:	00000106 	br	11808 <___svfprintf_internal_r+0x1a0>
   11804:	04c00044 	movi	r19,1
   11808:	01001a44 	movi	r4,105
   1180c:	11001626 	beq	r2,r4,11868 <___svfprintf_internal_r+0x200>
   11810:	20800916 	blt	r4,r2,11838 <___svfprintf_internal_r+0x1d0>
   11814:	010018c4 	movi	r4,99
   11818:	11008826 	beq	r2,r4,11a3c <___svfprintf_internal_r+0x3d4>
   1181c:	01001904 	movi	r4,100
   11820:	11001126 	beq	r2,r4,11868 <___svfprintf_internal_r+0x200>
   11824:	01001604 	movi	r4,88
   11828:	1100c81e 	bne	r2,r4,11b4c <___svfprintf_internal_r+0x4e4>
   1182c:	00c00044 	movi	r3,1
   11830:	d8c00e15 	stw	r3,56(sp)
   11834:	00001506 	br	1188c <___svfprintf_internal_r+0x224>
   11838:	01001cc4 	movi	r4,115
   1183c:	11009826 	beq	r2,r4,11aa0 <___svfprintf_internal_r+0x438>
   11840:	20800416 	blt	r4,r2,11854 <___svfprintf_internal_r+0x1ec>
   11844:	01001bc4 	movi	r4,111
   11848:	1100c01e 	bne	r2,r4,11b4c <___svfprintf_internal_r+0x4e4>
   1184c:	05400204 	movi	r21,8
   11850:	00000f06 	br	11890 <___svfprintf_internal_r+0x228>
   11854:	01001d44 	movi	r4,117
   11858:	11000d26 	beq	r2,r4,11890 <___svfprintf_internal_r+0x228>
   1185c:	01001e04 	movi	r4,120
   11860:	11000a26 	beq	r2,r4,1188c <___svfprintf_internal_r+0x224>
   11864:	0000b906 	br	11b4c <___svfprintf_internal_r+0x4e4>
   11868:	d8c00a17 	ldw	r3,40(sp)
   1186c:	b7000104 	addi	fp,r22,4
   11870:	18000726 	beq	r3,zero,11890 <___svfprintf_internal_r+0x228>
   11874:	df000d15 	stw	fp,52(sp)
   11878:	b5c00017 	ldw	r23,0(r22)
   1187c:	b800080e 	bge	r23,zero,118a0 <___svfprintf_internal_r+0x238>
   11880:	05efc83a 	sub	r23,zero,r23
   11884:	02400044 	movi	r9,1
   11888:	00000606 	br	118a4 <___svfprintf_internal_r+0x23c>
   1188c:	05400404 	movi	r21,16
   11890:	b0c00104 	addi	r3,r22,4
   11894:	d8c00d15 	stw	r3,52(sp)
   11898:	b5c00017 	ldw	r23,0(r22)
   1189c:	d8000a15 	stw	zero,40(sp)
   118a0:	0013883a 	mov	r9,zero
   118a4:	d839883a 	mov	fp,sp
   118a8:	b8001726 	beq	r23,zero,11908 <___svfprintf_internal_r+0x2a0>
   118ac:	a80b883a 	mov	r5,r21
   118b0:	b809883a 	mov	r4,r23
   118b4:	da401015 	stw	r9,64(sp)
   118b8:	0010b800 	call	10b80 <__udivsi3>
   118bc:	a80b883a 	mov	r5,r21
   118c0:	1009883a 	mov	r4,r2
   118c4:	102d883a 	mov	r22,r2
   118c8:	0010c3c0 	call	10c3c <__mulsi3>
   118cc:	b885c83a 	sub	r2,r23,r2
   118d0:	00c00244 	movi	r3,9
   118d4:	da401017 	ldw	r9,64(sp)
   118d8:	18800216 	blt	r3,r2,118e4 <___svfprintf_internal_r+0x27c>
   118dc:	10800c04 	addi	r2,r2,48
   118e0:	00000506 	br	118f8 <___svfprintf_internal_r+0x290>
   118e4:	d8c00e17 	ldw	r3,56(sp)
   118e8:	18000226 	beq	r3,zero,118f4 <___svfprintf_internal_r+0x28c>
   118ec:	10800dc4 	addi	r2,r2,55
   118f0:	00000106 	br	118f8 <___svfprintf_internal_r+0x290>
   118f4:	108015c4 	addi	r2,r2,87
   118f8:	e0800005 	stb	r2,0(fp)
   118fc:	b02f883a 	mov	r23,r22
   11900:	e7000044 	addi	fp,fp,1
   11904:	003fe806 	br	118a8 <__alt_data_end+0xffff18a8>
   11908:	e6efc83a 	sub	r23,fp,sp
   1190c:	9dc5c83a 	sub	r2,r19,r23
   11910:	0080090e 	bge	zero,r2,11938 <___svfprintf_internal_r+0x2d0>
   11914:	e085883a 	add	r2,fp,r2
   11918:	01400c04 	movi	r5,48
   1191c:	d8c00917 	ldw	r3,36(sp)
   11920:	e009883a 	mov	r4,fp
   11924:	e0c0032e 	bgeu	fp,r3,11934 <___svfprintf_internal_r+0x2cc>
   11928:	e7000044 	addi	fp,fp,1
   1192c:	21400005 	stb	r5,0(r4)
   11930:	e0bffa1e 	bne	fp,r2,1191c <__alt_data_end+0xffff191c>
   11934:	e6efc83a 	sub	r23,fp,sp
   11938:	d8c00b17 	ldw	r3,44(sp)
   1193c:	4dd1883a 	add	r8,r9,r23
   11940:	922dc83a 	sub	r22,r18,r8
   11944:	18001626 	beq	r3,zero,119a0 <___svfprintf_internal_r+0x338>
   11948:	48000a26 	beq	r9,zero,11974 <___svfprintf_internal_r+0x30c>
   1194c:	00800b44 	movi	r2,45
   11950:	d8800805 	stb	r2,32(sp)
   11954:	88800117 	ldw	r2,4(r17)
   11958:	01c00044 	movi	r7,1
   1195c:	d9800804 	addi	r6,sp,32
   11960:	880b883a 	mov	r5,r17
   11964:	a009883a 	mov	r4,r20
   11968:	103ee83a 	callr	r2
   1196c:	10004a1e 	bne	r2,zero,11a98 <___svfprintf_internal_r+0x430>
   11970:	84000044 	addi	r16,r16,1
   11974:	0580070e 	bge	zero,r22,11994 <___svfprintf_internal_r+0x32c>
   11978:	b00f883a 	mov	r7,r22
   1197c:	01800c04 	movi	r6,48
   11980:	880b883a 	mov	r5,r17
   11984:	a009883a 	mov	r4,r20
   11988:	00115fc0 	call	115fc <print_repeat>
   1198c:	1000421e 	bne	r2,zero,11a98 <___svfprintf_internal_r+0x430>
   11990:	85a1883a 	add	r16,r16,r22
   11994:	e02d883a 	mov	r22,fp
   11998:	bf2fc83a 	sub	r23,r23,fp
   1199c:	00002006 	br	11a20 <___svfprintf_internal_r+0x3b8>
   119a0:	0580090e 	bge	zero,r22,119c8 <___svfprintf_internal_r+0x360>
   119a4:	b00f883a 	mov	r7,r22
   119a8:	01800804 	movi	r6,32
   119ac:	880b883a 	mov	r5,r17
   119b0:	a009883a 	mov	r4,r20
   119b4:	da401015 	stw	r9,64(sp)
   119b8:	00115fc0 	call	115fc <print_repeat>
   119bc:	da401017 	ldw	r9,64(sp)
   119c0:	1000351e 	bne	r2,zero,11a98 <___svfprintf_internal_r+0x430>
   119c4:	85a1883a 	add	r16,r16,r22
   119c8:	483ff226 	beq	r9,zero,11994 <__alt_data_end+0xffff1994>
   119cc:	00800b44 	movi	r2,45
   119d0:	d8800805 	stb	r2,32(sp)
   119d4:	88800117 	ldw	r2,4(r17)
   119d8:	01c00044 	movi	r7,1
   119dc:	d9800804 	addi	r6,sp,32
   119e0:	880b883a 	mov	r5,r17
   119e4:	a009883a 	mov	r4,r20
   119e8:	103ee83a 	callr	r2
   119ec:	10002a1e 	bne	r2,zero,11a98 <___svfprintf_internal_r+0x430>
   119f0:	84000044 	addi	r16,r16,1
   119f4:	003fe706 	br	11994 <__alt_data_end+0xffff1994>
   119f8:	b5bfffc4 	addi	r22,r22,-1
   119fc:	b0800003 	ldbu	r2,0(r22)
   11a00:	01c00044 	movi	r7,1
   11a04:	d9800804 	addi	r6,sp,32
   11a08:	d8800805 	stb	r2,32(sp)
   11a0c:	88800117 	ldw	r2,4(r17)
   11a10:	880b883a 	mov	r5,r17
   11a14:	a009883a 	mov	r4,r20
   11a18:	103ee83a 	callr	r2
   11a1c:	10001e1e 	bne	r2,zero,11a98 <___svfprintf_internal_r+0x430>
   11a20:	8585c83a 	sub	r2,r16,r22
   11a24:	b5c9883a 	add	r4,r22,r23
   11a28:	e085883a 	add	r2,fp,r2
   11a2c:	013ff216 	blt	zero,r4,119f8 <__alt_data_end+0xffff19f8>
   11a30:	1021883a 	mov	r16,r2
   11a34:	dd800d17 	ldw	r22,52(sp)
   11a38:	00004406 	br	11b4c <___svfprintf_internal_r+0x4e4>
   11a3c:	00800044 	movi	r2,1
   11a40:	1480080e 	bge	r2,r18,11a64 <___svfprintf_internal_r+0x3fc>
   11a44:	95ffffc4 	addi	r23,r18,-1
   11a48:	b80f883a 	mov	r7,r23
   11a4c:	01800804 	movi	r6,32
   11a50:	880b883a 	mov	r5,r17
   11a54:	a009883a 	mov	r4,r20
   11a58:	00115fc0 	call	115fc <print_repeat>
   11a5c:	10000e1e 	bne	r2,zero,11a98 <___svfprintf_internal_r+0x430>
   11a60:	85e1883a 	add	r16,r16,r23
   11a64:	b0800017 	ldw	r2,0(r22)
   11a68:	01c00044 	movi	r7,1
   11a6c:	d80d883a 	mov	r6,sp
   11a70:	d8800005 	stb	r2,0(sp)
   11a74:	88800117 	ldw	r2,4(r17)
   11a78:	880b883a 	mov	r5,r17
   11a7c:	a009883a 	mov	r4,r20
   11a80:	b5c00104 	addi	r23,r22,4
   11a84:	103ee83a 	callr	r2
   11a88:	1000031e 	bne	r2,zero,11a98 <___svfprintf_internal_r+0x430>
   11a8c:	84000044 	addi	r16,r16,1
   11a90:	b82d883a 	mov	r22,r23
   11a94:	00002d06 	br	11b4c <___svfprintf_internal_r+0x4e4>
   11a98:	00bfffc4 	movi	r2,-1
   11a9c:	00003106 	br	11b64 <___svfprintf_internal_r+0x4fc>
   11aa0:	b5c00017 	ldw	r23,0(r22)
   11aa4:	b7000104 	addi	fp,r22,4
   11aa8:	b809883a 	mov	r4,r23
   11aac:	00113900 	call	11390 <strlen>
   11ab0:	9091c83a 	sub	r8,r18,r2
   11ab4:	102d883a 	mov	r22,r2
   11ab8:	0200090e 	bge	zero,r8,11ae0 <___svfprintf_internal_r+0x478>
   11abc:	400f883a 	mov	r7,r8
   11ac0:	01800804 	movi	r6,32
   11ac4:	880b883a 	mov	r5,r17
   11ac8:	a009883a 	mov	r4,r20
   11acc:	da001015 	stw	r8,64(sp)
   11ad0:	00115fc0 	call	115fc <print_repeat>
   11ad4:	da001017 	ldw	r8,64(sp)
   11ad8:	103fef1e 	bne	r2,zero,11a98 <__alt_data_end+0xffff1a98>
   11adc:	8221883a 	add	r16,r16,r8
   11ae0:	88800117 	ldw	r2,4(r17)
   11ae4:	b00f883a 	mov	r7,r22
   11ae8:	b80d883a 	mov	r6,r23
   11aec:	880b883a 	mov	r5,r17
   11af0:	a009883a 	mov	r4,r20
   11af4:	103ee83a 	callr	r2
   11af8:	103fe71e 	bne	r2,zero,11a98 <__alt_data_end+0xffff1a98>
   11afc:	85a1883a 	add	r16,r16,r22
   11b00:	e02d883a 	mov	r22,fp
   11b04:	00001106 	br	11b4c <___svfprintf_internal_r+0x4e4>
   11b08:	00c00044 	movi	r3,1
   11b0c:	04ffffc4 	movi	r19,-1
   11b10:	d8000e15 	stw	zero,56(sp)
   11b14:	d8c00a15 	stw	r3,40(sp)
   11b18:	05400284 	movi	r21,10
   11b1c:	9825883a 	mov	r18,r19
   11b20:	d8000c15 	stw	zero,48(sp)
   11b24:	d8000b15 	stw	zero,44(sp)
   11b28:	182f883a 	mov	r23,r3
   11b2c:	00000806 	br	11b50 <___svfprintf_internal_r+0x4e8>
   11b30:	ddc00b15 	stw	r23,44(sp)
   11b34:	05c00084 	movi	r23,2
   11b38:	00000506 	br	11b50 <___svfprintf_internal_r+0x4e8>
   11b3c:	00c00044 	movi	r3,1
   11b40:	d8c00c15 	stw	r3,48(sp)
   11b44:	05c000c4 	movi	r23,3
   11b48:	00000106 	br	11b50 <___svfprintf_internal_r+0x4e8>
   11b4c:	002f883a 	mov	r23,zero
   11b50:	d8c00f17 	ldw	r3,60(sp)
   11b54:	18c00044 	addi	r3,r3,1
   11b58:	d8c00f15 	stw	r3,60(sp)
   11b5c:	003edc06 	br	116d0 <__alt_data_end+0xffff16d0>
   11b60:	8005883a 	mov	r2,r16
   11b64:	dfc01a17 	ldw	ra,104(sp)
   11b68:	df001917 	ldw	fp,100(sp)
   11b6c:	ddc01817 	ldw	r23,96(sp)
   11b70:	dd801717 	ldw	r22,92(sp)
   11b74:	dd401617 	ldw	r21,88(sp)
   11b78:	dd001517 	ldw	r20,84(sp)
   11b7c:	dcc01417 	ldw	r19,80(sp)
   11b80:	dc801317 	ldw	r18,76(sp)
   11b84:	dc401217 	ldw	r17,72(sp)
   11b88:	dc001117 	ldw	r16,68(sp)
   11b8c:	dec01b04 	addi	sp,sp,108
   11b90:	f800283a 	ret

00011b94 <__vfprintf_internal_unused>:
   11b94:	00800074 	movhi	r2,1
   11b98:	108c2304 	addi	r2,r2,12428
   11b9c:	300f883a 	mov	r7,r6
   11ba0:	280d883a 	mov	r6,r5
   11ba4:	200b883a 	mov	r5,r4
   11ba8:	11000017 	ldw	r4,0(r2)
   11bac:	00116681 	jmpi	11668 <___svfprintf_internal_r>

00011bb0 <print_repeat>:
   11bb0:	defffb04 	addi	sp,sp,-20
   11bb4:	dc800315 	stw	r18,12(sp)
   11bb8:	dc400215 	stw	r17,8(sp)
   11bbc:	dc000115 	stw	r16,4(sp)
   11bc0:	dfc00415 	stw	ra,16(sp)
   11bc4:	2025883a 	mov	r18,r4
   11bc8:	2823883a 	mov	r17,r5
   11bcc:	d9800005 	stb	r6,0(sp)
   11bd0:	3821883a 	mov	r16,r7
   11bd4:	04000a0e 	bge	zero,r16,11c00 <print_repeat+0x50>
   11bd8:	88800117 	ldw	r2,4(r17)
   11bdc:	01c00044 	movi	r7,1
   11be0:	d80d883a 	mov	r6,sp
   11be4:	880b883a 	mov	r5,r17
   11be8:	9009883a 	mov	r4,r18
   11bec:	103ee83a 	callr	r2
   11bf0:	843fffc4 	addi	r16,r16,-1
   11bf4:	103ff726 	beq	r2,zero,11bd4 <__alt_data_end+0xffff1bd4>
   11bf8:	00bfffc4 	movi	r2,-1
   11bfc:	00000106 	br	11c04 <print_repeat+0x54>
   11c00:	0005883a 	mov	r2,zero
   11c04:	dfc00417 	ldw	ra,16(sp)
   11c08:	dc800317 	ldw	r18,12(sp)
   11c0c:	dc400217 	ldw	r17,8(sp)
   11c10:	dc000117 	ldw	r16,4(sp)
   11c14:	dec00504 	addi	sp,sp,20
   11c18:	f800283a 	ret

00011c1c <___vfprintf_internal_r>:
   11c1c:	deffe504 	addi	sp,sp,-108
   11c20:	d8c00804 	addi	r3,sp,32
   11c24:	ddc01815 	stw	r23,96(sp)
   11c28:	dd801715 	stw	r22,92(sp)
   11c2c:	dd401615 	stw	r21,88(sp)
   11c30:	dd001515 	stw	r20,84(sp)
   11c34:	dcc01415 	stw	r19,80(sp)
   11c38:	dc801315 	stw	r18,76(sp)
   11c3c:	dc401215 	stw	r17,72(sp)
   11c40:	dc001115 	stw	r16,68(sp)
   11c44:	dfc01a15 	stw	ra,104(sp)
   11c48:	df001915 	stw	fp,100(sp)
   11c4c:	2029883a 	mov	r20,r4
   11c50:	2823883a 	mov	r17,r5
   11c54:	382d883a 	mov	r22,r7
   11c58:	d9800f15 	stw	r6,60(sp)
   11c5c:	0021883a 	mov	r16,zero
   11c60:	d8000e15 	stw	zero,56(sp)
   11c64:	d8000a15 	stw	zero,40(sp)
   11c68:	002b883a 	mov	r21,zero
   11c6c:	0027883a 	mov	r19,zero
   11c70:	0025883a 	mov	r18,zero
   11c74:	d8000c15 	stw	zero,48(sp)
   11c78:	d8000b15 	stw	zero,44(sp)
   11c7c:	002f883a 	mov	r23,zero
   11c80:	d8c00915 	stw	r3,36(sp)
   11c84:	d8c00f17 	ldw	r3,60(sp)
   11c88:	19000003 	ldbu	r4,0(r3)
   11c8c:	20803fcc 	andi	r2,r4,255
   11c90:	1080201c 	xori	r2,r2,128
   11c94:	10bfe004 	addi	r2,r2,-128
   11c98:	10011e26 	beq	r2,zero,12114 <___vfprintf_internal_r+0x4f8>
   11c9c:	00c00044 	movi	r3,1
   11ca0:	b8c01426 	beq	r23,r3,11cf4 <___vfprintf_internal_r+0xd8>
   11ca4:	1dc00216 	blt	r3,r23,11cb0 <___vfprintf_internal_r+0x94>
   11ca8:	b8000626 	beq	r23,zero,11cc4 <___vfprintf_internal_r+0xa8>
   11cac:	00011506 	br	12104 <___vfprintf_internal_r+0x4e8>
   11cb0:	01400084 	movi	r5,2
   11cb4:	b9401d26 	beq	r23,r5,11d2c <___vfprintf_internal_r+0x110>
   11cb8:	014000c4 	movi	r5,3
   11cbc:	b9402b26 	beq	r23,r5,11d6c <___vfprintf_internal_r+0x150>
   11cc0:	00011006 	br	12104 <___vfprintf_internal_r+0x4e8>
   11cc4:	01400944 	movi	r5,37
   11cc8:	1140fc26 	beq	r2,r5,120bc <___vfprintf_internal_r+0x4a0>
   11ccc:	88800117 	ldw	r2,4(r17)
   11cd0:	d9000005 	stb	r4,0(sp)
   11cd4:	01c00044 	movi	r7,1
   11cd8:	d80d883a 	mov	r6,sp
   11cdc:	880b883a 	mov	r5,r17
   11ce0:	a009883a 	mov	r4,r20
   11ce4:	103ee83a 	callr	r2
   11ce8:	1000d81e 	bne	r2,zero,1204c <___vfprintf_internal_r+0x430>
   11cec:	84000044 	addi	r16,r16,1
   11cf0:	00010406 	br	12104 <___vfprintf_internal_r+0x4e8>
   11cf4:	01400c04 	movi	r5,48
   11cf8:	1140fa26 	beq	r2,r5,120e4 <___vfprintf_internal_r+0x4c8>
   11cfc:	01400944 	movi	r5,37
   11d00:	11400a1e 	bne	r2,r5,11d2c <___vfprintf_internal_r+0x110>
   11d04:	d8800005 	stb	r2,0(sp)
   11d08:	88800117 	ldw	r2,4(r17)
   11d0c:	b80f883a 	mov	r7,r23
   11d10:	d80d883a 	mov	r6,sp
   11d14:	880b883a 	mov	r5,r17
   11d18:	a009883a 	mov	r4,r20
   11d1c:	103ee83a 	callr	r2
   11d20:	1000ca1e 	bne	r2,zero,1204c <___vfprintf_internal_r+0x430>
   11d24:	84000044 	addi	r16,r16,1
   11d28:	0000f506 	br	12100 <___vfprintf_internal_r+0x4e4>
   11d2c:	25fff404 	addi	r23,r4,-48
   11d30:	bdc03fcc 	andi	r23,r23,255
   11d34:	00c00244 	movi	r3,9
   11d38:	1dc00936 	bltu	r3,r23,11d60 <___vfprintf_internal_r+0x144>
   11d3c:	00bfffc4 	movi	r2,-1
   11d40:	90800426 	beq	r18,r2,11d54 <___vfprintf_internal_r+0x138>
   11d44:	01400284 	movi	r5,10
   11d48:	9009883a 	mov	r4,r18
   11d4c:	0010c3c0 	call	10c3c <__mulsi3>
   11d50:	00000106 	br	11d58 <___vfprintf_internal_r+0x13c>
   11d54:	0005883a 	mov	r2,zero
   11d58:	b8a5883a 	add	r18,r23,r2
   11d5c:	0000e206 	br	120e8 <___vfprintf_internal_r+0x4cc>
   11d60:	01400b84 	movi	r5,46
   11d64:	1140e426 	beq	r2,r5,120f8 <___vfprintf_internal_r+0x4dc>
   11d68:	05c00084 	movi	r23,2
   11d6c:	213ff404 	addi	r4,r4,-48
   11d70:	27003fcc 	andi	fp,r4,255
   11d74:	00c00244 	movi	r3,9
   11d78:	1f000936 	bltu	r3,fp,11da0 <___vfprintf_internal_r+0x184>
   11d7c:	00bfffc4 	movi	r2,-1
   11d80:	98800426 	beq	r19,r2,11d94 <___vfprintf_internal_r+0x178>
   11d84:	01400284 	movi	r5,10
   11d88:	9809883a 	mov	r4,r19
   11d8c:	0010c3c0 	call	10c3c <__mulsi3>
   11d90:	00000106 	br	11d98 <___vfprintf_internal_r+0x17c>
   11d94:	0005883a 	mov	r2,zero
   11d98:	e0a7883a 	add	r19,fp,r2
   11d9c:	0000d906 	br	12104 <___vfprintf_internal_r+0x4e8>
   11da0:	00c01b04 	movi	r3,108
   11da4:	10c0d226 	beq	r2,r3,120f0 <___vfprintf_internal_r+0x4d4>
   11da8:	013fffc4 	movi	r4,-1
   11dac:	99000226 	beq	r19,r4,11db8 <___vfprintf_internal_r+0x19c>
   11db0:	d8000b15 	stw	zero,44(sp)
   11db4:	00000106 	br	11dbc <___vfprintf_internal_r+0x1a0>
   11db8:	04c00044 	movi	r19,1
   11dbc:	01001a44 	movi	r4,105
   11dc0:	11001626 	beq	r2,r4,11e1c <___vfprintf_internal_r+0x200>
   11dc4:	20800916 	blt	r4,r2,11dec <___vfprintf_internal_r+0x1d0>
   11dc8:	010018c4 	movi	r4,99
   11dcc:	11008826 	beq	r2,r4,11ff0 <___vfprintf_internal_r+0x3d4>
   11dd0:	01001904 	movi	r4,100
   11dd4:	11001126 	beq	r2,r4,11e1c <___vfprintf_internal_r+0x200>
   11dd8:	01001604 	movi	r4,88
   11ddc:	1100c81e 	bne	r2,r4,12100 <___vfprintf_internal_r+0x4e4>
   11de0:	00c00044 	movi	r3,1
   11de4:	d8c00e15 	stw	r3,56(sp)
   11de8:	00001506 	br	11e40 <___vfprintf_internal_r+0x224>
   11dec:	01001cc4 	movi	r4,115
   11df0:	11009826 	beq	r2,r4,12054 <___vfprintf_internal_r+0x438>
   11df4:	20800416 	blt	r4,r2,11e08 <___vfprintf_internal_r+0x1ec>
   11df8:	01001bc4 	movi	r4,111
   11dfc:	1100c01e 	bne	r2,r4,12100 <___vfprintf_internal_r+0x4e4>
   11e00:	05400204 	movi	r21,8
   11e04:	00000f06 	br	11e44 <___vfprintf_internal_r+0x228>
   11e08:	01001d44 	movi	r4,117
   11e0c:	11000d26 	beq	r2,r4,11e44 <___vfprintf_internal_r+0x228>
   11e10:	01001e04 	movi	r4,120
   11e14:	11000a26 	beq	r2,r4,11e40 <___vfprintf_internal_r+0x224>
   11e18:	0000b906 	br	12100 <___vfprintf_internal_r+0x4e4>
   11e1c:	d8c00a17 	ldw	r3,40(sp)
   11e20:	b7000104 	addi	fp,r22,4
   11e24:	18000726 	beq	r3,zero,11e44 <___vfprintf_internal_r+0x228>
   11e28:	df000d15 	stw	fp,52(sp)
   11e2c:	b5c00017 	ldw	r23,0(r22)
   11e30:	b800080e 	bge	r23,zero,11e54 <___vfprintf_internal_r+0x238>
   11e34:	05efc83a 	sub	r23,zero,r23
   11e38:	02400044 	movi	r9,1
   11e3c:	00000606 	br	11e58 <___vfprintf_internal_r+0x23c>
   11e40:	05400404 	movi	r21,16
   11e44:	b0c00104 	addi	r3,r22,4
   11e48:	d8c00d15 	stw	r3,52(sp)
   11e4c:	b5c00017 	ldw	r23,0(r22)
   11e50:	d8000a15 	stw	zero,40(sp)
   11e54:	0013883a 	mov	r9,zero
   11e58:	d839883a 	mov	fp,sp
   11e5c:	b8001726 	beq	r23,zero,11ebc <___vfprintf_internal_r+0x2a0>
   11e60:	a80b883a 	mov	r5,r21
   11e64:	b809883a 	mov	r4,r23
   11e68:	da401015 	stw	r9,64(sp)
   11e6c:	0010b800 	call	10b80 <__udivsi3>
   11e70:	a80b883a 	mov	r5,r21
   11e74:	1009883a 	mov	r4,r2
   11e78:	102d883a 	mov	r22,r2
   11e7c:	0010c3c0 	call	10c3c <__mulsi3>
   11e80:	b885c83a 	sub	r2,r23,r2
   11e84:	00c00244 	movi	r3,9
   11e88:	da401017 	ldw	r9,64(sp)
   11e8c:	18800216 	blt	r3,r2,11e98 <___vfprintf_internal_r+0x27c>
   11e90:	10800c04 	addi	r2,r2,48
   11e94:	00000506 	br	11eac <___vfprintf_internal_r+0x290>
   11e98:	d8c00e17 	ldw	r3,56(sp)
   11e9c:	18000226 	beq	r3,zero,11ea8 <___vfprintf_internal_r+0x28c>
   11ea0:	10800dc4 	addi	r2,r2,55
   11ea4:	00000106 	br	11eac <___vfprintf_internal_r+0x290>
   11ea8:	108015c4 	addi	r2,r2,87
   11eac:	e0800005 	stb	r2,0(fp)
   11eb0:	b02f883a 	mov	r23,r22
   11eb4:	e7000044 	addi	fp,fp,1
   11eb8:	003fe806 	br	11e5c <__alt_data_end+0xffff1e5c>
   11ebc:	e6efc83a 	sub	r23,fp,sp
   11ec0:	9dc5c83a 	sub	r2,r19,r23
   11ec4:	0080090e 	bge	zero,r2,11eec <___vfprintf_internal_r+0x2d0>
   11ec8:	e085883a 	add	r2,fp,r2
   11ecc:	01400c04 	movi	r5,48
   11ed0:	d8c00917 	ldw	r3,36(sp)
   11ed4:	e009883a 	mov	r4,fp
   11ed8:	e0c0032e 	bgeu	fp,r3,11ee8 <___vfprintf_internal_r+0x2cc>
   11edc:	e7000044 	addi	fp,fp,1
   11ee0:	21400005 	stb	r5,0(r4)
   11ee4:	e0bffa1e 	bne	fp,r2,11ed0 <__alt_data_end+0xffff1ed0>
   11ee8:	e6efc83a 	sub	r23,fp,sp
   11eec:	d8c00b17 	ldw	r3,44(sp)
   11ef0:	4dd1883a 	add	r8,r9,r23
   11ef4:	922dc83a 	sub	r22,r18,r8
   11ef8:	18001626 	beq	r3,zero,11f54 <___vfprintf_internal_r+0x338>
   11efc:	48000a26 	beq	r9,zero,11f28 <___vfprintf_internal_r+0x30c>
   11f00:	00800b44 	movi	r2,45
   11f04:	d8800805 	stb	r2,32(sp)
   11f08:	88800117 	ldw	r2,4(r17)
   11f0c:	01c00044 	movi	r7,1
   11f10:	d9800804 	addi	r6,sp,32
   11f14:	880b883a 	mov	r5,r17
   11f18:	a009883a 	mov	r4,r20
   11f1c:	103ee83a 	callr	r2
   11f20:	10004a1e 	bne	r2,zero,1204c <___vfprintf_internal_r+0x430>
   11f24:	84000044 	addi	r16,r16,1
   11f28:	0580070e 	bge	zero,r22,11f48 <___vfprintf_internal_r+0x32c>
   11f2c:	b00f883a 	mov	r7,r22
   11f30:	01800c04 	movi	r6,48
   11f34:	880b883a 	mov	r5,r17
   11f38:	a009883a 	mov	r4,r20
   11f3c:	0011bb00 	call	11bb0 <print_repeat>
   11f40:	1000421e 	bne	r2,zero,1204c <___vfprintf_internal_r+0x430>
   11f44:	85a1883a 	add	r16,r16,r22
   11f48:	e02d883a 	mov	r22,fp
   11f4c:	bf2fc83a 	sub	r23,r23,fp
   11f50:	00002006 	br	11fd4 <___vfprintf_internal_r+0x3b8>
   11f54:	0580090e 	bge	zero,r22,11f7c <___vfprintf_internal_r+0x360>
   11f58:	b00f883a 	mov	r7,r22
   11f5c:	01800804 	movi	r6,32
   11f60:	880b883a 	mov	r5,r17
   11f64:	a009883a 	mov	r4,r20
   11f68:	da401015 	stw	r9,64(sp)
   11f6c:	0011bb00 	call	11bb0 <print_repeat>
   11f70:	da401017 	ldw	r9,64(sp)
   11f74:	1000351e 	bne	r2,zero,1204c <___vfprintf_internal_r+0x430>
   11f78:	85a1883a 	add	r16,r16,r22
   11f7c:	483ff226 	beq	r9,zero,11f48 <__alt_data_end+0xffff1f48>
   11f80:	00800b44 	movi	r2,45
   11f84:	d8800805 	stb	r2,32(sp)
   11f88:	88800117 	ldw	r2,4(r17)
   11f8c:	01c00044 	movi	r7,1
   11f90:	d9800804 	addi	r6,sp,32
   11f94:	880b883a 	mov	r5,r17
   11f98:	a009883a 	mov	r4,r20
   11f9c:	103ee83a 	callr	r2
   11fa0:	10002a1e 	bne	r2,zero,1204c <___vfprintf_internal_r+0x430>
   11fa4:	84000044 	addi	r16,r16,1
   11fa8:	003fe706 	br	11f48 <__alt_data_end+0xffff1f48>
   11fac:	b5bfffc4 	addi	r22,r22,-1
   11fb0:	b0800003 	ldbu	r2,0(r22)
   11fb4:	01c00044 	movi	r7,1
   11fb8:	d9800804 	addi	r6,sp,32
   11fbc:	d8800805 	stb	r2,32(sp)
   11fc0:	88800117 	ldw	r2,4(r17)
   11fc4:	880b883a 	mov	r5,r17
   11fc8:	a009883a 	mov	r4,r20
   11fcc:	103ee83a 	callr	r2
   11fd0:	10001e1e 	bne	r2,zero,1204c <___vfprintf_internal_r+0x430>
   11fd4:	8585c83a 	sub	r2,r16,r22
   11fd8:	b5c9883a 	add	r4,r22,r23
   11fdc:	e085883a 	add	r2,fp,r2
   11fe0:	013ff216 	blt	zero,r4,11fac <__alt_data_end+0xffff1fac>
   11fe4:	1021883a 	mov	r16,r2
   11fe8:	dd800d17 	ldw	r22,52(sp)
   11fec:	00004406 	br	12100 <___vfprintf_internal_r+0x4e4>
   11ff0:	00800044 	movi	r2,1
   11ff4:	1480080e 	bge	r2,r18,12018 <___vfprintf_internal_r+0x3fc>
   11ff8:	95ffffc4 	addi	r23,r18,-1
   11ffc:	b80f883a 	mov	r7,r23
   12000:	01800804 	movi	r6,32
   12004:	880b883a 	mov	r5,r17
   12008:	a009883a 	mov	r4,r20
   1200c:	0011bb00 	call	11bb0 <print_repeat>
   12010:	10000e1e 	bne	r2,zero,1204c <___vfprintf_internal_r+0x430>
   12014:	85e1883a 	add	r16,r16,r23
   12018:	b0800017 	ldw	r2,0(r22)
   1201c:	01c00044 	movi	r7,1
   12020:	d80d883a 	mov	r6,sp
   12024:	d8800005 	stb	r2,0(sp)
   12028:	88800117 	ldw	r2,4(r17)
   1202c:	880b883a 	mov	r5,r17
   12030:	a009883a 	mov	r4,r20
   12034:	b5c00104 	addi	r23,r22,4
   12038:	103ee83a 	callr	r2
   1203c:	1000031e 	bne	r2,zero,1204c <___vfprintf_internal_r+0x430>
   12040:	84000044 	addi	r16,r16,1
   12044:	b82d883a 	mov	r22,r23
   12048:	00002d06 	br	12100 <___vfprintf_internal_r+0x4e4>
   1204c:	00bfffc4 	movi	r2,-1
   12050:	00003106 	br	12118 <___vfprintf_internal_r+0x4fc>
   12054:	b5c00017 	ldw	r23,0(r22)
   12058:	b7000104 	addi	fp,r22,4
   1205c:	b809883a 	mov	r4,r23
   12060:	00113900 	call	11390 <strlen>
   12064:	9091c83a 	sub	r8,r18,r2
   12068:	102d883a 	mov	r22,r2
   1206c:	0200090e 	bge	zero,r8,12094 <___vfprintf_internal_r+0x478>
   12070:	400f883a 	mov	r7,r8
   12074:	01800804 	movi	r6,32
   12078:	880b883a 	mov	r5,r17
   1207c:	a009883a 	mov	r4,r20
   12080:	da001015 	stw	r8,64(sp)
   12084:	0011bb00 	call	11bb0 <print_repeat>
   12088:	da001017 	ldw	r8,64(sp)
   1208c:	103fef1e 	bne	r2,zero,1204c <__alt_data_end+0xffff204c>
   12090:	8221883a 	add	r16,r16,r8
   12094:	88800117 	ldw	r2,4(r17)
   12098:	b00f883a 	mov	r7,r22
   1209c:	b80d883a 	mov	r6,r23
   120a0:	880b883a 	mov	r5,r17
   120a4:	a009883a 	mov	r4,r20
   120a8:	103ee83a 	callr	r2
   120ac:	103fe71e 	bne	r2,zero,1204c <__alt_data_end+0xffff204c>
   120b0:	85a1883a 	add	r16,r16,r22
   120b4:	e02d883a 	mov	r22,fp
   120b8:	00001106 	br	12100 <___vfprintf_internal_r+0x4e4>
   120bc:	00c00044 	movi	r3,1
   120c0:	04ffffc4 	movi	r19,-1
   120c4:	d8000e15 	stw	zero,56(sp)
   120c8:	d8c00a15 	stw	r3,40(sp)
   120cc:	05400284 	movi	r21,10
   120d0:	9825883a 	mov	r18,r19
   120d4:	d8000c15 	stw	zero,48(sp)
   120d8:	d8000b15 	stw	zero,44(sp)
   120dc:	182f883a 	mov	r23,r3
   120e0:	00000806 	br	12104 <___vfprintf_internal_r+0x4e8>
   120e4:	ddc00b15 	stw	r23,44(sp)
   120e8:	05c00084 	movi	r23,2
   120ec:	00000506 	br	12104 <___vfprintf_internal_r+0x4e8>
   120f0:	00c00044 	movi	r3,1
   120f4:	d8c00c15 	stw	r3,48(sp)
   120f8:	05c000c4 	movi	r23,3
   120fc:	00000106 	br	12104 <___vfprintf_internal_r+0x4e8>
   12100:	002f883a 	mov	r23,zero
   12104:	d8c00f17 	ldw	r3,60(sp)
   12108:	18c00044 	addi	r3,r3,1
   1210c:	d8c00f15 	stw	r3,60(sp)
   12110:	003edc06 	br	11c84 <__alt_data_end+0xffff1c84>
   12114:	8005883a 	mov	r2,r16
   12118:	dfc01a17 	ldw	ra,104(sp)
   1211c:	df001917 	ldw	fp,100(sp)
   12120:	ddc01817 	ldw	r23,96(sp)
   12124:	dd801717 	ldw	r22,92(sp)
   12128:	dd401617 	ldw	r21,88(sp)
   1212c:	dd001517 	ldw	r20,84(sp)
   12130:	dcc01417 	ldw	r19,80(sp)
   12134:	dc801317 	ldw	r18,76(sp)
   12138:	dc401217 	ldw	r17,72(sp)
   1213c:	dc001117 	ldw	r16,68(sp)
   12140:	dec01b04 	addi	sp,sp,108
   12144:	f800283a 	ret

00012148 <__vfprintf_internal>:
   12148:	00800074 	movhi	r2,1
   1214c:	108c2304 	addi	r2,r2,12428
   12150:	300f883a 	mov	r7,r6
   12154:	280d883a 	mov	r6,r5
   12158:	200b883a 	mov	r5,r4
   1215c:	11000017 	ldw	r4,0(r2)
   12160:	0011c1c1 	jmpi	11c1c <___vfprintf_internal_r>

00012164 <__sfvwrite_small_dev>:
   12164:	2880000b 	ldhu	r2,0(r5)
   12168:	1080020c 	andi	r2,r2,8
   1216c:	10002126 	beq	r2,zero,121f4 <__sfvwrite_small_dev+0x90>
   12170:	2880008f 	ldh	r2,2(r5)
   12174:	defffa04 	addi	sp,sp,-24
   12178:	dc000015 	stw	r16,0(sp)
   1217c:	dfc00515 	stw	ra,20(sp)
   12180:	dd000415 	stw	r20,16(sp)
   12184:	dcc00315 	stw	r19,12(sp)
   12188:	dc800215 	stw	r18,8(sp)
   1218c:	dc400115 	stw	r17,4(sp)
   12190:	2821883a 	mov	r16,r5
   12194:	10001216 	blt	r2,zero,121e0 <__sfvwrite_small_dev+0x7c>
   12198:	2027883a 	mov	r19,r4
   1219c:	3025883a 	mov	r18,r6
   121a0:	3823883a 	mov	r17,r7
   121a4:	05010004 	movi	r20,1024
   121a8:	04400b0e 	bge	zero,r17,121d8 <__sfvwrite_small_dev+0x74>
   121ac:	880f883a 	mov	r7,r17
   121b0:	a440010e 	bge	r20,r17,121b8 <__sfvwrite_small_dev+0x54>
   121b4:	01c10004 	movi	r7,1024
   121b8:	8140008f 	ldh	r5,2(r16)
   121bc:	900d883a 	mov	r6,r18
   121c0:	9809883a 	mov	r4,r19
   121c4:	00122600 	call	12260 <_write_r>
   121c8:	0080050e 	bge	zero,r2,121e0 <__sfvwrite_small_dev+0x7c>
   121cc:	88a3c83a 	sub	r17,r17,r2
   121d0:	90a5883a 	add	r18,r18,r2
   121d4:	003ff406 	br	121a8 <__alt_data_end+0xffff21a8>
   121d8:	0005883a 	mov	r2,zero
   121dc:	00000706 	br	121fc <__sfvwrite_small_dev+0x98>
   121e0:	8080000b 	ldhu	r2,0(r16)
   121e4:	10801014 	ori	r2,r2,64
   121e8:	8080000d 	sth	r2,0(r16)
   121ec:	00bfffc4 	movi	r2,-1
   121f0:	00000206 	br	121fc <__sfvwrite_small_dev+0x98>
   121f4:	00bfffc4 	movi	r2,-1
   121f8:	f800283a 	ret
   121fc:	dfc00517 	ldw	ra,20(sp)
   12200:	dd000417 	ldw	r20,16(sp)
   12204:	dcc00317 	ldw	r19,12(sp)
   12208:	dc800217 	ldw	r18,8(sp)
   1220c:	dc400117 	ldw	r17,4(sp)
   12210:	dc000017 	ldw	r16,0(sp)
   12214:	dec00604 	addi	sp,sp,24
   12218:	f800283a 	ret

0001221c <memcpy>:
   1221c:	2005883a 	mov	r2,r4
   12220:	2007883a 	mov	r3,r4
   12224:	218d883a 	add	r6,r4,r6
   12228:	19800526 	beq	r3,r6,12240 <memcpy+0x24>
   1222c:	29000003 	ldbu	r4,0(r5)
   12230:	18c00044 	addi	r3,r3,1
   12234:	29400044 	addi	r5,r5,1
   12238:	193fffc5 	stb	r4,-1(r3)
   1223c:	003ffa06 	br	12228 <__alt_data_end+0xffff2228>
   12240:	f800283a 	ret

00012244 <_malloc_usable_size_r>:
   12244:	28bfff17 	ldw	r2,-4(r5)
   12248:	1000030e 	bge	r2,zero,12258 <_malloc_usable_size_r+0x14>
   1224c:	288b883a 	add	r5,r5,r2
   12250:	28ffff17 	ldw	r3,-4(r5)
   12254:	10c5883a 	add	r2,r2,r3
   12258:	10bfff04 	addi	r2,r2,-4
   1225c:	f800283a 	ret

00012260 <_write_r>:
   12260:	defffd04 	addi	sp,sp,-12
   12264:	dc000015 	stw	r16,0(sp)
   12268:	04000074 	movhi	r16,1
   1226c:	dc400115 	stw	r17,4(sp)
   12270:	840cd704 	addi	r16,r16,13148
   12274:	2023883a 	mov	r17,r4
   12278:	2809883a 	mov	r4,r5
   1227c:	300b883a 	mov	r5,r6
   12280:	380d883a 	mov	r6,r7
   12284:	dfc00215 	stw	ra,8(sp)
   12288:	80000015 	stw	zero,0(r16)
   1228c:	00125800 	call	12580 <write>
   12290:	00ffffc4 	movi	r3,-1
   12294:	10c0031e 	bne	r2,r3,122a4 <_write_r+0x44>
   12298:	80c00017 	ldw	r3,0(r16)
   1229c:	18000126 	beq	r3,zero,122a4 <_write_r+0x44>
   122a0:	88c00015 	stw	r3,0(r17)
   122a4:	dfc00217 	ldw	ra,8(sp)
   122a8:	dc400117 	ldw	r17,4(sp)
   122ac:	dc000017 	ldw	r16,0(sp)
   122b0:	dec00304 	addi	sp,sp,12
   122b4:	f800283a 	ret

000122b8 <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
   122b8:	00800074 	movhi	r2,1
   122bc:	108c0c04 	addi	r2,r2,12336
   122c0:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
   122c4:	defffe04 	addi	sp,sp,-8
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
   122c8:	01000074 	movhi	r4,1
   122cc:	01800044 	movi	r6,1
   122d0:	d80b883a 	mov	r5,sp
   122d4:	210c2704 	addi	r4,r4,12444
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
   122d8:	dfc00115 	stw	ra,4(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
   122dc:	00126380 	call	12638 <altera_avalon_jtag_uart_read>
   122e0:	0080020e 	bge	zero,r2,122ec <alt_getchar+0x34>
        return -1;
    }
    return c;
   122e4:	d8800007 	ldb	r2,0(sp)
   122e8:	00000106 	br	122f0 <alt_getchar+0x38>
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
   122ec:	00bfffc4 	movi	r2,-1
    return c;
#else
    return getchar();
#endif
#endif
}
   122f0:	dfc00117 	ldw	ra,4(sp)
   122f4:	dec00204 	addi	sp,sp,8
   122f8:	f800283a 	ret

000122fc <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
   122fc:	008007c4 	movi	r2,31
   12300:	11002136 	bltu	r2,r4,12388 <alt_irq_register+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12304:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12308:	00ffff84 	movi	r3,-2
   1230c:	38c4703a 	and	r2,r7,r3
   12310:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
   12314:	200490fa 	slli	r2,r4,3
   12318:	02000074 	movhi	r8,1
   1231c:	420d1004 	addi	r8,r8,13376
   12320:	4085883a 	add	r2,r8,r2
   12324:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
   12328:	11400115 	stw	r5,4(r2)
   1232c:	00800044 	movi	r2,1

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   12330:	30000726 	beq	r6,zero,12350 <alt_irq_register+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12334:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12338:	28c6703a 	and	r3,r5,r3
   1233c:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   12340:	d0e0b617 	ldw	r3,-32040(gp)
   12344:	1104983a 	sll	r2,r2,r4
   12348:	10c4b03a 	or	r2,r2,r3
   1234c:	00000706 	br	1236c <alt_irq_register+0x70>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12350:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12354:	28c6703a 	and	r3,r5,r3
   12358:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
   1235c:	1104983a 	sll	r2,r2,r4
   12360:	d0e0b617 	ldw	r3,-32040(gp)
   12364:	0084303a 	nor	r2,zero,r2
   12368:	10c4703a 	and	r2,r2,r3
   1236c:	d0a0b615 	stw	r2,-32040(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   12370:	d0a0b617 	ldw	r2,-32040(gp)
   12374:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12378:	2801703a 	wrctl	status,r5
   1237c:	3801703a 	wrctl	status,r7
   12380:	0005883a 	mov	r2,zero
   12384:	f800283a 	ret
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
   12388:	00bffa84 	movi	r2,-22
    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);

    alt_irq_enable_all(status);
  }
  return rc; 
}
   1238c:	f800283a 	ret

00012390 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   12390:	deffff04 	addi	sp,sp,-4
   12394:	01000074 	movhi	r4,1
   12398:	01400074 	movhi	r5,1
   1239c:	dfc00015 	stw	ra,0(sp)
   123a0:	210b9804 	addi	r4,r4,11872
   123a4:	294c3004 	addi	r5,r5,12480

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   123a8:	2140061e 	bne	r4,r5,123c4 <alt_load+0x34>
   123ac:	01000074 	movhi	r4,1
   123b0:	01400074 	movhi	r5,1
   123b4:	21000804 	addi	r4,r4,32
   123b8:	29400804 	addi	r5,r5,32
   123bc:	2140121e 	bne	r4,r5,12408 <alt_load+0x78>
   123c0:	00000b06 	br	123f0 <alt_load+0x60>
   123c4:	00c00074 	movhi	r3,1
   123c8:	18cc3004 	addi	r3,r3,12480
   123cc:	1907c83a 	sub	r3,r3,r4
   123d0:	0005883a 	mov	r2,zero
  {
    while( to != end )
   123d4:	10fff526 	beq	r2,r3,123ac <__alt_data_end+0xffff23ac>
    {
      *to++ = *from++;
   123d8:	114f883a 	add	r7,r2,r5
   123dc:	39c00017 	ldw	r7,0(r7)
   123e0:	110d883a 	add	r6,r2,r4
   123e4:	10800104 	addi	r2,r2,4
   123e8:	31c00015 	stw	r7,0(r6)
   123ec:	003ff906 	br	123d4 <__alt_data_end+0xffff23d4>
   123f0:	01000074 	movhi	r4,1
   123f4:	01400074 	movhi	r5,1
   123f8:	210ac504 	addi	r4,r4,11028
   123fc:	294ac504 	addi	r5,r5,11028

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   12400:	2140101e 	bne	r4,r5,12444 <alt_load+0xb4>
   12404:	00000b06 	br	12434 <alt_load+0xa4>
   12408:	00c00074 	movhi	r3,1
   1240c:	18c06004 	addi	r3,r3,384
   12410:	1907c83a 	sub	r3,r3,r4
   12414:	0005883a 	mov	r2,zero
  {
    while( to != end )
   12418:	10fff526 	beq	r2,r3,123f0 <__alt_data_end+0xffff23f0>
    {
      *to++ = *from++;
   1241c:	114f883a 	add	r7,r2,r5
   12420:	39c00017 	ldw	r7,0(r7)
   12424:	110d883a 	add	r6,r2,r4
   12428:	10800104 	addi	r2,r2,4
   1242c:	31c00015 	stw	r7,0(r6)
   12430:	003ff906 	br	12418 <__alt_data_end+0xffff2418>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   12434:	001288c0 	call	1288c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   12438:	dfc00017 	ldw	ra,0(sp)
   1243c:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   12440:	00129781 	jmpi	12978 <alt_icache_flush_all>
   12444:	00c00074 	movhi	r3,1
   12448:	18cb9804 	addi	r3,r3,11872
   1244c:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   12450:	0005883a 	mov	r2,zero
  {
    while( to != end )
   12454:	18bff726 	beq	r3,r2,12434 <__alt_data_end+0xffff2434>
    {
      *to++ = *from++;
   12458:	114f883a 	add	r7,r2,r5
   1245c:	39c00017 	ldw	r7,0(r7)
   12460:	110d883a 	add	r6,r2,r4
   12464:	10800104 	addi	r2,r2,4
   12468:	31c00015 	stw	r7,0(r6)
   1246c:	003ff906 	br	12454 <__alt_data_end+0xffff2454>

00012470 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   12470:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   12474:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   12478:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1247c:	00125e00 	call	125e0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   12480:	00126000 	call	12600 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   12484:	d1a0b717 	ldw	r6,-32036(gp)
   12488:	d160b817 	ldw	r5,-32032(gp)
   1248c:	d120b917 	ldw	r4,-32028(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   12490:	dfc00017 	ldw	ra,0(sp)
   12494:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   12498:	00109301 	jmpi	10930 <main>

0001249c <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   1249c:	defffe04 	addi	sp,sp,-8
   124a0:	dc000015 	stw	r16,0(sp)
   124a4:	dfc00115 	stw	ra,4(sp)
   124a8:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   124ac:	00113900 	call	11390 <strlen>
   124b0:	01000074 	movhi	r4,1
   124b4:	000f883a 	mov	r7,zero
   124b8:	100d883a 	mov	r6,r2
   124bc:	800b883a 	mov	r5,r16
   124c0:	210c2704 	addi	r4,r4,12444
#else
    return fputs(str, stdout);
#endif
#endif
}
   124c4:	dfc00117 	ldw	ra,4(sp)
   124c8:	dc000017 	ldw	r16,0(sp)
   124cc:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   124d0:	00126941 	jmpi	12694 <altera_avalon_jtag_uart_write>

000124d4 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   124d4:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   124d8:	00bfff84 	movi	r2,-2
   124dc:	2884703a 	and	r2,r5,r2
   124e0:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   124e4:	d0a00417 	ldw	r2,-32752(gp)
   124e8:	00ffff04 	movi	r3,-4
   124ec:	108000c4 	addi	r2,r2,3
   124f0:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   124f4:	00c000b4 	movhi	r3,2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   124f8:	d0a00415 	stw	r2,-32752(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   124fc:	1109883a 	add	r4,r2,r4
   12500:	18c00004 	addi	r3,r3,0
   12504:	1900032e 	bgeu	r3,r4,12514 <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12508:	2801703a 	wrctl	status,r5
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   1250c:	00bfffc4 	movi	r2,-1
   12510:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
   12514:	d1200415 	stw	r4,-32752(gp)
   12518:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
   1251c:	f800283a 	ret

00012520 <times>:
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   12520:	d0e0bb17 	ldw	r3,-32020(gp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   12524:	d0a0ba17 	ldw	r2,-32024(gp)
{
  clock_t ticks = alt_nticks(); 

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
   12528:	1800101e 	bne	r3,zero,1256c <times+0x4c>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   1252c:	d0a00b17 	ldw	r2,-32724(gp)
   12530:	10000926 	beq	r2,zero,12558 <times+0x38>
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
   12534:	deffff04 	addi	sp,sp,-4
   12538:	dfc00015 	stw	ra,0(sp)
   1253c:	103ee83a 	callr	r2

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
  {
    ALT_ERRNO = ENOSYS;
   12540:	00c01604 	movi	r3,88
   12544:	10c00015 	stw	r3,0(r2)
    return 0;
   12548:	0005883a 	mov	r2,zero
  buf->tms_stime  = ticks;
  buf->tms_cutime = 0;
  buf->tms_cstime = 0;

  return ticks;
}
   1254c:	dfc00017 	ldw	ra,0(sp)
   12550:	dec00104 	addi	sp,sp,4
   12554:	f800283a 	ret
   12558:	d0a0b504 	addi	r2,gp,-32044

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
  {
    ALT_ERRNO = ENOSYS;
   1255c:	00c01604 	movi	r3,88
   12560:	10c00015 	stw	r3,0(r2)
    return 0;
   12564:	0005883a 	mov	r2,zero
  buf->tms_stime  = ticks;
  buf->tms_cutime = 0;
  buf->tms_cstime = 0;

  return ticks;
}
   12568:	f800283a 	ret
    return 0;
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
   1256c:	20000015 	stw	zero,0(r4)
  buf->tms_stime  = ticks;
   12570:	20800115 	stw	r2,4(r4)
  buf->tms_cutime = 0;
   12574:	20000215 	stw	zero,8(r4)
  buf->tms_cstime = 0;
   12578:	20000315 	stw	zero,12(r4)

  return ticks;
   1257c:	f800283a 	ret

00012580 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   12580:	00800044 	movi	r2,1
   12584:	20800226 	beq	r4,r2,12590 <write+0x10>
   12588:	00800084 	movi	r2,2
   1258c:	2080041e 	bne	r4,r2,125a0 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
   12590:	01000074 	movhi	r4,1
   12594:	000f883a 	mov	r7,zero
   12598:	210c2704 	addi	r4,r4,12444
   1259c:	00126941 	jmpi	12694 <altera_avalon_jtag_uart_write>
   125a0:	d0a00b17 	ldw	r2,-32724(gp)
   125a4:	10000926 	beq	r2,zero,125cc <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   125a8:	deffff04 	addi	sp,sp,-4
   125ac:	dfc00015 	stw	ra,0(sp)
   125b0:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   125b4:	00c01444 	movi	r3,81
   125b8:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   125bc:	00bfffc4 	movi	r2,-1
   125c0:	dfc00017 	ldw	ra,0(sp)
   125c4:	dec00104 	addi	sp,sp,4
   125c8:	f800283a 	ret
   125cc:	d0a0b504 	addi	r2,gp,-32044
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   125d0:	00c01444 	movi	r3,81
   125d4:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   125d8:	00bfffc4 	movi	r2,-1
   125dc:	f800283a 	ret

000125e0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   125e0:	deffff04 	addi	sp,sp,-4
   125e4:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   125e8:	0012a680 	call	12a68 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   125ec:	00800044 	movi	r2,1
   125f0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   125f4:	dfc00017 	ldw	ra,0(sp)
   125f8:	dec00104 	addi	sp,sp,4
   125fc:	f800283a 	ret

00012600 <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   12600:	010000b4 	movhi	r4,2
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   12604:	deffff04 	addi	sp,sp,-4
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   12608:	01c0fa04 	movi	r7,1000
   1260c:	018000c4 	movi	r6,3
   12610:	000b883a 	mov	r5,zero
   12614:	21040004 	addi	r4,r4,4096
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   12618:	dfc00015 	stw	ra,0(sp)
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   1261c:	00127040 	call	12704 <alt_avalon_timer_sc_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   12620:	01000074 	movhi	r4,1
   12624:	d1600704 	addi	r5,gp,-32740
   12628:	210c0104 	addi	r4,r4,12292
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    ALTERA_UP_AVALON_ACCELEROMETER_SPI_INIT ( ACCELEROMETER_SPI, accelerometer_spi);
}
   1262c:	dfc00017 	ldw	ra,0(sp)
   12630:	dec00104 	addi	sp,sp,4
   12634:	00128981 	jmpi	12898 <alt_dev_llist_insert>

00012638 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
   12638:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
   1263c:	298d883a 	add	r6,r5,r6

  while (ptr < end)
   12640:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
   12644:	3a10000c 	andi	r8,r7,16384
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   12648:	11800b2e 	bgeu	r2,r6,12678 <altera_avalon_jtag_uart_read+0x40>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   1264c:	20c00037 	ldwio	r3,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   12650:	1a60000c 	andi	r9,r3,32768
   12654:	48000326 	beq	r9,zero,12664 <altera_avalon_jtag_uart_read+0x2c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   12658:	10c00005 	stb	r3,0(r2)
   1265c:	10800044 	addi	r2,r2,1
   12660:	003ff906 	br	12648 <__alt_data_end+0xffff2648>
    else if (ptr != buffer)
   12664:	11400226 	beq	r2,r5,12670 <altera_avalon_jtag_uart_read+0x38>
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
   12668:	1145c83a 	sub	r2,r2,r5
   1266c:	f800283a 	ret

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
   12670:	403ff526 	beq	r8,zero,12648 <__alt_data_end+0xffff2648>
   12674:	00000106 	br	1267c <altera_avalon_jtag_uart_read+0x44>
      break;   
    
  }

  if (ptr != buffer)
   12678:	117ffb1e 	bne	r2,r5,12668 <__alt_data_end+0xffff2668>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
   1267c:	39d0000c 	andi	r7,r7,16384
   12680:	3800021e 	bne	r7,zero,1268c <altera_avalon_jtag_uart_read+0x54>
    return -EWOULDBLOCK;
  else
    return -EIO;
   12684:	00bffec4 	movi	r2,-5
   12688:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
   1268c:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
   12690:	f800283a 	ret

00012694 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   12694:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   12698:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   1269c:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   126a0:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   126a4:	2980072e 	bgeu	r5,r6,126c4 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   126a8:	38c00037 	ldwio	r3,0(r7)
   126ac:	18ffffec 	andhi	r3,r3,65535
   126b0:	183ffc26 	beq	r3,zero,126a4 <__alt_data_end+0xffff26a4>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   126b4:	28c00007 	ldb	r3,0(r5)
   126b8:	20c00035 	stwio	r3,0(r4)
   126bc:	29400044 	addi	r5,r5,1
   126c0:	003ff806 	br	126a4 <__alt_data_end+0xffff26a4>

  return count;
}
   126c4:	f800283a 	ret

000126c8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   126c8:	defffe04 	addi	sp,sp,-8
   126cc:	dfc00115 	stw	ra,4(sp)
   126d0:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   126d4:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   126d8:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   126dc:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   126e0:	00bfff84 	movi	r2,-2
   126e4:	8084703a 	and	r2,r16,r2
   126e8:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
   126ec:	00129b00 	call	129b0 <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   126f0:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
   126f4:	dfc00117 	ldw	ra,4(sp)
   126f8:	dc000017 	ldw	r16,0(sp)
   126fc:	dec00204 	addi	sp,sp,8
   12700:	f800283a 	ret

00012704 <alt_avalon_timer_sc_init>:
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   12704:	d0a0bb17 	ldw	r2,-32020(gp)
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   12708:	200b883a 	mov	r5,r4
   1270c:	3009883a 	mov	r4,r6
   12710:	1000011e 	bne	r2,zero,12718 <alt_avalon_timer_sc_init+0x14>
  {
    _alt_tick_rate = nticks;
   12714:	d1e0bb15 	stw	r7,-32020(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   12718:	008001c4 	movi	r2,7
   1271c:	28800135 	stwio	r2,4(r5)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   12720:	01800074 	movhi	r6,1
   12724:	3189b204 	addi	r6,r6,9928
   12728:	00122fc1 	jmpi	122fc <alt_irq_register>

0001272c <alt_up_accelerometer_spi_open_dev>:
{
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
   1272c:	d1600704 	addi	r5,gp,-32740
   12730:	00129041 	jmpi	12904 <alt_find_dev>

00012734 <alt_up_accelerometer_spi_read_address_register>:
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
   12734:	20800a17 	ldw	r2,40(r4)
   12738:	10800023 	ldbuio	r2,0(r2)
   1273c:	28800005 	stb	r2,0(r5)

	return 0;
}
   12740:	0005883a 	mov	r2,zero
   12744:	f800283a 	ret

00012748 <alt_up_accelerometer_spi_read>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   12748:	20800a17 	ldw	r2,40(r4)
   1274c:	29400fcc 	andi	r5,r5,63
   12750:	11400025 	stbio	r5,0(r2)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   12754:	20800a17 	ldw	r2,40(r4)
   12758:	10800063 	ldbuio	r2,1(r2)
   1275c:	30800005 	stb	r2,0(r6)

	return 0;
}
   12760:	0005883a 	mov	r2,zero
   12764:	f800283a 	ret

00012768 <alt_up_accelerometer_spi_write>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   12768:	20800a17 	ldw	r2,40(r4)
   1276c:	29400fcc 	andi	r5,r5,63
   12770:	11400025 	stbio	r5,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
   12774:	20800a17 	ldw	r2,40(r4)
   12778:	11800065 	stbio	r6,1(r2)

	return 0;
}
   1277c:	0005883a 	mov	r2,zero
   12780:	f800283a 	ret

00012784 <alt_up_accelerometer_spi_read_x_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   12784:	20800a17 	ldw	r2,40(r4)
   12788:	00c00c84 	movi	r3,50
   1278c:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   12790:	20800a17 	ldw	r2,40(r4)
   12794:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   12798:	00c00cc4 	movi	r3,51
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   1279c:	10803fcc 	andi	r2,r2,255
   127a0:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   127a4:	20800a17 	ldw	r2,40(r4)
   127a8:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   127ac:	20800a17 	ldw	r2,40(r4)
   127b0:	10800063 	ldbuio	r2,1(r2)
   127b4:	10803fcc 	andi	r2,r2,255
   127b8:	1006923a 	slli	r3,r2,8
   127bc:	28800017 	ldw	r2,0(r5)
   127c0:	1885883a 	add	r2,r3,r2

	if (*(x_axis) & 0x00008000)
   127c4:	10e0000c 	andi	r3,r2,32768
   127c8:	18000126 	beq	r3,zero,127d0 <alt_up_accelerometer_spi_read_x_axis+0x4c>
	{
		*(x_axis) |= 0xFFFF0000;
   127cc:	10bffff4 	orhi	r2,r2,65535
   127d0:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   127d4:	0005883a 	mov	r2,zero
   127d8:	f800283a 	ret

000127dc <alt_up_accelerometer_spi_read_y_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   127dc:	20800a17 	ldw	r2,40(r4)
   127e0:	00c00d04 	movi	r3,52
   127e4:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   127e8:	20800a17 	ldw	r2,40(r4)
   127ec:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   127f0:	00c00d44 	movi	r3,53
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   127f4:	10803fcc 	andi	r2,r2,255
   127f8:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   127fc:	20800a17 	ldw	r2,40(r4)
   12800:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   12804:	20800a17 	ldw	r2,40(r4)
   12808:	10800063 	ldbuio	r2,1(r2)
   1280c:	10803fcc 	andi	r2,r2,255
   12810:	1006923a 	slli	r3,r2,8
   12814:	28800017 	ldw	r2,0(r5)
   12818:	1885883a 	add	r2,r3,r2

	if (*(y_axis) & 0x00008000)
   1281c:	10e0000c 	andi	r3,r2,32768
   12820:	18000126 	beq	r3,zero,12828 <alt_up_accelerometer_spi_read_y_axis+0x4c>
	{
		*(y_axis) |= 0xFFFF0000;
   12824:	10bffff4 	orhi	r2,r2,65535
   12828:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   1282c:	0005883a 	mov	r2,zero
   12830:	f800283a 	ret

00012834 <alt_up_accelerometer_spi_read_z_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   12834:	20800a17 	ldw	r2,40(r4)
   12838:	00c00d84 	movi	r3,54
   1283c:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   12840:	20800a17 	ldw	r2,40(r4)
   12844:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   12848:	00c00dc4 	movi	r3,55
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   1284c:	10803fcc 	andi	r2,r2,255
   12850:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   12854:	20800a17 	ldw	r2,40(r4)
   12858:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   1285c:	20800a17 	ldw	r2,40(r4)
   12860:	10800063 	ldbuio	r2,1(r2)
   12864:	10803fcc 	andi	r2,r2,255
   12868:	1006923a 	slli	r3,r2,8
   1286c:	28800017 	ldw	r2,0(r5)
   12870:	1885883a 	add	r2,r3,r2

	if (*(z_axis) & 0x00008000)
   12874:	10e0000c 	andi	r3,r2,32768
   12878:	18000126 	beq	r3,zero,12880 <alt_up_accelerometer_spi_read_z_axis+0x4c>
	{
		*(z_axis) |= 0xFFFF0000;
   1287c:	10bffff4 	orhi	r2,r2,65535
   12880:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   12884:	0005883a 	mov	r2,zero
   12888:	f800283a 	ret

0001288c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1288c:	f800283a 	ret

00012890 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
   12890:	3005883a 	mov	r2,r6
   12894:	f800283a 	ret

00012898 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   12898:	20000226 	beq	r4,zero,128a4 <alt_dev_llist_insert+0xc>
   1289c:	20800217 	ldw	r2,8(r4)
   128a0:	1000101e 	bne	r2,zero,128e4 <alt_dev_llist_insert+0x4c>
   128a4:	d0a00b17 	ldw	r2,-32724(gp)
   128a8:	10000926 	beq	r2,zero,128d0 <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   128ac:	deffff04 	addi	sp,sp,-4
   128b0:	dfc00015 	stw	ra,0(sp)
   128b4:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   128b8:	00c00584 	movi	r3,22
   128bc:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   128c0:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   128c4:	dfc00017 	ldw	ra,0(sp)
   128c8:	dec00104 	addi	sp,sp,4
   128cc:	f800283a 	ret
   128d0:	d0a0b504 	addi	r2,gp,-32044
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   128d4:	00c00584 	movi	r3,22
   128d8:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   128dc:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   128e0:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
   128e4:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   128e8:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   128ec:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   128f0:	28800017 	ldw	r2,0(r5)
   128f4:	11000115 	stw	r4,4(r2)
  list->next           = entry;
   128f8:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
   128fc:	0005883a 	mov	r2,zero
   12900:	f800283a 	ret

00012904 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   12904:	defffb04 	addi	sp,sp,-20
   12908:	dcc00315 	stw	r19,12(sp)
   1290c:	dc800215 	stw	r18,8(sp)
   12910:	dc400115 	stw	r17,4(sp)
   12914:	dc000015 	stw	r16,0(sp)
   12918:	dfc00415 	stw	ra,16(sp)
   1291c:	2027883a 	mov	r19,r4
   12920:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
   12924:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
   12928:	00113900 	call	11390 <strlen>
   1292c:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   12930:	84400726 	beq	r16,r17,12950 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   12934:	81000217 	ldw	r4,8(r16)
   12938:	900d883a 	mov	r6,r18
   1293c:	980b883a 	mov	r5,r19
   12940:	0012ae40 	call	12ae4 <memcmp>
   12944:	10000426 	beq	r2,zero,12958 <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   12948:	84000017 	ldw	r16,0(r16)
   1294c:	003ff806 	br	12930 <__alt_data_end+0xffff2930>
  }
  
  /* No match found */
  
  return NULL;
   12950:	0005883a 	mov	r2,zero
   12954:	00000106 	br	1295c <alt_find_dev+0x58>
   12958:	8005883a 	mov	r2,r16
}
   1295c:	dfc00417 	ldw	ra,16(sp)
   12960:	dcc00317 	ldw	r19,12(sp)
   12964:	dc800217 	ldw	r18,8(sp)
   12968:	dc400117 	ldw	r17,4(sp)
   1296c:	dc000017 	ldw	r16,0(sp)
   12970:	dec00504 	addi	sp,sp,20
   12974:	f800283a 	ret

00012978 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   12978:	f800283a 	ret

0001297c <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1297c:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12980:	00bfff84 	movi	r2,-2
   12984:	1884703a 	and	r2,r3,r2
   12988:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1298c:	21400117 	ldw	r5,4(r4)
   12990:	20800017 	ldw	r2,0(r4)
   12994:	11400115 	stw	r5,4(r2)
  entry->previous->next = entry->next;
   12998:	21400117 	ldw	r5,4(r4)
   1299c:	28800015 	stw	r2,0(r5)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   129a0:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
   129a4:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   129a8:	1801703a 	wrctl	status,r3
   129ac:	f800283a 	ret

000129b0 <alt_tick>:

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   129b0:	d0a0ba17 	ldw	r2,-32024(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   129b4:	defffb04 	addi	sp,sp,-20
   129b8:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   129bc:	d4200c17 	ldw	r16,-32720(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   129c0:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   129c4:	dc800215 	stw	r18,8(sp)
   129c8:	dc400115 	stw	r17,4(sp)
   129cc:	dfc00415 	stw	ra,16(sp)
   129d0:	dcc00315 	stw	r19,12(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   129d4:	d0a0ba15 	stw	r2,-32024(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   129d8:	d4600c04 	addi	r17,gp,-32720
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
   129dc:	04800044 	movi	r18,1

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   129e0:	84401a26 	beq	r16,r17,12a4c <alt_tick+0x9c>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   129e4:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
   129e8:	84c00017 	ldw	r19,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   129ec:	10000326 	beq	r2,zero,129fc <alt_tick+0x4c>
   129f0:	d0a0ba17 	ldw	r2,-32024(gp)
   129f4:	1000011e 	bne	r2,zero,129fc <alt_tick+0x4c>
    {
      alarm->rollover = 0;
   129f8:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   129fc:	d0e0ba17 	ldw	r3,-32024(gp)
   12a00:	80800217 	ldw	r2,8(r16)
   12a04:	18800f36 	bltu	r3,r2,12a44 <alt_tick+0x94>
   12a08:	80800403 	ldbu	r2,16(r16)
   12a0c:	10000d1e 	bne	r2,zero,12a44 <alt_tick+0x94>
    {
      next_callback = alarm->callback (alarm->context);
   12a10:	80800317 	ldw	r2,12(r16)
   12a14:	81000517 	ldw	r4,20(r16)
   12a18:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   12a1c:	1000031e 	bne	r2,zero,12a2c <alt_tick+0x7c>
      {
        alt_alarm_stop (alarm);
   12a20:	8009883a 	mov	r4,r16
   12a24:	001297c0 	call	1297c <alt_alarm_stop>
   12a28:	00000606 	br	12a44 <alt_tick+0x94>
      }
      else
      {
        alarm->time += next_callback;
   12a2c:	80c00217 	ldw	r3,8(r16)
   12a30:	10c5883a 	add	r2,r2,r3
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   12a34:	d0e0ba17 	ldw	r3,-32024(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
   12a38:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   12a3c:	10c0012e 	bgeu	r2,r3,12a44 <alt_tick+0x94>
        {
          alarm->rollover = 1;
   12a40:	84800405 	stb	r18,16(r16)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   12a44:	9821883a 	mov	r16,r19
   12a48:	003fe506 	br	129e0 <__alt_data_end+0xffff29e0>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   12a4c:	dfc00417 	ldw	ra,16(sp)
   12a50:	dcc00317 	ldw	r19,12(sp)
   12a54:	dc800217 	ldw	r18,8(sp)
   12a58:	dc400117 	ldw	r17,4(sp)
   12a5c:	dc000017 	ldw	r16,0(sp)
   12a60:	dec00504 	addi	sp,sp,20
   12a64:	f800283a 	ret

00012a68 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   12a68:	000170fa 	wrctl	ienable,zero
   12a6c:	f800283a 	ret

00012a70 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
   12a70:	213ffe84 	addi	r4,r4,-6
   12a74:	008003c4 	movi	r2,15
   12a78:	11001636 	bltu	r2,r4,12ad4 <alt_exception_cause_generated_bad_addr+0x64>
   12a7c:	200890ba 	slli	r4,r4,2
   12a80:	00800074 	movhi	r2,1
   12a84:	108aa504 	addi	r2,r2,10900
   12a88:	2089883a 	add	r4,r4,r2
   12a8c:	20800017 	ldw	r2,0(r4)
   12a90:	1000683a 	jmp	r2
   12a94:	00012adc 	xori	zero,zero,1195
   12a98:	00012adc 	xori	zero,zero,1195
   12a9c:	00012ad4 	movui	zero,1195
   12aa0:	00012ad4 	movui	zero,1195
   12aa4:	00012ad4 	movui	zero,1195
   12aa8:	00012adc 	xori	zero,zero,1195
   12aac:	00012ad4 	movui	zero,1195
   12ab0:	00012ad4 	movui	zero,1195
   12ab4:	00012adc 	xori	zero,zero,1195
   12ab8:	00012adc 	xori	zero,zero,1195
   12abc:	00012ad4 	movui	zero,1195
   12ac0:	00012adc 	xori	zero,zero,1195
   12ac4:	00012ad4 	movui	zero,1195
   12ac8:	00012ad4 	movui	zero,1195
   12acc:	00012ad4 	movui	zero,1195
   12ad0:	00012adc 	xori	zero,zero,1195
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   12ad4:	0005883a 	mov	r2,zero
   12ad8:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   12adc:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
   12ae0:	f800283a 	ret

00012ae4 <memcmp>:
   12ae4:	218d883a 	add	r6,r4,r6
   12ae8:	21800826 	beq	r4,r6,12b0c <memcmp+0x28>
   12aec:	20800003 	ldbu	r2,0(r4)
   12af0:	28c00003 	ldbu	r3,0(r5)
   12af4:	10c00226 	beq	r2,r3,12b00 <memcmp+0x1c>
   12af8:	10c5c83a 	sub	r2,r2,r3
   12afc:	f800283a 	ret
   12b00:	21000044 	addi	r4,r4,1
   12b04:	29400044 	addi	r5,r5,1
   12b08:	003ff706 	br	12ae8 <__alt_data_end+0xffff2ae8>
   12b0c:	0005883a 	mov	r2,zero
   12b10:	f800283a 	ret
