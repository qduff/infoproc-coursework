
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE10_LITE_Golden_Top(

	//////////// CLOCK //////////
	input 		          		ADC_CLK_10,
	input 		          		MAX10_CLK1_50,
	input 		          		MAX10_CLK2_50,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// SEG7 //////////
	output		reg     [7:0]		HEX0,
	output		 reg    [7:0]		HEX1,
	output		reg     [7:0]		HEX2,
	output		reg     [7:0]		HEX3,
	output		reg     [7:0]		HEX4,
	output		reg     [7:0]		HEX5,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// VGA //////////
	output		     [3:0]		VGA_B,
	output		     [3:0]		VGA_G,
	output		          		VGA_HS,
	output		     [3:0]		VGA_R,
	output		          		VGA_VS,

	//////////// Accelerometer //////////
	output		          		GSENSOR_CS_N,
	input 		     [2:1]		GSENSOR_INT,
	output		          		GSENSOR_SCLK,
	inout 		          		GSENSOR_SDI,
	inout 		          		GSENSOR_SDO,

	//////////// Arduino //////////
	inout 		    [15:0]		ARDUINO_IO,
	inout 		          		ARDUINO_RESET_N,

	//////////// GPIO, GPIO connect to GPIO Default //////////
	inout 		    [35:0]		GPIO
);

	wire [31:0] SAMPLE;
	wire [31:0] FILT_OUT_H;
	wire [31:0] FILT_OUT_L;
	wire SAMPLE_CLK;

	wire [31:0] atan2_a;
	wire [31:0] atan2_b;
	wire [31:0] atan2_q;
	/*
	reg i2c_scl_in;
	reg i2c_scl_oe;
	reg i2c_sda_in;
	reg i2c_sda_oe;
	*/

	tri1 i2c_scl;
	tri1 i2c_sda;
	
	wire i2c_rst;
	wire i2c_en;
	wire i2c_rw;
	wire [7:0] i2c_mosi;
	wire [7:0] i2c_reg_addr;
	wire [7:0] i2c_dev_addr;
	wire [7:0] i2c_miso;
	wire i2c_busy; 

//=======================================================
//  REG/WIRE declarations
//=======================================================

/*
always @* begin
	i2c_sda_in = GPIO[0];
	GPIO[0] =  i2c_sda_oe ? 1'b0 : 1'bz;
	i2c_scl_in = GPIO[1];
	GPIO[1] =  i2c_scl_oe ? 1'b0 : 1'bz;
end 
*/


CORDIC atan2(
	.clk(MAX10_CLK1_50),
	.areset(1'b0),
	.a(atan2_a),
	.b(atan2_b),
	.q(atan2_q)
);


reg [31:0] dummy;
unsaved u0(
	.clk_clk															(MAX10_CLK1_50),
	.in_l_external_connection_export				(FILT_OUT_L),
	.led_external_connection_export							(LEDR[9:0]),
	.out0_external_connection_export				(SAMPLE),
	.reset_reset_n													(1'b1),
	.sample_clk_external_connection_export (SAMPLE_CLK),
	.i2c_busy_external_connection_export (i2c_busy),
	.i2c_dev_addr_external_connection_export(i2c_dev_addr),
	.i2c_en_external_connection_export(i2c_en),
	.i2c_miso_external_connection_export(i2c_miso),
	.i2c_mosi_external_connection_export(i2c_mosi),
	.i2c_reg_addr_external_connection_export(i2c_reg_addr),
	.i2c_rst_external_connection_export(i2c_rst),
	.i2c_rw_external_connection_export(i2c_rw),
	.atan2_a_external_connection_export(atan2_a),
	.atan2_b_external_connection_export(atan2_b),
	.atan2_q_external_connection_export(atan2_q),
	.btn_external_connection_export(KEY),
	.hex_0_external_connection_export(HEX0),
	.hex_1_external_connection_export(HEX1),
	.hex_2_external_connection_export(HEX3),
	.hex_3_external_connection_export(HEX4),
	.hex_4_external_connection_export(HEX5),
	.hex_5_external_connection_export(HEX6)

);

I2C #(.DATA_WIDTH(8),.REGISTER_WIDTH(8),.ADDRESS_WIDTH(7)) i2c_master(
	.clock(MAX10_CLK1_50),
	.reset_n(i2c_rst),
	.enable(i2c_en),
	.read_write(i2c_rw),
	.mosi_data(i2c_mosi),
	.register_address(i2c_reg_addr),
	.device_address(i2c_dev_addr),
	.divider(16'b0000000000011111),
	//.divider(16'b0000000001111100),
	//.divider(16'b0011000011010011),
	.miso_data(i2c_miso),
	.busy(i2c_busy),
	.external_serial_data(GPIO[0]),
	.external_serial_clock(GPIO[1])
);


timing Timing(
	.clk(MAX10_CLK1_50),
	.count(FILT_OUT_L)
);

	
//=======================================================
//  Structural coding
//=======================================================



endmodule
